
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800100  000028ec  00002980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  008002f6  008002f6  00002b76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b76  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000488  00000000  00000000  00002bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000501b  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b75  00000000  00000000  00008075  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d0b  00000000  00000000  00009bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000eac  00000000  00000000  0000b8f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000def  00000000  00000000  0000c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000037ca  00000000  00000000  0000d593  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004c8  00000000  00000000  00010d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__ctors_end>
       4:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_1>
       8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
       c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_3>
      10:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      14:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      18:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      1c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      20:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      24:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      28:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      2c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      30:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      34:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      38:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      3c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      40:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      44:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      48:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      4c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      50:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      54:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      58:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      5c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      60:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      64:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      68:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      6c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	4d 02       	muls	r20, r29
      72:	47 02       	muls	r20, r23
      74:	3e 02       	muls	r19, r30
      76:	35 02       	muls	r19, r21
      78:	2b 02       	muls	r18, r27
      7a:	22 02       	muls	r18, r18
      7c:	12 02       	muls	r17, r18
      7e:	02 02       	muls	r16, r18
      80:	f3 01       	movw	r30, r6
      82:	e5 01       	movw	r28, r10
      84:	d9 01       	movw	r26, r18
      86:	cc 01       	movw	r24, r24
      88:	c6 01       	movw	r24, r12
      8a:	b9 01       	movw	r22, r18
      8c:	b2 01       	movw	r22, r4
      8e:	a5 01       	movw	r20, r10
      90:	9d 01       	movw	r18, r26
      92:	8c 01       	movw	r16, r24
      94:	7a 01       	movw	r14, r20
      96:	69 01       	movw	r12, r18
      98:	58 01       	movw	r10, r16
      9a:	47 01       	movw	r8, r14
      9c:	36 01       	movw	r6, r12
      9e:	25 01       	movw	r4, r10
      a0:	14 01       	movw	r2, r8
      a2:	03 01       	movw	r0, r6
      a4:	f2 00       	.word	0x00f2	; ????
      a6:	e1 00       	.word	0x00e1	; ????
      a8:	d0 00       	.word	0x00d0	; ????
      aa:	bf 00       	.word	0x00bf	; ????
      ac:	ae 00       	.word	0x00ae	; ????

000000ae <s_hello7>:
      ae:	20 20 20 20 20 20 20 20 20 20 28 3e 20 3c 29 20               (> <) 
	...

000000bf <s_hello6>:
      bf:	20 20 20 20 20 20 20 7c 5f 5f 28 4f 2e 6f 29 20            |__(O.o) 
	...

000000d0 <s_hello5>:
      d0:	20 20 20 20 20 20 20 7c 20 20 28 5c 5f 2f 29 20            |  (\_/) 
	...

000000e1 <s_hello4>:
      e1:	20 20 20 20 20 20 20 5e 20 20 20 20 20 20 20 20            ^        
	...

000000f2 <s_hello3>:
      f2:	20 60 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 20      `------------' 
	...

00000103 <s_hello2>:
     103:	20 7c 20 50 69 6e 67 20 50 6f 6e 67 21 20 7c 20      | Ping Pong! | 
	...

00000114 <s_hello1>:
     114:	20 2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 20      .------------. 
	...

00000125 <s_thumb7>:
     125:	20 20 28 5f 5f 5f 29 5f 5f 2e 7c 5f 5f 5f 5f 5f       (___)__.|_____
	...

00000136 <s_thumb6>:
     136:	20 28 5f 5f 5f 5f 29 2e 5f 5f 7c 20 20 20 20 20      (____).__|     
	...

00000147 <s_thumb5>:
     147:	28 5f 5f 5f 5f 29 7c 20 20 20 7c 20 20 20 20 20     (____)|   |     
	...

00000158 <s_thumb4>:
     158:	20 28 5f 5f 5f 5f 29 20 20 60 7c 20 20 20 20 20      (____)  `|     
	...

00000169 <s_thumb3>:
     169:	20 20 5f 5f 5f 5f 5c 20 5c 20 20 5f 5f 5f 5f 5f       ____\ \  _____
	...

0000017a <s_thumb2>:
     17a:	20 20 20 20 20 7c 20 5c 20 20 20 20 20 20 20 20          | \        
     18a:	20 00                                                .

0000018c <s_thumb1>:
     18c:	20 20 20 20 20 20 2f 7c 20 20 20 20 20 20 20 20           /|        
	...

0000019d <s_pokemon>:
     19d:	50 6f 6b 65 6d 6f 6e 00                             Pokemon.

000001a5 <s_cantina_band>:
     1a5:	43 61 6e 74 69 6e 61 20 42 61 6e 64 00              Cantina Band.

000001b2 <s_tetris>:
     1b2:	54 65 74 72 69 73 00                                Tetris.

000001b9 <s_harry_potter>:
     1b9:	48 61 72 72 79 20 50 6f 74 74 65 72 00              Harry Potter.

000001c6 <s_songs>:
     1c6:	53 6f 6e 67 73 00                                   Songs.

000001cc <s_right_slid>:
     1cc:	52 69 67 68 74 20 53 6c 69 64 65 72 00              Right Slider.

000001d9 <s_left_slid>:
     1d9:	4c 65 66 74 20 53 6c 69 64 65 72 00                 Left Slider.

000001e5 <s_calibrate_slid>:
     1e5:	43 61 6c 69 62 20 53 6c 69 64 65 72 73 00           Calib Sliders.

000001f3 <s_calibrate_joy>:
     1f3:	43 61 6c 69 62 20 4a 6f 79 73 74 69 63 6b 00        Calib Joystick.

00000202 <s_reset_highscore>:
     202:	52 65 73 65 74 20 48 69 67 68 73 63 6f 72 65 00     Reset Highscore.

00000212 <s_store_highscore>:
     212:	53 74 6f 72 65 20 48 69 67 68 73 63 6f 72 65 00     Store Highscore.

00000222 <s_settings>:
     222:	53 65 74 74 69 6e 67 73 00                          Settings.

0000022b <s_highscore>:
     22b:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

00000235 <s_pingpang>:
     235:	50 69 6e 67 50 61 6e 67 00                          PingPang.

0000023e <s_pingpong>:
     23e:	50 69 6e 67 50 6f 6e 67 00                          PingPong.

00000247 <s_games>:
     247:	47 61 6d 65 73 00                                   Games.

0000024d <s_root>:
     24d:	72 6f 6f 74 00                                      root.

00000252 <font8>:
	...
     25a:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     26a:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     27a:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     28a:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     29a:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     2aa:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     2ba:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2ca:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2da:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2ea:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2fa:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     30a:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     31a:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     32a:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     33a:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     34a:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     35a:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     36a:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     37a:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     38a:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     39a:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     3aa:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     3ba:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3ca:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3da:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3ea:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3fa:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     40a:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     41a:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     42a:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     43a:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     44a:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     45a:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     46a:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     47a:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     48a:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     49a:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     4aa:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     4ba:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4ca:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4da:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4ea:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4fa:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     50a:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     51a:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     52a:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     53a:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

0000054a <__ctors_end>:
     54a:	11 24       	eor	r1, r1
     54c:	1f be       	out	0x3f, r1	; 63
     54e:	cf ef       	ldi	r28, 0xFF	; 255
     550:	d4 e0       	ldi	r29, 0x04	; 4
     552:	de bf       	out	0x3e, r29	; 62
     554:	cd bf       	out	0x3d, r28	; 61

00000556 <__do_copy_data>:
     556:	12 e0       	ldi	r17, 0x02	; 2
     558:	a0 e0       	ldi	r26, 0x00	; 0
     55a:	b1 e0       	ldi	r27, 0x01	; 1
     55c:	ec ee       	ldi	r30, 0xEC	; 236
     55e:	f8 e2       	ldi	r31, 0x28	; 40
     560:	02 c0       	rjmp	.+4      	; 0x566 <__do_copy_data+0x10>
     562:	05 90       	lpm	r0, Z+
     564:	0d 92       	st	X+, r0
     566:	a6 3f       	cpi	r26, 0xF6	; 246
     568:	b1 07       	cpc	r27, r17
     56a:	d9 f7       	brne	.-10     	; 0x562 <__do_copy_data+0xc>

0000056c <__do_clear_bss>:
     56c:	23 e0       	ldi	r18, 0x03	; 3
     56e:	a6 ef       	ldi	r26, 0xF6	; 246
     570:	b2 e0       	ldi	r27, 0x02	; 2
     572:	01 c0       	rjmp	.+2      	; 0x576 <.do_clear_bss_start>

00000574 <.do_clear_bss_loop>:
     574:	1d 92       	st	X+, r1

00000576 <.do_clear_bss_start>:
     576:	a6 35       	cpi	r26, 0x56	; 86
     578:	b2 07       	cpc	r27, r18
     57a:	e1 f7       	brne	.-8      	; 0x574 <.do_clear_bss_loop>
     57c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <main>
     580:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <_exit>

00000584 <__bad_interrupt>:
     584:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_default>

00000588 <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
     588:	8b b7       	in	r24, 0x3b	; 59
     58a:	80 62       	ori	r24, 0x20	; 32
     58c:	8b bf       	out	0x3b, r24	; 59
     58e:	08 95       	ret

00000590 <ADC_read>:
}

char ADC_read(char channel)
{
	volatile int * adc_channel = (int *) 0x1400;
	adc_channel[0] = channel;
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 01 14 	sts	0x1401, r25
     596:	80 93 00 14 	sts	0x1400, r24
	char value;
	while(!flag);
     59a:	80 91 f6 02 	lds	r24, 0x02F6
     59e:	90 91 f7 02 	lds	r25, 0x02F7
     5a2:	89 2b       	or	r24, r25
     5a4:	d1 f3       	breq	.-12     	; 0x59a <ADC_read+0xa>
	value = adc_channel[20];
     5a6:	80 91 28 14 	lds	r24, 0x1428
     5aa:	90 91 29 14 	lds	r25, 0x1429
	flag = 0;
     5ae:	10 92 f7 02 	sts	0x02F7, r1
     5b2:	10 92 f6 02 	sts	0x02F6, r1
	return value;
}
     5b6:	08 95       	ret

000005b8 <__vector_3>:

//interrupt service routine to notice when data available
ISR(INT2_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
	flag = 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 f7 02 	sts	0x02F7, r25
     5ce:	80 93 f6 02 	sts	0x02F6, r24
}
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <can_init>:
volatile int msg_received_flag = 0;

void can_init(void)
{
	//initialize mcp
	mcp_init();
     5e0:	0e 94 18 09 	call	0x1230	; 0x1230 <mcp_init>

	//ensure to be in config mode
	mcp_write(MCP_CANCTRL, MODE_MASK & MODE_CONFIG);
     5e4:	60 e8       	ldi	r22, 0x80	; 128
     5e6:	8f e0       	ldi	r24, 0x0F	; 15
     5e8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <mcp_write>

	//turn off filters and rollover for receive buffer 0
	mcp_write(MCP_RXB0CTRL, NO_FILTERS_AND_MASKS);
     5ec:	60 e6       	ldi	r22, 0x60	; 96
     5ee:	80 e6       	ldi	r24, 0x60	; 96
     5f0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <mcp_write>

	//enable interrupt for received message
	mcp_write(MCP_CANINTE, MCP_RX0IF);
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	8b e2       	ldi	r24, 0x2B	; 43
     5f8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <mcp_write>

	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages)
	mcp_write(MCP_CANCTRL, MODE_NORMAL & MODE_MASK);
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	8f e0       	ldi	r24, 0x0F	; 15
     600:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <mcp_write>

	//enable CAN interrupts on the MCU
	cli();
     604:	f8 94       	cli
	#ifdef ATMEGA2560
		EICRB &= ~(1 << ISC31);
		EICRB &= ~(1 << ISC30);
		EIMSK |= (1 << INT3);
	#else
		MCUCR |= (1 << ISC11);
     606:	85 b7       	in	r24, 0x35	; 53
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	85 bf       	out	0x35, r24	; 53
		GICR |= (1 << INT0);
     60c:	8b b7       	in	r24, 0x3b	; 59
     60e:	80 64       	ori	r24, 0x40	; 64
     610:	8b bf       	out	0x3b, r24	; 59
	#endif
	sei();
     612:	78 94       	sei
     614:	08 95       	ret

00000616 <__vector_1>:
		
		msg_received_flag = 1;
	}
#else
	ISR(INT0_vect)
	{
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	0f 92       	push	r0
     61e:	11 24       	eor	r1, r1
     620:	2f 93       	push	r18
     622:	3f 93       	push	r19
     624:	4f 93       	push	r20
     626:	5f 93       	push	r21
     628:	6f 93       	push	r22
     62a:	7f 93       	push	r23
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	af 93       	push	r26
     632:	bf 93       	push	r27
     634:	ef 93       	push	r30
     636:	ff 93       	push	r31
		//printf("Interrupted CAN!\n");
		//clear interrupt bits for rx buffer 0
		mcp_write(MCP_CANINTF, MCP_RX0IF & 0x00);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	8c e2       	ldi	r24, 0x2C	; 44
     63c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <mcp_write>

		msg_received_flag = 1;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 f9 02 	sts	0x02F9, r25
     648:	80 93 f8 02 	sts	0x02F8, r24
	}	
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <draw_heart_to_buffer>:
int level=0;
int grid[N_X][N_Y];		//Gives the status of each little block in the grid


void draw_heart_to_buffer(POS pos)
{
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	00 d0       	rcall	.+0      	; 0x676 <draw_heart_to_buffer+0x8>
     676:	00 d0       	rcall	.+0      	; 0x678 <draw_heart_to_buffer+0xa>
     678:	1f 92       	push	r1
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	18 2f       	mov	r17, r24
	TRI tri;
	tri.full=1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	8c 83       	std	Y+4, r24	; 0x04
	tri.l=9;
	tri.pos=pos;
     684:	9a 83       	std	Y+2, r25	; 0x02
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
     686:	41 2f       	mov	r20, r17
     688:	59 2f       	mov	r21, r25
     68a:	69 e0       	ldi	r22, 0x09	; 9
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <draw_triangle_buffer>
	
	tri.pos.x +=5;
	tri.ori=UP;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	8d 83       	std	Y+5, r24	; 0x05
	tri.l=4;
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	8b 83       	std	Y+3, r24	; 0x03
	tri.pos=pos;
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
	
	tri.pos.x +=5;
     69c:	45 e0       	ldi	r20, 0x05	; 5
     69e:	41 0f       	add	r20, r17
	tri.ori=UP;
	tri.l=4;
	
	draw_triangle_buffer(tri);
     6a0:	5a 81       	ldd	r21, Y+2	; 0x02
     6a2:	64 e0       	ldi	r22, 0x04	; 4
     6a4:	7c 81       	ldd	r23, Y+4	; 0x04
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <draw_triangle_buffer>
	
	tri.pos.x -=5;
	
	draw_triangle_buffer(tri);
     6ac:	41 2f       	mov	r20, r17
     6ae:	5a 81       	ldd	r21, Y+2	; 0x02
     6b0:	6b 81       	ldd	r22, Y+3	; 0x03
     6b2:	7c 81       	ldd	r23, Y+4	; 0x04
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <draw_triangle_buffer>
}
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	08 95       	ret

000006cc <draw_lives_buffer>:

void draw_lives_buffer(int n_lives)
{
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	8c 01       	movw	r16, r24
	POS pos;
	pos.x=N-10;
	pos.y=5;
     6da:	0f 2e       	mov	r0, r31
     6dc:	f5 e0       	ldi	r31, 0x05	; 5
     6de:	ef 2e       	mov	r14, r31
     6e0:	f0 2d       	mov	r31, r0
	int i=0;
	for(i=0;i<n_lives;i++)
     6e2:	18 16       	cp	r1, r24
     6e4:	19 06       	cpc	r1, r25
     6e6:	84 f4       	brge	.+32     	; 0x708 <draw_lives_buffer+0x3c>
     6e8:	0f 2e       	mov	r0, r31
     6ea:	f6 e7       	ldi	r31, 0x76	; 118
     6ec:	ff 2e       	mov	r15, r31
     6ee:	f0 2d       	mov	r31, r0
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		draw_heart_to_buffer(pos);
     6f4:	8f 2d       	mov	r24, r15
     6f6:	9e 2d       	mov	r25, r14
     6f8:	0e 94 37 03 	call	0x66e	; 0x66e <draw_heart_to_buffer>
{
	POS pos;
	pos.x=N-10;
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     6fc:	21 96       	adiw	r28, 0x01	; 1
     6fe:	85 ef       	ldi	r24, 0xF5	; 245
     700:	f8 0e       	add	r15, r24
     702:	c0 17       	cp	r28, r16
     704:	d1 07       	cpc	r29, r17
     706:	b1 f7       	brne	.-20     	; 0x6f4 <draw_lives_buffer+0x28>
	{
		draw_heart_to_buffer(pos);
		pos.x -= 11;
	}
	
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	08 95       	ret

00000716 <update_ball>:

void update_ball(void)
{
	switch (ball.dir)
     716:	80 91 3f 03 	lds	r24, 0x033F
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	11 f1       	breq	.+68     	; 0x762 <update_ball+0x4c>
     71e:	30 f0       	brcs	.+12     	; 0x72c <update_ball+0x16>
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	c9 f1       	breq	.+114    	; 0x796 <update_ball+0x80>
     724:	83 30       	cpi	r24, 0x03	; 3
     726:	09 f4       	brne	.+2      	; 0x72a <update_ball+0x14>
     728:	7f c0       	rjmp	.+254    	; 0x828 <update_ball+0x112>
     72a:	08 95       	ret
	{
		case UP_RIGHT:
		{
			if(ball.pos.x == LIM_RIGHT)
     72c:	80 91 3d 03 	lds	r24, 0x033D
     730:	8f 37       	cpi	r24, 0x7F	; 127
     732:	31 f4       	brne	.+12     	; 0x740 <update_ball+0x2a>
			{
				ball.dir=UP_LEFT;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 3f 03 	sts	0x033F, r24
				update_ball();
     73a:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     73e:	08 95       	ret
			}
			if(ball.pos.y == LIM_UP)
     740:	90 91 3e 03 	lds	r25, 0x033E
     744:	9b 30       	cpi	r25, 0x0B	; 11
     746:	31 f4       	brne	.+12     	; 0x754 <update_ball+0x3e>
			{
				ball.dir=DOWN_RIGHT;
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	80 93 3f 03 	sts	0x033F, r24
				update_ball();
     74e:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     752:	08 95       	ret
			}
			ball.pos.x++;
     754:	8f 5f       	subi	r24, 0xFF	; 255
     756:	80 93 3d 03 	sts	0x033D, r24
			ball.pos.y--;
     75a:	91 50       	subi	r25, 0x01	; 1
     75c:	90 93 3e 03 	sts	0x033E, r25
		} break;
     760:	08 95       	ret
		case UP_LEFT:
		{
			if(ball.pos.x == LIM_LEFT)
     762:	80 91 3d 03 	lds	r24, 0x033D
     766:	81 11       	cpse	r24, r1
     768:	05 c0       	rjmp	.+10     	; 0x774 <update_ball+0x5e>
			{
				ball.dir=UP_RIGHT;
     76a:	10 92 3f 03 	sts	0x033F, r1
				update_ball();
     76e:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     772:	08 95       	ret
			}
			if(ball.pos.y == LIM_UP)
     774:	90 91 3e 03 	lds	r25, 0x033E
     778:	9b 30       	cpi	r25, 0x0B	; 11
     77a:	31 f4       	brne	.+12     	; 0x788 <update_ball+0x72>
			{
				ball.dir=DOWN_LEFT;
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	80 93 3f 03 	sts	0x033F, r24
				update_ball();
     782:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     786:	08 95       	ret
			}
			ball.pos.x--;
     788:	81 50       	subi	r24, 0x01	; 1
     78a:	80 93 3d 03 	sts	0x033D, r24
			ball.pos.y--;
     78e:	91 50       	subi	r25, 0x01	; 1
     790:	90 93 3e 03 	sts	0x033E, r25
		}break;
     794:	08 95       	ret
		case DOWN_RIGHT:
		{
			if(ball.pos.x == LIM_RIGHT)
     796:	50 91 3d 03 	lds	r21, 0x033D
     79a:	5f 37       	cpi	r21, 0x7F	; 127
     79c:	31 f4       	brne	.+12     	; 0x7aa <update_ball+0x94>
			{
				ball.dir=DOWN_LEFT;
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	80 93 3f 03 	sts	0x033F, r24
				update_ball();
     7a4:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     7a8:	08 95       	ret
			}
			if(ball.pos.y == LIM_DOWN)
     7aa:	40 91 3e 03 	lds	r20, 0x033E
     7ae:	4f 33       	cpi	r20, 0x3F	; 63
     7b0:	b1 f4       	brne	.+44     	; 0x7de <update_ball+0xc8>
			{
				ball.dir=UP_RIGHT;
				n_lives--;
     7b2:	80 91 06 01 	lds	r24, 0x0106
     7b6:	90 91 07 01 	lds	r25, 0x0107
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	90 93 07 01 	sts	0x0107, r25
     7c0:	80 93 06 01 	sts	0x0106, r24
				ball.pos.x=B_X;
     7c4:	10 92 3d 03 	sts	0x033D, r1
				ball.pos.y=B_Y;
     7c8:	8e e1       	ldi	r24, 0x1E	; 30
     7ca:	80 93 3e 03 	sts	0x033E, r24
				ball.dir=DOWN_RIGHT;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	80 93 3f 03 	sts	0x033F, r24
				n_catched_balls = 0;
     7d4:	10 92 fd 02 	sts	0x02FD, r1
     7d8:	10 92 fc 02 	sts	0x02FC, r1
				return;
     7dc:	08 95       	ret
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     7de:	4d 33       	cpi	r20, 0x3D	; 61
     7e0:	e1 f4       	brne	.+56     	; 0x81a <update_ball+0x104>
     7e2:	60 91 01 03 	lds	r22, 0x0301
     7e6:	56 17       	cp	r21, r22
     7e8:	c0 f0       	brcs	.+48     	; 0x81a <update_ball+0x104>
     7ea:	25 2f       	mov	r18, r21
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	80 91 03 03 	lds	r24, 0x0303
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	86 0f       	add	r24, r22
     7f6:	91 1d       	adc	r25, r1
     7f8:	82 17       	cp	r24, r18
     7fa:	93 07       	cpc	r25, r19
     7fc:	74 f0       	brlt	.+28     	; 0x81a <update_ball+0x104>
			{
				ball.dir=UP_RIGHT;
     7fe:	10 92 3f 03 	sts	0x033F, r1
				n_catched_balls++;
     802:	80 91 fc 02 	lds	r24, 0x02FC
     806:	90 91 fd 02 	lds	r25, 0x02FD
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	90 93 fd 02 	sts	0x02FD, r25
     810:	80 93 fc 02 	sts	0x02FC, r24
				update_ball();
     814:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     818:	08 95       	ret
			}
			ball.pos.x++;
     81a:	5f 5f       	subi	r21, 0xFF	; 255
     81c:	50 93 3d 03 	sts	0x033D, r21
			ball.pos.y++;
     820:	4f 5f       	subi	r20, 0xFF	; 255
     822:	40 93 3e 03 	sts	0x033E, r20
		}break;
     826:	08 95       	ret
		case DOWN_LEFT:
		{
			if(ball.pos.x == LIM_LEFT)
     828:	40 91 3d 03 	lds	r20, 0x033D
     82c:	41 11       	cpse	r20, r1
     82e:	06 c0       	rjmp	.+12     	; 0x83c <update_ball+0x126>
			{
				ball.dir=DOWN_RIGHT;
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	80 93 3f 03 	sts	0x033F, r24
				update_ball();
     836:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     83a:	08 95       	ret
			}
			if(ball.pos.y == LIM_DOWN)
     83c:	50 91 3e 03 	lds	r21, 0x033E
     840:	5f 33       	cpi	r21, 0x3F	; 63
     842:	b1 f4       	brne	.+44     	; 0x870 <update_ball+0x15a>
			{
				ball.dir=UP_LEFT;
				n_lives--;
     844:	80 91 06 01 	lds	r24, 0x0106
     848:	90 91 07 01 	lds	r25, 0x0107
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	90 93 07 01 	sts	0x0107, r25
     852:	80 93 06 01 	sts	0x0106, r24
				ball.pos.x=B_X;
     856:	10 92 3d 03 	sts	0x033D, r1
				ball.pos.y=B_Y;
     85a:	8e e1       	ldi	r24, 0x1E	; 30
     85c:	80 93 3e 03 	sts	0x033E, r24
				ball.dir=DOWN_RIGHT;
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	80 93 3f 03 	sts	0x033F, r24
				n_catched_balls = 0;
     866:	10 92 fd 02 	sts	0x02FD, r1
     86a:	10 92 fc 02 	sts	0x02FC, r1
				return;
     86e:	08 95       	ret
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     870:	5d 33       	cpi	r21, 0x3D	; 61
     872:	e9 f4       	brne	.+58     	; 0x8ae <update_ball+0x198>
     874:	60 91 01 03 	lds	r22, 0x0301
     878:	46 17       	cp	r20, r22
     87a:	c8 f0       	brcs	.+50     	; 0x8ae <update_ball+0x198>
     87c:	24 2f       	mov	r18, r20
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	80 91 03 03 	lds	r24, 0x0303
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	86 0f       	add	r24, r22
     888:	91 1d       	adc	r25, r1
     88a:	82 17       	cp	r24, r18
     88c:	93 07       	cpc	r25, r19
     88e:	7c f0       	brlt	.+30     	; 0x8ae <update_ball+0x198>
			{
				ball.dir=UP_LEFT;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 3f 03 	sts	0x033F, r24
				n_catched_balls++;
     896:	80 91 fc 02 	lds	r24, 0x02FC
     89a:	90 91 fd 02 	lds	r25, 0x02FD
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	90 93 fd 02 	sts	0x02FD, r25
     8a4:	80 93 fc 02 	sts	0x02FC, r24
				update_ball();
     8a8:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				return;
     8ac:	08 95       	ret
			}
			ball.pos.x--;
     8ae:	41 50       	subi	r20, 0x01	; 1
     8b0:	40 93 3d 03 	sts	0x033D, r20
			ball.pos.y++;
     8b4:	5f 5f       	subi	r21, 0xFF	; 255
     8b6:	50 93 3e 03 	sts	0x033E, r21
     8ba:	08 95       	ret

000008bc <update_player>:
}

void update_player(void)
{
	// Get player direction form CAN (JOYSTICK)
	switch (player.dir)
     8bc:	80 91 06 03 	lds	r24, 0x0306
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	81 f0       	breq	.+32     	; 0x8e4 <update_player+0x28>
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	a9 f4       	brne	.+42     	; 0x8f2 <update_player+0x36>
	{
		case RIGHT:
		{
			if(player.rect.pos.x+player.rect.Lx >= LIM_RIGHT)
     8c8:	20 91 01 03 	lds	r18, 0x0301
     8cc:	80 91 03 03 	lds	r24, 0x0303
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	82 0f       	add	r24, r18
     8d4:	91 1d       	adc	r25, r1
     8d6:	8f 37       	cpi	r24, 0x7F	; 127
     8d8:	91 05       	cpc	r25, r1
     8da:	5c f4       	brge	.+22     	; 0x8f2 <update_player+0x36>
				return;
			player.rect.pos.x += 2;
     8dc:	2e 5f       	subi	r18, 0xFE	; 254
     8de:	20 93 01 03 	sts	0x0301, r18
		}break;
     8e2:	08 95       	ret
		case LEFT:
		{
			if(player.rect.pos.x <= LIM_LEFT+1)
     8e4:	80 91 01 03 	lds	r24, 0x0301
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	18 f0       	brcs	.+6      	; 0x8f2 <update_player+0x36>
				return;
			player.rect.pos.x -= 2;
     8ec:	82 50       	subi	r24, 0x02	; 2
     8ee:	80 93 01 03 	sts	0x0301, r24
     8f2:	08 95       	ret

000008f4 <draw_borders_buffer>:
	}
	return;
}

void draw_borders_buffer (void)
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <draw_borders_buffer+0x6>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <draw_borders_buffer+0x8>
     8fc:	1f 92       	push	r1
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	RECT border;
	border.pos.x = LIM_LEFT;
     902:	19 82       	std	Y+1, r1	; 0x01
	border.pos.y = LIM_UP;
     904:	8b e0       	ldi	r24, 0x0B	; 11
     906:	8a 83       	std	Y+2, r24	; 0x02
	border.Lx = LIM_RIGHT-LIM_LEFT;
	border.Ly = 1;
	border.full = FULL;
     908:	1d 82       	std	Y+5, r1	; 0x05
	draw_rectangle_buffer(border);
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	5b e0       	ldi	r21, 0x0B	; 11
     90e:	6f e7       	ldi	r22, 0x7F	; 127
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
	border.Lx = 1;
	border.Ly = LIM_DOWN-LIM_UP;
	draw_rectangle_buffer(border);
     918:	49 81       	ldd	r20, Y+1	; 0x01
     91a:	5a 81       	ldd	r21, Y+2	; 0x02
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	74 e3       	ldi	r23, 0x34	; 52
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
	border.pos.y = LIM_DOWN;
	border.Lx = LIM_RIGHT-LIM_LEFT;
	border.Ly = 1;
	draw_rectangle_buffer(border);
     926:	49 81       	ldd	r20, Y+1	; 0x01
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	6f e7       	ldi	r22, 0x7F	; 127
     92c:	71 e0       	ldi	r23, 0x01	; 1
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
	border.pos.x = LIM_RIGHT;
	border.pos.y = LIM_UP;
	border.Ly = LIM_DOWN-LIM_UP+1;
	border.Lx = 1;
	draw_rectangle_buffer(border);
     934:	4f e7       	ldi	r20, 0x7F	; 127
     936:	5b e0       	ldi	r21, 0x0B	; 11
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	75 e3       	ldi	r23, 0x35	; 53
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
}
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <draw_grid_buffer>:

void draw_grid_buffer (void)
{
     952:	9f 92       	push	r9
     954:	af 92       	push	r10
     956:	bf 92       	push	r11
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <draw_grid_buffer+0x18>
     96a:	00 d0       	rcall	.+0      	; 0x96c <draw_grid_buffer+0x1a>
     96c:	1f 92       	push	r1
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	0f 2e       	mov	r0, r31
     974:	f7 e0       	ldi	r31, 0x07	; 7
     976:	ef 2e       	mov	r14, r31
     978:	f3 e0       	ldi	r31, 0x03	; 3
     97a:	ff 2e       	mov	r15, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	68 94       	set
     980:	cc 24       	eor	r12, r12
     982:	c1 f8       	bld	r12, 1
     984:	0f 2e       	mov	r0, r31
     986:	fd e0       	ldi	r31, 0x0D	; 13
     988:	9f 2e       	mov	r9, r31
     98a:	f0 2d       	mov	r31, r0
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
		{
			rect.pos.x=LIM_LEFT+EMPTY_SPACE_X+i*(EMPTY_SPACE_X+L_X);
			rect.pos.y=LIM_UP+EMPTY_SPACE_Y+j*(EMPTY_SPACE_Y+L_Y);
			rect.Ly=L_Y;
     98c:	0f 2e       	mov	r0, r31
     98e:	f3 e0       	ldi	r31, 0x03	; 3
     990:	af 2e       	mov	r10, r31
     992:	f0 2d       	mov	r31, r0
			rect.Lx=L_X;
     994:	0f 2e       	mov	r0, r31
     996:	fc e0       	ldi	r31, 0x0C	; 12
     998:	bf 2e       	mov	r11, r31
     99a:	f0 2d       	mov	r31, r0
     99c:	17 c0       	rjmp	.+46     	; 0x9cc <draw_grid_buffer+0x7a>
			rect.full=grid[i][j];
     99e:	f8 01       	movw	r30, r16
     9a0:	80 81       	ld	r24, Z
     9a2:	0e 5f       	subi	r16, 0xFE	; 254
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
			draw_rectangle_buffer(rect);
     9a6:	4c 2d       	mov	r20, r12
     9a8:	5d 2d       	mov	r21, r13
     9aa:	6b 2d       	mov	r22, r11
     9ac:	7a 2d       	mov	r23, r10
     9ae:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
     9b2:	f5 e0       	ldi	r31, 0x05	; 5
     9b4:	df 0e       	add	r13, r31
	int j=0;
	
	RECT rect;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
     9b6:	8c e1       	ldi	r24, 0x1C	; 28
     9b8:	d8 12       	cpse	r13, r24
     9ba:	f1 cf       	rjmp	.-30     	; 0x99e <draw_grid_buffer+0x4c>
     9bc:	e6 e0       	ldi	r30, 0x06	; 6
     9be:	ee 0e       	add	r14, r30
     9c0:	f1 1c       	adc	r15, r1
     9c2:	fe e0       	ldi	r31, 0x0E	; 14
     9c4:	cf 0e       	add	r12, r31
	int i=0;
	int j=0;
	
	RECT rect;
	
	for(i=0;i<N_X;i++)
     9c6:	80 e8       	ldi	r24, 0x80	; 128
     9c8:	c8 16       	cp	r12, r24
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <draw_grid_buffer+0x80>
	border.Lx = 1;
	draw_rectangle_buffer(border);
}

void draw_grid_buffer (void)
{
     9cc:	87 01       	movw	r16, r14
     9ce:	d9 2c       	mov	r13, r9
     9d0:	e6 cf       	rjmp	.-52     	; 0x99e <draw_grid_buffer+0x4c>
			rect.Ly=L_Y;
			rect.Lx=L_X;
			rect.full=grid[i][j];
			draw_rectangle_buffer(rect);
		}
}
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	08 95       	ret

000009f4 <bounce_ball_rect>:
int bounce_ball_rect (RECT rect)
{
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <bounce_ball_rect+0x8>
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <bounce_ball_rect+0xa>
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	27 2f       	mov	r18, r23
	switch (ball.dir)
     a06:	80 91 3f 03 	lds	r24, 0x033F
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	e9 f1       	breq	.+122    	; 0xa88 <bounce_ball_rect+0x94>
     a0e:	38 f0       	brcs	.+14     	; 0xa1e <bounce_ball_rect+0x2a>
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	09 f4       	brne	.+2      	; 0xa16 <bounce_ball_rect+0x22>
     a14:	6b c0       	rjmp	.+214    	; 0xaec <bounce_ball_rect+0xf8>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	09 f4       	brne	.+2      	; 0xa1c <bounce_ball_rect+0x28>
     a1a:	95 c0       	rjmp	.+298    	; 0xb46 <bounce_ball_rect+0x152>
     a1c:	be c0       	rjmp	.+380    	; 0xb9a <bounce_ball_rect+0x1a6>
	{
		case UP_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
     a1e:	70 91 3d 03 	lds	r23, 0x033D
     a22:	74 13       	cpse	r23, r20
     a24:	15 c0       	rjmp	.+42     	; 0xa50 <bounce_ball_rect+0x5c>
     a26:	80 91 3e 03 	lds	r24, 0x033E
     a2a:	85 17       	cp	r24, r21
     a2c:	08 f4       	brcc	.+2      	; 0xa30 <bounce_ball_rect+0x3c>
     a2e:	dc c0       	rjmp	.+440    	; 0xbe8 <bounce_ball_rect+0x1f4>
     a30:	a8 2f       	mov	r26, r24
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	e2 2f       	mov	r30, r18
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	e5 0f       	add	r30, r21
     a3a:	f1 1d       	adc	r31, r1
     a3c:	ea 17       	cp	r30, r26
     a3e:	fb 07       	cpc	r31, r27
     a40:	0c f4       	brge	.+2      	; 0xa44 <bounce_ball_rect+0x50>
     a42:	d2 c0       	rjmp	.+420    	; 0xbe8 <bounce_ball_rect+0x1f4>
			{
				ball.dir=UP_LEFT;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 3f 03 	sts	0x033F, r24
				return 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	dd c0       	rjmp	.+442    	; 0xc0a <bounce_ball_rect+0x216>
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
     a50:	80 91 3e 03 	lds	r24, 0x033E
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	25 0f       	add	r18, r21
     a5a:	31 1d       	adc	r19, r1
     a5c:	82 17       	cp	r24, r18
     a5e:	93 07       	cpc	r25, r19
     a60:	09 f0       	breq	.+2      	; 0xa64 <bounce_ball_rect+0x70>
     a62:	9e c0       	rjmp	.+316    	; 0xba0 <bounce_ball_rect+0x1ac>
     a64:	74 17       	cp	r23, r20
     a66:	08 f4       	brcc	.+2      	; 0xa6a <bounce_ball_rect+0x76>
     a68:	9e c0       	rjmp	.+316    	; 0xba6 <bounce_ball_rect+0x1b2>
     a6a:	87 2f       	mov	r24, r23
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	64 0f       	add	r22, r20
     a72:	71 1d       	adc	r23, r1
     a74:	68 17       	cp	r22, r24
     a76:	79 07       	cpc	r23, r25
     a78:	0c f4       	brge	.+2      	; 0xa7c <bounce_ball_rect+0x88>
     a7a:	98 c0       	rjmp	.+304    	; 0xbac <bounce_ball_rect+0x1b8>
			{
				ball.dir=DOWN_RIGHT;
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	80 93 3f 03 	sts	0x033F, r24
				return 1;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	c1 c0       	rjmp	.+386    	; 0xc0a <bounce_ball_rect+0x216>
			}
		} break;
		case UP_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))//LIMIT_LEFT
     a88:	10 91 3d 03 	lds	r17, 0x033D
     a8c:	81 2f       	mov	r24, r17
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	64 0f       	add	r22, r20
     a94:	71 1d       	adc	r23, r1
     a96:	86 17       	cp	r24, r22
     a98:	97 07       	cpc	r25, r23
     a9a:	89 f4       	brne	.+34     	; 0xabe <bounce_ball_rect+0xca>
     a9c:	a0 91 3e 03 	lds	r26, 0x033E
     aa0:	a5 17       	cp	r26, r21
     aa2:	68 f0       	brcs	.+26     	; 0xabe <bounce_ball_rect+0xca>
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e2 2f       	mov	r30, r18
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	e5 0f       	add	r30, r21
     aac:	f1 1d       	adc	r31, r1
     aae:	ea 17       	cp	r30, r26
     ab0:	fb 07       	cpc	r31, r27
     ab2:	2c f0       	brlt	.+10     	; 0xabe <bounce_ball_rect+0xca>
			{
				ball.dir=UP_RIGHT;
     ab4:	10 92 3f 03 	sts	0x033F, r1
				return 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a6 c0       	rjmp	.+332    	; 0xc0a <bounce_ball_rect+0x216>
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     abe:	e0 91 3e 03 	lds	r30, 0x033E
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	25 0f       	add	r18, r21
     ac8:	31 1d       	adc	r19, r1
     aca:	e2 17       	cp	r30, r18
     acc:	f3 07       	cpc	r31, r19
     ace:	09 f0       	breq	.+2      	; 0xad2 <bounce_ball_rect+0xde>
     ad0:	70 c0       	rjmp	.+224    	; 0xbb2 <bounce_ball_rect+0x1be>
     ad2:	14 17       	cp	r17, r20
     ad4:	08 f4       	brcc	.+2      	; 0xad8 <bounce_ball_rect+0xe4>
     ad6:	70 c0       	rjmp	.+224    	; 0xbb8 <bounce_ball_rect+0x1c4>
     ad8:	68 17       	cp	r22, r24
     ada:	79 07       	cpc	r23, r25
     adc:	0c f4       	brge	.+2      	; 0xae0 <bounce_ball_rect+0xec>
     ade:	6f c0       	rjmp	.+222    	; 0xbbe <bounce_ball_rect+0x1ca>
			{
				ball.dir=DOWN_LEFT;
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	80 93 3f 03 	sts	0x033F, r24
				return 1;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	8f c0       	rjmp	.+286    	; 0xc0a <bounce_ball_rect+0x216>
			}
		}break;
		case DOWN_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     aec:	80 91 3d 03 	lds	r24, 0x033D
     af0:	84 13       	cpse	r24, r20
     af2:	15 c0       	rjmp	.+42     	; 0xb1e <bounce_ball_rect+0x12a>
     af4:	90 91 3e 03 	lds	r25, 0x033E
     af8:	95 17       	cp	r25, r21
     afa:	08 f4       	brcc	.+2      	; 0xafe <bounce_ball_rect+0x10a>
     afc:	81 c0       	rjmp	.+258    	; 0xc00 <bounce_ball_rect+0x20c>
     afe:	e9 2f       	mov	r30, r25
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	27 2f       	mov	r18, r23
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	25 0f       	add	r18, r21
     b08:	31 1d       	adc	r19, r1
     b0a:	2e 17       	cp	r18, r30
     b0c:	3f 07       	cpc	r19, r31
     b0e:	0c f4       	brge	.+2      	; 0xb12 <bounce_ball_rect+0x11e>
     b10:	77 c0       	rjmp	.+238    	; 0xc00 <bounce_ball_rect+0x20c>
			{
				ball.dir=DOWN_LEFT;
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	80 93 3f 03 	sts	0x033F, r24
				return 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	76 c0       	rjmp	.+236    	; 0xc0a <bounce_ball_rect+0x216>
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))//LIMIT_DOWN
     b1e:	90 91 3e 03 	lds	r25, 0x033E
     b22:	95 13       	cpse	r25, r21
     b24:	4f c0       	rjmp	.+158    	; 0xbc4 <bounce_ball_rect+0x1d0>
     b26:	84 17       	cp	r24, r20
     b28:	08 f4       	brcc	.+2      	; 0xb2c <bounce_ball_rect+0x138>
     b2a:	4f c0       	rjmp	.+158    	; 0xbca <bounce_ball_rect+0x1d6>
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	64 0f       	add	r22, r20
     b32:	71 1d       	adc	r23, r1
     b34:	68 17       	cp	r22, r24
     b36:	79 07       	cpc	r23, r25
     b38:	0c f4       	brge	.+2      	; 0xb3c <bounce_ball_rect+0x148>
     b3a:	4a c0       	rjmp	.+148    	; 0xbd0 <bounce_ball_rect+0x1dc>
			{
				ball.dir=UP_RIGHT;
     b3c:	10 92 3f 03 	sts	0x033F, r1
				return 1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	62 c0       	rjmp	.+196    	; 0xc0a <bounce_ball_rect+0x216>
			}
		}break;
		case DOWN_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     b46:	a0 91 3d 03 	lds	r26, 0x033D
     b4a:	8a 2f       	mov	r24, r26
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	64 0f       	add	r22, r20
     b52:	71 1d       	adc	r23, r1
     b54:	86 17       	cp	r24, r22
     b56:	97 07       	cpc	r25, r23
     b58:	89 f4       	brne	.+34     	; 0xb7c <bounce_ball_rect+0x188>
     b5a:	e0 91 3e 03 	lds	r30, 0x033E
     b5e:	e5 17       	cp	r30, r21
     b60:	68 f0       	brcs	.+26     	; 0xb7c <bounce_ball_rect+0x188>
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	25 0f       	add	r18, r21
     b68:	31 1d       	adc	r19, r1
     b6a:	2e 17       	cp	r18, r30
     b6c:	3f 07       	cpc	r19, r31
     b6e:	34 f0       	brlt	.+12     	; 0xb7c <bounce_ball_rect+0x188>
			{
				ball.dir=DOWN_RIGHT;
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	80 93 3f 03 	sts	0x033F, r24
				return 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	47 c0       	rjmp	.+142    	; 0xc0a <bounce_ball_rect+0x216>
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     b7c:	20 91 3e 03 	lds	r18, 0x033E
     b80:	25 13       	cpse	r18, r21
     b82:	29 c0       	rjmp	.+82     	; 0xbd6 <bounce_ball_rect+0x1e2>
     b84:	a4 17       	cp	r26, r20
     b86:	50 f1       	brcs	.+84     	; 0xbdc <bounce_ball_rect+0x1e8>
     b88:	68 17       	cp	r22, r24
     b8a:	79 07       	cpc	r23, r25
     b8c:	54 f1       	brlt	.+84     	; 0xbe2 <bounce_ball_rect+0x1ee>
			{
				ball.dir=UP_LEFT;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 3f 03 	sts	0x033F, r24
				return 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	38 c0       	rjmp	.+112    	; 0xc0a <bounce_ball_rect+0x216>
			}
		}break;
	}
	return 0;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	35 c0       	rjmp	.+106    	; 0xc0a <bounce_ball_rect+0x216>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	32 c0       	rjmp	.+100    	; 0xc0a <bounce_ball_rect+0x216>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	2f c0       	rjmp	.+94     	; 0xc0a <bounce_ball_rect+0x216>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	2c c0       	rjmp	.+88     	; 0xc0a <bounce_ball_rect+0x216>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	29 c0       	rjmp	.+82     	; 0xc0a <bounce_ball_rect+0x216>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	26 c0       	rjmp	.+76     	; 0xc0a <bounce_ball_rect+0x216>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	23 c0       	rjmp	.+70     	; 0xc0a <bounce_ball_rect+0x216>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	20 c0       	rjmp	.+64     	; 0xc0a <bounce_ball_rect+0x216>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	1d c0       	rjmp	.+58     	; 0xc0a <bounce_ball_rect+0x216>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	1a c0       	rjmp	.+52     	; 0xc0a <bounce_ball_rect+0x216>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	17 c0       	rjmp	.+46     	; 0xc0a <bounce_ball_rect+0x216>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <bounce_ball_rect+0x216>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <bounce_ball_rect+0x216>
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
			{
				ball.dir=UP_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
     be8:	e8 2f       	mov	r30, r24
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	25 0f       	add	r18, r21
     bf0:	31 1d       	adc	r19, r1
     bf2:	e2 17       	cp	r30, r18
     bf4:	f3 07       	cpc	r31, r19
     bf6:	09 f4       	brne	.+2      	; 0xbfa <bounce_ball_rect+0x206>
     bf8:	38 cf       	rjmp	.-400    	; 0xa6a <bounce_ball_rect+0x76>
				ball.dir=UP_LEFT;
				return 1;
			}
		}break;
	}
	return 0;
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <bounce_ball_rect+0x216>
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
			{
				ball.dir=DOWN_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))//LIMIT_DOWN
     c00:	95 17       	cp	r25, r21
     c02:	09 f4       	brne	.+2      	; 0xc06 <bounce_ball_rect+0x212>
     c04:	93 cf       	rjmp	.-218    	; 0xb2c <bounce_ball_rect+0x138>
				ball.dir=UP_LEFT;
				return 1;
			}
		}break;
	}
	return 0;
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	08 95       	ret

00000c1c <bounce_ball_grid>:

void bounce_ball_grid (void)
{
     c1c:	3f 92       	push	r3
     c1e:	4f 92       	push	r4
     c20:	5f 92       	push	r5
     c22:	6f 92       	push	r6
     c24:	7f 92       	push	r7
     c26:	8f 92       	push	r8
     c28:	9f 92       	push	r9
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <bounce_ball_grid+0x24>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <bounce_ball_grid+0x26>
     c42:	1f 92       	push	r1
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	0f 2e       	mov	r0, r31
     c4a:	f7 e0       	ldi	r31, 0x07	; 7
     c4c:	cf 2e       	mov	r12, r31
     c4e:	f3 e0       	ldi	r31, 0x03	; 3
     c50:	df 2e       	mov	r13, r31
     c52:	f0 2d       	mov	r31, r0
     c54:	68 94       	set
     c56:	66 24       	eor	r6, r6
     c58:	61 f8       	bld	r6, 1
     c5a:	0f 2e       	mov	r0, r31
     c5c:	fd e0       	ldi	r31, 0x0D	; 13
     c5e:	3f 2e       	mov	r3, r31
     c60:	f0 2d       	mov	r31, r0
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j]==RECT_EMPT)
						grid[i][j]=DESTROYED;
					if(grid[i][j]==FULL)
						grid[i][j]=RECT_EMPT;
     c62:	aa 24       	eor	r10, r10
     c64:	a3 94       	inc	r10
     c66:	b1 2c       	mov	r11, r1
				rect.Lx=L_X;
				rect.full=grid[i][j];
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j]==RECT_EMPT)
						grid[i][j]=DESTROYED;
     c68:	68 94       	set
     c6a:	88 24       	eor	r8, r8
     c6c:	81 f8       	bld	r8, 1
     c6e:	91 2c       	mov	r9, r1
		for(j=0;j<N_Y;j++)
			if(grid[i][j] != DESTROYED)
			{
				rect.pos.x=LIM_LEFT+EMPTY_SPACE_X+i*(EMPTY_SPACE_X+L_X);
				rect.pos.y=LIM_UP+EMPTY_SPACE_Y+j*(EMPTY_SPACE_Y+L_Y);
				rect.Ly=L_Y;
     c70:	0f 2e       	mov	r0, r31
     c72:	f3 e0       	ldi	r31, 0x03	; 3
     c74:	4f 2e       	mov	r4, r31
     c76:	f0 2d       	mov	r31, r0
				rect.Lx=L_X;
     c78:	0f 2e       	mov	r0, r31
     c7a:	fc e0       	ldi	r31, 0x0C	; 12
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2b c0       	rjmp	.+86     	; 0xcd8 <bounce_ball_grid+0xbc>
	int i=0;
	int j=0;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
			if(grid[i][j] != DESTROYED)
     c82:	f8 01       	movw	r30, r16
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	91 05       	cpc	r25, r1
     c8c:	b1 f0       	breq	.+44     	; 0xcba <bounce_ball_grid+0x9e>
				rect.pos.x=LIM_LEFT+EMPTY_SPACE_X+i*(EMPTY_SPACE_X+L_X);
				rect.pos.y=LIM_UP+EMPTY_SPACE_Y+j*(EMPTY_SPACE_Y+L_Y);
				rect.Ly=L_Y;
				rect.Lx=L_X;
				rect.full=grid[i][j];
				if(bounce_ball_rect(rect) == 1)
     c8e:	46 2d       	mov	r20, r6
     c90:	57 2d       	mov	r21, r7
     c92:	65 2d       	mov	r22, r5
     c94:	74 2d       	mov	r23, r4
     c96:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <bounce_ball_rect>
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	71 f4       	brne	.+28     	; 0xcba <bounce_ball_grid+0x9e>
				{
					if(grid[i][j]==RECT_EMPT)
     c9e:	f8 01       	movw	r30, r16
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <bounce_ball_grid+0x94>
						grid[i][j]=DESTROYED;
     caa:	91 82       	std	Z+1, r9	; 0x01
     cac:	80 82       	st	Z, r8
     cae:	05 c0       	rjmp	.+10     	; 0xcba <bounce_ball_grid+0x9e>
					if(grid[i][j]==FULL)
     cb0:	89 2b       	or	r24, r25
     cb2:	19 f4       	brne	.+6      	; 0xcba <bounce_ball_grid+0x9e>
						grid[i][j]=RECT_EMPT;
     cb4:	f8 01       	movw	r30, r16
     cb6:	b1 82       	std	Z+1, r11	; 0x01
     cb8:	a0 82       	st	Z, r10
     cba:	0e 5f       	subi	r16, 0xFE	; 254
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	f5 e0       	ldi	r31, 0x05	; 5
     cc0:	7f 0e       	add	r7, r31
	RECT rect;
	int i=0;
	int j=0;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
     cc2:	8c e1       	ldi	r24, 0x1C	; 28
     cc4:	78 12       	cpse	r7, r24
     cc6:	dd cf       	rjmp	.-70     	; 0xc82 <bounce_ball_grid+0x66>
     cc8:	e6 e0       	ldi	r30, 0x06	; 6
     cca:	ce 0e       	add	r12, r30
     ccc:	d1 1c       	adc	r13, r1
     cce:	fe e0       	ldi	r31, 0x0E	; 14
     cd0:	6f 0e       	add	r6, r31
{
	RECT rect;
	int i=0;
	int j=0;
	
	for(i=0;i<N_X;i++)
     cd2:	80 e8       	ldi	r24, 0x80	; 128
     cd4:	68 16       	cp	r6, r24
     cd6:	19 f0       	breq	.+6      	; 0xcde <bounce_ball_grid+0xc2>
	}
	return 0;
}

void bounce_ball_grid (void)
{
     cd8:	86 01       	movw	r16, r12
     cda:	73 2c       	mov	r7, r3
     cdc:	d2 cf       	rjmp	.-92     	; 0xc82 <bounce_ball_grid+0x66>
					if(grid[i][j]==FULL)
						grid[i][j]=RECT_EMPT;
				}
			}
			return;
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	7f 90       	pop	r7
     d02:	6f 90       	pop	r6
     d04:	5f 90       	pop	r5
     d06:	4f 90       	pop	r4
     d08:	3f 90       	pop	r3
     d0a:	08 95       	ret

00000d0c <get_direction>:

int get_direction(void)
{
	JOY_POS pos = JOY_getPosition();
     d0c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <JOY_getPosition>
	return pos.dir;
}
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 95       	ret

00000d14 <ping_pong_idle>:
void ping_pong_idle(void)
{
     d14:	6f 92       	push	r6
     d16:	7f 92       	push	r7
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
	int j=0;
	
	bool pause = false;
	
	//Starting conditions
	ball.pos.x=B_X;
     d30:	10 92 3d 03 	sts	0x033D, r1
	ball.pos.y=B_Y;
     d34:	8e e1       	ldi	r24, 0x1E	; 30
     d36:	80 93 3e 03 	sts	0x033E, r24
	ball.dir=DOWN_RIGHT;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	80 93 3f 03 	sts	0x033F, r24
	
	player.rect.pos.x=15;
     d40:	8f e0       	ldi	r24, 0x0F	; 15
     d42:	80 93 01 03 	sts	0x0301, r24
	player.rect.pos.y=Y_PLAYER;
     d46:	8d e3       	ldi	r24, 0x3D	; 61
     d48:	80 93 02 03 	sts	0x0302, r24
	player.rect.Lx=DIM_PLAYER;
     d4c:	84 e1       	ldi	r24, 0x14	; 20
     d4e:	80 93 03 03 	sts	0x0303, r24
	player.rect.Ly=1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 04 03 	sts	0x0304, r24
	player.rect.full=1;
     d58:	80 93 05 03 	sts	0x0305, r24
     d5c:	e7 e0       	ldi	r30, 0x07	; 7
     d5e:	f3 e0       	ldi	r31, 0x03	; 3
     d60:	8d e3       	ldi	r24, 0x3D	; 61
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	1c c0       	rjmp	.+56     	; 0xd9e <ping_pong_idle+0x8a>
	
	//initialize grid to perfect
	for(i=0;i<N_X;i++)
     d66:	91 2c       	mov	r9, r1
		while(1)
		{
			_delay_ms(10);
			if (JOY_getPosition().dir == LEFT)
			{
				n_lives=3;
     d68:	0f 2e       	mov	r0, r31
     d6a:	f3 e0       	ldi	r31, 0x03	; 3
     d6c:	af 2e       	mov	r10, r31
     d6e:	b1 2c       	mov	r11, r1
     d70:	f0 2d       	mov	r31, r0
				pos.page = 3;
				pos.column=2;
				print_string_to_buffer("LEFT: resume", pos);
				pos.page++;
				print_string_to_buffer("RIGHT: leave", pos);
				if (JOY_getPosition().dir == LEFT)
     d72:	71 2c       	mov	r7, r1
		while(n_lives>=0 )
		{
			clear_buffer();
			if(!(pause))
			{
				player.dir=get_direction();
     d74:	0f 2e       	mov	r0, r31
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	ef 2e       	mov	r14, r31
     d7a:	f3 e0       	ldi	r31, 0x03	; 3
     d7c:	ff 2e       	mov	r15, r31
     d7e:	f0 2d       	mov	r31, r0
			
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
     d80:	0f 2e       	mov	r0, r31
     d82:	f3 e0       	ldi	r31, 0x03	; 3
     d84:	cf 2e       	mov	r12, r31
     d86:	f3 e0       	ldi	r31, 0x03	; 3
     d88:	df 2e       	mov	r13, r31
     d8a:	f0 2d       	mov	r31, r0
			
				level = n_catched_balls % DIM_PLAYER;
     d8c:	04 e1       	ldi	r16, 0x14	; 20
     d8e:	10 e0       	ldi	r17, 0x00	; 0
				draw_lives_buffer(n_lives);
				draw_borders_buffer();
				draw_rectangle_buffer(player.rect);
				draw_lives_buffer(n_lives);
				draw_grid_buffer();
				draw_one_bit_buffer(ball.pos);
     d90:	cd e3       	ldi	r28, 0x3D	; 61
     d92:	d3 e0       	ldi	r29, 0x03	; 3
			if(!(pause))
			{
				player.dir=get_direction();
			
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
     d94:	0f 2e       	mov	r0, r31
     d96:	f4 e1       	ldi	r31, 0x14	; 20
     d98:	8f 2e       	mov	r8, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	67 c0       	rjmp	.+206    	; 0xe6c <ping_pong_idle+0x158>
	player.rect.full=1;
	
	//initialize grid to perfect
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
			grid[i][j]=FULL;
     d9e:	11 82       	std	Z+1, r1	; 0x01
     da0:	10 82       	st	Z, r1
     da2:	13 82       	std	Z+3, r1	; 0x03
     da4:	12 82       	std	Z+2, r1	; 0x02
     da6:	15 82       	std	Z+5, r1	; 0x05
     da8:	14 82       	std	Z+4, r1	; 0x04
     daa:	36 96       	adiw	r30, 0x06	; 6
	player.rect.Lx=DIM_PLAYER;
	player.rect.Ly=1;
	player.rect.full=1;
	
	//initialize grid to perfect
	for(i=0;i<N_X;i++)
     dac:	e8 17       	cp	r30, r24
     dae:	f9 07       	cpc	r31, r25
     db0:	b1 f7       	brne	.-20     	; 0xd9e <ping_pong_idle+0x8a>
     db2:	d9 cf       	rjmp	.-78     	; 0xd66 <ping_pong_idle+0x52>
	//idle function
	while (1)
	{
		while(n_lives>=0 )
		{
			clear_buffer();
     db4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <clear_buffer>
			if(!(pause))
     db8:	91 10       	cpse	r9, r1
     dba:	9a c0       	rjmp	.+308    	; 0xef0 <ping_pong_idle+0x1dc>
			{
				player.dir=get_direction();
     dbc:	0e 94 86 06 	call	0xd0c	; 0xd0c <get_direction>
     dc0:	f7 01       	movw	r30, r14
     dc2:	80 83       	st	Z, r24
			
				if(DIM_PLAYER > level)
     dc4:	80 91 fa 02 	lds	r24, 0x02FA
     dc8:	90 91 fb 02 	lds	r25, 0x02FB
     dcc:	84 31       	cpi	r24, 0x14	; 20
     dce:	91 05       	cpc	r25, r1
     dd0:	0c f0       	brlt	.+2      	; 0xdd4 <ping_pong_idle+0xc0>
     dd2:	8a c0       	rjmp	.+276    	; 0xee8 <ping_pong_idle+0x1d4>
				player.rect.Lx = DIM_PLAYER - level;
     dd4:	f8 2d       	mov	r31, r8
     dd6:	f8 1b       	sub	r31, r24
     dd8:	8f 2f       	mov	r24, r31
     dda:	f6 01       	movw	r30, r12
     ddc:	80 83       	st	Z, r24
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
			
				level = n_catched_balls % DIM_PLAYER;
     dde:	80 91 fc 02 	lds	r24, 0x02FC
     de2:	90 91 fd 02 	lds	r25, 0x02FD
     de6:	b8 01       	movw	r22, r16
     de8:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <__divmodhi4>
     dec:	90 93 fb 02 	sts	0x02FB, r25
     df0:	80 93 fa 02 	sts	0x02FA, r24
			
				draw_lives_buffer(n_lives);
     df4:	80 91 06 01 	lds	r24, 0x0106
     df8:	90 91 07 01 	lds	r25, 0x0107
     dfc:	0e 94 66 03 	call	0x6cc	; 0x6cc <draw_lives_buffer>
				draw_borders_buffer();
     e00:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <draw_borders_buffer>
				draw_rectangle_buffer(player.rect);
     e04:	40 91 01 03 	lds	r20, 0x0301
     e08:	50 91 02 03 	lds	r21, 0x0302
     e0c:	60 91 03 03 	lds	r22, 0x0303
     e10:	70 91 04 03 	lds	r23, 0x0304
     e14:	80 91 05 03 	lds	r24, 0x0305
     e18:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
				draw_lives_buffer(n_lives);
     e1c:	80 91 06 01 	lds	r24, 0x0106
     e20:	90 91 07 01 	lds	r25, 0x0107
     e24:	0e 94 66 03 	call	0x6cc	; 0x6cc <draw_lives_buffer>
				draw_grid_buffer();
     e28:	0e 94 a9 04 	call	0x952	; 0x952 <draw_grid_buffer>
				draw_one_bit_buffer(ball.pos);
     e2c:	88 81       	ld	r24, Y
     e2e:	99 81       	ldd	r25, Y+1	; 0x01
     e30:	0e 94 33 09 	call	0x1266	; 0x1266 <draw_one_bit_buffer>
			
				bounce_ball_grid();
     e34:	0e 94 0e 06 	call	0xc1c	; 0xc1c <bounce_ball_grid>
				update_ball();
     e38:	0e 94 8b 03 	call	0x716	; 0x716 <update_ball>
				update_player();
     e3c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <update_player>
				print_buffer();
     e40:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
				if(JOY_button(R))
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 67 0d 	call	0x1ace	; 0x1ace <JOY_button>
     e4c:	81 11       	cpse	r24, r1
     e4e:	50 c0       	rjmp	.+160    	; 0xef0 <ping_pong_idle+0x1dc>
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <ping_pong_idle+0x14c>
				pos.page = 3;
				pos.column=2;
				print_string_to_buffer("LEFT: resume", pos);
				pos.page++;
				print_string_to_buffer("RIGHT: leave", pos);
				if (JOY_getPosition().dir == LEFT)
     e52:	99 24       	eor	r9, r9
     e54:	93 94       	inc	r9
     e56:	69 10       	cpse	r6, r9
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <ping_pong_idle+0x148>
     e5a:	97 2c       	mov	r9, r7
					pause = false;
				if(JOY_getPosition().dir == RIGHT)
					return;
				print_buffer();
     e5c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	9f e2       	ldi	r25, 0x2F	; 47
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <ping_pong_idle+0x150>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <ping_pong_idle+0x156>
     e6a:	00 00       	nop
			grid[i][j]=FULL;

	//idle function
	while (1)
	{
		while(n_lives>=0 )
     e6c:	80 91 06 01 	lds	r24, 0x0106
     e70:	90 91 07 01 	lds	r25, 0x0107
     e74:	99 23       	and	r25, r25
     e76:	0c f0       	brlt	.+2      	; 0xe7a <ping_pong_idle+0x166>
     e78:	9d cf       	rjmp	.-198    	; 0xdb4 <ping_pong_idle+0xa0>
			//printf("%d,-%d;",player.rect.pos.x, player.rect.pos.y);
		}
		position pos;
		pos.column=30;
		pos.page=3;
		clear_buffer();
     e7a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <clear_buffer>
		print_string_to_buffer("GAME OVER!", pos);
     e7e:	63 e0       	ldi	r22, 0x03	; 3
     e80:	7e e1       	ldi	r23, 0x1E	; 30
     e82:	81 e1       	ldi	r24, 0x11	; 17
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
		print_buffer();
     e8a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
     e8e:	9f ef       	ldi	r25, 0xFF	; 255
     e90:	ef ef       	ldi	r30, 0xFF	; 255
     e92:	fd e1       	ldi	r31, 0x1D	; 29
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	e0 40       	sbci	r30, 0x00	; 0
     e98:	f0 40       	sbci	r31, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <ping_pong_idle+0x180>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <ping_pong_idle+0x18a>
     e9e:	00 00       	nop
		_delay_ms(2000);
		
		clear_buffer();
     ea0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <clear_buffer>
		pos.page = 3;
		pos.column = 2;
		print_string_to_buffer("LEFT: restart", pos);
     ea4:	63 e0       	ldi	r22, 0x03	; 3
     ea6:	72 e0       	ldi	r23, 0x02	; 2
     ea8:	8c e1       	ldi	r24, 0x1C	; 28
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
		pos.page++;
		print_string_to_buffer("RIGHT: leave", pos);
     eb0:	64 e0       	ldi	r22, 0x04	; 4
     eb2:	72 e0       	ldi	r23, 0x02	; 2
     eb4:	8a e2       	ldi	r24, 0x2A	; 42
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
		print_buffer();
     ebc:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	9f e2       	ldi	r25, 0x2F	; 47
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <ping_pong_idle+0x1b0>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <ping_pong_idle+0x1b6>
     eca:	00 00       	nop
		
		while(1)
		{
			_delay_ms(10);
			if (JOY_getPosition().dir == LEFT)
     ecc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <JOY_getPosition>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	29 f4       	brne	.+10     	; 0xede <ping_pong_idle+0x1ca>
			{
				n_lives=3;
     ed4:	b0 92 07 01 	sts	0x0107, r11
     ed8:	a0 92 06 01 	sts	0x0106, r10
     edc:	c7 cf       	rjmp	.-114    	; 0xe6c <ping_pong_idle+0x158>
				break;
			}
			if(JOY_getPosition().dir == RIGHT)
     ede:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <JOY_getPosition>
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	69 f7       	brne	.-38     	; 0xec0 <ping_pong_idle+0x1ac>
     ee6:	20 c0       	rjmp	.+64     	; 0xf28 <ping_pong_idle+0x214>
				player.dir=get_direction();
			
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	f6 01       	movw	r30, r12
     eec:	80 83       	st	Z, r24
     eee:	77 cf       	rjmp	.-274    	; 0xdde <ping_pong_idle+0xca>
				if(JOY_button(R))
					pause = true;
			}
			if(pause)
			{
				clear_buffer();
     ef0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <clear_buffer>
				position pos;
				pos.column=45;
				pos.page=1;
				print_string_to_buffer("PAUSE", pos);
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	7d e2       	ldi	r23, 0x2D	; 45
     ef8:	87 e3       	ldi	r24, 0x37	; 55
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
				pos.page = 3;
				pos.column=2;
				print_string_to_buffer("LEFT: resume", pos);
     f00:	63 e0       	ldi	r22, 0x03	; 3
     f02:	72 e0       	ldi	r23, 0x02	; 2
     f04:	8d e3       	ldi	r24, 0x3D	; 61
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
				pos.page++;
				print_string_to_buffer("RIGHT: leave", pos);
     f0c:	64 e0       	ldi	r22, 0x04	; 4
     f0e:	72 e0       	ldi	r23, 0x02	; 2
     f10:	8a e2       	ldi	r24, 0x2A	; 42
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
				if (JOY_getPosition().dir == LEFT)
     f18:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <JOY_getPosition>
     f1c:	68 2e       	mov	r6, r24
					pause = false;
				if(JOY_getPosition().dir == RIGHT)
     f1e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <JOY_getPosition>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	09 f0       	breq	.+2      	; 0xf28 <ping_pong_idle+0x214>
     f26:	95 cf       	rjmp	.-214    	; 0xe52 <ping_pong_idle+0x13e>
			if(JOY_getPosition().dir == RIGHT)
				return;
		}

	}
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	08 95       	ret

00000f46 <average>:
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     f46:	66 23       	and	r22, r22
     f48:	89 f0       	breq	.+34     	; 0xf6c <average+0x26>
     f4a:	20 91 08 01 	lds	r18, 0x0108
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	e8 2f       	mov	r30, r24
     f52:	f9 2f       	mov	r31, r25
     f54:	40 e0       	ldi	r20, 0x00	; 0

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < L; i++)
		sum += data[dim * i];
     f5a:	50 81       	ld	r21, Z
     f5c:	85 0f       	add	r24, r21
     f5e:	91 1d       	adc	r25, r1
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     f60:	4f 5f       	subi	r20, 0xFF	; 255
     f62:	e2 0f       	add	r30, r18
     f64:	f3 1f       	adc	r31, r19
     f66:	46 13       	cpse	r20, r22
     f68:	f8 cf       	rjmp	.-16     	; 0xf5a <average+0x14>
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <average+0x2a>

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < L; i++)
		sum += data[dim * i];
	return sum / L;
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     f76:	86 2f       	mov	r24, r22
}
     f78:	08 95       	ret

00000f7a <order_data_distance>:
	//printf("\ndata=%d, avarage=%d disatnce=%d\n\n", data, avareage, d);
	return d;
}

void order_data_distance(uint8_t data_dist[MAX_DATA][2], uint8_t L)
{
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
     f84:	66 23       	and	r22, r22
     f86:	19 f1       	breq	.+70     	; 0xfce <order_data_distance+0x54>
     f88:	dc 01       	movw	r26, r24
     f8a:	11 96       	adiw	r26, 0x01	; 1
     f8c:	7c 01       	movw	r14, r24
     f8e:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(uint8_t j = i + 1; j < L; j++)
     f90:	1f 5f       	subi	r17, 0xFF	; 255
     f92:	16 17       	cp	r17, r22
     f94:	e1 f0       	breq	.+56     	; 0xfce <order_data_distance+0x54>
     f96:	41 2f       	mov	r20, r17
     f98:	9d 01       	movw	r18, r26
		{
			if (data_dist[i][1] > data_dist[j][1])
     f9a:	5c 91       	ld	r21, X
     f9c:	e4 2f       	mov	r30, r20
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	e8 0f       	add	r30, r24
     fa6:	f9 1f       	adc	r31, r25
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	75 17       	cp	r23, r21
     fac:	40 f4       	brcc	.+16     	; 0xfbe <order_data_distance+0x44>
			{
				temp_1 =  data_dist[i][1];
				data_dist[i][1] = data_dist[j][1];
     fae:	e9 01       	movw	r28, r18
     fb0:	78 83       	st	Y, r23
				data_dist[j][1] = temp_1;
     fb2:	51 83       	std	Z+1, r21	; 0x01
				temp_2 =  data_dist[i][0];
     fb4:	e7 01       	movw	r28, r14
     fb6:	58 81       	ld	r21, Y
				data_dist[i][0] = data_dist[j][0];
     fb8:	70 81       	ld	r23, Z
     fba:	78 83       	st	Y, r23
				data_dist[j][0] = temp_2;
     fbc:	50 83       	st	Z, r21
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
	{
		for(uint8_t j = i + 1; j < L; j++)
     fbe:	4f 5f       	subi	r20, 0xFF	; 255
     fc0:	46 13       	cpse	r20, r22
     fc2:	eb cf       	rjmp	.-42     	; 0xf9a <order_data_distance+0x20>
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	d2 e0       	ldi	r29, 0x02	; 2
     fc8:	ed 0e       	add	r14, r29
     fca:	f1 1c       	adc	r15, r1
     fcc:	e1 cf       	rjmp	.-62     	; 0xf90 <order_data_distance+0x16>
				data_dist[j][0] = temp_2;
			}
		}
	}

}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret

00000fda <data_fit>:

uint8_t data_fit(uint8_t data[MAX_DATA], uint8_t L, uint8_t n_iter, uint8_t lim, uint8_t n_elim)
{
     fda:	2f 92       	push	r2
     fdc:	3f 92       	push	r3
     fde:	4f 92       	push	r4
     fe0:	5f 92       	push	r5
     fe2:	6f 92       	push	r6
     fe4:	7f 92       	push	r7
     fe6:	8f 92       	push	r8
     fe8:	9f 92       	push	r9
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	c8 2e       	mov	r12, r24
    1004:	b9 2e       	mov	r11, r25
    1006:	16 2f       	mov	r17, r22
    1008:	74 2e       	mov	r7, r20
    100a:	a2 2e       	mov	r10, r18
				i = L;
			}
	avar = average(data_dist[0], L);
	dim = 1;
	return avar;
}
    100c:	2d b6       	in	r2, 0x3d	; 61
    100e:	3e b6       	in	r3, 0x3e	; 62

}

uint8_t data_fit(uint8_t data[MAX_DATA], uint8_t L, uint8_t n_iter, uint8_t lim, uint8_t n_elim)
{
	uint8_t data_dist[L][2];
    1010:	86 2f       	mov	r24, r22
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	2d b7       	in	r18, 0x3d	; 61
    101a:	3e b7       	in	r19, 0x3e	; 62
    101c:	28 1b       	sub	r18, r24
    101e:	39 0b       	sbc	r19, r25
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	3e bf       	out	0x3e, r19	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	2d bf       	out	0x3d, r18	; 61
    102a:	8d b7       	in	r24, 0x3d	; 61
    102c:	9e b7       	in	r25, 0x3e	; 62
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	4c 01       	movw	r8, r24
    1032:	7c 01       	movw	r14, r24
	uint8_t i = 0, j = 0;
	dim = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 08 01 	sts	0x0108, r24
	uint8_t avar=average(data, L);
    103a:	8c 2d       	mov	r24, r12
    103c:	9b 2d       	mov	r25, r11
    103e:	0e 94 a3 07 	call	0xf46	; 0xf46 <average>
	for(i = 0; i < L; i++)
    1042:	11 23       	and	r17, r17
    1044:	f9 f0       	breq	.+62     	; 0x1084 <data_fit+0xaa>
    1046:	d4 01       	movw	r26, r8
    1048:	dc 2c       	mov	r13, r12
    104a:	4c 2c       	mov	r4, r12
    104c:	5b 2c       	mov	r5, r11
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
    104e:	68 2f       	mov	r22, r24
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	c2 01       	movw	r24, r4
	uint8_t i = 0, j = 0;
	dim = 1;
	uint8_t avar=average(data, L);
	for(i = 0; i < L; i++)
	{
		data_dist[i][0] = data[i];
    1054:	f2 01       	movw	r30, r4
    1056:	21 91       	ld	r18, Z+
    1058:	2f 01       	movw	r4, r30
    105a:	ad 01       	movw	r20, r26
    105c:	2c 93       	st	X, r18
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
    105e:	fc 01       	movw	r30, r24
    1060:	20 81       	ld	r18, Z
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	26 1b       	sub	r18, r22
    1066:	37 0b       	sbc	r19, r23
    1068:	c9 01       	movw	r24, r18
    106a:	99 23       	and	r25, r25
    106c:	24 f4       	brge	.+8      	; 0x1076 <data_fit+0x9c>
    106e:	88 27       	eor	r24, r24
    1070:	99 27       	eor	r25, r25
    1072:	82 1b       	sub	r24, r18
    1074:	93 0b       	sbc	r25, r19
    1076:	fa 01       	movw	r30, r20
    1078:	81 83       	std	Z+1, r24	; 0x01
    107a:	12 96       	adiw	r26, 0x02	; 2
    107c:	84 2d       	mov	r24, r4
    107e:	8d 19       	sub	r24, r13
{
	uint8_t data_dist[L][2];
	uint8_t i = 0, j = 0;
	dim = 1;
	uint8_t avar=average(data, L);
	for(i = 0; i < L; i++)
    1080:	81 17       	cp	r24, r17
    1082:	38 f3       	brcs	.-50     	; 0x1052 <data_fit+0x78>
	{
		data_dist[i][0] = data[i];
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	80 93 08 01 	sts	0x0108, r24
	order_data_distance(data_dist, L);
    108a:	61 2f       	mov	r22, r17
    108c:	c4 01       	movw	r24, r8
    108e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <order_data_distance>

	for(i = 0; i < n_iter; i++)
    1092:	77 20       	and	r7, r7
    1094:	09 f4       	brne	.+2      	; 0x1098 <data_fit+0xbe>
    1096:	40 c0       	rjmp	.+128    	; 0x1118 <data_fit+0x13e>
    1098:	b1 2c       	mov	r11, r1
	{
		if(L - i <= 2)
			i = n_iter;
    109a:	67 2c       	mov	r6, r7
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
    109c:	c0 2e       	mov	r12, r16
    109e:	d1 2c       	mov	r13, r1
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
    10a0:	51 2c       	mov	r5, r1
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
	{
		if(L - i <= 2)
    10a2:	81 2f       	mov	r24, r17
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 01       	movw	r18, r24
    10a8:	2b 19       	sub	r18, r11
    10aa:	31 09       	sbc	r19, r1
    10ac:	23 30       	cpi	r18, 0x03	; 3
    10ae:	31 05       	cpc	r19, r1
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <data_fit+0xda>
			i = n_iter;
    10b2:	b6 2c       	mov	r11, r6
		if(data_dist[L - 1][1] < lim)
    10b4:	fc 01       	movw	r30, r24
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	ee 0d       	add	r30, r14
    10be:	ff 1d       	adc	r31, r15
    10c0:	21 81       	ldd	r18, Z+1	; 0x01
    10c2:	2a 15       	cp	r18, r10
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <data_fit+0xee>
			i = n_iter;
    10c6:	b6 2c       	mov	r11, r6
		if(L - n_elim >= 2)
    10c8:	8c 19       	sub	r24, r12
    10ca:	9d 09       	sbc	r25, r13
    10cc:	02 97       	sbiw	r24, 0x02	; 2
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <data_fit+0xf8>
			L -= n_elim;
    10d0:	10 1b       	sub	r17, r16
		avar = average(data_dist[0], L);
    10d2:	61 2f       	mov	r22, r17
    10d4:	c7 01       	movw	r24, r14
    10d6:	0e 94 a3 07 	call	0xf46	; 0xf46 <average>
		for (j = 0; j < L; j++)
    10da:	11 23       	and	r17, r17
    10dc:	b1 f0       	breq	.+44     	; 0x110a <data_fit+0x130>
    10de:	f7 01       	movw	r30, r14
    10e0:	65 2d       	mov	r22, r5
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	cf 01       	movw	r24, r30
    10e8:	a0 81       	ld	r26, Z
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	a2 1b       	sub	r26, r18
    10ee:	b3 0b       	sbc	r27, r19
    10f0:	ad 01       	movw	r20, r26
    10f2:	22 f4       	brpl	.+8      	; 0x10fc <data_fit+0x122>
    10f4:	44 27       	eor	r20, r20
    10f6:	55 27       	eor	r21, r21
    10f8:	4a 1b       	sub	r20, r26
    10fa:	5b 0b       	sbc	r21, r27
    10fc:	dc 01       	movw	r26, r24
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	4c 93       	st	X, r20
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
    1102:	6f 5f       	subi	r22, 0xFF	; 255
    1104:	32 96       	adiw	r30, 0x02	; 2
    1106:	61 13       	cpse	r22, r17
    1108:	ee cf       	rjmp	.-36     	; 0x10e6 <data_fit+0x10c>
		{
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
    110a:	61 2f       	mov	r22, r17
    110c:	c7 01       	movw	r24, r14
    110e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <order_data_distance>
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
    1112:	b3 94       	inc	r11
    1114:	b7 14       	cp	r11, r7
    1116:	28 f2       	brcs	.-118    	; 0x10a2 <data_fit+0xc8>
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
	}

	if(data_dist[0][1] >= lim)
    1118:	f4 01       	movw	r30, r8
    111a:	81 81       	ldd	r24, Z+1	; 0x01
    111c:	8a 15       	cp	r24, r10
    111e:	10 f0       	brcs	.+4      	; 0x1124 <data_fit+0x14a>
		L -= n_elim;
    1120:	10 1b       	sub	r17, r16
    1122:	1b c0       	rjmp	.+54     	; 0x115a <data_fit+0x180>
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
    1124:	e1 2f       	mov	r30, r17
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	31 97       	sbiw	r30, 0x01	; 1
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e8 0d       	add	r30, r8
    1130:	f9 1d       	adc	r31, r9
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	a8 16       	cp	r10, r24
    1136:	88 f4       	brcc	.+34     	; 0x115a <data_fit+0x180>
		for(i = 0; i < L; i++)
    1138:	11 23       	and	r17, r17
    113a:	79 f0       	breq	.+30     	; 0x115a <data_fit+0x180>
    113c:	80 e0       	ldi	r24, 0x00	; 0
			if(data_dist[i][1] > lim)
    113e:	e8 2f       	mov	r30, r24
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ee 0d       	add	r30, r14
    1148:	ff 1d       	adc	r31, r15
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	a9 16       	cp	r10, r25
    114e:	10 f4       	brcc	.+4      	; 0x1154 <data_fit+0x17a>
			{
				L = i - 1;
    1150:	81 50       	subi	r24, 0x01	; 1
				i = L;
    1152:	18 2f       	mov	r17, r24
	}

	if(data_dist[0][1] >= lim)
		L -= n_elim;
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
		for(i = 0; i < L; i++)
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	81 17       	cp	r24, r17
    1158:	90 f3       	brcs	.-28     	; 0x113e <data_fit+0x164>
			if(data_dist[i][1] > lim)
			{
				L = i - 1;
				i = L;
			}
	avar = average(data_dist[0], L);
    115a:	61 2f       	mov	r22, r17
    115c:	c4 01       	movw	r24, r8
    115e:	0e 94 a3 07 	call	0xf46	; 0xf46 <average>
	dim = 1;
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	90 93 08 01 	sts	0x0108, r25
	return avar;
}
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	3e be       	out	0x3e, r3	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	2d be       	out	0x3d, r2	; 61
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	bf 90       	pop	r11
    1184:	af 90       	pop	r10
    1186:	9f 90       	pop	r9
    1188:	8f 90       	pop	r8
    118a:	7f 90       	pop	r7
    118c:	6f 90       	pop	r6
    118e:	5f 90       	pop	r5
    1190:	4f 90       	pop	r4
    1192:	3f 90       	pop	r3
    1194:	2f 90       	pop	r2
    1196:	08 95       	ret

00001198 <selectSlave>:
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    1198:	c4 98       	cbi	0x18, 4	; 24
    119a:	08 95       	ret

0000119c <deselectSlave>:
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    119c:	c4 9a       	sbi	0x18, 4	; 24
    119e:	08 95       	ret

000011a0 <mcp_write>:
	spi_init();
	mcp_reset();
}

void mcp_write(uint8_t address, uint8_t data)
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	d8 2f       	mov	r29, r24
    11a6:	c6 2f       	mov	r28, r22
	selectSlave();
    11a8:	0e 94 cc 08 	call	0x1198	; 0x1198 <selectSlave>

	spi_MasterTransmit(WRITE);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	0e 94 29 09 	call	0x1252	; 0x1252 <spi_MasterTransmit>
	spi_MasterTransmit(address);
    11b2:	8d 2f       	mov	r24, r29
    11b4:	0e 94 29 09 	call	0x1252	; 0x1252 <spi_MasterTransmit>
	spi_MasterTransmit(data);
    11b8:	8c 2f       	mov	r24, r28
    11ba:	0e 94 29 09 	call	0x1252	; 0x1252 <spi_MasterTransmit>

	deselectSlave();
    11be:	0e 94 ce 08 	call	0x119c	; 0x119c <deselectSlave>
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <mcp_read>:

uint8_t mcp_read(uint8_t address)
{
    11c8:	cf 93       	push	r28
    11ca:	c8 2f       	mov	r28, r24
	selectSlave();
    11cc:	0e 94 cc 08 	call	0x1198	; 0x1198 <selectSlave>

	spi_MasterTransmit(READ);
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	0e 94 29 09 	call	0x1252	; 0x1252 <spi_MasterTransmit>
	spi_MasterTransmit(address);
    11d6:	8c 2f       	mov	r24, r28
    11d8:	0e 94 29 09 	call	0x1252	; 0x1252 <spi_MasterTransmit>

	uint8_t received_char = spi_SlaveReceive();
    11dc:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_SlaveReceive>
    11e0:	c8 2f       	mov	r28, r24

	deselectSlave();
    11e2:	0e 94 ce 08 	call	0x119c	; 0x119c <deselectSlave>

	return received_char;
}
    11e6:	8c 2f       	mov	r24, r28
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <mcp_reset>:
#else
	#define SPI_SS PB4
#endif

void mcp_reset(void)
{
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	1f 92       	push	r1
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	selectSlave();
    11f6:	0e 94 cc 08 	call	0x1198	; 0x1198 <selectSlave>

	spi_MasterTransmit(RESET);
    11fa:	80 ec       	ldi	r24, 0xC0	; 192
    11fc:	0e 94 29 09 	call	0x1252	; 0x1252 <spi_MasterTransmit>

	deselectSlave();
    1200:	0e 94 ce 08 	call	0x119c	; 0x119c <deselectSlave>
    1204:	8c ec       	ldi	r24, 0xCC	; 204
    1206:	94 e0       	ldi	r25, 0x04	; 4
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <mcp_reset+0x1c>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <mcp_reset+0x22>
    120e:	00 00       	nop

	_delay_ms(1);

	//Self-test
	volatile uint8_t canstat;
	canstat = mcp_read(MCP_CANSTAT);
    1210:	8e e0       	ldi	r24, 0x0E	; 14
    1212:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <mcp_read>
    1216:	89 83       	std	Y+1, r24	; 0x01
	if ((canstat & MODE_MASK) != MODE_CONFIG) {
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	80 7e       	andi	r24, 0xE0	; 224
    121c:	80 38       	cpi	r24, 0x80	; 128
    121e:	21 f0       	breq	.+8      	; 0x1228 <mcp_reset+0x3c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    1220:	8a e4       	ldi	r24, 0x4A	; 74
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>
	}
}
    1228:	0f 90       	pop	r0
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <mcp_init>:

void mcp_init(void)
{
	spi_init();
    1230:	0e 94 26 09 	call	0x124c	; 0x124c <spi_init>
	mcp_reset();
    1234:	0e 94 f6 08 	call	0x11ec	; 0x11ec <mcp_reset>
    1238:	08 95       	ret

0000123a <spi_Masterinit>:
	SPCR = (1 << SPE);
}

void spi_Masterinit(void)
{
	DDRB = 0xFF;
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	87 bb       	out	0x17, r24	; 23

	//set MOSI, SCK and SS output, all others input
	DDR_SPI |= (1 << DD_SS) | (1 << DD_MOSI) | (1 << DD_SCK);
    123e:	87 b3       	in	r24, 0x17	; 23
    1240:	80 6b       	ori	r24, 0xB0	; 176
    1242:	87 bb       	out	0x17, r24	; 23

	//enable SPI, Master, set clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1244:	8d b1       	in	r24, 0x0d	; 13
    1246:	81 65       	ori	r24, 0x51	; 81
    1248:	8d b9       	out	0x0d, r24	; 13
    124a:	08 95       	ret

0000124c <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
    124c:	0e 94 1d 09 	call	0x123a	; 0x123a <spi_Masterinit>
    1250:	08 95       	ret

00001252 <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	//start transmission
	SPDR = cData;
    1252:	8f b9       	out	0x0f, r24	; 15

	//wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
    1254:	77 9b       	sbis	0x0e, 7	; 14
    1256:	fe cf       	rjmp	.-4      	; 0x1254 <spi_MasterTransmit+0x2>
}
    1258:	08 95       	ret

0000125a <spi_SlaveReceive>:

char spi_SlaveReceive(void)
{
	//send dummy data
	SPDR = 0xFF;
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	8f b9       	out	0x0f, r24	; 15

	//wait for reception complete
	while(!(SPSR & (1 << SPIF)));
    125e:	77 9b       	sbis	0x0e, 7	; 14
    1260:	fe cf       	rjmp	.-4      	; 0x125e <spi_SlaveReceive+0x4>

	//return data register
	return SPDR;
    1262:	8f b1       	in	r24, 0x0f	; 15
}
    1264:	08 95       	ret

00001266 <draw_one_bit_buffer>:

void draw_one_bit_buffer(POS bit)
{
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
    1266:	90 34       	cpi	r25, 0x40	; 64
    1268:	10 f4       	brcc	.+4      	; 0x126e <draw_one_bit_buffer+0x8>
    126a:	88 23       	and	r24, r24
    126c:	8c f4       	brge	.+34     	; 0x1290 <draw_one_bit_buffer+0x2a>
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
    126e:	1f 92       	push	r1
    1270:	9f 93       	push	r25
    1272:	1f 92       	push	r1
    1274:	8f 93       	push	r24
    1276:	8c e7       	ldi	r24, 0x7C	; 124
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	9f 93       	push	r25
    127c:	8f 93       	push	r24
    127e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <printf>
		return;
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	08 95       	ret
	}
    start = start_calc(bit);
    res |= (1 << start);
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    1290:	29 2f       	mov	r18, r25
    1292:	26 95       	lsr	r18
    1294:	26 95       	lsr	r18
    1296:	26 95       	lsr	r18
    1298:	e8 2f       	mov	r30, r24
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	60 e8       	ldi	r22, 0x80	; 128
    129e:	26 9f       	mul	r18, r22
    12a0:	e0 0d       	add	r30, r0
    12a2:	f1 1d       	adc	r31, r1
    12a4:	11 24       	eor	r1, r1
    12a6:	20 91 09 01 	lds	r18, 0x0109
    12aa:	30 91 0a 01 	lds	r19, 0x010A
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	40 81       	ld	r20, Z
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
    12b4:	97 70       	andi	r25, 0x07	; 7
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	b9 01       	movw	r22, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <draw_one_bit_buffer+0x5c>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	9a 95       	dec	r25
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <draw_one_bit_buffer+0x58>
    12c6:	cb 01       	movw	r24, r22
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    12c8:	84 2b       	or	r24, r20
    12ca:	80 83       	st	Z, r24
    12cc:	08 95       	ret

000012ce <draw_rectangle_buffer>:
    bit_page = abs(rect.Ly - (start_calc(rect.pos)));
    return bit_page;
}

void draw_rectangle_buffer(RECT rect)
{
    12ce:	2f 92       	push	r2
    12d0:	3f 92       	push	r3
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	28 97       	sbiw	r28, 0x08	; 8
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	8d 83       	std	Y+5, r24	; 0x05
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    1304:	a4 2e       	mov	r10, r20
    1306:	b1 2c       	mov	r11, r1
    1308:	c5 01       	movw	r24, r10
    130a:	86 0f       	add	r24, r22
    130c:	91 1d       	adc	r25, r1
    130e:	9f 83       	std	Y+7, r25	; 0x07
    1310:	8e 83       	std	Y+6, r24	; 0x06
    1312:	a8 16       	cp	r10, r24
    1314:	b9 06       	cpc	r11, r25
    1316:	0c f0       	brlt	.+2      	; 0x131a <draw_rectangle_buffer+0x4c>
    1318:	4e c0       	rjmp	.+156    	; 0x13b6 <draw_rectangle_buffer+0xe8>
    131a:	75 01       	movw	r14, r10
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    131c:	85 2e       	mov	r8, r21
    131e:	91 2c       	mov	r9, r1
    1320:	64 01       	movw	r12, r8
    1322:	c7 0e       	add	r12, r23
    1324:	d1 1c       	adc	r13, r1
    1326:	25 2e       	mov	r2, r21
    1328:	98 86       	std	Y+8, r9	; 0x08
				draw_one_bit_buffer(current);
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    132a:	3c 01       	movw	r6, r24
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	69 1a       	sub	r6, r25
    1330:	71 08       	sbc	r7, r1
    1332:	26 01       	movw	r4, r12
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	48 1a       	sub	r4, r24
    1338:	51 08       	sbc	r5, r1
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    133a:	8c 14       	cp	r8, r12
    133c:	9d 04       	cpc	r9, r13
    133e:	9c f5       	brge	.+102    	; 0x13a6 <draw_rectangle_buffer+0xd8>
    1340:	02 2d       	mov	r16, r2
    1342:	18 85       	ldd	r17, Y+8	; 0x08
      {
		current.x = i;
    1344:	3e 2c       	mov	r3, r14
		current.y = j;
    1346:	90 2f       	mov	r25, r16
		switch(rect.full)
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	41 f0       	breq	.+16     	; 0x135e <draw_rectangle_buffer+0x90>
    134e:	18 f0       	brcs	.+6      	; 0x1356 <draw_rectangle_buffer+0x88>
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	a9 f0       	breq	.+42     	; 0x137e <draw_rectangle_buffer+0xb0>
    1354:	23 c0       	rjmp	.+70     	; 0x139c <draw_rectangle_buffer+0xce>
		{
			case(FULL):
			{
				draw_one_bit_buffer(current);
    1356:	83 2d       	mov	r24, r3
    1358:	0e 94 33 09 	call	0x1266	; 0x1266 <draw_one_bit_buffer>
				break;
    135c:	1f c0       	rjmp	.+62     	; 0x139c <draw_rectangle_buffer+0xce>
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    135e:	ea 14       	cp	r14, r10
    1360:	fb 04       	cpc	r15, r11
    1362:	49 f0       	breq	.+18     	; 0x1376 <draw_rectangle_buffer+0xa8>
    1364:	08 15       	cp	r16, r8
    1366:	19 05       	cpc	r17, r9
    1368:	31 f0       	breq	.+12     	; 0x1376 <draw_rectangle_buffer+0xa8>
    136a:	6e 14       	cp	r6, r14
    136c:	7f 04       	cpc	r7, r15
    136e:	19 f0       	breq	.+6      	; 0x1376 <draw_rectangle_buffer+0xa8>
    1370:	40 16       	cp	r4, r16
    1372:	51 06       	cpc	r5, r17
    1374:	99 f4       	brne	.+38     	; 0x139c <draw_rectangle_buffer+0xce>
				draw_one_bit_buffer(current);
    1376:	83 2d       	mov	r24, r3
    1378:	0e 94 33 09 	call	0x1266	; 0x1266 <draw_one_bit_buffer>
    137c:	0f c0       	rjmp	.+30     	; 0x139c <draw_rectangle_buffer+0xce>
				break;
			}
			case(TRI_EMPT):
			{
				if(((i == rect.pos.x) && (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) && (j == rect.Ly + rect.pos.y - 1)))
    137e:	ea 14       	cp	r14, r10
    1380:	fb 04       	cpc	r15, r11
    1382:	19 f4       	brne	.+6      	; 0x138a <draw_rectangle_buffer+0xbc>
    1384:	08 15       	cp	r16, r8
    1386:	19 05       	cpc	r17, r9
    1388:	31 f0       	breq	.+12     	; 0x1396 <draw_rectangle_buffer+0xc8>
    138a:	6e 14       	cp	r6, r14
    138c:	7f 04       	cpc	r7, r15
    138e:	31 f4       	brne	.+12     	; 0x139c <draw_rectangle_buffer+0xce>
    1390:	40 16       	cp	r4, r16
    1392:	51 06       	cpc	r5, r17
    1394:	19 f4       	brne	.+6      	; 0x139c <draw_rectangle_buffer+0xce>
				draw_one_bit_buffer(current);
    1396:	83 2d       	mov	r24, r3
    1398:	0e 94 33 09 	call	0x1266	; 0x1266 <draw_one_bit_buffer>
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    139c:	0f 5f       	subi	r16, 0xFF	; 255
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	0c 15       	cp	r16, r12
    13a2:	1d 05       	cpc	r17, r13
    13a4:	84 f2       	brlt	.-96     	; 0x1346 <draw_rectangle_buffer+0x78>
{
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	e9 1a       	sub	r14, r25
    13aa:	f9 0a       	sbc	r15, r25
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	e8 16       	cp	r14, r24
    13b2:	f9 06       	cpc	r15, r25
    13b4:	14 f2       	brlt	.-124    	; 0x133a <draw_rectangle_buffer+0x6c>
				draw_one_bit_buffer(current);
				break;
			}
			}
      }
}
    13b6:	28 96       	adiw	r28, 0x08	; 8
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	9f 90       	pop	r9
    13d8:	8f 90       	pop	r8
    13da:	7f 90       	pop	r7
    13dc:	6f 90       	pop	r6
    13de:	5f 90       	pop	r5
    13e0:	4f 90       	pop	r4
    13e2:	3f 90       	pop	r3
    13e4:	2f 90       	pop	r2
    13e6:	08 95       	ret

000013e8 <draw_triangle_buffer>:
  		current = circ.pos;
  	} while(flag > 4);
}

void draw_triangle_buffer(TRI tri)
{
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2a 97       	sbiw	r28, 0x0a	; 10
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    RECT rect;
	int i=0;
    rect.pos.x = tri.pos.x;
    1406:	e4 2e       	mov	r14, r20
    rect.pos.y = tri.pos.y;
    rect.full = tri.full;
    1408:	7d 83       	std	Y+5, r23	; 0x05
    switch (tri.ori)
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	51 f0       	breq	.+20     	; 0x1422 <draw_triangle_buffer+0x3a>
    140e:	18 f4       	brcc	.+6      	; 0x1416 <draw_triangle_buffer+0x2e>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	e9 f0       	breq	.+58     	; 0x144e <draw_triangle_buffer+0x66>
    1414:	59 c0       	rjmp	.+178    	; 0x14c8 <draw_triangle_buffer+0xe0>
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	09 f4       	brne	.+2      	; 0x141c <draw_triangle_buffer+0x34>
    141a:	43 c0       	rjmp	.+134    	; 0x14a2 <draw_triangle_buffer+0xba>
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	59 f1       	breq	.+86     	; 0x1476 <draw_triangle_buffer+0x8e>
    1420:	53 c0       	rjmp	.+166    	; 0x14c8 <draw_triangle_buffer+0xe0>
    {
        case RIGHT:
        {
            rect.Lx = 1;
            rect.Ly = tri.l;
			i = rect.Ly;
    1422:	06 2f       	mov	r16, r22
    1424:	10 e0       	ldi	r17, 0x00	; 0
    1426:	f4 2e       	mov	r15, r20
    1428:	d5 2e       	mov	r13, r21
    142a:	d4 1a       	sub	r13, r20
            do
            {
                draw_rectangle_buffer(rect);
    142c:	ee 24       	eor	r14, r14
    142e:	e3 94       	inc	r14
    1430:	5d 2d       	mov	r21, r13
    1432:	5f 0d       	add	r21, r15
    1434:	4f 2d       	mov	r20, r15
    1436:	6e 2d       	mov	r22, r14
    1438:	70 2f       	mov	r23, r16
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
                rect.Ly -= 2;
				i -= 2;
    1440:	02 50       	subi	r16, 0x02	; 2
    1442:	11 09       	sbc	r17, r1
    1444:	f3 94       	inc	r15
                rect.pos.y++;
                rect.pos.x++;
            }
            while(i > 0);
    1446:	10 16       	cp	r1, r16
    1448:	11 06       	cpc	r1, r17
    144a:	94 f3       	brlt	.-28     	; 0x1430 <draw_triangle_buffer+0x48>
    144c:	3d c0       	rjmp	.+122    	; 0x14c8 <draw_triangle_buffer+0xe0>
        }
        case LEFT:
        {
            rect.Lx = 1;
            rect.Ly = tri.l;
            i = rect.Ly;
    144e:	06 2f       	mov	r16, r22
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	f5 2e       	mov	r15, r21
			do
            {
                draw_rectangle_buffer(rect);
    1454:	dd 24       	eor	r13, r13
    1456:	d3 94       	inc	r13
    1458:	4e 2d       	mov	r20, r14
    145a:	5f 2d       	mov	r21, r15
    145c:	6d 2d       	mov	r22, r13
    145e:	70 2f       	mov	r23, r16
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
                rect.Ly -= 2;
				i -= 2;
    1466:	02 50       	subi	r16, 0x02	; 2
    1468:	11 09       	sbc	r17, r1
    146a:	f3 94       	inc	r15
    146c:	ea 94       	dec	r14
                rect.pos.y++;
                rect.pos.x--;
            }
            while(i > 0);
    146e:	10 16       	cp	r1, r16
    1470:	11 06       	cpc	r1, r17
    1472:	94 f3       	brlt	.-28     	; 0x1458 <draw_triangle_buffer+0x70>
    1474:	29 c0       	rjmp	.+82     	; 0x14c8 <draw_triangle_buffer+0xe0>
        }
        case DOWN:
        {
            rect.Ly = 1;
            rect.Lx = tri.l;
			i = rect.Lx;
    1476:	06 2f       	mov	r16, r22
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	f4 2e       	mov	r15, r20
    147c:	d5 2e       	mov	r13, r21
    147e:	d4 1a       	sub	r13, r20
            do
            {
                draw_rectangle_buffer(rect);
    1480:	ee 24       	eor	r14, r14
    1482:	e3 94       	inc	r14
    1484:	5d 2d       	mov	r21, r13
    1486:	5f 0d       	add	r21, r15
    1488:	4f 2d       	mov	r20, r15
    148a:	60 2f       	mov	r22, r16
    148c:	7e 2d       	mov	r23, r14
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
                rect.Lx -= 2;
				i -= 2;
    1494:	02 50       	subi	r16, 0x02	; 2
    1496:	11 09       	sbc	r17, r1
    1498:	f3 94       	inc	r15
                rect.pos.y++;
                rect.pos.x++;
            }
            while(i > 0);
    149a:	10 16       	cp	r1, r16
    149c:	11 06       	cpc	r1, r17
    149e:	94 f3       	brlt	.-28     	; 0x1484 <draw_triangle_buffer+0x9c>
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <draw_triangle_buffer+0xe0>
        }
        case UP:
        {
            rect.Ly = 1;
            rect.Lx = tri.l;
            i = rect.Lx;
    14a2:	06 2f       	mov	r16, r22
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	f5 2e       	mov	r15, r21
			do
            {
                draw_rectangle_buffer(rect);
    14a8:	dd 24       	eor	r13, r13
    14aa:	d3 94       	inc	r13
    14ac:	4e 2d       	mov	r20, r14
    14ae:	5f 2d       	mov	r21, r15
    14b0:	60 2f       	mov	r22, r16
    14b2:	7d 2d       	mov	r23, r13
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	0e 94 67 09 	call	0x12ce	; 0x12ce <draw_rectangle_buffer>
                rect.Lx -= 2;
				i -= 2;
    14ba:	02 50       	subi	r16, 0x02	; 2
    14bc:	11 09       	sbc	r17, r1
    14be:	fa 94       	dec	r15
    14c0:	e3 94       	inc	r14
                rect.pos.y--;
                rect.pos.x++;
            }
            while(i > 0);
    14c2:	10 16       	cp	r1, r16
    14c4:	11 06       	cpc	r1, r17
    14c6:	94 f3       	brlt	.-28     	; 0x14ac <draw_triangle_buffer+0xc4>
        default:
        {
            break;
        }
    }
}
    14c8:	2a 96       	adiw	r28, 0x0a	; 10
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	08 95       	ret

000014e4 <assignParents>:
	_mnode->m_content.operation = operation;
	return _mnode;
}

static void assignParents(MenuNode* node)
{
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	ec 01       	movw	r28, r24
	if(node)
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	f9 f0       	breq	.+62     	; 0x152e <assignParents+0x4a>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    14f0:	8f 81       	ldd	r24, Y+7	; 0x07
    14f2:	88 23       	and	r24, r24
    14f4:	01 f1       	breq	.+64     	; 0x1536 <assignParents+0x52>
    14f6:	10 e0       	ldi	r17, 0x00	; 0
		{
			node->m_submenus[i]->m_parent = node;
    14f8:	81 2f       	mov	r24, r17
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	ed 81       	ldd	r30, Y+5	; 0x05
    1502:	fe 81       	ldd	r31, Y+6	; 0x06
    1504:	e8 0f       	add	r30, r24
    1506:	f9 1f       	adc	r31, r25
    1508:	01 90       	ld	r0, Z+
    150a:	f0 81       	ld	r31, Z
    150c:	e0 2d       	mov	r30, r0
    150e:	d4 83       	std	Z+4, r29	; 0x04
    1510:	c3 83       	std	Z+3, r28	; 0x03
			assignParents(node->m_submenus[i]);
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	f9 01       	movw	r30, r18
    1518:	e8 0f       	add	r30, r24
    151a:	f9 1f       	adc	r31, r25
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <assignParents>

static void assignParents(MenuNode* node)
{
	if(node)
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1524:	1f 5f       	subi	r17, 0xFF	; 255
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	18 17       	cp	r17, r24
    152a:	30 f3       	brcs	.-52     	; 0x14f8 <assignParents+0x14>
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <assignParents+0x52>
			node->m_submenus[i]->m_parent = node;
			assignParents(node->m_submenus[i]);
		}
	}
	if(!node)
		printf("NULL node\n");
    152e:	80 ea       	ldi	r24, 0xA0	; 160
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	08 95       	ret

0000153e <createMenuNode>:
extern void ping_pong_idle(void);

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	e8 2e       	mov	r14, r24
    154c:	8b 01       	movw	r16, r22
    154e:	f4 2e       	mov	r15, r20
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1550:	88 e0       	ldi	r24, 0x08	; 8
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <malloc>
    1558:	ec 01       	movw	r28, r24
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    155a:	8f 2d       	mov	r24, r15
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <malloc>
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
	_mnode->m_num_submenus = num_of_submenus;
    156a:	ff 82       	std	Y+7, r15	; 0x07
	_mnode->m_content.title_id = title_id;
    156c:	e8 82       	st	Y, r14
	_mnode->m_content.operation = operation;
    156e:	1a 83       	std	Y+2, r17	; 0x02
    1570:	09 83       	std	Y+1, r16	; 0x01
	return _mnode;
}
    1572:	ce 01       	movw	r24, r28
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	08 95       	ret

00001582 <createMenu>:
	return _menu;
}


void createMenu(void)
{
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
	_menu = createMenuNode(0, NULL, 4);
    158a:	44 e0       	ldi	r20, 0x04	; 4
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    1596:	ec 01       	movw	r28, r24
    1598:	90 93 ff 02 	sts	0x02FF, r25
    159c:	80 93 fe 02 	sts	0x02FE, r24
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
    15a0:	0d 81       	ldd	r16, Y+5	; 0x05
    15a2:	1e 81       	ldd	r17, Y+6	; 0x06
    15a4:	42 e0       	ldi	r20, 0x02	; 2
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    15b0:	f8 01       	movw	r30, r16
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	80 83       	st	Z, r24
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, NULL, 0);
    15b6:	ed 81       	ldd	r30, Y+5	; 0x05
    15b8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ba:	01 90       	ld	r0, Z+
    15bc:	f0 81       	ld	r31, Z
    15be:	e0 2d       	mov	r30, r0
    15c0:	05 81       	ldd	r16, Z+5	; 0x05
    15c2:	16 81       	ldd	r17, Z+6	; 0x06
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    15d0:	f8 01       	movw	r30, r16
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &ping_pong_idle, 0);
    15d6:	ed 81       	ldd	r30, Y+5	; 0x05
    15d8:	fe 81       	ldd	r31, Y+6	; 0x06
    15da:	01 90       	ld	r0, Z+
    15dc:	f0 81       	ld	r31, Z
    15de:	e0 2d       	mov	r30, r0
    15e0:	05 81       	ldd	r16, Z+5	; 0x05
    15e2:	16 81       	ldd	r17, Z+6	; 0x06
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	6a e8       	ldi	r22, 0x8A	; 138
    15e8:	76 e0       	ldi	r23, 0x06	; 6
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    15f0:	f8 01       	movw	r30, r16
    15f2:	93 83       	std	Z+3, r25	; 0x03
    15f4:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
    15f6:	0d 81       	ldd	r16, Y+5	; 0x05
    15f8:	1e 81       	ldd	r17, Y+6	; 0x06
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	60 e6       	ldi	r22, 0x60	; 96
    15fe:	7d e0       	ldi	r23, 0x0D	; 13
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    1606:	f8 01       	movw	r30, r16
    1608:	93 83       	std	Z+3, r25	; 0x03
    160a:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
    160c:	0d 81       	ldd	r16, Y+5	; 0x05
    160e:	1e 81       	ldd	r17, Y+6	; 0x06
    1610:	44 e0       	ldi	r20, 0x04	; 4
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    161c:	f8 01       	movw	r30, r16
    161e:	95 83       	std	Z+5, r25	; 0x05
    1620:	84 83       	std	Z+4, r24	; 0x04
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
    1622:	ed 81       	ldd	r30, Y+5	; 0x05
    1624:	fe 81       	ldd	r31, Y+6	; 0x06
    1626:	04 80       	ldd	r0, Z+4	; 0x04
    1628:	f5 81       	ldd	r31, Z+5	; 0x05
    162a:	e0 2d       	mov	r30, r0
    162c:	05 81       	ldd	r16, Z+5	; 0x05
    162e:	16 81       	ldd	r17, Z+6	; 0x06
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	62 e6       	ldi	r22, 0x62	; 98
    1634:	7d e0       	ldi	r23, 0x0D	; 13
    1636:	86 e0       	ldi	r24, 0x06	; 6
    1638:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    163c:	f8 01       	movw	r30, r16
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
    1642:	ed 81       	ldd	r30, Y+5	; 0x05
    1644:	fe 81       	ldd	r31, Y+6	; 0x06
    1646:	04 80       	ldd	r0, Z+4	; 0x04
    1648:	f5 81       	ldd	r31, Z+5	; 0x05
    164a:	e0 2d       	mov	r30, r0
    164c:	05 81       	ldd	r16, Z+5	; 0x05
    164e:	16 81       	ldd	r17, Z+6	; 0x06
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	61 e6       	ldi	r22, 0x61	; 97
    1654:	7d e0       	ldi	r23, 0x0D	; 13
    1656:	87 e0       	ldi	r24, 0x07	; 7
    1658:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    165c:	f8 01       	movw	r30, r16
    165e:	93 83       	std	Z+3, r25	; 0x03
    1660:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
    1662:	ed 81       	ldd	r30, Y+5	; 0x05
    1664:	fe 81       	ldd	r31, Y+6	; 0x06
    1666:	04 80       	ldd	r0, Z+4	; 0x04
    1668:	f5 81       	ldd	r31, Z+5	; 0x05
    166a:	e0 2d       	mov	r30, r0
    166c:	05 81       	ldd	r16, Z+5	; 0x05
    166e:	16 81       	ldd	r17, Z+6	; 0x06
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	6b e7       	ldi	r22, 0x7B	; 123
    1674:	7d e0       	ldi	r23, 0x0D	; 13
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    167c:	f8 01       	movw	r30, r16
    167e:	95 83       	std	Z+5, r25	; 0x05
    1680:	84 83       	std	Z+4, r24	; 0x04
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(9, NULL, 2);
    1682:	ed 81       	ldd	r30, Y+5	; 0x05
    1684:	fe 81       	ldd	r31, Y+6	; 0x06
    1686:	04 80       	ldd	r0, Z+4	; 0x04
    1688:	f5 81       	ldd	r31, Z+5	; 0x05
    168a:	e0 2d       	mov	r30, r0
    168c:	05 81       	ldd	r16, Z+5	; 0x05
    168e:	16 81       	ldd	r17, Z+6	; 0x06
    1690:	42 e0       	ldi	r20, 0x02	; 2
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	89 e0       	ldi	r24, 0x09	; 9
    1698:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    169c:	f8 01       	movw	r30, r16
    169e:	97 83       	std	Z+7, r25	; 0x07
    16a0:	86 83       	std	Z+6, r24	; 0x06
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[0] = createMenuNode(10, &calibrateLeftSlider, 0);
    16a2:	ed 81       	ldd	r30, Y+5	; 0x05
    16a4:	fe 81       	ldd	r31, Y+6	; 0x06
    16a6:	04 80       	ldd	r0, Z+4	; 0x04
    16a8:	f5 81       	ldd	r31, Z+5	; 0x05
    16aa:	e0 2d       	mov	r30, r0
    16ac:	05 80       	ldd	r0, Z+5	; 0x05
    16ae:	f6 81       	ldd	r31, Z+6	; 0x06
    16b0:	e0 2d       	mov	r30, r0
    16b2:	06 80       	ldd	r0, Z+6	; 0x06
    16b4:	f7 81       	ldd	r31, Z+7	; 0x07
    16b6:	e0 2d       	mov	r30, r0
    16b8:	05 81       	ldd	r16, Z+5	; 0x05
    16ba:	16 81       	ldd	r17, Z+6	; 0x06
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	69 e7       	ldi	r22, 0x79	; 121
    16c0:	7d e0       	ldi	r23, 0x0D	; 13
    16c2:	8a e0       	ldi	r24, 0x0A	; 10
    16c4:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    16c8:	f8 01       	movw	r30, r16
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[1] = createMenuNode(11, &calibrateRightSlider, 0);
    16ce:	ed 81       	ldd	r30, Y+5	; 0x05
    16d0:	fe 81       	ldd	r31, Y+6	; 0x06
    16d2:	04 80       	ldd	r0, Z+4	; 0x04
    16d4:	f5 81       	ldd	r31, Z+5	; 0x05
    16d6:	e0 2d       	mov	r30, r0
    16d8:	05 80       	ldd	r0, Z+5	; 0x05
    16da:	f6 81       	ldd	r31, Z+6	; 0x06
    16dc:	e0 2d       	mov	r30, r0
    16de:	06 80       	ldd	r0, Z+6	; 0x06
    16e0:	f7 81       	ldd	r31, Z+7	; 0x07
    16e2:	e0 2d       	mov	r30, r0
    16e4:	05 81       	ldd	r16, Z+5	; 0x05
    16e6:	16 81       	ldd	r17, Z+6	; 0x06
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	6a e7       	ldi	r22, 0x7A	; 122
    16ec:	7d e0       	ldi	r23, 0x0D	; 13
    16ee:	8b e0       	ldi	r24, 0x0B	; 11
    16f0:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    16f4:	f8 01       	movw	r30, r16
    16f6:	93 83       	std	Z+3, r25	; 0x03
    16f8:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[3] = createMenuNode(12, NULL, 4);
    16fa:	0d 81       	ldd	r16, Y+5	; 0x05
    16fc:	1e 81       	ldd	r17, Y+6	; 0x06
    16fe:	44 e0       	ldi	r20, 0x04	; 4
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	8c e0       	ldi	r24, 0x0C	; 12
    1706:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    170a:	f8 01       	movw	r30, r16
    170c:	97 83       	std	Z+7, r25	; 0x07
    170e:	86 83       	std	Z+6, r24	; 0x06
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode("Harry Potter", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode("Tetris", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode("Cantina Band", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode("Pokemon", &play_song, 0);
	*/
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
    1710:	ed 81       	ldd	r30, Y+5	; 0x05
    1712:	fe 81       	ldd	r31, Y+6	; 0x06
    1714:	06 80       	ldd	r0, Z+6	; 0x06
    1716:	f7 81       	ldd	r31, Z+7	; 0x07
    1718:	e0 2d       	mov	r30, r0
    171a:	05 81       	ldd	r16, Z+5	; 0x05
    171c:	16 81       	ldd	r17, Z+6	; 0x06
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	8d e0       	ldi	r24, 0x0D	; 13
    1726:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode(14, NULL, 0);
    1730:	ed 81       	ldd	r30, Y+5	; 0x05
    1732:	fe 81       	ldd	r31, Y+6	; 0x06
    1734:	06 80       	ldd	r0, Z+6	; 0x06
    1736:	f7 81       	ldd	r31, Z+7	; 0x07
    1738:	e0 2d       	mov	r30, r0
    173a:	05 81       	ldd	r16, Z+5	; 0x05
    173c:	16 81       	ldd	r17, Z+6	; 0x06
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	8e e0       	ldi	r24, 0x0E	; 14
    1746:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    174a:	f8 01       	movw	r30, r16
    174c:	93 83       	std	Z+3, r25	; 0x03
    174e:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode(15, NULL, 0);
    1750:	ed 81       	ldd	r30, Y+5	; 0x05
    1752:	fe 81       	ldd	r31, Y+6	; 0x06
    1754:	06 80       	ldd	r0, Z+6	; 0x06
    1756:	f7 81       	ldd	r31, Z+7	; 0x07
    1758:	e0 2d       	mov	r30, r0
    175a:	05 81       	ldd	r16, Z+5	; 0x05
    175c:	16 81       	ldd	r17, Z+6	; 0x06
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	8f e0       	ldi	r24, 0x0F	; 15
    1766:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    176a:	f8 01       	movw	r30, r16
    176c:	95 83       	std	Z+5, r25	; 0x05
    176e:	84 83       	std	Z+4, r24	; 0x04
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode(16, NULL, 0);
    1770:	ed 81       	ldd	r30, Y+5	; 0x05
    1772:	fe 81       	ldd	r31, Y+6	; 0x06
    1774:	06 80       	ldd	r0, Z+6	; 0x06
    1776:	f7 81       	ldd	r31, Z+7	; 0x07
    1778:	e0 2d       	mov	r30, r0
    177a:	05 81       	ldd	r16, Z+5	; 0x05
    177c:	16 81       	ldd	r17, Z+6	; 0x06
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	80 e1       	ldi	r24, 0x10	; 16
    1786:	0e 94 9f 0a 	call	0x153e	; 0x153e <createMenuNode>
    178a:	f8 01       	movw	r30, r16
    178c:	97 83       	std	Z+7, r25	; 0x07
    178e:	86 83       	std	Z+6, r24	; 0x06
	assignParents(_menu);
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <assignParents>
	printf("PARENTS ASSIGNED\n");
    1796:	8a ea       	ldi	r24, 0xAA	; 170
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>

}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <getMenuRoot>:
		printf("NULL node\n");
}

MenuNode* getMenuRoot(void)
{
	if(_menu == NULL)
    17a8:	80 91 fe 02 	lds	r24, 0x02FE
    17ac:	90 91 ff 02 	lds	r25, 0x02FF
    17b0:	89 2b       	or	r24, r25
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <getMenuRoot+0x10>
	{
		createMenu();
    17b4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <createMenu>
	}
	return _menu;
}
    17b8:	80 91 fe 02 	lds	r24, 0x02FE
    17bc:	90 91 ff 02 	lds	r25, 0x02FF
    17c0:	08 95       	ret

000017c2 <getNextEntry>:
	printf("PARENTS ASSIGNED\n");

}

MenuNode* getNextEntry(MenuNode* node)
{
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	dc 01       	movw	r26, r24
	if(node->m_parent)
    17c8:	13 96       	adiw	r26, 0x03	; 3
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	14 97       	sbiw	r26, 0x04	; 4
    17d0:	30 97       	sbiw	r30, 0x00	; 0
    17d2:	81 f1       	breq	.+96     	; 0x1834 <getNextEntry+0x72>
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
    17d4:	87 81       	ldd	r24, Z+7	; 0x07
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	18 16       	cp	r1, r24
    17dc:	19 06       	cpc	r1, r25
    17de:	64 f5       	brge	.+88     	; 0x1838 <getNextEntry+0x76>
			if(node->m_parent->m_submenus[i] == node)
    17e0:	c5 81       	ldd	r28, Z+5	; 0x05
    17e2:	d6 81       	ldd	r29, Z+6	; 0x06
    17e4:	28 81       	ld	r18, Y
    17e6:	39 81       	ldd	r19, Y+1	; 0x01
    17e8:	2a 17       	cp	r18, r26
    17ea:	3b 07       	cpc	r19, r27
    17ec:	c9 f4       	brne	.+50     	; 0x1820 <getNextEntry+0x5e>
    17ee:	0d c0       	rjmp	.+26     	; 0x180a <getNextEntry+0x48>
    17f0:	26 2f       	mov	r18, r22
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	ec 0f       	add	r30, r28
    17fc:	fd 1f       	adc	r31, r29
    17fe:	40 81       	ld	r20, Z
    1800:	51 81       	ldd	r21, Z+1	; 0x01
    1802:	4a 17       	cp	r20, r26
    1804:	5b 07       	cpc	r21, r27
    1806:	69 f4       	brne	.+26     	; 0x1822 <getNextEntry+0x60>
    1808:	02 c0       	rjmp	.+4      	; 0x180e <getNextEntry+0x4c>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
	  		return node->m_parent->m_submenus[i+1];
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	c2 0f       	add	r28, r18
    1818:	d3 1f       	adc	r29, r19
    181a:	88 81       	ld	r24, Y
    181c:	99 81       	ldd	r25, Y+1	; 0x01
    181e:	0e c0       	rjmp	.+28     	; 0x183c <getNextEntry+0x7a>

MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
			if(node->m_parent->m_submenus[i] == node)
    1820:	60 e0       	ldi	r22, 0x00	; 0
}

MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	26 2f       	mov	r18, r22
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	28 17       	cp	r18, r24
    182a:	39 07       	cpc	r19, r25
    182c:	0c f3       	brlt	.-62     	; 0x17f0 <getNextEntry+0x2e>
			if(node->m_parent->m_submenus[i] == node)
	  		return node->m_parent->m_submenus[i+1];
	return node;
    182e:	8a 2f       	mov	r24, r26
    1830:	9b 2f       	mov	r25, r27
    1832:	04 c0       	rjmp	.+8      	; 0x183c <getNextEntry+0x7a>
    1834:	9b 2f       	mov	r25, r27
    1836:	02 c0       	rjmp	.+4      	; 0x183c <getNextEntry+0x7a>
    1838:	8a 2f       	mov	r24, r26
    183a:	9b 2f       	mov	r25, r27
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <getPreviousEntry>:

MenuNode* getPreviousEntry(MenuNode* node)
{
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	dc 01       	movw	r26, r24
	if(node->m_parent)
    184a:	13 96       	adiw	r26, 0x03	; 3
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	14 97       	sbiw	r26, 0x04	; 4
    1852:	30 97       	sbiw	r30, 0x00	; 0
    1854:	51 f1       	breq	.+84     	; 0x18aa <getPreviousEntry+0x68>
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
    1856:	17 81       	ldd	r17, Z+7	; 0x07
    1858:	12 30       	cpi	r17, 0x02	; 2
    185a:	48 f1       	brcs	.+82     	; 0x18ae <getPreviousEntry+0x6c>
			if(node->m_parent->m_submenus[i] == node)
    185c:	c5 81       	ldd	r28, Z+5	; 0x05
    185e:	d6 81       	ldd	r29, Z+6	; 0x06
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	8a 17       	cp	r24, r26
    1866:	9b 07       	cpc	r25, r27
    1868:	b9 f4       	brne	.+46     	; 0x1898 <getPreviousEntry+0x56>
    186a:	0a c0       	rjmp	.+20     	; 0x1880 <getPreviousEntry+0x3e>
    186c:	41 91       	ld	r20, Z+
    186e:	51 91       	ld	r21, Z+
    1870:	b9 01       	movw	r22, r18
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	4a 17       	cp	r20, r26
    1878:	5b 07       	cpc	r21, r27
    187a:	21 f0       	breq	.+8      	; 0x1884 <getPreviousEntry+0x42>
    187c:	9b 01       	movw	r18, r22
    187e:	10 c0       	rjmp	.+32     	; 0x18a0 <getPreviousEntry+0x5e>
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	30 e0       	ldi	r19, 0x00	; 0
				return node->m_parent->m_submenus[i-1];
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	30 48       	sbci	r19, 0x80	; 128
    1888:	c9 01       	movw	r24, r18
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	c8 0f       	add	r28, r24
    1890:	d9 1f       	adc	r29, r25
    1892:	88 81       	ld	r24, Y
    1894:	99 81       	ldd	r25, Y+1	; 0x01
    1896:	0c c0       	rjmp	.+24     	; 0x18b0 <getPreviousEntry+0x6e>
    1898:	fe 01       	movw	r30, r28
    189a:	34 96       	adiw	r30, 0x04	; 4

MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
			if(node->m_parent->m_submenus[i] == node)
    189c:	22 e0       	ldi	r18, 0x02	; 2
    189e:	30 e0       	ldi	r19, 0x00	; 0
}

MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
    18a0:	21 17       	cp	r18, r17
    18a2:	20 f3       	brcs	.-56     	; 0x186c <getPreviousEntry+0x2a>
			if(node->m_parent->m_submenus[i] == node)
				return node->m_parent->m_submenus[i-1];
	return node;
    18a4:	8a 2f       	mov	r24, r26
    18a6:	9b 2f       	mov	r25, r27
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <getPreviousEntry+0x6e>
    18aa:	9b 2f       	mov	r25, r27
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <getPreviousEntry+0x6e>
    18ae:	9b 2f       	mov	r25, r27
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	08 95       	ret

000018b8 <menuLevelDown>:

MenuNode* menuLevelDown(MenuNode* const node, uint8_t index_of_submenu)
{
    18b8:	fc 01       	movw	r30, r24
	if(0 <= index_of_submenu && index_of_submenu <= node->m_num_submenus)
    18ba:	87 81       	ldd	r24, Z+7	; 0x07
    18bc:	86 17       	cp	r24, r22
    18be:	60 f0       	brcs	.+24     	; 0x18d8 <menuLevelDown+0x20>
		return node->m_submenus[index_of_submenu];
    18c0:	86 2f       	mov	r24, r22
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	05 80       	ldd	r0, Z+5	; 0x05
    18ca:	f6 81       	ldd	r31, Z+6	; 0x06
    18cc:	e0 2d       	mov	r30, r0
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	08 95       	ret
	return node;
    18d8:	8e 2f       	mov	r24, r30
    18da:	9f 2f       	mov	r25, r31
}
    18dc:	08 95       	ret

000018de <menuLevelUp>:

MenuNode* menuLevelUp(MenuNode* const node)
{
    18de:	fc 01       	movw	r30, r24
	if(node->m_parent)
    18e0:	83 81       	ldd	r24, Z+3	; 0x03
    18e2:	94 81       	ldd	r25, Z+4	; 0x04
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	09 f4       	brne	.+2      	; 0x18ea <menuLevelUp+0xc>
		return node->m_parent;
	return node;
    18e8:	cf 01       	movw	r24, r30
}
    18ea:	08 95       	ret

000018ec <main_init>:

uint8_t highscore[7] = { 0, 0, 0, 0, 0, 0, 0 };

void main_init(void)
{
	uart_init();
    18ec:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_init>
	sram_init();
    18f0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sram_init>
	adc_init();
    18f4:	0e 94 c4 02 	call	0x588	; 0x588 <adc_init>
	USB_init();
    18f8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <USB_init>
	can_init();
    18fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <can_init>
	sei();
    1900:	78 94       	sei
	oled_init();
    1902:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_init>
	menu_main = getMenuRoot();
    1906:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <getMenuRoot>
    190a:	90 93 46 03 	sts	0x0346, r25
    190e:	80 93 45 03 	sts	0x0345, r24
	printf("INIT DONE\n");
    1912:	8b eb       	ldi	r24, 0xBB	; 187
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>
    191a:	2f ef       	ldi	r18, 0xFF	; 255
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	9e e0       	ldi	r25, 0x0E	; 14
    1920:	21 50       	subi	r18, 0x01	; 1
    1922:	80 40       	sbci	r24, 0x00	; 0
    1924:	90 40       	sbci	r25, 0x00	; 0
    1926:	e1 f7       	brne	.-8      	; 0x1920 <main_init+0x34>
    1928:	00 c0       	rjmp	.+0      	; 0x192a <main_init+0x3e>
    192a:	00 00       	nop
    192c:	08 95       	ret

0000192e <__vector_default>:
	_delay_ms(1000);
}

/* interrupt service routine catching undefined interrupts */
ISR(BADISR_vect)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
	//printf("Got undefined interrupts\n");
}
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <main>:
	can_message_send(slid_msg);
}

int main(void)
{
	main_init();
    1942:	0e 94 76 0c 	call	0x18ec	; 0x18ec <main_init>

		joy_pos = JOY_getPosition();
		//sendJoyPos();
		_delay_ms(10);

		switch(joy_pos.dir)
    1946:	cb e4       	ldi	r28, 0x4B	; 75
    1948:	d3 e0       	ldi	r29, 0x03	; 3
	}*/

	while(1)
	{

		joy_pos = JOY_getPosition();
    194a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <JOY_getPosition>
    194e:	60 93 49 03 	sts	0x0349, r22
    1952:	70 93 4a 03 	sts	0x034A, r23
    1956:	80 93 4b 03 	sts	0x034B, r24
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	9f e2       	ldi	r25, 0x2F	; 47
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <main+0x1c>
    1962:	00 c0       	rjmp	.+0      	; 0x1964 <main+0x22>
    1964:	00 00       	nop
		//sendJoyPos();
		_delay_ms(10);

		switch(joy_pos.dir)
    1966:	88 81       	ld	r24, Y
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	59 f1       	breq	.+86     	; 0x19c2 <main+0x80>
    196c:	20 f4       	brcc	.+8      	; 0x1976 <main+0x34>
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	09 f4       	brne	.+2      	; 0x1974 <main+0x32>
    1972:	81 c0       	rjmp	.+258    	; 0x1a76 <main+0x134>
    1974:	91 c0       	rjmp	.+290    	; 0x1a98 <main+0x156>
    1976:	83 30       	cpi	r24, 0x03	; 3
    1978:	21 f0       	breq	.+8      	; 0x1982 <main+0x40>
    197a:	84 30       	cpi	r24, 0x04	; 4
    197c:	09 f4       	brne	.+2      	; 0x1980 <main+0x3e>
    197e:	5a c0       	rjmp	.+180    	; 0x1a34 <main+0xf2>
    1980:	8b c0       	rjmp	.+278    	; 0x1a98 <main+0x156>
		{
			case UP:
			{
				current_selection = current_selection == 0 ? menu_main->m_num_submenus-1 : current_selection-1;
    1982:	e0 91 00 03 	lds	r30, 0x0300
    1986:	e1 11       	cpse	r30, r1
    1988:	07 c0       	rjmp	.+14     	; 0x1998 <main+0x56>
    198a:	e0 91 45 03 	lds	r30, 0x0345
    198e:	f0 91 46 03 	lds	r31, 0x0346
    1992:	e7 81       	ldd	r30, Z+7	; 0x07
    1994:	e1 50       	subi	r30, 0x01	; 1
    1996:	01 c0       	rjmp	.+2      	; 0x199a <main+0x58>
    1998:	e1 50       	subi	r30, 0x01	; 1
    199a:	e0 93 00 03 	sts	0x0300, r30
				getPreviousEntry(menu_main->m_submenus[current_selection]);
    199e:	a0 91 45 03 	lds	r26, 0x0345
    19a2:	b0 91 46 03 	lds	r27, 0x0346
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	15 96       	adiw	r26, 0x05	; 5
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	16 97       	sbiw	r26, 0x06	; 6
    19b4:	e8 0f       	add	r30, r24
    19b6:	f9 1f       	adc	r31, r25
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	0e 94 21 0c 	call	0x1842	; 0x1842 <getPreviousEntry>
				break;
    19c0:	6b c0       	rjmp	.+214    	; 0x1a98 <main+0x156>
			}
			case RIGHT:
			{
				if(menuLevelDown(menu_main, current_selection)->m_num_submenus > 0)
    19c2:	60 91 00 03 	lds	r22, 0x0300
    19c6:	80 91 45 03 	lds	r24, 0x0345
    19ca:	90 91 46 03 	lds	r25, 0x0346
    19ce:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <menuLevelDown>
    19d2:	dc 01       	movw	r26, r24
    19d4:	17 96       	adiw	r26, 0x07	; 7
    19d6:	8c 91       	ld	r24, X
    19d8:	88 23       	and	r24, r24
    19da:	79 f0       	breq	.+30     	; 0x19fa <main+0xb8>
				{
					menu_main = menuLevelDown(menu_main, current_selection);
    19dc:	60 91 00 03 	lds	r22, 0x0300
    19e0:	80 91 45 03 	lds	r24, 0x0345
    19e4:	90 91 46 03 	lds	r25, 0x0346
    19e8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <menuLevelDown>
    19ec:	90 93 46 03 	sts	0x0346, r25
    19f0:	80 93 45 03 	sts	0x0345, r24
					current_selection = 0;
    19f4:	10 92 00 03 	sts	0x0300, r1
    19f8:	4f c0       	rjmp	.+158    	; 0x1a98 <main+0x156>
				}
				else
				{
					if(menuLevelDown(menu_main, current_selection)->m_content.operation)
    19fa:	60 91 00 03 	lds	r22, 0x0300
    19fe:	80 91 45 03 	lds	r24, 0x0345
    1a02:	90 91 46 03 	lds	r25, 0x0346
    1a06:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <menuLevelDown>
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	92 81       	ldd	r25, Z+2	; 0x02
    1a10:	89 2b       	or	r24, r25
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <main+0xd4>
    1a14:	41 c0       	rjmp	.+130    	; 0x1a98 <main+0x156>
						menuLevelDown(menu_main, current_selection)->m_content.operation();
    1a16:	60 91 00 03 	lds	r22, 0x0300
    1a1a:	80 91 45 03 	lds	r24, 0x0345
    1a1e:	90 91 46 03 	lds	r25, 0x0346
    1a22:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <menuLevelDown>
    1a26:	dc 01       	movw	r26, r24
    1a28:	11 96       	adiw	r26, 0x01	; 1
    1a2a:	ed 91       	ld	r30, X+
    1a2c:	fc 91       	ld	r31, X
    1a2e:	12 97       	sbiw	r26, 0x02	; 2
    1a30:	09 95       	icall
    1a32:	32 c0       	rjmp	.+100    	; 0x1a98 <main+0x156>
				}
				break;
			}
			case DOWN:
			{
				current_selection = current_selection == menu_main->m_num_submenus-1 ? 0 : current_selection+1;
    1a34:	80 91 00 03 	lds	r24, 0x0300
    1a38:	e0 91 45 03 	lds	r30, 0x0345
    1a3c:	f0 91 46 03 	lds	r31, 0x0346
    1a40:	48 2f       	mov	r20, r24
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	27 81       	ldd	r18, Z+7	; 0x07
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	21 50       	subi	r18, 0x01	; 1
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	42 17       	cp	r20, r18
    1a4e:	53 07       	cpc	r21, r19
    1a50:	11 f0       	breq	.+4      	; 0x1a56 <main+0x114>
    1a52:	8f 5f       	subi	r24, 0xFF	; 255
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <main+0x116>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	80 93 00 03 	sts	0x0300, r24
				getNextEntry(menu_main->m_submenus[current_selection]);
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	05 80       	ldd	r0, Z+5	; 0x05
    1a64:	f6 81       	ldd	r31, Z+6	; 0x06
    1a66:	e0 2d       	mov	r30, r0
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <getNextEntry>
				break;
    1a74:	11 c0       	rjmp	.+34     	; 0x1a98 <main+0x156>
			}
			case LEFT:
			{
				if(menu_main->m_parent)
    1a76:	80 91 45 03 	lds	r24, 0x0345
    1a7a:	90 91 46 03 	lds	r25, 0x0346
    1a7e:	fc 01       	movw	r30, r24
    1a80:	23 81       	ldd	r18, Z+3	; 0x03
    1a82:	34 81       	ldd	r19, Z+4	; 0x04
    1a84:	23 2b       	or	r18, r19
    1a86:	41 f0       	breq	.+16     	; 0x1a98 <main+0x156>
				{
					menu_main = menuLevelUp(menu_main);
    1a88:	0e 94 6f 0c 	call	0x18de	; 0x18de <menuLevelUp>
    1a8c:	90 93 46 03 	sts	0x0346, r25
    1a90:	80 93 45 03 	sts	0x0345, r24
					current_selection = 0;
    1a94:	10 92 00 03 	sts	0x0300, r1
			}
			default:
				break;
		}

		printMenu(menu_main);
    1a98:	80 91 45 03 	lds	r24, 0x0345
    1a9c:	90 91 46 03 	lds	r25, 0x0346
    1aa0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <printMenu>
		print_selection(current_selection);
    1aa4:	80 91 00 03 	lds	r24, 0x0300
    1aa8:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_selection>
    1aac:	ff ef       	ldi	r31, 0xFF	; 255
    1aae:	2f e7       	ldi	r18, 0x7F	; 127
    1ab0:	84 e0       	ldi	r24, 0x04	; 4
    1ab2:	f1 50       	subi	r31, 0x01	; 1
    1ab4:	20 40       	sbci	r18, 0x00	; 0
    1ab6:	80 40       	sbci	r24, 0x00	; 0
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <main+0x170>
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <main+0x17a>
    1abc:	00 00       	nop
    1abe:	45 cf       	rjmp	.-374    	; 0x194a <main+0x8>

00001ac0 <showHighscore>:
{
	send_song_CAN(TETRIS);
}*/

void showHighscore(void)
{
    1ac0:	08 95       	ret

00001ac2 <resetHighscore>:
	}
	print_buffer();*/
}

void resetHighscore(void)
{
    1ac2:	08 95       	ret

00001ac4 <storeHighscore>:
	/*for(int i = 0; i < 8; i++)
		highscore[i] = 0;*/
}

void storeHighscore(void)
{
    1ac4:	08 95       	ret

00001ac6 <USB_init>:
uint8_t margin = 15;

void USB_init()
{
	//set PIN 0 and 1 of port B as inputs for buttons
	DDRB &= ~(1 << PB0) & ~(1 << PB1);
    1ac6:	87 b3       	in	r24, 0x17	; 23
    1ac8:	8c 7f       	andi	r24, 0xFC	; 252
    1aca:	87 bb       	out	0x17, r24	; 23
    1acc:	08 95       	ret

00001ace <JOY_button>:
}

bool JOY_button(int button)
{
	return PINB & (1 << button);
    1ace:	46 b3       	in	r20, 0x16	; 22
    1ad0:	21 e0       	ldi	r18, 0x01	; 1
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	b9 01       	movw	r22, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <JOY_button+0xe>
    1ad8:	66 0f       	add	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <JOY_button+0xa>
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	24 23       	and	r18, r20
    1ae6:	35 23       	and	r19, r21
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	23 2b       	or	r18, r19
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <JOY_button+0x22>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
}
    1af0:	08 95       	ret

00001af2 <calibrateLeftSlider>:

void calibrateLeftSlider(void)
{
    1af2:	08 95       	ret

00001af4 <calibrateRightSlider>:
	calibrateSlider(SL_L);
}

void calibrateRightSlider(void)
{
    1af4:	08 95       	ret

00001af6 <calibrateJoystick>:
	print_thumb();
	_delay_ms(1000);*/
}

void calibrateJoystick(void)
{
    1af6:	08 95       	ret

00001af8 <JOY_getPosition>:
	print_thumb();
	_delay_ms(2000);*/
}

JOY_POS JOY_getPosition(void)
{
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	7e 01       	movw	r14, r28
    1b18:	80 e1       	ldi	r24, 0x10	; 16
    1b1a:	e8 0e       	add	r14, r24
    1b1c:	f1 1c       	adc	r15, r1
    1b1e:	8e 01       	movw	r16, r28
    1b20:	0f 5f       	subi	r16, 0xFF	; 255
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t i = 0;
	JOY_POS real;
	
	for(i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_H);
    1b24:	84 e0       	ldi	r24, 0x04	; 4
    1b26:	0e 94 c8 02 	call	0x590	; 0x590 <ADC_read>
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	81 93       	st	Z+, r24
    1b2e:	8f 01       	movw	r16, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b30:	f0 e1       	ldi	r31, 0x10	; 16
    1b32:	fa 95       	dec	r31
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <JOY_getPosition+0x3a>
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <JOY_getPosition+0x40>
{
	uint8_t x[15];
	uint8_t i = 0;
	JOY_POS real;
	
	for(i = 0; i < 15; i++)
    1b38:	0e 15       	cp	r16, r14
    1b3a:	1f 05       	cpc	r17, r15
    1b3c:	99 f7       	brne	.-26     	; 0x1b24 <JOY_getPosition+0x2c>
	{
		x[i] = ADC_read(JOY_H);
		_delay_us(10);
	}
	real.x = data_fit(x, 15, 2, 2, 4);
    1b3e:	04 e0       	ldi	r16, 0x04	; 4
    1b40:	22 e0       	ldi	r18, 0x02	; 2
    1b42:	42 e0       	ldi	r20, 0x02	; 2
    1b44:	6f e0       	ldi	r22, 0x0F	; 15
    1b46:	ce 01       	movw	r24, r28
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	0e 94 ed 07 	call	0xfda	; 0xfda <data_fit>
    1b4e:	d8 2e       	mov	r13, r24
    1b50:	8e 01       	movw	r16, r28
    1b52:	0f 5f       	subi	r16, 0xFF	; 255
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_V);
    1b56:	85 e0       	ldi	r24, 0x05	; 5
    1b58:	0e 94 c8 02 	call	0x590	; 0x590 <ADC_read>
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	81 93       	st	Z+, r24
    1b60:	8f 01       	movw	r16, r30
    1b62:	f0 e1       	ldi	r31, 0x10	; 16
    1b64:	fa 95       	dec	r31
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <JOY_getPosition+0x6c>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <JOY_getPosition+0x72>
		x[i] = ADC_read(JOY_H);
		_delay_us(10);
	}
	real.x = data_fit(x, 15, 2, 2, 4);
	
	for(i = 0; i < 15; i++)
    1b6a:	0e 15       	cp	r16, r14
    1b6c:	1f 05       	cpc	r17, r15
    1b6e:	99 f7       	brne	.-26     	; 0x1b56 <JOY_getPosition+0x5e>
	{
		x[i] = ADC_read(JOY_V);
		_delay_us(10);
	}
	real.y = data_fit(x, 15, 2, 2, 4);
    1b70:	04 e0       	ldi	r16, 0x04	; 4
    1b72:	22 e0       	ldi	r18, 0x02	; 2
    1b74:	42 e0       	ldi	r20, 0x02	; 2
    1b76:	6f e0       	ldi	r22, 0x0F	; 15
    1b78:	ce 01       	movw	r24, r28
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	0e 94 ed 07 	call	0xfda	; 0xfda <data_fit>
    1b80:	18 2f       	mov	r17, r24
	
	if(real.y >= -real.x + 255 && real.y >= real.x)
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4d 2d       	mov	r20, r13
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	ef ef       	ldi	r30, 0xFF	; 255
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	e4 1b       	sub	r30, r20
    1b90:	f5 0b       	sbc	r31, r21
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
    1b92:	2e 17       	cp	r18, r30
    1b94:	3f 07       	cpc	r19, r31
    1b96:	ec f1       	brlt	.+122    	; 0x1c12 <JOY_getPosition+0x11a>
    1b98:	8d 15       	cp	r24, r13
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <JOY_getPosition+0xa6>
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <JOY_getPosition+0x124>
    1b9e:	3c c0       	rjmp	.+120    	; 0x1c18 <JOY_getPosition+0x120>

	switch(real.dir)
	{
		case UP:
		{
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
    1ba0:	80 91 0d 01 	lds	r24, 0x010D
    1ba4:	40 91 0b 01 	lds	r20, 0x010B
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	48 0f       	add	r20, r24
    1bac:	51 1d       	adc	r21, r1
    1bae:	42 17       	cp	r20, r18
    1bb0:	53 07       	cpc	r21, r19
    1bb2:	0c f4       	brge	.+2      	; 0x1bb6 <JOY_getPosition+0xbe>
    1bb4:	40 c0       	rjmp	.+128    	; 0x1c36 <JOY_getPosition+0x13e>
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
    1bb8:	3e c0       	rjmp	.+124    	; 0x1c36 <JOY_getPosition+0x13e>
			break;
		}
		case RIGHT:
		{
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
    1bba:	80 91 0c 01 	lds	r24, 0x010C
    1bbe:	20 91 0b 01 	lds	r18, 0x010B
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	28 0f       	add	r18, r24
    1bc6:	31 1d       	adc	r19, r1
    1bc8:	24 17       	cp	r18, r20
    1bca:	35 07       	cpc	r19, r21
    1bcc:	a4 f1       	brlt	.+104    	; 0x1c36 <JOY_getPosition+0x13e>
    1bce:	00 e0       	ldi	r16, 0x00	; 0
    1bd0:	32 c0       	rjmp	.+100    	; 0x1c36 <JOY_getPosition+0x13e>
			break;
		}
		case DOWN:
		{
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
    1bd2:	40 91 0d 01 	lds	r20, 0x010D
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	80 91 0b 01 	lds	r24, 0x010B
    1bdc:	48 1b       	sub	r20, r24
    1bde:	51 09       	sbc	r21, r1
    1be0:	24 17       	cp	r18, r20
    1be2:	35 07       	cpc	r19, r21
    1be4:	a4 f0       	brlt	.+40     	; 0x1c0e <JOY_getPosition+0x116>
    1be6:	00 e0       	ldi	r16, 0x00	; 0
    1be8:	26 c0       	rjmp	.+76     	; 0x1c36 <JOY_getPosition+0x13e>
			break;
		}
		case LEFT:
		{
			real.dir = real.x < mid_point.x - margin ? real.dir : NEUTRAL;
    1bea:	20 91 0c 01 	lds	r18, 0x010C
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	80 91 0b 01 	lds	r24, 0x010B
    1bf4:	28 1b       	sub	r18, r24
    1bf6:	31 09       	sbc	r19, r1
    1bf8:	01 e0       	ldi	r16, 0x01	; 1
    1bfa:	42 17       	cp	r20, r18
    1bfc:	53 07       	cpc	r21, r19
    1bfe:	dc f0       	brlt	.+54     	; 0x1c36 <JOY_getPosition+0x13e>
    1c00:	00 e0       	ldi	r16, 0x00	; 0
    1c02:	19 c0       	rjmp	.+50     	; 0x1c36 <JOY_getPosition+0x13e>
			break;
		}
		default:
		{
			printf("Error receiving joystick value\n");
    1c04:	85 ed       	ldi	r24, 0xD5	; 213
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>
			break;
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <JOY_getPosition+0x13e>
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
			break;
		}
		case DOWN:
		{
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
    1c0e:	04 e0       	ldi	r16, 0x04	; 4
    1c10:	12 c0       	rjmp	.+36     	; 0x1c36 <JOY_getPosition+0x13e>
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
	{
		real.dir = RIGHT;
	}
	if(real.y < -real.x + 255 && real.y >= real.x)
    1c12:	8d 15       	cp	r24, r13
    1c14:	50 f7       	brcc	.-44     	; 0x1bea <JOY_getPosition+0xf2>
    1c16:	dd cf       	rjmp	.-70     	; 0x1bd2 <JOY_getPosition+0xda>
	
	if(real.y >= -real.x + 255 && real.y >= real.x)
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
    1c18:	03 e0       	ldi	r16, 0x03	; 3
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <JOY_getPosition+0x126>
	{
		real.dir = RIGHT;
    1c1c:	02 e0       	ldi	r16, 0x02	; 2
	if(real.y < -real.x + 255 && real.y < real.x)
	{
		real.dir = DOWN;
	}

	switch(real.dir)
    1c1e:	02 30       	cpi	r16, 0x02	; 2
    1c20:	61 f2       	breq	.-104    	; 0x1bba <JOY_getPosition+0xc2>
    1c22:	18 f4       	brcc	.+6      	; 0x1c2a <JOY_getPosition+0x132>
    1c24:	01 30       	cpi	r16, 0x01	; 1
    1c26:	71 f7       	brne	.-36     	; 0x1c04 <JOY_getPosition+0x10c>
    1c28:	e0 cf       	rjmp	.-64     	; 0x1bea <JOY_getPosition+0xf2>
    1c2a:	03 30       	cpi	r16, 0x03	; 3
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <JOY_getPosition+0x138>
    1c2e:	b8 cf       	rjmp	.-144    	; 0x1ba0 <JOY_getPosition+0xa8>
    1c30:	04 30       	cpi	r16, 0x04	; 4
    1c32:	41 f7       	brne	.-48     	; 0x1c04 <JOY_getPosition+0x10c>
    1c34:	ce cf       	rjmp	.-100    	; 0x1bd2 <JOY_getPosition+0xda>
			break;
		}
	}

	return real;
}
    1c36:	6d 2d       	mov	r22, r13
    1c38:	71 2f       	mov	r23, r17
    1c3a:	80 2f       	mov	r24, r16
    1c3c:	2f 96       	adiw	r28, 0x0f	; 15
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	ff 90       	pop	r15
    1c52:	ef 90       	pop	r14
    1c54:	df 90       	pop	r13
    1c56:	08 95       	ret

00001c58 <getStringFromMem>:
#include <avr/pgmspace.h>
#include <stdio.h>

void getStringFromMem(char string[MAX_STRING_LENGTH], uint8_t id)
{
	strcpy_P(string, (PGM_P)pgm_read_word(&(string_table[id])));
    1c58:	e6 2f       	mov	r30, r22
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	e0 59       	subi	r30, 0x90	; 144
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	65 91       	lpm	r22, Z+
    1c66:	74 91       	lpm	r23, Z
    1c68:	0e 94 0f 11 	call	0x221e	; 0x221e <strcpy_P>
    1c6c:	08 95       	ret

00001c6e <clear_buffer>:
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
}

void clear_buffer(void)
{
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <clear_buffer+0x32>
    1c78:	9c 01       	movw	r18, r24
    1c7a:	24 0f       	add	r18, r20
    1c7c:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i * N + j] = 0x00;
    1c7e:	e0 91 0f 01 	lds	r30, 0x010F
    1c82:	f0 91 10 01 	lds	r31, 0x0110
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	80 38       	cpi	r24, 0x80	; 128
    1c90:	91 05       	cpc	r25, r1
    1c92:	91 f7       	brne	.-28     	; 0x1c78 <clear_buffer+0xa>
    1c94:	40 58       	subi	r20, 0x80	; 128
    1c96:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
    1c98:	41 15       	cp	r20, r1
    1c9a:	84 e0       	ldi	r24, 0x04	; 4
    1c9c:	58 07       	cpc	r21, r24
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <clear_buffer+0x38>
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
}

void clear_buffer(void)
{
    1ca0:	87 2f       	mov	r24, r23
    1ca2:	96 2f       	mov	r25, r22
    1ca4:	e9 cf       	rjmp	.-46     	; 0x1c78 <clear_buffer+0xa>
    1ca6:	08 95       	ret

00001ca8 <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    1ca8:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    1caa:	e1 e0       	ldi	r30, 0x01	; 1
    1cac:	f0 e1       	ldi	r31, 0x10	; 16
    1cae:	80 83       	st	Z, r24
    1cb0:	10 82       	st	Z, r1
    1cb2:	80 e1       	ldi	r24, 0x10	; 16
    1cb4:	80 83       	st	Z, r24
    1cb6:	08 95       	ret

00001cb8 <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
	oled_set_page(0x0);
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <oled_set_page>
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
    1cd0:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
    1cd2:	68 94       	set
    1cd4:	dd 24       	eor	r13, r13
    1cd6:	d7 f8       	bld	r13, 7
    1cd8:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    1cda:	c1 e0       	ldi	r28, 0x01	; 1
    1cdc:	d2 e1       	ldi	r29, 0x12	; 18
    1cde:	21 c0       	rjmp	.+66     	; 0x1d22 <print_buffer+0x6a>
    1ce0:	02 2f       	mov	r16, r18
    1ce2:	13 2f       	mov	r17, r19
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	48 1b       	sub	r20, r24
    1ce8:	59 0b       	sbc	r21, r25
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    1cea:	e0 91 0f 01 	lds	r30, 0x010F
    1cee:	f0 91 10 01 	lds	r31, 0x0110
    1cf2:	e4 0f       	add	r30, r20
    1cf4:	f5 1f       	adc	r31, r21
    1cf6:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    1cf8:	48 83       	st	Y, r20
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	81 f7       	brne	.-32     	; 0x1ce0 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    1d00:	87 e0       	ldi	r24, 0x07	; 7
    1d02:	8f 15       	cp	r24, r15
    1d04:	28 f0       	brcs	.+10     	; 0x1d10 <print_buffer+0x58>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	8f 0d       	add	r24, r15
    1d0a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <oled_set_page>
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <print_buffer+0x5e>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    1d16:	f3 94       	inc	r15
    1d18:	88 e0       	ldi	r24, 0x08	; 8
    1d1a:	f8 16       	cp	r15, r24
    1d1c:	39 f0       	breq	.+14     	; 0x1d2c <print_buffer+0x74>
    1d1e:	20 2f       	mov	r18, r16
    1d20:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
    1d22:	8d 2d       	mov	r24, r13
    1d24:	9e 2d       	mov	r25, r14
    1d26:	20 58       	subi	r18, 0x80	; 128
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	da cf       	rjmp	.-76     	; 0x1ce0 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
	}
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	08 95       	ret

00001d3c <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    1d3c:	e1 e0       	ldi	r30, 0x01	; 1
    1d3e:	f0 e1       	ldi	r31, 0x10	; 16
    1d40:	8e ea       	ldi	r24, 0xAE	; 174
    1d42:	80 83       	st	Z, r24
    1d44:	81 ea       	ldi	r24, 0xA1	; 161
    1d46:	80 83       	st	Z, r24
    1d48:	8a ed       	ldi	r24, 0xDA	; 218
    1d4a:	80 83       	st	Z, r24
    1d4c:	82 e1       	ldi	r24, 0x12	; 18
    1d4e:	80 83       	st	Z, r24
    1d50:	88 ec       	ldi	r24, 0xC8	; 200
    1d52:	80 83       	st	Z, r24
    1d54:	88 ea       	ldi	r24, 0xA8	; 168
    1d56:	80 83       	st	Z, r24
    1d58:	8f e3       	ldi	r24, 0x3F	; 63
    1d5a:	80 83       	st	Z, r24
    1d5c:	85 ed       	ldi	r24, 0xD5	; 213
    1d5e:	80 83       	st	Z, r24
    1d60:	80 e8       	ldi	r24, 0x80	; 128
    1d62:	80 83       	st	Z, r24
    1d64:	81 e8       	ldi	r24, 0x81	; 129
    1d66:	80 83       	st	Z, r24
    1d68:	80 e5       	ldi	r24, 0x50	; 80
    1d6a:	80 83       	st	Z, r24
    1d6c:	89 ed       	ldi	r24, 0xD9	; 217
    1d6e:	80 83       	st	Z, r24
    1d70:	81 e2       	ldi	r24, 0x21	; 33
    1d72:	80 83       	st	Z, r24
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	80 83       	st	Z, r24
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	80 83       	st	Z, r24
    1d7c:	8b ed       	ldi	r24, 0xDB	; 219
    1d7e:	80 83       	st	Z, r24
    1d80:	80 e3       	ldi	r24, 0x30	; 48
    1d82:	80 83       	st	Z, r24
    1d84:	8d ea       	ldi	r24, 0xAD	; 173
    1d86:	80 83       	st	Z, r24
    1d88:	10 82       	st	Z, r1
    1d8a:	84 ea       	ldi	r24, 0xA4	; 164
    1d8c:	80 83       	st	Z, r24
    1d8e:	86 ea       	ldi	r24, 0xA6	; 166
    1d90:	80 83       	st	Z, r24
    1d92:	8f ea       	ldi	r24, 0xAF	; 175
    1d94:	80 83       	st	Z, r24
    1d96:	83 ed       	ldi	r24, 0xD3	; 211
    1d98:	80 83       	st	Z, r24
    1d9a:	10 82       	st	Z, r1
    1d9c:	80 e4       	ldi	r24, 0x40	; 64
    1d9e:	80 83       	st	Z, r24
    1da0:	80 eb       	ldi	r24, 0xB0	; 176
    1da2:	80 83       	st	Z, r24
    1da4:	10 82       	st	Z, r1
    1da6:	80 e1       	ldi	r24, 0x10	; 16
    1da8:	80 83       	st	Z, r24
	oled_write_command(0x00);
	//set the upper nibble of start column address
	oled_write_command(0x10);


	clear_buffer();
    1daa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <clear_buffer>
	print_buffer();
    1dae:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
    1db2:	08 95       	ret

00001db4 <print_string_to_buffer>:
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	17 2f       	mov	r17, r23
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	20 81       	ld	r18, Z
    1dc6:	22 23       	and	r18, r18
    1dc8:	99 f1       	breq	.+102    	; 0x1e30 <print_string_to_buffer+0x7c>
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    1dca:	f0 e8       	ldi	r31, 0x80	; 128
    1dcc:	6f 9f       	mul	r22, r31
    1dce:	a0 01       	movw	r20, r0
    1dd0:	11 24       	eor	r1, r1
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    1dd2:	ec 01       	movw	r28, r24
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
    1dd4:	00 e0       	ldi	r16, 0x00	; 0
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    1dd6:	e1 2c       	mov	r14, r1
    1dd8:	f1 2c       	mov	r15, r1
    1dda:	27 c0       	rjmp	.+78     	; 0x1e2a <print_string_to_buffer+0x76>
    1ddc:	61 2f       	mov	r22, r17
    1dde:	62 0f       	add	r22, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    1de0:	fa 01       	movw	r30, r20
    1de2:	e6 0f       	add	r30, r22
    1de4:	f1 1d       	adc	r31, r1
    1de6:	a0 91 0f 01 	lds	r26, 0x010F
    1dea:	b0 91 10 01 	lds	r27, 0x0110
    1dee:	ae 0f       	add	r26, r30
    1df0:	bf 1f       	adc	r27, r31
    1df2:	e8 81       	ld	r30, Y
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	b0 97       	sbiw	r30, 0x20	; 32
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	e2 0f       	add	r30, r18
    1e06:	f3 1f       	adc	r31, r19
    1e08:	ee 5a       	subi	r30, 0xAE	; 174
    1e0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e0c:	e4 91       	lpm	r30, Z
    1e0e:	ec 93       	st	X, r30
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255

	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
    1e14:	28 30       	cpi	r18, 0x08	; 8
    1e16:	31 05       	cpc	r19, r1
    1e18:	09 f7       	brne	.-62     	; 0x1ddc <print_string_to_buffer+0x28>
    1e1a:	18 5f       	subi	r17, 0xF8	; 248
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
			col++;
		}
		i++;
    1e1c:	0f 5f       	subi	r16, 0xFF	; 255
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    1e1e:	ec 01       	movw	r28, r24
    1e20:	c0 0f       	add	r28, r16
    1e22:	d1 1d       	adc	r29, r1
    1e24:	28 81       	ld	r18, Y
    1e26:	22 23       	and	r18, r18
    1e28:	19 f0       	breq	.+6      	; 0x1e30 <print_string_to_buffer+0x7c>
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    1e2a:	2e 2d       	mov	r18, r14
    1e2c:	3f 2d       	mov	r19, r15
    1e2e:	d6 cf       	rjmp	.-84     	; 0x1ddc <print_string_to_buffer+0x28>
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
			col++;
		}
		i++;
	}
}
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <print_selection>:

void print_selection(uint8_t page)
{
	position pos = { .column = 120, .page = page};
	print_string_to_buffer("<", pos);
    1e3e:	68 2f       	mov	r22, r24
    1e40:	78 e7       	ldi	r23, 0x78	; 120
    1e42:	80 e8       	ldi	r24, 0x80	; 128
    1e44:	92 e0       	ldi	r25, 0x02	; 2
    1e46:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
	print_buffer();
    1e4a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
    1e4e:	08 95       	ret

00001e50 <printMenu>:
	}
	print_buffer();
}

void printMenu(MenuNode* menu_entries)
{
    1e50:	bf 92       	push	r11
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	60 97       	sbiw	r28, 0x10	; 16
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	6c 01       	movw	r12, r24
	char string[MAX_STRING_LENGTH];
	
	clear_buffer();
    1e74:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <clear_buffer>
	if(menu_entries)
    1e78:	c1 14       	cp	r12, r1
    1e7a:	d1 04       	cpc	r13, r1
    1e7c:	d9 f1       	breq	.+118    	; 0x1ef4 <printMenu+0xa4>
	{
		for(int i = 0; i < menu_entries->m_num_submenus; i++)
    1e7e:	f6 01       	movw	r30, r12
    1e80:	87 81       	ldd	r24, Z+7	; 0x07
    1e82:	88 23       	and	r24, r24
    1e84:	a1 f1       	breq	.+104    	; 0x1eee <printMenu+0x9e>
    1e86:	e1 2c       	mov	r14, r1
    1e88:	f1 2c       	mov	r15, r1
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	0f 5e       	subi	r16, 0xEF	; 239
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			if(menu_entries->m_submenus)
    1e90:	f6 01       	movw	r30, r12
    1e92:	25 81       	ldd	r18, Z+5	; 0x05
    1e94:	36 81       	ldd	r19, Z+6	; 0x06
    1e96:	21 15       	cp	r18, r1
    1e98:	31 05       	cpc	r19, r1
    1e9a:	e1 f0       	breq	.+56     	; 0x1ed4 <printMenu+0x84>
			{
				//TODO check if num submenus < 8
				position pos = { .page = i, .column = 2 }; //printf(menu_entries->m_submenus[i]->m_content.title); printf("\n");
    1e9c:	be 2c       	mov	r11, r14
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	31 96       	adiw	r30, 0x01	; 1
				for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
					string[i] = 0;
    1ea2:	11 92       	st	Z+, r1
		{
			if(menu_entries->m_submenus)
			{
				//TODO check if num submenus < 8
				position pos = { .page = i, .column = 2 }; //printf(menu_entries->m_submenus[i]->m_content.title); printf("\n");
				for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    1ea4:	e0 17       	cp	r30, r16
    1ea6:	f1 07       	cpc	r31, r17
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <printMenu+0x52>
					string[i] = 0;
				getStringFromMem(string, menu_entries->m_submenus[i]->m_content.title_id);
    1eaa:	c7 01       	movw	r24, r14
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	e8 0f       	add	r30, r24
    1eb4:	f9 1f       	adc	r31, r25
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	60 81       	ld	r22, Z
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <getStringFromMem>
				print_string_to_buffer(string, pos);
    1ec6:	6b 2d       	mov	r22, r11
    1ec8:	72 e0       	ldi	r23, 0x02	; 2
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <print_string_to_buffer>
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <printMenu+0x8c>
			}
			else
				printf("NULL submenu\n");
    1ed4:	89 ec       	ldi	r24, 0xC9	; 201
    1ed6:	92 e0       	ldi	r25, 0x02	; 2
    1ed8:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>
	char string[MAX_STRING_LENGTH];
	
	clear_buffer();
	if(menu_entries)
	{
		for(int i = 0; i < menu_entries->m_num_submenus; i++)
    1edc:	ff ef       	ldi	r31, 0xFF	; 255
    1ede:	ef 1a       	sub	r14, r31
    1ee0:	ff 0a       	sbc	r15, r31
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	87 81       	ldd	r24, Z+7	; 0x07
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	e8 16       	cp	r14, r24
    1eea:	f9 06       	cpc	r15, r25
    1eec:	8c f2       	brlt	.-94     	; 0x1e90 <printMenu+0x40>
				print_string_to_buffer(string, pos);
			}
			else
				printf("NULL submenu\n");
		}
		print_buffer();
    1eee:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <print_buffer>
    1ef2:	04 c0       	rjmp	.+8      	; 0x1efc <printMenu+0xac>
	}
	else
	{
		printf("empty menu pointer detected\n");
    1ef4:	86 ed       	ldi	r24, 0xD6	; 214
    1ef6:	92 e0       	ldi	r25, 0x02	; 2
    1ef8:	0e 94 75 11 	call	0x22ea	; 0x22ea <puts>
	}
}
    1efc:	60 96       	adiw	r28, 0x10	; 16
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	08 95       	ret

00001f1c <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1 << SRE);
    1f1c:	85 b7       	in	r24, 0x35	; 53
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	85 bf       	out	0x35, r24	; 53

	//realesing  JTAG pins from memory mapping
	SFIOR |= (1 << XMM2);
    1f22:	80 b7       	in	r24, 0x30	; 48
    1f24:	80 62       	ori	r24, 0x20	; 32
    1f26:	80 bf       	out	0x30, r24	; 48
	SFIOR &= (0 << XMM1);
    1f28:	80 b7       	in	r24, 0x30	; 48
    1f2a:	10 be       	out	0x30, r1	; 48
	SFIOR &= (0 << XMM0);
    1f2c:	80 b7       	in	r24, 0x30	; 48
    1f2e:	10 be       	out	0x30, r1	; 48
    1f30:	08 95       	ret

00001f32 <uart_putc>:
}

int uart_putc(uint8_t c)
{
	//wait while register is free
	while (!(UCSR0A & (1 << UDRE0)));
    1f32:	5d 9b       	sbis	0x0b, 5	; 11
    1f34:	fe cf       	rjmp	.-4      	; 0x1f32 <uart_putc>

	//put character to USART data register
	UDR0 = c;
    1f36:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	08 95       	ret

00001f3e <uart_getc>:

int uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1 << RXC0)));
    1f3e:	5f 9b       	sbis	0x0b, 7	; 11
    1f40:	fe cf       	rjmp	.-4      	; 0x1f3e <uart_getc>

	//get value from USART data register
	return UDR0;
    1f42:	8c b1       	in	r24, 0x0c	; 12
}
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	08 95       	ret

00001f48 <uart_init>:

void uart_init(void)
{
	uint8_t ubrr = MYUBRR;
	//set baudrate to 9600
	UBRR0H = (uint8_t) (ubrr >> 8);
    1f48:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (uint8_t) ubrr;
    1f4a:	8f e1       	ldi	r24, 0x1F	; 31
    1f4c:	89 b9       	out	0x09, r24	; 9

	//enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
    1f4e:	8a b1       	in	r24, 0x0a	; 10
    1f50:	88 61       	ori	r24, 0x18	; 24
    1f52:	8a b9       	out	0x0a, r24	; 10

	//set UCSRC as accessed register, set number of character size to 8
	#ifdef ATMEGA2560
		UCSR0C |= (3 << UCSZ00);
	#else
		UCSR0C |= (1 << URSEL0) | (3 << UCSZ00);
    1f54:	80 b5       	in	r24, 0x20	; 32
    1f56:	86 68       	ori	r24, 0x86	; 134
    1f58:	80 bd       	out	0x20, r24	; 32
	#endif

	//set number of stop bits to 1
	UCSR0C &= ~(1 << USBS0);
    1f5a:	80 b5       	in	r24, 0x20	; 32
    1f5c:	87 7f       	andi	r24, 0xF7	; 247
    1f5e:	80 bd       	out	0x20, r24	; 32
	//set connection to asynchronous
	#ifdef ATMEGA2560
		UCSR0C &= ~(1 << UMSEL00);
		UCSR0C &= ~(1 << UMSEL01);
	#else
		UCSR0C &= ~(1 << UMSEL0);
    1f60:	80 b5       	in	r24, 0x20	; 32
    1f62:	8f 7b       	andi	r24, 0xBF	; 191
    1f64:	80 bd       	out	0x20, r24	; 32
	#endif

	//disable parity mode
	UCSR0C &= ~(1 << UPM00);
    1f66:	80 b5       	in	r24, 0x20	; 32
    1f68:	8f 7e       	andi	r24, 0xEF	; 239
    1f6a:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= ~(1 << UPM10);
    1f6c:	80 b5       	in	r24, 0x20	; 32
    1f6e:	8f 7e       	andi	r24, 0xEF	; 239
    1f70:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_putc, uart_getc);
    1f72:	6f e9       	ldi	r22, 0x9F	; 159
    1f74:	7f e0       	ldi	r23, 0x0F	; 15
    1f76:	89 e9       	ldi	r24, 0x99	; 153
    1f78:	9f e0       	ldi	r25, 0x0F	; 15
    1f7a:	0e 94 16 11 	call	0x222c	; 0x222c <fdevopen>
    1f7e:	08 95       	ret

00001f80 <__udivmodhi4>:
    1f80:	aa 1b       	sub	r26, r26
    1f82:	bb 1b       	sub	r27, r27
    1f84:	51 e1       	ldi	r21, 0x11	; 17
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <__udivmodhi4_ep>

00001f88 <__udivmodhi4_loop>:
    1f88:	aa 1f       	adc	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	a6 17       	cp	r26, r22
    1f8e:	b7 07       	cpc	r27, r23
    1f90:	10 f0       	brcs	.+4      	; 0x1f96 <__udivmodhi4_ep>
    1f92:	a6 1b       	sub	r26, r22
    1f94:	b7 0b       	sbc	r27, r23

00001f96 <__udivmodhi4_ep>:
    1f96:	88 1f       	adc	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	5a 95       	dec	r21
    1f9c:	a9 f7       	brne	.-22     	; 0x1f88 <__udivmodhi4_loop>
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	08 95       	ret

00001fa8 <__divmodhi4>:
    1fa8:	97 fb       	bst	r25, 7
    1faa:	07 2e       	mov	r0, r23
    1fac:	16 f4       	brtc	.+4      	; 0x1fb2 <__divmodhi4+0xa>
    1fae:	00 94       	com	r0
    1fb0:	07 d0       	rcall	.+14     	; 0x1fc0 <__divmodhi4_neg1>
    1fb2:	77 fd       	sbrc	r23, 7
    1fb4:	09 d0       	rcall	.+18     	; 0x1fc8 <__divmodhi4_neg2>
    1fb6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
    1fba:	07 fc       	sbrc	r0, 7
    1fbc:	05 d0       	rcall	.+10     	; 0x1fc8 <__divmodhi4_neg2>
    1fbe:	3e f4       	brtc	.+14     	; 0x1fce <__divmodhi4_exit>

00001fc0 <__divmodhi4_neg1>:
    1fc0:	90 95       	com	r25
    1fc2:	81 95       	neg	r24
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	08 95       	ret

00001fc8 <__divmodhi4_neg2>:
    1fc8:	70 95       	com	r23
    1fca:	61 95       	neg	r22
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255

00001fce <__divmodhi4_exit>:
    1fce:	08 95       	ret

00001fd0 <malloc>:
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	10 f4       	brcc	.+4      	; 0x1fde <malloc+0xe>
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	e0 91 4e 03 	lds	r30, 0x034E
    1fe2:	f0 91 4f 03 	lds	r31, 0x034F
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	30 97       	sbiw	r30, 0x00	; 0
    1ff0:	39 f1       	breq	.+78     	; 0x2040 <malloc+0x70>
    1ff2:	40 81       	ld	r20, Z
    1ff4:	51 81       	ldd	r21, Z+1	; 0x01
    1ff6:	48 17       	cp	r20, r24
    1ff8:	59 07       	cpc	r21, r25
    1ffa:	b8 f0       	brcs	.+46     	; 0x202a <malloc+0x5a>
    1ffc:	48 17       	cp	r20, r24
    1ffe:	59 07       	cpc	r21, r25
    2000:	71 f4       	brne	.+28     	; 0x201e <malloc+0x4e>
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	10 97       	sbiw	r26, 0x00	; 0
    2008:	29 f0       	breq	.+10     	; 0x2014 <malloc+0x44>
    200a:	13 96       	adiw	r26, 0x03	; 3
    200c:	9c 93       	st	X, r25
    200e:	8e 93       	st	-X, r24
    2010:	12 97       	sbiw	r26, 0x02	; 2
    2012:	2c c0       	rjmp	.+88     	; 0x206c <malloc+0x9c>
    2014:	90 93 4f 03 	sts	0x034F, r25
    2018:	80 93 4e 03 	sts	0x034E, r24
    201c:	27 c0       	rjmp	.+78     	; 0x206c <malloc+0x9c>
    201e:	21 15       	cp	r18, r1
    2020:	31 05       	cpc	r19, r1
    2022:	31 f0       	breq	.+12     	; 0x2030 <malloc+0x60>
    2024:	42 17       	cp	r20, r18
    2026:	53 07       	cpc	r21, r19
    2028:	18 f0       	brcs	.+6      	; 0x2030 <malloc+0x60>
    202a:	a9 01       	movw	r20, r18
    202c:	db 01       	movw	r26, r22
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <malloc+0x62>
    2030:	ef 01       	movw	r28, r30
    2032:	9a 01       	movw	r18, r20
    2034:	bd 01       	movw	r22, r26
    2036:	df 01       	movw	r26, r30
    2038:	02 80       	ldd	r0, Z+2	; 0x02
    203a:	f3 81       	ldd	r31, Z+3	; 0x03
    203c:	e0 2d       	mov	r30, r0
    203e:	d7 cf       	rjmp	.-82     	; 0x1fee <malloc+0x1e>
    2040:	21 15       	cp	r18, r1
    2042:	31 05       	cpc	r19, r1
    2044:	f9 f0       	breq	.+62     	; 0x2084 <malloc+0xb4>
    2046:	28 1b       	sub	r18, r24
    2048:	39 0b       	sbc	r19, r25
    204a:	24 30       	cpi	r18, 0x04	; 4
    204c:	31 05       	cpc	r19, r1
    204e:	80 f4       	brcc	.+32     	; 0x2070 <malloc+0xa0>
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	61 15       	cp	r22, r1
    2056:	71 05       	cpc	r23, r1
    2058:	21 f0       	breq	.+8      	; 0x2062 <malloc+0x92>
    205a:	fb 01       	movw	r30, r22
    205c:	93 83       	std	Z+3, r25	; 0x03
    205e:	82 83       	std	Z+2, r24	; 0x02
    2060:	04 c0       	rjmp	.+8      	; 0x206a <malloc+0x9a>
    2062:	90 93 4f 03 	sts	0x034F, r25
    2066:	80 93 4e 03 	sts	0x034E, r24
    206a:	fe 01       	movw	r30, r28
    206c:	32 96       	adiw	r30, 0x02	; 2
    206e:	44 c0       	rjmp	.+136    	; 0x20f8 <malloc+0x128>
    2070:	fe 01       	movw	r30, r28
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	81 93       	st	Z+, r24
    2078:	91 93       	st	Z+, r25
    207a:	22 50       	subi	r18, 0x02	; 2
    207c:	31 09       	sbc	r19, r1
    207e:	39 83       	std	Y+1, r19	; 0x01
    2080:	28 83       	st	Y, r18
    2082:	3a c0       	rjmp	.+116    	; 0x20f8 <malloc+0x128>
    2084:	20 91 4c 03 	lds	r18, 0x034C
    2088:	30 91 4d 03 	lds	r19, 0x034D
    208c:	23 2b       	or	r18, r19
    208e:	41 f4       	brne	.+16     	; 0x20a0 <malloc+0xd0>
    2090:	20 91 02 01 	lds	r18, 0x0102
    2094:	30 91 03 01 	lds	r19, 0x0103
    2098:	30 93 4d 03 	sts	0x034D, r19
    209c:	20 93 4c 03 	sts	0x034C, r18
    20a0:	20 91 00 01 	lds	r18, 0x0100
    20a4:	30 91 01 01 	lds	r19, 0x0101
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	41 f4       	brne	.+16     	; 0x20be <malloc+0xee>
    20ae:	2d b7       	in	r18, 0x3d	; 61
    20b0:	3e b7       	in	r19, 0x3e	; 62
    20b2:	40 91 04 01 	lds	r20, 0x0104
    20b6:	50 91 05 01 	lds	r21, 0x0105
    20ba:	24 1b       	sub	r18, r20
    20bc:	35 0b       	sbc	r19, r21
    20be:	e0 91 4c 03 	lds	r30, 0x034C
    20c2:	f0 91 4d 03 	lds	r31, 0x034D
    20c6:	e2 17       	cp	r30, r18
    20c8:	f3 07       	cpc	r31, r19
    20ca:	a0 f4       	brcc	.+40     	; 0x20f4 <malloc+0x124>
    20cc:	2e 1b       	sub	r18, r30
    20ce:	3f 0b       	sbc	r19, r31
    20d0:	28 17       	cp	r18, r24
    20d2:	39 07       	cpc	r19, r25
    20d4:	78 f0       	brcs	.+30     	; 0x20f4 <malloc+0x124>
    20d6:	ac 01       	movw	r20, r24
    20d8:	4e 5f       	subi	r20, 0xFE	; 254
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	24 17       	cp	r18, r20
    20de:	35 07       	cpc	r19, r21
    20e0:	48 f0       	brcs	.+18     	; 0x20f4 <malloc+0x124>
    20e2:	4e 0f       	add	r20, r30
    20e4:	5f 1f       	adc	r21, r31
    20e6:	50 93 4d 03 	sts	0x034D, r21
    20ea:	40 93 4c 03 	sts	0x034C, r20
    20ee:	81 93       	st	Z+, r24
    20f0:	91 93       	st	Z+, r25
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <malloc+0x128>
    20f4:	e0 e0       	ldi	r30, 0x00	; 0
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	cf 01       	movw	r24, r30
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	08 95       	ret

00002100 <free>:
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	09 f4       	brne	.+2      	; 0x210a <free+0xa>
    2108:	87 c0       	rjmp	.+270    	; 0x2218 <free+0x118>
    210a:	fc 01       	movw	r30, r24
    210c:	32 97       	sbiw	r30, 0x02	; 2
    210e:	13 82       	std	Z+3, r1	; 0x03
    2110:	12 82       	std	Z+2, r1	; 0x02
    2112:	c0 91 4e 03 	lds	r28, 0x034E
    2116:	d0 91 4f 03 	lds	r29, 0x034F
    211a:	20 97       	sbiw	r28, 0x00	; 0
    211c:	81 f4       	brne	.+32     	; 0x213e <free+0x3e>
    211e:	20 81       	ld	r18, Z
    2120:	31 81       	ldd	r19, Z+1	; 0x01
    2122:	28 0f       	add	r18, r24
    2124:	39 1f       	adc	r19, r25
    2126:	80 91 4c 03 	lds	r24, 0x034C
    212a:	90 91 4d 03 	lds	r25, 0x034D
    212e:	82 17       	cp	r24, r18
    2130:	93 07       	cpc	r25, r19
    2132:	79 f5       	brne	.+94     	; 0x2192 <free+0x92>
    2134:	f0 93 4d 03 	sts	0x034D, r31
    2138:	e0 93 4c 03 	sts	0x034C, r30
    213c:	6d c0       	rjmp	.+218    	; 0x2218 <free+0x118>
    213e:	de 01       	movw	r26, r28
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	ae 17       	cp	r26, r30
    2146:	bf 07       	cpc	r27, r31
    2148:	50 f4       	brcc	.+20     	; 0x215e <free+0x5e>
    214a:	12 96       	adiw	r26, 0x02	; 2
    214c:	4d 91       	ld	r20, X+
    214e:	5c 91       	ld	r21, X
    2150:	13 97       	sbiw	r26, 0x03	; 3
    2152:	9d 01       	movw	r18, r26
    2154:	41 15       	cp	r20, r1
    2156:	51 05       	cpc	r21, r1
    2158:	09 f1       	breq	.+66     	; 0x219c <free+0x9c>
    215a:	da 01       	movw	r26, r20
    215c:	f3 cf       	rjmp	.-26     	; 0x2144 <free+0x44>
    215e:	b3 83       	std	Z+3, r27	; 0x03
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	40 81       	ld	r20, Z
    2164:	51 81       	ldd	r21, Z+1	; 0x01
    2166:	84 0f       	add	r24, r20
    2168:	95 1f       	adc	r25, r21
    216a:	8a 17       	cp	r24, r26
    216c:	9b 07       	cpc	r25, r27
    216e:	71 f4       	brne	.+28     	; 0x218c <free+0x8c>
    2170:	8d 91       	ld	r24, X+
    2172:	9c 91       	ld	r25, X
    2174:	11 97       	sbiw	r26, 0x01	; 1
    2176:	84 0f       	add	r24, r20
    2178:	95 1f       	adc	r25, r21
    217a:	02 96       	adiw	r24, 0x02	; 2
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	12 96       	adiw	r26, 0x02	; 2
    2182:	8d 91       	ld	r24, X+
    2184:	9c 91       	ld	r25, X
    2186:	13 97       	sbiw	r26, 0x03	; 3
    2188:	93 83       	std	Z+3, r25	; 0x03
    218a:	82 83       	std	Z+2, r24	; 0x02
    218c:	21 15       	cp	r18, r1
    218e:	31 05       	cpc	r19, r1
    2190:	29 f4       	brne	.+10     	; 0x219c <free+0x9c>
    2192:	f0 93 4f 03 	sts	0x034F, r31
    2196:	e0 93 4e 03 	sts	0x034E, r30
    219a:	3e c0       	rjmp	.+124    	; 0x2218 <free+0x118>
    219c:	d9 01       	movw	r26, r18
    219e:	13 96       	adiw	r26, 0x03	; 3
    21a0:	fc 93       	st	X, r31
    21a2:	ee 93       	st	-X, r30
    21a4:	12 97       	sbiw	r26, 0x02	; 2
    21a6:	4d 91       	ld	r20, X+
    21a8:	5d 91       	ld	r21, X+
    21aa:	a4 0f       	add	r26, r20
    21ac:	b5 1f       	adc	r27, r21
    21ae:	ea 17       	cp	r30, r26
    21b0:	fb 07       	cpc	r31, r27
    21b2:	79 f4       	brne	.+30     	; 0x21d2 <free+0xd2>
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	84 0f       	add	r24, r20
    21ba:	95 1f       	adc	r25, r21
    21bc:	02 96       	adiw	r24, 0x02	; 2
    21be:	d9 01       	movw	r26, r18
    21c0:	11 96       	adiw	r26, 0x01	; 1
    21c2:	9c 93       	st	X, r25
    21c4:	8e 93       	st	-X, r24
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	13 96       	adiw	r26, 0x03	; 3
    21cc:	9c 93       	st	X, r25
    21ce:	8e 93       	st	-X, r24
    21d0:	12 97       	sbiw	r26, 0x02	; 2
    21d2:	e0 e0       	ldi	r30, 0x00	; 0
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	9b 81       	ldd	r25, Y+3	; 0x03
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	19 f0       	breq	.+6      	; 0x21e4 <free+0xe4>
    21de:	fe 01       	movw	r30, r28
    21e0:	ec 01       	movw	r28, r24
    21e2:	f9 cf       	rjmp	.-14     	; 0x21d6 <free+0xd6>
    21e4:	ce 01       	movw	r24, r28
    21e6:	02 96       	adiw	r24, 0x02	; 2
    21e8:	28 81       	ld	r18, Y
    21ea:	39 81       	ldd	r19, Y+1	; 0x01
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	20 91 4c 03 	lds	r18, 0x034C
    21f4:	30 91 4d 03 	lds	r19, 0x034D
    21f8:	28 17       	cp	r18, r24
    21fa:	39 07       	cpc	r19, r25
    21fc:	69 f4       	brne	.+26     	; 0x2218 <free+0x118>
    21fe:	30 97       	sbiw	r30, 0x00	; 0
    2200:	29 f4       	brne	.+10     	; 0x220c <free+0x10c>
    2202:	10 92 4f 03 	sts	0x034F, r1
    2206:	10 92 4e 03 	sts	0x034E, r1
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <free+0x110>
    220c:	13 82       	std	Z+3, r1	; 0x03
    220e:	12 82       	std	Z+2, r1	; 0x02
    2210:	d0 93 4d 03 	sts	0x034D, r29
    2214:	c0 93 4c 03 	sts	0x034C, r28
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	08 95       	ret

0000221e <strcpy_P>:
    221e:	fb 01       	movw	r30, r22
    2220:	dc 01       	movw	r26, r24
    2222:	05 90       	lpm	r0, Z+
    2224:	0d 92       	st	X+, r0
    2226:	00 20       	and	r0, r0
    2228:	e1 f7       	brne	.-8      	; 0x2222 <strcpy_P+0x4>
    222a:	08 95       	ret

0000222c <fdevopen>:
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	ec 01       	movw	r28, r24
    2236:	8b 01       	movw	r16, r22
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	31 f4       	brne	.+12     	; 0x2248 <fdevopen+0x1c>
    223c:	61 15       	cp	r22, r1
    223e:	71 05       	cpc	r23, r1
    2240:	19 f4       	brne	.+6      	; 0x2248 <fdevopen+0x1c>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	38 c0       	rjmp	.+112    	; 0x22b8 <fdevopen+0x8c>
    2248:	6e e0       	ldi	r22, 0x0E	; 14
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 74 13 	call	0x26e8	; 0x26e8 <calloc>
    2254:	fc 01       	movw	r30, r24
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	a1 f3       	breq	.-24     	; 0x2242 <fdevopen+0x16>
    225a:	80 e8       	ldi	r24, 0x80	; 128
    225c:	83 83       	std	Z+3, r24	; 0x03
    225e:	01 15       	cp	r16, r1
    2260:	11 05       	cpc	r17, r1
    2262:	71 f0       	breq	.+28     	; 0x2280 <fdevopen+0x54>
    2264:	13 87       	std	Z+11, r17	; 0x0b
    2266:	02 87       	std	Z+10, r16	; 0x0a
    2268:	81 e8       	ldi	r24, 0x81	; 129
    226a:	83 83       	std	Z+3, r24	; 0x03
    226c:	80 91 50 03 	lds	r24, 0x0350
    2270:	90 91 51 03 	lds	r25, 0x0351
    2274:	89 2b       	or	r24, r25
    2276:	21 f4       	brne	.+8      	; 0x2280 <fdevopen+0x54>
    2278:	f0 93 51 03 	sts	0x0351, r31
    227c:	e0 93 50 03 	sts	0x0350, r30
    2280:	20 97       	sbiw	r28, 0x00	; 0
    2282:	c9 f0       	breq	.+50     	; 0x22b6 <fdevopen+0x8a>
    2284:	d1 87       	std	Z+9, r29	; 0x09
    2286:	c0 87       	std	Z+8, r28	; 0x08
    2288:	83 81       	ldd	r24, Z+3	; 0x03
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	83 83       	std	Z+3, r24	; 0x03
    228e:	80 91 52 03 	lds	r24, 0x0352
    2292:	90 91 53 03 	lds	r25, 0x0353
    2296:	89 2b       	or	r24, r25
    2298:	71 f4       	brne	.+28     	; 0x22b6 <fdevopen+0x8a>
    229a:	f0 93 53 03 	sts	0x0353, r31
    229e:	e0 93 52 03 	sts	0x0352, r30
    22a2:	80 91 54 03 	lds	r24, 0x0354
    22a6:	90 91 55 03 	lds	r25, 0x0355
    22aa:	89 2b       	or	r24, r25
    22ac:	21 f4       	brne	.+8      	; 0x22b6 <fdevopen+0x8a>
    22ae:	f0 93 55 03 	sts	0x0355, r31
    22b2:	e0 93 54 03 	sts	0x0354, r30
    22b6:	cf 01       	movw	r24, r30
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <printf>:
    22c2:	a0 e0       	ldi	r26, 0x00	; 0
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e7 e6       	ldi	r30, 0x67	; 103
    22c8:	f1 e1       	ldi	r31, 0x11	; 17
    22ca:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__prologue_saves__+0x20>
    22ce:	fe 01       	movw	r30, r28
    22d0:	35 96       	adiw	r30, 0x05	; 5
    22d2:	61 91       	ld	r22, Z+
    22d4:	71 91       	ld	r23, Z+
    22d6:	af 01       	movw	r20, r30
    22d8:	80 91 52 03 	lds	r24, 0x0352
    22dc:	90 91 53 03 	lds	r25, 0x0353
    22e0:	0e 94 a2 11 	call	0x2344	; 0x2344 <vfprintf>
    22e4:	e2 e0       	ldi	r30, 0x02	; 2
    22e6:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__epilogue_restores__+0x20>

000022ea <puts>:
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	e0 91 52 03 	lds	r30, 0x0352
    22f6:	f0 91 53 03 	lds	r31, 0x0353
    22fa:	23 81       	ldd	r18, Z+3	; 0x03
    22fc:	21 ff       	sbrs	r18, 1
    22fe:	1b c0       	rjmp	.+54     	; 0x2336 <puts+0x4c>
    2300:	ec 01       	movw	r28, r24
    2302:	00 e0       	ldi	r16, 0x00	; 0
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	89 91       	ld	r24, Y+
    2308:	60 91 52 03 	lds	r22, 0x0352
    230c:	70 91 53 03 	lds	r23, 0x0353
    2310:	db 01       	movw	r26, r22
    2312:	18 96       	adiw	r26, 0x08	; 8
    2314:	ed 91       	ld	r30, X+
    2316:	fc 91       	ld	r31, X
    2318:	19 97       	sbiw	r26, 0x09	; 9
    231a:	88 23       	and	r24, r24
    231c:	31 f0       	breq	.+12     	; 0x232a <puts+0x40>
    231e:	09 95       	icall
    2320:	89 2b       	or	r24, r25
    2322:	89 f3       	breq	.-30     	; 0x2306 <puts+0x1c>
    2324:	0f ef       	ldi	r16, 0xFF	; 255
    2326:	1f ef       	ldi	r17, 0xFF	; 255
    2328:	ee cf       	rjmp	.-36     	; 0x2306 <puts+0x1c>
    232a:	8a e0       	ldi	r24, 0x0A	; 10
    232c:	09 95       	icall
    232e:	89 2b       	or	r24, r25
    2330:	11 f4       	brne	.+4      	; 0x2336 <puts+0x4c>
    2332:	c8 01       	movw	r24, r16
    2334:	02 c0       	rjmp	.+4      	; 0x233a <puts+0x50>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	9f ef       	ldi	r25, 0xFF	; 255
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	08 95       	ret

00002344 <vfprintf>:
    2344:	ac e0       	ldi	r26, 0x0C	; 12
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 ea       	ldi	r30, 0xA8	; 168
    234a:	f1 e1       	ldi	r31, 0x11	; 17
    234c:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__>
    2350:	7c 01       	movw	r14, r24
    2352:	6b 01       	movw	r12, r22
    2354:	8a 01       	movw	r16, r20
    2356:	fc 01       	movw	r30, r24
    2358:	17 82       	std	Z+7, r1	; 0x07
    235a:	16 82       	std	Z+6, r1	; 0x06
    235c:	83 81       	ldd	r24, Z+3	; 0x03
    235e:	81 ff       	sbrs	r24, 1
    2360:	bd c1       	rjmp	.+890    	; 0x26dc <vfprintf+0x398>
    2362:	ce 01       	movw	r24, r28
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	4c 01       	movw	r8, r24
    2368:	f7 01       	movw	r30, r14
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	f6 01       	movw	r30, r12
    236e:	93 fd       	sbrc	r25, 3
    2370:	85 91       	lpm	r24, Z+
    2372:	93 ff       	sbrs	r25, 3
    2374:	81 91       	ld	r24, Z+
    2376:	6f 01       	movw	r12, r30
    2378:	88 23       	and	r24, r24
    237a:	09 f4       	brne	.+2      	; 0x237e <vfprintf+0x3a>
    237c:	ab c1       	rjmp	.+854    	; 0x26d4 <vfprintf+0x390>
    237e:	85 32       	cpi	r24, 0x25	; 37
    2380:	39 f4       	brne	.+14     	; 0x2390 <vfprintf+0x4c>
    2382:	93 fd       	sbrc	r25, 3
    2384:	85 91       	lpm	r24, Z+
    2386:	93 ff       	sbrs	r25, 3
    2388:	81 91       	ld	r24, Z+
    238a:	6f 01       	movw	r12, r30
    238c:	85 32       	cpi	r24, 0x25	; 37
    238e:	29 f4       	brne	.+10     	; 0x239a <vfprintf+0x56>
    2390:	b7 01       	movw	r22, r14
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    2398:	e7 cf       	rjmp	.-50     	; 0x2368 <vfprintf+0x24>
    239a:	51 2c       	mov	r5, r1
    239c:	31 2c       	mov	r3, r1
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	20 32       	cpi	r18, 0x20	; 32
    23a2:	a0 f4       	brcc	.+40     	; 0x23cc <vfprintf+0x88>
    23a4:	8b 32       	cpi	r24, 0x2B	; 43
    23a6:	69 f0       	breq	.+26     	; 0x23c2 <vfprintf+0x7e>
    23a8:	30 f4       	brcc	.+12     	; 0x23b6 <vfprintf+0x72>
    23aa:	80 32       	cpi	r24, 0x20	; 32
    23ac:	59 f0       	breq	.+22     	; 0x23c4 <vfprintf+0x80>
    23ae:	83 32       	cpi	r24, 0x23	; 35
    23b0:	69 f4       	brne	.+26     	; 0x23cc <vfprintf+0x88>
    23b2:	20 61       	ori	r18, 0x10	; 16
    23b4:	2c c0       	rjmp	.+88     	; 0x240e <vfprintf+0xca>
    23b6:	8d 32       	cpi	r24, 0x2D	; 45
    23b8:	39 f0       	breq	.+14     	; 0x23c8 <vfprintf+0x84>
    23ba:	80 33       	cpi	r24, 0x30	; 48
    23bc:	39 f4       	brne	.+14     	; 0x23cc <vfprintf+0x88>
    23be:	21 60       	ori	r18, 0x01	; 1
    23c0:	26 c0       	rjmp	.+76     	; 0x240e <vfprintf+0xca>
    23c2:	22 60       	ori	r18, 0x02	; 2
    23c4:	24 60       	ori	r18, 0x04	; 4
    23c6:	23 c0       	rjmp	.+70     	; 0x240e <vfprintf+0xca>
    23c8:	28 60       	ori	r18, 0x08	; 8
    23ca:	21 c0       	rjmp	.+66     	; 0x240e <vfprintf+0xca>
    23cc:	27 fd       	sbrc	r18, 7
    23ce:	27 c0       	rjmp	.+78     	; 0x241e <vfprintf+0xda>
    23d0:	30 ed       	ldi	r19, 0xD0	; 208
    23d2:	38 0f       	add	r19, r24
    23d4:	3a 30       	cpi	r19, 0x0A	; 10
    23d6:	78 f4       	brcc	.+30     	; 0x23f6 <vfprintf+0xb2>
    23d8:	26 ff       	sbrs	r18, 6
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <vfprintf+0xa4>
    23dc:	fa e0       	ldi	r31, 0x0A	; 10
    23de:	5f 9e       	mul	r5, r31
    23e0:	30 0d       	add	r19, r0
    23e2:	11 24       	eor	r1, r1
    23e4:	53 2e       	mov	r5, r19
    23e6:	13 c0       	rjmp	.+38     	; 0x240e <vfprintf+0xca>
    23e8:	8a e0       	ldi	r24, 0x0A	; 10
    23ea:	38 9e       	mul	r3, r24
    23ec:	30 0d       	add	r19, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	33 2e       	mov	r3, r19
    23f2:	20 62       	ori	r18, 0x20	; 32
    23f4:	0c c0       	rjmp	.+24     	; 0x240e <vfprintf+0xca>
    23f6:	8e 32       	cpi	r24, 0x2E	; 46
    23f8:	21 f4       	brne	.+8      	; 0x2402 <vfprintf+0xbe>
    23fa:	26 fd       	sbrc	r18, 6
    23fc:	6b c1       	rjmp	.+726    	; 0x26d4 <vfprintf+0x390>
    23fe:	20 64       	ori	r18, 0x40	; 64
    2400:	06 c0       	rjmp	.+12     	; 0x240e <vfprintf+0xca>
    2402:	8c 36       	cpi	r24, 0x6C	; 108
    2404:	11 f4       	brne	.+4      	; 0x240a <vfprintf+0xc6>
    2406:	20 68       	ori	r18, 0x80	; 128
    2408:	02 c0       	rjmp	.+4      	; 0x240e <vfprintf+0xca>
    240a:	88 36       	cpi	r24, 0x68	; 104
    240c:	41 f4       	brne	.+16     	; 0x241e <vfprintf+0xda>
    240e:	f6 01       	movw	r30, r12
    2410:	93 fd       	sbrc	r25, 3
    2412:	85 91       	lpm	r24, Z+
    2414:	93 ff       	sbrs	r25, 3
    2416:	81 91       	ld	r24, Z+
    2418:	6f 01       	movw	r12, r30
    241a:	81 11       	cpse	r24, r1
    241c:	c1 cf       	rjmp	.-126    	; 0x23a0 <vfprintf+0x5c>
    241e:	98 2f       	mov	r25, r24
    2420:	9f 7d       	andi	r25, 0xDF	; 223
    2422:	95 54       	subi	r25, 0x45	; 69
    2424:	93 30       	cpi	r25, 0x03	; 3
    2426:	28 f4       	brcc	.+10     	; 0x2432 <vfprintf+0xee>
    2428:	0c 5f       	subi	r16, 0xFC	; 252
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	ff e3       	ldi	r31, 0x3F	; 63
    242e:	f9 83       	std	Y+1, r31	; 0x01
    2430:	0d c0       	rjmp	.+26     	; 0x244c <vfprintf+0x108>
    2432:	83 36       	cpi	r24, 0x63	; 99
    2434:	31 f0       	breq	.+12     	; 0x2442 <vfprintf+0xfe>
    2436:	83 37       	cpi	r24, 0x73	; 115
    2438:	71 f0       	breq	.+28     	; 0x2456 <vfprintf+0x112>
    243a:	83 35       	cpi	r24, 0x53	; 83
    243c:	09 f0       	breq	.+2      	; 0x2440 <vfprintf+0xfc>
    243e:	5b c0       	rjmp	.+182    	; 0x24f6 <vfprintf+0x1b2>
    2440:	22 c0       	rjmp	.+68     	; 0x2486 <vfprintf+0x142>
    2442:	f8 01       	movw	r30, r16
    2444:	80 81       	ld	r24, Z
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	0e 5f       	subi	r16, 0xFE	; 254
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	44 24       	eor	r4, r4
    244e:	43 94       	inc	r4
    2450:	51 2c       	mov	r5, r1
    2452:	54 01       	movw	r10, r8
    2454:	15 c0       	rjmp	.+42     	; 0x2480 <vfprintf+0x13c>
    2456:	38 01       	movw	r6, r16
    2458:	f2 e0       	ldi	r31, 0x02	; 2
    245a:	6f 0e       	add	r6, r31
    245c:	71 1c       	adc	r7, r1
    245e:	f8 01       	movw	r30, r16
    2460:	a0 80       	ld	r10, Z
    2462:	b1 80       	ldd	r11, Z+1	; 0x01
    2464:	26 ff       	sbrs	r18, 6
    2466:	03 c0       	rjmp	.+6      	; 0x246e <vfprintf+0x12a>
    2468:	65 2d       	mov	r22, r5
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <vfprintf+0x12e>
    246e:	6f ef       	ldi	r22, 0xFF	; 255
    2470:	7f ef       	ldi	r23, 0xFF	; 255
    2472:	c5 01       	movw	r24, r10
    2474:	2c 87       	std	Y+12, r18	; 0x0c
    2476:	0e 94 a2 13 	call	0x2744	; 0x2744 <strnlen>
    247a:	2c 01       	movw	r4, r24
    247c:	83 01       	movw	r16, r6
    247e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2480:	2f 77       	andi	r18, 0x7F	; 127
    2482:	22 2e       	mov	r2, r18
    2484:	17 c0       	rjmp	.+46     	; 0x24b4 <vfprintf+0x170>
    2486:	38 01       	movw	r6, r16
    2488:	f2 e0       	ldi	r31, 0x02	; 2
    248a:	6f 0e       	add	r6, r31
    248c:	71 1c       	adc	r7, r1
    248e:	f8 01       	movw	r30, r16
    2490:	a0 80       	ld	r10, Z
    2492:	b1 80       	ldd	r11, Z+1	; 0x01
    2494:	26 ff       	sbrs	r18, 6
    2496:	03 c0       	rjmp	.+6      	; 0x249e <vfprintf+0x15a>
    2498:	65 2d       	mov	r22, r5
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <vfprintf+0x15e>
    249e:	6f ef       	ldi	r22, 0xFF	; 255
    24a0:	7f ef       	ldi	r23, 0xFF	; 255
    24a2:	c5 01       	movw	r24, r10
    24a4:	2c 87       	std	Y+12, r18	; 0x0c
    24a6:	0e 94 90 13 	call	0x2720	; 0x2720 <strnlen_P>
    24aa:	2c 01       	movw	r4, r24
    24ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    24ae:	20 68       	ori	r18, 0x80	; 128
    24b0:	22 2e       	mov	r2, r18
    24b2:	83 01       	movw	r16, r6
    24b4:	23 fc       	sbrc	r2, 3
    24b6:	1b c0       	rjmp	.+54     	; 0x24ee <vfprintf+0x1aa>
    24b8:	83 2d       	mov	r24, r3
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	48 16       	cp	r4, r24
    24be:	59 06       	cpc	r5, r25
    24c0:	b0 f4       	brcc	.+44     	; 0x24ee <vfprintf+0x1aa>
    24c2:	b7 01       	movw	r22, r14
    24c4:	80 e2       	ldi	r24, 0x20	; 32
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    24cc:	3a 94       	dec	r3
    24ce:	f4 cf       	rjmp	.-24     	; 0x24b8 <vfprintf+0x174>
    24d0:	f5 01       	movw	r30, r10
    24d2:	27 fc       	sbrc	r2, 7
    24d4:	85 91       	lpm	r24, Z+
    24d6:	27 fe       	sbrs	r2, 7
    24d8:	81 91       	ld	r24, Z+
    24da:	5f 01       	movw	r10, r30
    24dc:	b7 01       	movw	r22, r14
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    24e4:	31 10       	cpse	r3, r1
    24e6:	3a 94       	dec	r3
    24e8:	f1 e0       	ldi	r31, 0x01	; 1
    24ea:	4f 1a       	sub	r4, r31
    24ec:	51 08       	sbc	r5, r1
    24ee:	41 14       	cp	r4, r1
    24f0:	51 04       	cpc	r5, r1
    24f2:	71 f7       	brne	.-36     	; 0x24d0 <vfprintf+0x18c>
    24f4:	e5 c0       	rjmp	.+458    	; 0x26c0 <vfprintf+0x37c>
    24f6:	84 36       	cpi	r24, 0x64	; 100
    24f8:	11 f0       	breq	.+4      	; 0x24fe <vfprintf+0x1ba>
    24fa:	89 36       	cpi	r24, 0x69	; 105
    24fc:	39 f5       	brne	.+78     	; 0x254c <vfprintf+0x208>
    24fe:	f8 01       	movw	r30, r16
    2500:	27 ff       	sbrs	r18, 7
    2502:	07 c0       	rjmp	.+14     	; 0x2512 <vfprintf+0x1ce>
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	0c 5f       	subi	r16, 0xFC	; 252
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <vfprintf+0x1de>
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	88 27       	eor	r24, r24
    2518:	77 fd       	sbrc	r23, 7
    251a:	80 95       	com	r24
    251c:	98 2f       	mov	r25, r24
    251e:	0e 5f       	subi	r16, 0xFE	; 254
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	2f 76       	andi	r18, 0x6F	; 111
    2524:	b2 2e       	mov	r11, r18
    2526:	97 ff       	sbrs	r25, 7
    2528:	09 c0       	rjmp	.+18     	; 0x253c <vfprintf+0x1f8>
    252a:	90 95       	com	r25
    252c:	80 95       	com	r24
    252e:	70 95       	com	r23
    2530:	61 95       	neg	r22
    2532:	7f 4f       	sbci	r23, 0xFF	; 255
    2534:	8f 4f       	sbci	r24, 0xFF	; 255
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	20 68       	ori	r18, 0x80	; 128
    253a:	b2 2e       	mov	r11, r18
    253c:	2a e0       	ldi	r18, 0x0A	; 10
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	a4 01       	movw	r20, r8
    2542:	0e 94 df 13 	call	0x27be	; 0x27be <__ultoa_invert>
    2546:	a8 2e       	mov	r10, r24
    2548:	a8 18       	sub	r10, r8
    254a:	44 c0       	rjmp	.+136    	; 0x25d4 <vfprintf+0x290>
    254c:	85 37       	cpi	r24, 0x75	; 117
    254e:	29 f4       	brne	.+10     	; 0x255a <vfprintf+0x216>
    2550:	2f 7e       	andi	r18, 0xEF	; 239
    2552:	b2 2e       	mov	r11, r18
    2554:	2a e0       	ldi	r18, 0x0A	; 10
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	25 c0       	rjmp	.+74     	; 0x25a4 <vfprintf+0x260>
    255a:	f2 2f       	mov	r31, r18
    255c:	f9 7f       	andi	r31, 0xF9	; 249
    255e:	bf 2e       	mov	r11, r31
    2560:	8f 36       	cpi	r24, 0x6F	; 111
    2562:	c1 f0       	breq	.+48     	; 0x2594 <vfprintf+0x250>
    2564:	18 f4       	brcc	.+6      	; 0x256c <vfprintf+0x228>
    2566:	88 35       	cpi	r24, 0x58	; 88
    2568:	79 f0       	breq	.+30     	; 0x2588 <vfprintf+0x244>
    256a:	b4 c0       	rjmp	.+360    	; 0x26d4 <vfprintf+0x390>
    256c:	80 37       	cpi	r24, 0x70	; 112
    256e:	19 f0       	breq	.+6      	; 0x2576 <vfprintf+0x232>
    2570:	88 37       	cpi	r24, 0x78	; 120
    2572:	21 f0       	breq	.+8      	; 0x257c <vfprintf+0x238>
    2574:	af c0       	rjmp	.+350    	; 0x26d4 <vfprintf+0x390>
    2576:	2f 2f       	mov	r18, r31
    2578:	20 61       	ori	r18, 0x10	; 16
    257a:	b2 2e       	mov	r11, r18
    257c:	b4 fe       	sbrs	r11, 4
    257e:	0d c0       	rjmp	.+26     	; 0x259a <vfprintf+0x256>
    2580:	8b 2d       	mov	r24, r11
    2582:	84 60       	ori	r24, 0x04	; 4
    2584:	b8 2e       	mov	r11, r24
    2586:	09 c0       	rjmp	.+18     	; 0x259a <vfprintf+0x256>
    2588:	24 ff       	sbrs	r18, 4
    258a:	0a c0       	rjmp	.+20     	; 0x25a0 <vfprintf+0x25c>
    258c:	9f 2f       	mov	r25, r31
    258e:	96 60       	ori	r25, 0x06	; 6
    2590:	b9 2e       	mov	r11, r25
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <vfprintf+0x25c>
    2594:	28 e0       	ldi	r18, 0x08	; 8
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <vfprintf+0x260>
    259a:	20 e1       	ldi	r18, 0x10	; 16
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <vfprintf+0x260>
    25a0:	20 e1       	ldi	r18, 0x10	; 16
    25a2:	32 e0       	ldi	r19, 0x02	; 2
    25a4:	f8 01       	movw	r30, r16
    25a6:	b7 fe       	sbrs	r11, 7
    25a8:	07 c0       	rjmp	.+14     	; 0x25b8 <vfprintf+0x274>
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	0c 5f       	subi	r16, 0xFC	; 252
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <vfprintf+0x280>
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	0e 5f       	subi	r16, 0xFE	; 254
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	a4 01       	movw	r20, r8
    25c6:	0e 94 df 13 	call	0x27be	; 0x27be <__ultoa_invert>
    25ca:	a8 2e       	mov	r10, r24
    25cc:	a8 18       	sub	r10, r8
    25ce:	fb 2d       	mov	r31, r11
    25d0:	ff 77       	andi	r31, 0x7F	; 127
    25d2:	bf 2e       	mov	r11, r31
    25d4:	b6 fe       	sbrs	r11, 6
    25d6:	0b c0       	rjmp	.+22     	; 0x25ee <vfprintf+0x2aa>
    25d8:	2b 2d       	mov	r18, r11
    25da:	2e 7f       	andi	r18, 0xFE	; 254
    25dc:	a5 14       	cp	r10, r5
    25de:	50 f4       	brcc	.+20     	; 0x25f4 <vfprintf+0x2b0>
    25e0:	b4 fe       	sbrs	r11, 4
    25e2:	0a c0       	rjmp	.+20     	; 0x25f8 <vfprintf+0x2b4>
    25e4:	b2 fc       	sbrc	r11, 2
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <vfprintf+0x2b4>
    25e8:	2b 2d       	mov	r18, r11
    25ea:	2e 7e       	andi	r18, 0xEE	; 238
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <vfprintf+0x2b4>
    25ee:	7a 2c       	mov	r7, r10
    25f0:	2b 2d       	mov	r18, r11
    25f2:	03 c0       	rjmp	.+6      	; 0x25fa <vfprintf+0x2b6>
    25f4:	7a 2c       	mov	r7, r10
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <vfprintf+0x2b6>
    25f8:	75 2c       	mov	r7, r5
    25fa:	24 ff       	sbrs	r18, 4
    25fc:	0d c0       	rjmp	.+26     	; 0x2618 <vfprintf+0x2d4>
    25fe:	fe 01       	movw	r30, r28
    2600:	ea 0d       	add	r30, r10
    2602:	f1 1d       	adc	r31, r1
    2604:	80 81       	ld	r24, Z
    2606:	80 33       	cpi	r24, 0x30	; 48
    2608:	11 f4       	brne	.+4      	; 0x260e <vfprintf+0x2ca>
    260a:	29 7e       	andi	r18, 0xE9	; 233
    260c:	09 c0       	rjmp	.+18     	; 0x2620 <vfprintf+0x2dc>
    260e:	22 ff       	sbrs	r18, 2
    2610:	06 c0       	rjmp	.+12     	; 0x261e <vfprintf+0x2da>
    2612:	73 94       	inc	r7
    2614:	73 94       	inc	r7
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <vfprintf+0x2dc>
    2618:	82 2f       	mov	r24, r18
    261a:	86 78       	andi	r24, 0x86	; 134
    261c:	09 f0       	breq	.+2      	; 0x2620 <vfprintf+0x2dc>
    261e:	73 94       	inc	r7
    2620:	23 fd       	sbrc	r18, 3
    2622:	13 c0       	rjmp	.+38     	; 0x264a <vfprintf+0x306>
    2624:	20 ff       	sbrs	r18, 0
    2626:	06 c0       	rjmp	.+12     	; 0x2634 <vfprintf+0x2f0>
    2628:	5a 2c       	mov	r5, r10
    262a:	73 14       	cp	r7, r3
    262c:	18 f4       	brcc	.+6      	; 0x2634 <vfprintf+0x2f0>
    262e:	53 0c       	add	r5, r3
    2630:	57 18       	sub	r5, r7
    2632:	73 2c       	mov	r7, r3
    2634:	73 14       	cp	r7, r3
    2636:	68 f4       	brcc	.+26     	; 0x2652 <vfprintf+0x30e>
    2638:	b7 01       	movw	r22, r14
    263a:	80 e2       	ldi	r24, 0x20	; 32
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	2c 87       	std	Y+12, r18	; 0x0c
    2640:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    2644:	73 94       	inc	r7
    2646:	2c 85       	ldd	r18, Y+12	; 0x0c
    2648:	f5 cf       	rjmp	.-22     	; 0x2634 <vfprintf+0x2f0>
    264a:	73 14       	cp	r7, r3
    264c:	10 f4       	brcc	.+4      	; 0x2652 <vfprintf+0x30e>
    264e:	37 18       	sub	r3, r7
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <vfprintf+0x310>
    2652:	31 2c       	mov	r3, r1
    2654:	24 ff       	sbrs	r18, 4
    2656:	12 c0       	rjmp	.+36     	; 0x267c <vfprintf+0x338>
    2658:	b7 01       	movw	r22, r14
    265a:	80 e3       	ldi	r24, 0x30	; 48
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	2c 87       	std	Y+12, r18	; 0x0c
    2660:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    2664:	2c 85       	ldd	r18, Y+12	; 0x0c
    2666:	22 ff       	sbrs	r18, 2
    2668:	17 c0       	rjmp	.+46     	; 0x2698 <vfprintf+0x354>
    266a:	21 ff       	sbrs	r18, 1
    266c:	03 c0       	rjmp	.+6      	; 0x2674 <vfprintf+0x330>
    266e:	88 e5       	ldi	r24, 0x58	; 88
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <vfprintf+0x334>
    2674:	88 e7       	ldi	r24, 0x78	; 120
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	b7 01       	movw	r22, r14
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <vfprintf+0x350>
    267c:	82 2f       	mov	r24, r18
    267e:	86 78       	andi	r24, 0x86	; 134
    2680:	59 f0       	breq	.+22     	; 0x2698 <vfprintf+0x354>
    2682:	21 fd       	sbrc	r18, 1
    2684:	02 c0       	rjmp	.+4      	; 0x268a <vfprintf+0x346>
    2686:	80 e2       	ldi	r24, 0x20	; 32
    2688:	01 c0       	rjmp	.+2      	; 0x268c <vfprintf+0x348>
    268a:	8b e2       	ldi	r24, 0x2B	; 43
    268c:	27 fd       	sbrc	r18, 7
    268e:	8d e2       	ldi	r24, 0x2D	; 45
    2690:	b7 01       	movw	r22, r14
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    2698:	a5 14       	cp	r10, r5
    269a:	38 f4       	brcc	.+14     	; 0x26aa <vfprintf+0x366>
    269c:	b7 01       	movw	r22, r14
    269e:	80 e3       	ldi	r24, 0x30	; 48
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    26a6:	5a 94       	dec	r5
    26a8:	f7 cf       	rjmp	.-18     	; 0x2698 <vfprintf+0x354>
    26aa:	aa 94       	dec	r10
    26ac:	f4 01       	movw	r30, r8
    26ae:	ea 0d       	add	r30, r10
    26b0:	f1 1d       	adc	r31, r1
    26b2:	80 81       	ld	r24, Z
    26b4:	b7 01       	movw	r22, r14
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    26bc:	a1 10       	cpse	r10, r1
    26be:	f5 cf       	rjmp	.-22     	; 0x26aa <vfprintf+0x366>
    26c0:	33 20       	and	r3, r3
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <vfprintf+0x382>
    26c4:	51 ce       	rjmp	.-862    	; 0x2368 <vfprintf+0x24>
    26c6:	b7 01       	movw	r22, r14
    26c8:	80 e2       	ldi	r24, 0x20	; 32
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 ad 13 	call	0x275a	; 0x275a <fputc>
    26d0:	3a 94       	dec	r3
    26d2:	f6 cf       	rjmp	.-20     	; 0x26c0 <vfprintf+0x37c>
    26d4:	f7 01       	movw	r30, r14
    26d6:	86 81       	ldd	r24, Z+6	; 0x06
    26d8:	97 81       	ldd	r25, Z+7	; 0x07
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <vfprintf+0x39c>
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
    26de:	9f ef       	ldi	r25, 0xFF	; 255
    26e0:	2c 96       	adiw	r28, 0x0c	; 12
    26e2:	e2 e1       	ldi	r30, 0x12	; 18
    26e4:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__>

000026e8 <calloc>:
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	86 9f       	mul	r24, r22
    26f2:	80 01       	movw	r16, r0
    26f4:	87 9f       	mul	r24, r23
    26f6:	10 0d       	add	r17, r0
    26f8:	96 9f       	mul	r25, r22
    26fa:	10 0d       	add	r17, r0
    26fc:	11 24       	eor	r1, r1
    26fe:	c8 01       	movw	r24, r16
    2700:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <malloc>
    2704:	ec 01       	movw	r28, r24
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	29 f0       	breq	.+10     	; 0x2714 <calloc+0x2c>
    270a:	a8 01       	movw	r20, r16
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	0e 94 9b 13 	call	0x2736	; 0x2736 <memset>
    2714:	ce 01       	movw	r24, r28
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	08 95       	ret

00002720 <strnlen_P>:
    2720:	fc 01       	movw	r30, r24
    2722:	05 90       	lpm	r0, Z+
    2724:	61 50       	subi	r22, 0x01	; 1
    2726:	70 40       	sbci	r23, 0x00	; 0
    2728:	01 10       	cpse	r0, r1
    272a:	d8 f7       	brcc	.-10     	; 0x2722 <strnlen_P+0x2>
    272c:	80 95       	com	r24
    272e:	90 95       	com	r25
    2730:	8e 0f       	add	r24, r30
    2732:	9f 1f       	adc	r25, r31
    2734:	08 95       	ret

00002736 <memset>:
    2736:	dc 01       	movw	r26, r24
    2738:	01 c0       	rjmp	.+2      	; 0x273c <memset+0x6>
    273a:	6d 93       	st	X+, r22
    273c:	41 50       	subi	r20, 0x01	; 1
    273e:	50 40       	sbci	r21, 0x00	; 0
    2740:	e0 f7       	brcc	.-8      	; 0x273a <memset+0x4>
    2742:	08 95       	ret

00002744 <strnlen>:
    2744:	fc 01       	movw	r30, r24
    2746:	61 50       	subi	r22, 0x01	; 1
    2748:	70 40       	sbci	r23, 0x00	; 0
    274a:	01 90       	ld	r0, Z+
    274c:	01 10       	cpse	r0, r1
    274e:	d8 f7       	brcc	.-10     	; 0x2746 <strnlen+0x2>
    2750:	80 95       	com	r24
    2752:	90 95       	com	r25
    2754:	8e 0f       	add	r24, r30
    2756:	9f 1f       	adc	r25, r31
    2758:	08 95       	ret

0000275a <fputc>:
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	18 2f       	mov	r17, r24
    2764:	09 2f       	mov	r16, r25
    2766:	eb 01       	movw	r28, r22
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	81 fd       	sbrc	r24, 1
    276c:	03 c0       	rjmp	.+6      	; 0x2774 <fputc+0x1a>
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	9f ef       	ldi	r25, 0xFF	; 255
    2772:	20 c0       	rjmp	.+64     	; 0x27b4 <fputc+0x5a>
    2774:	82 ff       	sbrs	r24, 2
    2776:	10 c0       	rjmp	.+32     	; 0x2798 <fputc+0x3e>
    2778:	4e 81       	ldd	r20, Y+6	; 0x06
    277a:	5f 81       	ldd	r21, Y+7	; 0x07
    277c:	2c 81       	ldd	r18, Y+4	; 0x04
    277e:	3d 81       	ldd	r19, Y+5	; 0x05
    2780:	42 17       	cp	r20, r18
    2782:	53 07       	cpc	r21, r19
    2784:	7c f4       	brge	.+30     	; 0x27a4 <fputc+0x4a>
    2786:	e8 81       	ld	r30, Y
    2788:	f9 81       	ldd	r31, Y+1	; 0x01
    278a:	9f 01       	movw	r18, r30
    278c:	2f 5f       	subi	r18, 0xFF	; 255
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	39 83       	std	Y+1, r19	; 0x01
    2792:	28 83       	st	Y, r18
    2794:	10 83       	st	Z, r17
    2796:	06 c0       	rjmp	.+12     	; 0x27a4 <fputc+0x4a>
    2798:	e8 85       	ldd	r30, Y+8	; 0x08
    279a:	f9 85       	ldd	r31, Y+9	; 0x09
    279c:	81 2f       	mov	r24, r17
    279e:	09 95       	icall
    27a0:	89 2b       	or	r24, r25
    27a2:	29 f7       	brne	.-54     	; 0x276e <fputc+0x14>
    27a4:	2e 81       	ldd	r18, Y+6	; 0x06
    27a6:	3f 81       	ldd	r19, Y+7	; 0x07
    27a8:	2f 5f       	subi	r18, 0xFF	; 255
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	3f 83       	std	Y+7, r19	; 0x07
    27ae:	2e 83       	std	Y+6, r18	; 0x06
    27b0:	81 2f       	mov	r24, r17
    27b2:	90 2f       	mov	r25, r16
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret

000027be <__ultoa_invert>:
    27be:	fa 01       	movw	r30, r20
    27c0:	aa 27       	eor	r26, r26
    27c2:	28 30       	cpi	r18, 0x08	; 8
    27c4:	51 f1       	breq	.+84     	; 0x281a <__ultoa_invert+0x5c>
    27c6:	20 31       	cpi	r18, 0x10	; 16
    27c8:	81 f1       	breq	.+96     	; 0x282a <__ultoa_invert+0x6c>
    27ca:	e8 94       	clt
    27cc:	6f 93       	push	r22
    27ce:	6e 7f       	andi	r22, 0xFE	; 254
    27d0:	6e 5f       	subi	r22, 0xFE	; 254
    27d2:	7f 4f       	sbci	r23, 0xFF	; 255
    27d4:	8f 4f       	sbci	r24, 0xFF	; 255
    27d6:	9f 4f       	sbci	r25, 0xFF	; 255
    27d8:	af 4f       	sbci	r26, 0xFF	; 255
    27da:	b1 e0       	ldi	r27, 0x01	; 1
    27dc:	3e d0       	rcall	.+124    	; 0x285a <__ultoa_invert+0x9c>
    27de:	b4 e0       	ldi	r27, 0x04	; 4
    27e0:	3c d0       	rcall	.+120    	; 0x285a <__ultoa_invert+0x9c>
    27e2:	67 0f       	add	r22, r23
    27e4:	78 1f       	adc	r23, r24
    27e6:	89 1f       	adc	r24, r25
    27e8:	9a 1f       	adc	r25, r26
    27ea:	a1 1d       	adc	r26, r1
    27ec:	68 0f       	add	r22, r24
    27ee:	79 1f       	adc	r23, r25
    27f0:	8a 1f       	adc	r24, r26
    27f2:	91 1d       	adc	r25, r1
    27f4:	a1 1d       	adc	r26, r1
    27f6:	6a 0f       	add	r22, r26
    27f8:	71 1d       	adc	r23, r1
    27fa:	81 1d       	adc	r24, r1
    27fc:	91 1d       	adc	r25, r1
    27fe:	a1 1d       	adc	r26, r1
    2800:	20 d0       	rcall	.+64     	; 0x2842 <__ultoa_invert+0x84>
    2802:	09 f4       	brne	.+2      	; 0x2806 <__ultoa_invert+0x48>
    2804:	68 94       	set
    2806:	3f 91       	pop	r19
    2808:	2a e0       	ldi	r18, 0x0A	; 10
    280a:	26 9f       	mul	r18, r22
    280c:	11 24       	eor	r1, r1
    280e:	30 19       	sub	r19, r0
    2810:	30 5d       	subi	r19, 0xD0	; 208
    2812:	31 93       	st	Z+, r19
    2814:	de f6       	brtc	.-74     	; 0x27cc <__ultoa_invert+0xe>
    2816:	cf 01       	movw	r24, r30
    2818:	08 95       	ret
    281a:	46 2f       	mov	r20, r22
    281c:	47 70       	andi	r20, 0x07	; 7
    281e:	40 5d       	subi	r20, 0xD0	; 208
    2820:	41 93       	st	Z+, r20
    2822:	b3 e0       	ldi	r27, 0x03	; 3
    2824:	0f d0       	rcall	.+30     	; 0x2844 <__ultoa_invert+0x86>
    2826:	c9 f7       	brne	.-14     	; 0x281a <__ultoa_invert+0x5c>
    2828:	f6 cf       	rjmp	.-20     	; 0x2816 <__ultoa_invert+0x58>
    282a:	46 2f       	mov	r20, r22
    282c:	4f 70       	andi	r20, 0x0F	; 15
    282e:	40 5d       	subi	r20, 0xD0	; 208
    2830:	4a 33       	cpi	r20, 0x3A	; 58
    2832:	18 f0       	brcs	.+6      	; 0x283a <__ultoa_invert+0x7c>
    2834:	49 5d       	subi	r20, 0xD9	; 217
    2836:	31 fd       	sbrc	r19, 1
    2838:	40 52       	subi	r20, 0x20	; 32
    283a:	41 93       	st	Z+, r20
    283c:	02 d0       	rcall	.+4      	; 0x2842 <__ultoa_invert+0x84>
    283e:	a9 f7       	brne	.-22     	; 0x282a <__ultoa_invert+0x6c>
    2840:	ea cf       	rjmp	.-44     	; 0x2816 <__ultoa_invert+0x58>
    2842:	b4 e0       	ldi	r27, 0x04	; 4
    2844:	a6 95       	lsr	r26
    2846:	97 95       	ror	r25
    2848:	87 95       	ror	r24
    284a:	77 95       	ror	r23
    284c:	67 95       	ror	r22
    284e:	ba 95       	dec	r27
    2850:	c9 f7       	brne	.-14     	; 0x2844 <__ultoa_invert+0x86>
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	61 05       	cpc	r22, r1
    2856:	71 05       	cpc	r23, r1
    2858:	08 95       	ret
    285a:	9b 01       	movw	r18, r22
    285c:	ac 01       	movw	r20, r24
    285e:	0a 2e       	mov	r0, r26
    2860:	06 94       	lsr	r0
    2862:	57 95       	ror	r21
    2864:	47 95       	ror	r20
    2866:	37 95       	ror	r19
    2868:	27 95       	ror	r18
    286a:	ba 95       	dec	r27
    286c:	c9 f7       	brne	.-14     	; 0x2860 <__ultoa_invert+0xa2>
    286e:	62 0f       	add	r22, r18
    2870:	73 1f       	adc	r23, r19
    2872:	84 1f       	adc	r24, r20
    2874:	95 1f       	adc	r25, r21
    2876:	a0 1d       	adc	r26, r0
    2878:	08 95       	ret

0000287a <__prologue_saves__>:
    287a:	2f 92       	push	r2
    287c:	3f 92       	push	r3
    287e:	4f 92       	push	r4
    2880:	5f 92       	push	r5
    2882:	6f 92       	push	r6
    2884:	7f 92       	push	r7
    2886:	8f 92       	push	r8
    2888:	9f 92       	push	r9
    288a:	af 92       	push	r10
    288c:	bf 92       	push	r11
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	ca 1b       	sub	r28, r26
    28a4:	db 0b       	sbc	r29, r27
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	09 94       	ijmp

000028b2 <__epilogue_restores__>:
    28b2:	2a 88       	ldd	r2, Y+18	; 0x12
    28b4:	39 88       	ldd	r3, Y+17	; 0x11
    28b6:	48 88       	ldd	r4, Y+16	; 0x10
    28b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    28bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28be:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c4:	b9 84       	ldd	r11, Y+9	; 0x09
    28c6:	c8 84       	ldd	r12, Y+8	; 0x08
    28c8:	df 80       	ldd	r13, Y+7	; 0x07
    28ca:	ee 80       	ldd	r14, Y+6	; 0x06
    28cc:	fd 80       	ldd	r15, Y+5	; 0x05
    28ce:	0c 81       	ldd	r16, Y+4	; 0x04
    28d0:	1b 81       	ldd	r17, Y+3	; 0x03
    28d2:	aa 81       	ldd	r26, Y+2	; 0x02
    28d4:	b9 81       	ldd	r27, Y+1	; 0x01
    28d6:	ce 0f       	add	r28, r30
    28d8:	d1 1d       	adc	r29, r1
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	ed 01       	movw	r28, r26
    28e6:	08 95       	ret

000028e8 <_exit>:
    28e8:	f8 94       	cli

000028ea <__stop_program>:
    28ea:	ff cf       	rjmp	.-2      	; 0x28ea <__stop_program>
