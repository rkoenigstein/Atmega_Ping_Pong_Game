
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00001196  0000122a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800342  00800342  0000146c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000318  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b6b  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fb5  00000000  00000000  0000431f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001093  00000000  00000000  000052d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000714  00000000  00000000  00006368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007b0  00000000  00000000  00006a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012bd  00000000  00000000  0000722c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  000084e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <print_buffer+0x60>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e9       	ldi	r30, 0x96	; 150
     37c:	f1 e1       	ldi	r31, 0x11	; 17
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 34       	cpi	r26, 0x42	; 66
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 e4       	ldi	r26, 0x42	; 66
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 35       	cpi	r26, 0x59	; 89
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <main>
     39e:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
     3a6:	8b b7       	in	r24, 0x3b	; 59
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	8b bf       	out	0x3b, r24	; 59
     3ac:	08 95       	ret

000003ae <ADC_read>:
}

char ADC_read(char channel)
{
	int * adc_channel = 0x1400;
	adc_channel[0] = channel;
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 01 14 	sts	0x1401, r25
     3b4:	80 93 00 14 	sts	0x1400, r24
	char value;
	while(!flag);
     3b8:	80 91 42 03 	lds	r24, 0x0342
     3bc:	90 91 43 03 	lds	r25, 0x0343
     3c0:	89 2b       	or	r24, r25
     3c2:	d1 f3       	breq	.-12     	; 0x3b8 <ADC_read+0xa>
	value = adc_channel[20];
     3c4:	80 91 28 14 	lds	r24, 0x1428
	flag = 0;
     3c8:	10 92 43 03 	sts	0x0343, r1
     3cc:	10 92 42 03 	sts	0x0342, r1
	return value;
}
     3d0:	08 95       	ret

000003d2 <__vector_3>:

ISR(INT2_vect)
{
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
	flag = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	90 93 43 03 	sts	0x0343, r25
     3e8:	80 93 42 03 	sts	0x0342, r24
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <can_init>:

#include "can_driver.h"


void can_init(void)
{
     3fa:	08 95       	ret

000003fc <mcp_reset>:
#define RX_STATUS		0b10110000
#define BIT_MODIFY		0b00000101

void mcp_reset(void)
{
	spi_MasterTransmit(RESET);
     3fc:	80 ec       	ldi	r24, 0xC0	; 192
     3fe:	0e 94 13 02 	call	0x426	; 0x426 <spi_MasterTransmit>
     402:	08 95       	ret

00000404 <mcp_init>:
}

void mcp_init(void)
{
	mcp_reset();
     404:	0e 94 fe 01 	call	0x3fc	; 0x3fc <mcp_reset>
     408:	08 95       	ret

0000040a <spi_Slaveinit>:
#define DD_SCK DDB7

void spi_Slaveinit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
     40a:	80 e4       	ldi	r24, 0x40	; 64
     40c:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1<<SPE);
     40e:	8d b9       	out	0x0d, r24	; 13
     410:	08 95       	ret

00000412 <spi_Masterinit>:
}
void spi_Masterinit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB5)|(1<<DDB7);
     412:	80 ea       	ldi	r24, 0xA0	; 160
     414:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     416:	81 e5       	ldi	r24, 0x51	; 81
     418:	8d b9       	out	0x0d, r24	; 13
     41a:	08 95       	ret

0000041c <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
     41c:	0e 94 09 02 	call	0x412	; 0x412 <spi_Masterinit>
	spi_Slaveinit();
     420:	0e 94 05 02 	call	0x40a	; 0x40a <spi_Slaveinit>
     424:	08 95       	ret

00000426 <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     426:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     428:	77 9b       	sbis	0x0e, 7	; 14
     42a:	fe cf       	rjmp	.-4      	; 0x428 <spi_MasterTransmit+0x2>
	;
}
     42c:	08 95       	ret

0000042e <print1>:
	printf("I am dumb\n");
}

void print1(void)
{
	printf("1\n");
     42e:	89 e1       	ldi	r24, 0x19	; 25
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
     436:	08 95       	ret

00000438 <print2>:
}

void print2(void)
{
	printf("2\n");
     438:	8b e1       	ldi	r24, 0x1B	; 27
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
     440:	08 95       	ret

00000442 <assignParents>:
	_mnode->m_content.operation = operation;
	return _mnode;
}

static void assignParents(MenuNode* node)
{
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	ec 01       	movw	r28, r24
	if(node)
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	f9 f0       	breq	.+62     	; 0x48c <assignParents+0x4a>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
     44e:	88 85       	ldd	r24, Y+8	; 0x08
     450:	88 23       	and	r24, r24
     452:	01 f1       	breq	.+64     	; 0x494 <assignParents+0x52>
     454:	10 e0       	ldi	r17, 0x00	; 0
		{
			node->m_submenus[i]->m_parent = node;
     456:	81 2f       	mov	r24, r17
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	ee 81       	ldd	r30, Y+6	; 0x06
     460:	ff 81       	ldd	r31, Y+7	; 0x07
     462:	e8 0f       	add	r30, r24
     464:	f9 1f       	adc	r31, r25
     466:	01 90       	ld	r0, Z+
     468:	f0 81       	ld	r31, Z
     46a:	e0 2d       	mov	r30, r0
     46c:	d5 83       	std	Z+5, r29	; 0x05
     46e:	c4 83       	std	Z+4, r28	; 0x04
			assignParents(node->m_submenus[i]);
     470:	2e 81       	ldd	r18, Y+6	; 0x06
     472:	3f 81       	ldd	r19, Y+7	; 0x07
     474:	f9 01       	movw	r30, r18
     476:	e8 0f       	add	r30, r24
     478:	f9 1f       	adc	r31, r25
     47a:	80 81       	ld	r24, Z
     47c:	91 81       	ldd	r25, Z+1	; 0x01
     47e:	0e 94 21 02 	call	0x442	; 0x442 <assignParents>

static void assignParents(MenuNode* node)
{
	if(node)
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
     482:	1f 5f       	subi	r17, 0xFF	; 255
     484:	88 85       	ldd	r24, Y+8	; 0x08
     486:	18 17       	cp	r17, r24
     488:	30 f3       	brcs	.-52     	; 0x456 <assignParents+0x14>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <assignParents+0x52>
			node->m_submenus[i]->m_parent = node;
			assignParents(node->m_submenus[i]);
		}
	}
	if(!node)
		printf("NULL node\n");
     48c:	86 e2       	ldi	r24, 0x26	; 38
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	08 95       	ret

0000049c <createMenuNode>:

static MenuNode* _menu;
//volatile uint16_t menu_current_address = 0x1C00;

MenuNode* createMenuNode(char* title, void (*operation)(void), uint8_t num_of_submenus)
{
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	7c 01       	movw	r14, r24
     4ac:	8b 01       	movw	r16, r22
     4ae:	d4 2e       	mov	r13, r20
	MenuNode* _mnode = malloc(sizeof(MenuNode));//(MenuNode*) menu_current_address;
     4b0:	89 e0       	ldi	r24, 0x09	; 9
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 07 07 	call	0xe0e	; 0xe0e <malloc>
     4b8:	ec 01       	movw	r28, r24
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));//(MenuNode**) (menu_current_address + num_of_submenus*sizeof(MenuNode*));
     4ba:	8d 2d       	mov	r24, r13
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	0e 94 07 07 	call	0xe0e	; 0xe0e <malloc>
     4c6:	9f 83       	std	Y+7, r25	; 0x07
     4c8:	8e 83       	std	Y+6, r24	; 0x06
	_mnode->m_num_submenus = num_of_submenus;
     4ca:	d8 86       	std	Y+8, r13	; 0x08
	_mnode->m_content.title = title;
     4cc:	f9 82       	std	Y+1, r15	; 0x01
     4ce:	e8 82       	st	Y, r14
	_mnode->m_content.operation = operation;
     4d0:	1b 83       	std	Y+3, r17	; 0x03
     4d2:	0a 83       	std	Y+2, r16	; 0x02
	return _mnode;
}
     4d4:	ce 01       	movw	r24, r28
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	08 95       	ret

000004e6 <createMenu>:
	return _menu;
}


void createMenu(void)
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
	_menu = createMenuNode("root", NULL, 4);
     4ee:	44 e0       	ldi	r20, 0x04	; 4
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e3       	ldi	r24, 0x30	; 48
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     4fc:	ec 01       	movw	r28, r24
     4fe:	90 93 45 03 	sts	0x0345, r25
     502:	80 93 44 03 	sts	0x0344, r24
	_menu->m_submenus[0] = createMenuNode("Games", NULL, 2);
     506:	0e 81       	ldd	r16, Y+6	; 0x06
     508:	1f 81       	ldd	r17, Y+7	; 0x07
     50a:	42 e0       	ldi	r20, 0x02	; 2
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	85 e3       	ldi	r24, 0x35	; 53
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     518:	f8 01       	movw	r30, r16
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	80 83       	st	Z, r24
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode("PingPong", &print2, 0);
     51e:	ee 81       	ldd	r30, Y+6	; 0x06
     520:	ff 81       	ldd	r31, Y+7	; 0x07
     522:	01 90       	ld	r0, Z+
     524:	f0 81       	ld	r31, Z
     526:	e0 2d       	mov	r30, r0
     528:	06 81       	ldd	r16, Z+6	; 0x06
     52a:	17 81       	ldd	r17, Z+7	; 0x07
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	6c e1       	ldi	r22, 0x1C	; 28
     530:	72 e0       	ldi	r23, 0x02	; 2
     532:	8b e3       	ldi	r24, 0x3B	; 59
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     53a:	f8 01       	movw	r30, r16
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode("PingPang", &print1, 0);
     540:	ee 81       	ldd	r30, Y+6	; 0x06
     542:	ff 81       	ldd	r31, Y+7	; 0x07
     544:	01 90       	ld	r0, Z+
     546:	f0 81       	ld	r31, Z
     548:	e0 2d       	mov	r30, r0
     54a:	06 81       	ldd	r16, Z+6	; 0x06
     54c:	17 81       	ldd	r17, Z+7	; 0x07
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	67 e1       	ldi	r22, 0x17	; 23
     552:	72 e0       	ldi	r23, 0x02	; 2
     554:	84 e4       	ldi	r24, 0x44	; 68
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     55c:	f8 01       	movw	r30, r16
     55e:	93 83       	std	Z+3, r25	; 0x03
     560:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[1] = createMenuNode("Players", NULL, 1);
     562:	0e 81       	ldd	r16, Y+6	; 0x06
     564:	1f 81       	ldd	r17, Y+7	; 0x07
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	8d e4       	ldi	r24, 0x4D	; 77
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     574:	f8 01       	movw	r30, r16
     576:	93 83       	std	Z+3, r25	; 0x03
     578:	82 83       	std	Z+2, r24	; 0x02
	_menu->m_submenus[1]->m_submenus[0] = createMenuNode("Create User", &print2, 0);
     57a:	ee 81       	ldd	r30, Y+6	; 0x06
     57c:	ff 81       	ldd	r31, Y+7	; 0x07
     57e:	02 80       	ldd	r0, Z+2	; 0x02
     580:	f3 81       	ldd	r31, Z+3	; 0x03
     582:	e0 2d       	mov	r30, r0
     584:	06 81       	ldd	r16, Z+6	; 0x06
     586:	17 81       	ldd	r17, Z+7	; 0x07
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	6c e1       	ldi	r22, 0x1C	; 28
     58c:	72 e0       	ldi	r23, 0x02	; 2
     58e:	85 e5       	ldi	r24, 0x55	; 85
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     596:	f8 01       	movw	r30, r16
     598:	91 83       	std	Z+1, r25	; 0x01
     59a:	80 83       	st	Z, r24
	_menu->m_submenus[2] = createMenuNode("Settings", NULL, 1);
     59c:	0e 81       	ldd	r16, Y+6	; 0x06
     59e:	1f 81       	ldd	r17, Y+7	; 0x07
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	81 e6       	ldi	r24, 0x61	; 97
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     5ae:	f8 01       	movw	r30, r16
     5b0:	95 83       	std	Z+5, r25	; 0x05
     5b2:	84 83       	std	Z+4, r24	; 0x04
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode("Calibrate Joystick", &print2, 0);
     5b4:	ee 81       	ldd	r30, Y+6	; 0x06
     5b6:	ff 81       	ldd	r31, Y+7	; 0x07
     5b8:	04 80       	ldd	r0, Z+4	; 0x04
     5ba:	f5 81       	ldd	r31, Z+5	; 0x05
     5bc:	e0 2d       	mov	r30, r0
     5be:	06 81       	ldd	r16, Z+6	; 0x06
     5c0:	17 81       	ldd	r17, Z+7	; 0x07
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	6c e1       	ldi	r22, 0x1C	; 28
     5c6:	72 e0       	ldi	r23, 0x02	; 2
     5c8:	8a e6       	ldi	r24, 0x6A	; 106
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     5d0:	f8 01       	movw	r30, r16
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
	_menu->m_submenus[3] = createMenuNode("Dummy", NULL, 1);
     5d6:	0e 81       	ldd	r16, Y+6	; 0x06
     5d8:	1f 81       	ldd	r17, Y+7	; 0x07
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	8d e7       	ldi	r24, 0x7D	; 125
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     5e8:	f8 01       	movw	r30, r16
     5ea:	97 83       	std	Z+7, r25	; 0x07
     5ec:	86 83       	std	Z+6, r24	; 0x06
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode("Printdummy", &printGreetings, 0);
     5ee:	ee 81       	ldd	r30, Y+6	; 0x06
     5f0:	ff 81       	ldd	r31, Y+7	; 0x07
     5f2:	06 80       	ldd	r0, Z+6	; 0x06
     5f4:	f7 81       	ldd	r31, Z+7	; 0x07
     5f6:	e0 2d       	mov	r30, r0
     5f8:	06 81       	ldd	r16, Z+6	; 0x06
     5fa:	17 81       	ldd	r17, Z+7	; 0x07
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	6d e3       	ldi	r22, 0x3D	; 61
     600:	76 e0       	ldi	r23, 0x06	; 6
     602:	83 e8       	ldi	r24, 0x83	; 131
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 4e 02 	call	0x49c	; 0x49c <createMenuNode>
     60a:	f8 01       	movw	r30, r16
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	80 83       	st	Z, r24
	assignParents(_menu);	
     610:	ce 01       	movw	r24, r28
     612:	0e 94 21 02 	call	0x442	; 0x442 <assignParents>
	printf("PARENTS ASSIGNED\n"); 
     616:	8e e8       	ldi	r24, 0x8E	; 142
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
	
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <getMenuRoot>:
		printf("NULL node\n");
}

MenuNode* getMenuRoot(void)
{
	if(_menu == NULL)
     628:	80 91 44 03 	lds	r24, 0x0344
     62c:	90 91 45 03 	lds	r25, 0x0345
     630:	89 2b       	or	r24, r25
     632:	11 f4       	brne	.+4      	; 0x638 <getMenuRoot+0x10>
	{
		createMenu();
     634:	0e 94 73 02 	call	0x4e6	; 0x4e6 <createMenu>
	}
	return _menu;
}
     638:	80 91 44 03 	lds	r24, 0x0344
     63c:	90 91 45 03 	lds	r25, 0x0345
     640:	08 95       	ret

00000642 <getNextEntry>:
	printf("PARENTS ASSIGNED\n"); 
	
}

MenuNode* getNextEntry(MenuNode* node)
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	dc 01       	movw	r26, r24
	if(node->m_parent)
     648:	14 96       	adiw	r26, 0x04	; 4
     64a:	ed 91       	ld	r30, X+
     64c:	fc 91       	ld	r31, X
     64e:	15 97       	sbiw	r26, 0x05	; 5
     650:	30 97       	sbiw	r30, 0x00	; 0
     652:	81 f1       	breq	.+96     	; 0x6b4 <getNextEntry+0x72>
	{
        	for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
     654:	80 85       	ldd	r24, Z+8	; 0x08
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	18 16       	cp	r1, r24
     65c:	19 06       	cpc	r1, r25
     65e:	64 f5       	brge	.+88     	; 0x6b8 <getNextEntry+0x76>
		{
			if(node->m_parent->m_submenus[i] == node)
     660:	c6 81       	ldd	r28, Z+6	; 0x06
     662:	d7 81       	ldd	r29, Z+7	; 0x07
     664:	28 81       	ld	r18, Y
     666:	39 81       	ldd	r19, Y+1	; 0x01
     668:	2a 17       	cp	r18, r26
     66a:	3b 07       	cpc	r19, r27
     66c:	c9 f4       	brne	.+50     	; 0x6a0 <getNextEntry+0x5e>
     66e:	0d c0       	rjmp	.+26     	; 0x68a <getNextEntry+0x48>
     670:	26 2f       	mov	r18, r22
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ec 0f       	add	r30, r28
     67c:	fd 1f       	adc	r31, r29
     67e:	40 81       	ld	r20, Z
     680:	51 81       	ldd	r21, Z+1	; 0x01
     682:	4a 17       	cp	r20, r26
     684:	5b 07       	cpc	r21, r27
     686:	69 f4       	brne	.+26     	; 0x6a2 <getNextEntry+0x60>
     688:	02 c0       	rjmp	.+4      	; 0x68e <getNextEntry+0x4c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
			{
                		return node->m_parent->m_submenus[i+1];
     68e:	2f 5f       	subi	r18, 0xFF	; 255
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	c2 0f       	add	r28, r18
     698:	d3 1f       	adc	r29, r19
     69a:	88 81       	ld	r24, Y
     69c:	99 81       	ldd	r25, Y+1	; 0x01
     69e:	0e c0       	rjmp	.+28     	; 0x6bc <getNextEntry+0x7a>
{
	if(node->m_parent)
	{
        	for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
		{
			if(node->m_parent->m_submenus[i] == node)
     6a0:	60 e0       	ldi	r22, 0x00	; 0

MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
	{
        	for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	26 2f       	mov	r18, r22
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	28 17       	cp	r18, r24
     6aa:	39 07       	cpc	r19, r25
     6ac:	0c f3       	brlt	.-62     	; 0x670 <getNextEntry+0x2e>
			{
                		return node->m_parent->m_submenus[i+1];
            		}
        	}
    	}
	return node; 
     6ae:	8a 2f       	mov	r24, r26
     6b0:	9b 2f       	mov	r25, r27
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <getNextEntry+0x7a>
     6b4:	9b 2f       	mov	r25, r27
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <getNextEntry+0x7a>
     6b8:	8a 2f       	mov	r24, r26
     6ba:	9b 2f       	mov	r25, r27
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <getPreviousEntry>:

MenuNode* getPreviousEntry(MenuNode* node)
{
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	dc 01       	movw	r26, r24
	if(node->m_parent)
     6ca:	14 96       	adiw	r26, 0x04	; 4
     6cc:	ed 91       	ld	r30, X+
     6ce:	fc 91       	ld	r31, X
     6d0:	15 97       	sbiw	r26, 0x05	; 5
     6d2:	30 97       	sbiw	r30, 0x00	; 0
     6d4:	51 f1       	breq	.+84     	; 0x72a <getPreviousEntry+0x68>
	{
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
     6d6:	10 85       	ldd	r17, Z+8	; 0x08
     6d8:	12 30       	cpi	r17, 0x02	; 2
     6da:	48 f1       	brcs	.+82     	; 0x72e <getPreviousEntry+0x6c>
		{
			if(node->m_parent->m_submenus[i] == node)
     6dc:	c6 81       	ldd	r28, Z+6	; 0x06
     6de:	d7 81       	ldd	r29, Z+7	; 0x07
     6e0:	8a 81       	ldd	r24, Y+2	; 0x02
     6e2:	9b 81       	ldd	r25, Y+3	; 0x03
     6e4:	8a 17       	cp	r24, r26
     6e6:	9b 07       	cpc	r25, r27
     6e8:	b9 f4       	brne	.+46     	; 0x718 <getPreviousEntry+0x56>
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <getPreviousEntry+0x3e>
     6ec:	41 91       	ld	r20, Z+
     6ee:	51 91       	ld	r21, Z+
     6f0:	b9 01       	movw	r22, r18
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	4a 17       	cp	r20, r26
     6f8:	5b 07       	cpc	r21, r27
     6fa:	21 f0       	breq	.+8      	; 0x704 <getPreviousEntry+0x42>
     6fc:	9b 01       	movw	r18, r22
     6fe:	10 c0       	rjmp	.+32     	; 0x720 <getPreviousEntry+0x5e>
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
			{
				return node->m_parent->m_submenus[i-1];
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 48       	sbci	r19, 0x80	; 128
     708:	c9 01       	movw	r24, r18
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	c8 0f       	add	r28, r24
     710:	d9 1f       	adc	r29, r25
     712:	88 81       	ld	r24, Y
     714:	99 81       	ldd	r25, Y+1	; 0x01
     716:	0c c0       	rjmp	.+24     	; 0x730 <getPreviousEntry+0x6e>
     718:	fe 01       	movw	r30, r28
     71a:	34 96       	adiw	r30, 0x04	; 4
{
	if(node->m_parent)
	{
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
		{
			if(node->m_parent->m_submenus[i] == node)
     71c:	22 e0       	ldi	r18, 0x02	; 2
     71e:	30 e0       	ldi	r19, 0x00	; 0

MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
	{
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
     720:	21 17       	cp	r18, r17
     722:	20 f3       	brcs	.-56     	; 0x6ec <getPreviousEntry+0x2a>
			{
				return node->m_parent->m_submenus[i-1];
			}
		}
	}
	return node;
     724:	8a 2f       	mov	r24, r26
     726:	9b 2f       	mov	r25, r27
     728:	03 c0       	rjmp	.+6      	; 0x730 <getPreviousEntry+0x6e>
     72a:	9b 2f       	mov	r25, r27
     72c:	01 c0       	rjmp	.+2      	; 0x730 <getPreviousEntry+0x6e>
     72e:	9b 2f       	mov	r25, r27
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <menuLevelDown>:

MenuNode* menuLevelDown(MenuNode* const node, uint8_t index_of_submenu)
{
     738:	fc 01       	movw	r30, r24
	if(0 <= index_of_submenu && index_of_submenu <= node->m_num_submenus)
     73a:	80 85       	ldd	r24, Z+8	; 0x08
     73c:	86 17       	cp	r24, r22
     73e:	60 f0       	brcs	.+24     	; 0x758 <menuLevelDown+0x20>
		return node->m_submenus[index_of_submenu];
     740:	86 2f       	mov	r24, r22
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	06 80       	ldd	r0, Z+6	; 0x06
     74a:	f7 81       	ldd	r31, Z+7	; 0x07
     74c:	e0 2d       	mov	r30, r0
     74e:	e8 0f       	add	r30, r24
     750:	f9 1f       	adc	r31, r25
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	08 95       	ret
	return node;
     758:	8e 2f       	mov	r24, r30
     75a:	9f 2f       	mov	r25, r31
}
     75c:	08 95       	ret

0000075e <menuLevelUp>:

MenuNode* menuLevelUp(MenuNode* const node)
{
     75e:	fc 01       	movw	r30, r24
	if(node->m_parent)
     760:	84 81       	ldd	r24, Z+4	; 0x04
     762:	95 81       	ldd	r25, Z+5	; 0x05
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <menuLevelUp+0xc>
		return node->m_parent;
	return node;
     768:	cf 01       	movw	r24, r30
}
     76a:	08 95       	ret

0000076c <main_init>:
JOY_POS joy_pos;
uint8_t current_selection = 0;

void main_init (void)
{
	uart_init(BAUDRATE);
     76c:	8f e1       	ldi	r24, 0x1F	; 31
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 f2 06 	call	0xde4	; 0xde4 <uart_init>
	sram_init();
     774:	0e 94 df 06 	call	0xdbe	; 0xdbe <sram_init>
	adc_init();
     778:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	JOY_init();
     77c:	0e 94 9e 04 	call	0x93c	; 0x93c <JOY_init>
	spi_init();
     780:	0e 94 0e 02 	call	0x41c	; 0x41c <spi_init>
	mcp_init();
     784:	0e 94 02 02 	call	0x404	; 0x404 <mcp_init>
	can_init();
     788:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_init>
	sei();	
     78c:	78 94       	sei
	oled_init();
     78e:	0e 94 b3 05 	call	0xb66	; 0xb66 <oled_init>
	menu_main = getMenuRoot();
     792:	0e 94 14 03 	call	0x628	; 0x628 <getMenuRoot>
     796:	90 93 48 03 	sts	0x0348, r25
     79a:	80 93 47 03 	sts	0x0347, r24
	printf("INIT DONE\n");
     79e:	8f e9       	ldi	r24, 0x9F	; 159
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
     7a6:	08 95       	ret

000007a8 <main>:
	}

int main(void)
{
	main_init();
     7a8:	0e 94 b6 03 	call	0x76c	; 0x76c <main_init>
	
	//say hello to the guy in front of the display
	sayHello();
     7ac:	0e 94 98 06 	call	0xd30	; 0xd30 <sayHello>
	{
		
		joy_pos = JOY_getPosition();
		_delay_ms(10);
		
		switch(joy_pos.dir)
     7b0:	cd e4       	ldi	r28, 0x4D	; 77
     7b2:	d3 e0       	ldi	r29, 0x03	; 3
	sayHello();
	
	while(1)
	{
		
		joy_pos = JOY_getPosition();
     7b4:	0e 94 a1 04 	call	0x942	; 0x942 <JOY_getPosition>
     7b8:	20 93 49 03 	sts	0x0349, r18
     7bc:	30 93 4a 03 	sts	0x034A, r19
     7c0:	40 93 4b 03 	sts	0x034B, r20
     7c4:	50 93 4c 03 	sts	0x034C, r21
     7c8:	60 93 4d 03 	sts	0x034D, r22
     7cc:	70 93 4e 03 	sts	0x034E, r23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	9f e2       	ldi	r25, 0x2F	; 47
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <main+0x2c>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <main+0x32>
     7da:	00 00       	nop
		_delay_ms(10);
		
		switch(joy_pos.dir)
     7dc:	88 81       	ld	r24, Y
     7de:	99 81       	ldd	r25, Y+1	; 0x01
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	91 05       	cpc	r25, r1
     7e4:	61 f1       	breq	.+88     	; 0x83e <main+0x96>
     7e6:	24 f4       	brge	.+8      	; 0x7f0 <main+0x48>
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <main+0x46>
     7ec:	82 c0       	rjmp	.+260    	; 0x8f2 <main+0x14a>
     7ee:	92 c0       	rjmp	.+292    	; 0x914 <main+0x16c>
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	91 05       	cpc	r25, r1
     7f4:	21 f0       	breq	.+8      	; 0x7fe <main+0x56>
     7f6:	04 97       	sbiw	r24, 0x04	; 4
     7f8:	09 f4       	brne	.+2      	; 0x7fc <main+0x54>
     7fa:	5a c0       	rjmp	.+180    	; 0x8b0 <main+0x108>
     7fc:	8b c0       	rjmp	.+278    	; 0x914 <main+0x16c>
		{
			case UP:
			{
				current_selection = current_selection == 0 ? menu_main->m_num_submenus-1 : current_selection-1;
     7fe:	e0 91 46 03 	lds	r30, 0x0346
     802:	e1 11       	cpse	r30, r1
     804:	07 c0       	rjmp	.+14     	; 0x814 <main+0x6c>
     806:	e0 91 47 03 	lds	r30, 0x0347
     80a:	f0 91 48 03 	lds	r31, 0x0348
     80e:	e0 85       	ldd	r30, Z+8	; 0x08
     810:	e1 50       	subi	r30, 0x01	; 1
     812:	01 c0       	rjmp	.+2      	; 0x816 <main+0x6e>
     814:	e1 50       	subi	r30, 0x01	; 1
     816:	e0 93 46 03 	sts	0x0346, r30
				getPreviousEntry(menu_main->m_submenus[current_selection]);
     81a:	a0 91 47 03 	lds	r26, 0x0347
     81e:	b0 91 48 03 	lds	r27, 0x0348
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ee 0f       	add	r30, r30
     826:	ff 1f       	adc	r31, r31
     828:	16 96       	adiw	r26, 0x06	; 6
     82a:	8d 91       	ld	r24, X+
     82c:	9c 91       	ld	r25, X
     82e:	17 97       	sbiw	r26, 0x07	; 7
     830:	e8 0f       	add	r30, r24
     832:	f9 1f       	adc	r31, r25
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	0e 94 61 03 	call	0x6c2	; 0x6c2 <getPreviousEntry>
				break;
     83c:	6b c0       	rjmp	.+214    	; 0x914 <main+0x16c>
			}
			case RIGHT:
			{
				if(menuLevelDown(menu_main, current_selection)->m_num_submenus > 0)
     83e:	60 91 46 03 	lds	r22, 0x0346
     842:	80 91 47 03 	lds	r24, 0x0347
     846:	90 91 48 03 	lds	r25, 0x0348
     84a:	0e 94 9c 03 	call	0x738	; 0x738 <menuLevelDown>
     84e:	dc 01       	movw	r26, r24
     850:	18 96       	adiw	r26, 0x08	; 8
     852:	8c 91       	ld	r24, X
     854:	88 23       	and	r24, r24
     856:	79 f0       	breq	.+30     	; 0x876 <main+0xce>
				{
					menu_main = menuLevelDown(menu_main, current_selection);
     858:	60 91 46 03 	lds	r22, 0x0346
     85c:	80 91 47 03 	lds	r24, 0x0347
     860:	90 91 48 03 	lds	r25, 0x0348
     864:	0e 94 9c 03 	call	0x738	; 0x738 <menuLevelDown>
     868:	90 93 48 03 	sts	0x0348, r25
     86c:	80 93 47 03 	sts	0x0347, r24
					current_selection = 0;
     870:	10 92 46 03 	sts	0x0346, r1
     874:	4f c0       	rjmp	.+158    	; 0x914 <main+0x16c>
				}
				else
				{
					if(menuLevelDown(menu_main, current_selection)->m_content.operation)
     876:	60 91 46 03 	lds	r22, 0x0346
     87a:	80 91 47 03 	lds	r24, 0x0347
     87e:	90 91 48 03 	lds	r25, 0x0348
     882:	0e 94 9c 03 	call	0x738	; 0x738 <menuLevelDown>
     886:	fc 01       	movw	r30, r24
     888:	82 81       	ldd	r24, Z+2	; 0x02
     88a:	93 81       	ldd	r25, Z+3	; 0x03
     88c:	89 2b       	or	r24, r25
     88e:	09 f4       	brne	.+2      	; 0x892 <main+0xea>
     890:	41 c0       	rjmp	.+130    	; 0x914 <main+0x16c>
						menuLevelDown(menu_main, current_selection)->m_content.operation();
     892:	60 91 46 03 	lds	r22, 0x0346
     896:	80 91 47 03 	lds	r24, 0x0347
     89a:	90 91 48 03 	lds	r25, 0x0348
     89e:	0e 94 9c 03 	call	0x738	; 0x738 <menuLevelDown>
     8a2:	dc 01       	movw	r26, r24
     8a4:	12 96       	adiw	r26, 0x02	; 2
     8a6:	ed 91       	ld	r30, X+
     8a8:	fc 91       	ld	r31, X
     8aa:	13 97       	sbiw	r26, 0x03	; 3
     8ac:	09 95       	icall
     8ae:	32 c0       	rjmp	.+100    	; 0x914 <main+0x16c>
				}
				break;
			}
			case DOWN:
			{
				current_selection = current_selection == menu_main->m_num_submenus-1 ? 0 : current_selection+1;
     8b0:	80 91 46 03 	lds	r24, 0x0346
     8b4:	e0 91 47 03 	lds	r30, 0x0347
     8b8:	f0 91 48 03 	lds	r31, 0x0348
     8bc:	48 2f       	mov	r20, r24
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	20 85       	ldd	r18, Z+8	; 0x08
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	21 50       	subi	r18, 0x01	; 1
     8c6:	31 09       	sbc	r19, r1
     8c8:	42 17       	cp	r20, r18
     8ca:	53 07       	cpc	r21, r19
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <main+0x12a>
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <main+0x12c>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	80 93 46 03 	sts	0x0346, r24
				getNextEntry(menu_main->m_submenus[current_selection]);
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	06 80       	ldd	r0, Z+6	; 0x06
     8e0:	f7 81       	ldd	r31, Z+7	; 0x07
     8e2:	e0 2d       	mov	r30, r0
     8e4:	e8 0f       	add	r30, r24
     8e6:	f9 1f       	adc	r31, r25
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	0e 94 21 03 	call	0x642	; 0x642 <getNextEntry>
				break;
     8f0:	11 c0       	rjmp	.+34     	; 0x914 <main+0x16c>
			}
			case LEFT:
			{
				if(menu_main->m_parent)
     8f2:	80 91 47 03 	lds	r24, 0x0347
     8f6:	90 91 48 03 	lds	r25, 0x0348
     8fa:	fc 01       	movw	r30, r24
     8fc:	24 81       	ldd	r18, Z+4	; 0x04
     8fe:	35 81       	ldd	r19, Z+5	; 0x05
     900:	23 2b       	or	r18, r19
     902:	41 f0       	breq	.+16     	; 0x914 <main+0x16c>
				{
					menu_main = menuLevelUp(menu_main);
     904:	0e 94 af 03 	call	0x75e	; 0x75e <menuLevelUp>
     908:	90 93 48 03 	sts	0x0348, r25
     90c:	80 93 47 03 	sts	0x0347, r24
					current_selection = 0;
     910:	10 92 46 03 	sts	0x0346, r1
			default:
				break;
			
		}
		
		printMenu(menu_main);
     914:	80 91 47 03 	lds	r24, 0x0347
     918:	90 91 48 03 	lds	r25, 0x0348
     91c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printMenu>
		print_selection(current_selection);
     920:	80 91 46 03 	lds	r24, 0x0346
     924:	0e 94 34 06 	call	0xc68	; 0xc68 <print_selection>
     928:	ff ef       	ldi	r31, 0xFF	; 255
     92a:	2f e7       	ldi	r18, 0x7F	; 127
     92c:	84 e0       	ldi	r24, 0x04	; 4
     92e:	f1 50       	subi	r31, 0x01	; 1
     930:	20 40       	sbci	r18, 0x00	; 0
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	e1 f7       	brne	.-8      	; 0x92e <main+0x186>
     936:	00 c0       	rjmp	.+0      	; 0x938 <main+0x190>
     938:	00 00       	nop
     93a:	3c cf       	rjmp	.-392    	; 0x7b4 <main+0xc>

0000093c <JOY_init>:

//
void JOY_init()
{
	//set PIN 0 and 1 of port B as inputs
	DDRB &= (0<<0)&(0<<1);	
     93c:	87 b3       	in	r24, 0x17	; 23
     93e:	17 ba       	out	0x17, r1	; 23
     940:	08 95       	ret

00000942 <JOY_getPosition>:
{
	return PORTB&(1<<button);
}

JOY_POS JOY_getPosition(void)
{
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	00 d0       	rcall	.+0      	; 0x954 <JOY_getPosition+0x12>
     954:	00 d0       	rcall	.+0      	; 0x956 <JOY_getPosition+0x14>
     956:	00 d0       	rcall	.+0      	; 0x958 <JOY_getPosition+0x16>
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
	JOY_POS value;
	value.x=ADC_read(JOY_H);
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ADC_read>
     962:	08 2f       	mov	r16, r24
     964:	10 e0       	ldi	r17, 0x00	; 0
	value.y=ADC_read(JOY_V);
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ADC_read>
     96c:	e8 2e       	mov	r14, r24
     96e:	f1 2c       	mov	r15, r1
	
	if(value.y >= -value.x+255 && value.y>=value.x)
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	80 1b       	sub	r24, r16
     976:	91 0b       	sbc	r25, r17
	{
		value.dir = UP;
	}
	if(value.y >= -value.x+255 && value.y<value.x)
     978:	e8 16       	cp	r14, r24
     97a:	f9 06       	cpc	r15, r25
     97c:	0c f4       	brge	.+2      	; 0x980 <JOY_getPosition+0x3e>
     97e:	6b c0       	rjmp	.+214    	; 0xa56 <JOY_getPosition+0x114>
     980:	e0 16       	cp	r14, r16
     982:	f1 06       	cpc	r15, r17
     984:	0c f4       	brge	.+2      	; 0x988 <JOY_getPosition+0x46>
     986:	4e c0       	rjmp	.+156    	; 0xa24 <JOY_getPosition+0xe2>
     988:	47 c0       	rjmp	.+142    	; 0xa18 <JOY_getPosition+0xd6>
	
	switch(value.dir)
	{
		case UP:
		{
			value.dir = value.y > mid_point.y + margin ? value.dir : NEUTRAL; 
     98a:	20 91 06 01 	lds	r18, 0x0106
     98e:	80 91 09 01 	lds	r24, 0x0109
     992:	90 91 0a 01 	lds	r25, 0x010A
     996:	82 0f       	add	r24, r18
     998:	91 1d       	adc	r25, r1
     99a:	8e 15       	cp	r24, r14
     99c:	9f 05       	cpc	r25, r15
     99e:	0c f4       	brge	.+2      	; 0x9a2 <JOY_getPosition+0x60>
     9a0:	5e c0       	rjmp	.+188    	; 0xa5e <JOY_getPosition+0x11c>
     9a2:	c1 2c       	mov	r12, r1
     9a4:	d1 2c       	mov	r13, r1
     9a6:	5b c0       	rjmp	.+182    	; 0xa5e <JOY_getPosition+0x11c>
			break;
		}
		case RIGHT:
		{
			value.dir = value.x > mid_point.x + margin ? value.dir : NEUTRAL; 
     9a8:	20 91 06 01 	lds	r18, 0x0106
     9ac:	80 91 07 01 	lds	r24, 0x0107
     9b0:	90 91 08 01 	lds	r25, 0x0108
     9b4:	82 0f       	add	r24, r18
     9b6:	91 1d       	adc	r25, r1
     9b8:	80 17       	cp	r24, r16
     9ba:	91 07       	cpc	r25, r17
     9bc:	0c f4       	brge	.+2      	; 0x9c0 <JOY_getPosition+0x7e>
     9be:	4f c0       	rjmp	.+158    	; 0xa5e <JOY_getPosition+0x11c>
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
     9c4:	4c c0       	rjmp	.+152    	; 0xa5e <JOY_getPosition+0x11c>
			break;
		}
		case DOWN:
		{
			value.dir = value.y < mid_point.y - margin ? value.dir : NEUTRAL; 
     9c6:	20 91 06 01 	lds	r18, 0x0106
     9ca:	80 91 09 01 	lds	r24, 0x0109
     9ce:	90 91 0a 01 	lds	r25, 0x010A
     9d2:	82 1b       	sub	r24, r18
     9d4:	91 09       	sbc	r25, r1
     9d6:	e8 16       	cp	r14, r24
     9d8:	f9 06       	cpc	r15, r25
     9da:	cc f0       	brlt	.+50     	; 0xa0e <JOY_getPosition+0xcc>
     9dc:	c1 2c       	mov	r12, r1
     9de:	d1 2c       	mov	r13, r1
     9e0:	3e c0       	rjmp	.+124    	; 0xa5e <JOY_getPosition+0x11c>
			break;
		}
		case LEFT:
		{
			value.dir = value.x < mid_point.x - margin ? value.dir : NEUTRAL; 
     9e2:	20 91 06 01 	lds	r18, 0x0106
     9e6:	80 91 07 01 	lds	r24, 0x0107
     9ea:	90 91 08 01 	lds	r25, 0x0108
     9ee:	82 1b       	sub	r24, r18
     9f0:	91 09       	sbc	r25, r1
     9f2:	31 e0       	ldi	r19, 0x01	; 1
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	08 17       	cp	r16, r24
     9f8:	19 07       	cpc	r17, r25
     9fa:	0c f0       	brlt	.+2      	; 0x9fe <JOY_getPosition+0xbc>
     9fc:	30 e0       	ldi	r19, 0x00	; 0
	
	switch(value.dir)
	{
		case UP:
		{
			value.dir = value.y > mid_point.y + margin ? value.dir : NEUTRAL; 
     9fe:	c3 2e       	mov	r12, r19
     a00:	d2 2e       	mov	r13, r18
     a02:	2d c0       	rjmp	.+90     	; 0xa5e <JOY_getPosition+0x11c>
			value.dir = value.x < mid_point.x - margin ? value.dir : NEUTRAL; 
			break;
		}
		default:
		{
			printf("Error receiving joystick value\n");
     a04:	89 ea       	ldi	r24, 0xA9	; 169
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
			break;
     a0c:	28 c0       	rjmp	.+80     	; 0xa5e <JOY_getPosition+0x11c>
			value.dir = value.x > mid_point.x + margin ? value.dir : NEUTRAL; 
			break;
		}
		case DOWN:
		{
			value.dir = value.y < mid_point.y - margin ? value.dir : NEUTRAL; 
     a0e:	68 94       	set
     a10:	cc 24       	eor	r12, r12
     a12:	c2 f8       	bld	r12, 2
     a14:	d1 2c       	mov	r13, r1
     a16:	23 c0       	rjmp	.+70     	; 0xa5e <JOY_getPosition+0x11c>
	
	if(value.y >= -value.x+255 && value.y>=value.x)
	{
		value.dir = UP;
	}
	if(value.y >= -value.x+255 && value.y<value.x)
     a18:	0f 2e       	mov	r0, r31
     a1a:	f3 e0       	ldi	r31, 0x03	; 3
     a1c:	cf 2e       	mov	r12, r31
     a1e:	d1 2c       	mov	r13, r1
     a20:	f0 2d       	mov	r31, r0
     a22:	04 c0       	rjmp	.+8      	; 0xa2c <JOY_getPosition+0xea>
	{
		value.dir = RIGHT;
     a24:	68 94       	set
     a26:	cc 24       	eor	r12, r12
     a28:	c1 f8       	bld	r12, 1
     a2a:	d1 2c       	mov	r13, r1
	if(value.y < -value.x+255 && value.y<value.x)
	{
		value.dir = DOWN;
	}
	
	switch(value.dir)
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	c8 16       	cp	r12, r24
     a30:	d1 04       	cpc	r13, r1
     a32:	09 f4       	brne	.+2      	; 0xa36 <JOY_getPosition+0xf4>
     a34:	b9 cf       	rjmp	.-142    	; 0x9a8 <JOY_getPosition+0x66>
     a36:	2c f4       	brge	.+10     	; 0xa42 <JOY_getPosition+0x100>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	c8 16       	cp	r12, r24
     a3c:	d1 04       	cpc	r13, r1
     a3e:	11 f7       	brne	.-60     	; 0xa04 <JOY_getPosition+0xc2>
     a40:	d0 cf       	rjmp	.-96     	; 0x9e2 <JOY_getPosition+0xa0>
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	c8 16       	cp	r12, r24
     a46:	d1 04       	cpc	r13, r1
     a48:	09 f4       	brne	.+2      	; 0xa4c <JOY_getPosition+0x10a>
     a4a:	9f cf       	rjmp	.-194    	; 0x98a <JOY_getPosition+0x48>
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	c8 16       	cp	r12, r24
     a50:	d1 04       	cpc	r13, r1
     a52:	c1 f6       	brne	.-80     	; 0xa04 <JOY_getPosition+0xc2>
     a54:	b8 cf       	rjmp	.-144    	; 0x9c6 <JOY_getPosition+0x84>
	}
	if(value.y >= -value.x+255 && value.y<value.x)
	{
		value.dir = RIGHT;
	}			
	if(value.y < -value.x+255 && value.y>=value.x)
     a56:	e0 16       	cp	r14, r16
     a58:	f1 06       	cpc	r15, r17
     a5a:	1c f6       	brge	.-122    	; 0x9e2 <JOY_getPosition+0xa0>
     a5c:	b4 cf       	rjmp	.-152    	; 0x9c6 <JOY_getPosition+0x84>
			printf("Error receiving joystick value\n");
			break;
		}
	}
	
	return value;
     a5e:	1a 83       	std	Y+2, r17	; 0x02
     a60:	09 83       	std	Y+1, r16	; 0x01
     a62:	fc 82       	std	Y+4, r15	; 0x04
     a64:	eb 82       	std	Y+3, r14	; 0x03
     a66:	de 82       	std	Y+6, r13	; 0x06
     a68:	cd 82       	std	Y+5, r12	; 0x05
     a6a:	20 2f       	mov	r18, r16
     a6c:	3a 81       	ldd	r19, Y+2	; 0x02
     a6e:	4e 2d       	mov	r20, r14
     a70:	5c 81       	ldd	r21, Y+4	; 0x04
     a72:	6c 2d       	mov	r22, r12
     a74:	7e 81       	ldd	r23, Y+6	; 0x06
}
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	26 96       	adiw	r28, 0x06	; 6
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <clear_buffer>:
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	14 c0       	rjmp	.+40     	; 0xaca <clear_buffer+0x32>
     aa2:	9c 01       	movw	r18, r24
     aa4:	24 0f       	add	r18, r20
     aa6:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i*128+j] = 0x00;
     aa8:	e0 91 0d 01 	lds	r30, 0x010D
     aac:	f0 91 0e 01 	lds	r31, 0x010E
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	80 38       	cpi	r24, 0x80	; 128
     aba:	91 05       	cpc	r25, r1
     abc:	91 f7       	brne	.-28     	; 0xaa2 <clear_buffer+0xa>
     abe:	40 58       	subi	r20, 0x80	; 128
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
     ac2:	41 15       	cp	r20, r1
     ac4:	84 e0       	ldi	r24, 0x04	; 4
     ac6:	58 07       	cpc	r21, r24
     ac8:	19 f0       	breq	.+6      	; 0xad0 <clear_buffer+0x38>
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     aca:	87 2f       	mov	r24, r23
     acc:	96 2f       	mov	r25, r22
     ace:	e9 cf       	rjmp	.-46     	; 0xaa2 <clear_buffer+0xa>
     ad0:	08 95       	ret

00000ad2 <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
     ad2:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     ad4:	e0 e0       	ldi	r30, 0x00	; 0
     ad6:	f0 e1       	ldi	r31, 0x10	; 16
     ad8:	80 83       	st	Z, r24
     ada:	10 82       	st	Z, r1
     adc:	8f e7       	ldi	r24, 0x7F	; 127
     ade:	80 83       	st	Z, r24
     ae0:	08 95       	ret

00000ae2 <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
	oled_set_page(0);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_set_page>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
     afa:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     afc:	68 94       	set
     afe:	dd 24       	eor	r13, r13
     b00:	d7 f8       	bld	r13, 7
     b02:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     b04:	c0 e0       	ldi	r28, 0x00	; 0
     b06:	d2 e1       	ldi	r29, 0x12	; 18
     b08:	21 c0       	rjmp	.+66     	; 0xb4c <print_buffer+0x6a>
     b0a:	02 2f       	mov	r16, r18
     b0c:	13 2f       	mov	r17, r19
     b0e:	a9 01       	movw	r20, r18
     b10:	48 1b       	sub	r20, r24
     b12:	59 0b       	sbc	r21, r25
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i*128+j]);
     b14:	e0 91 0d 01 	lds	r30, 0x010D
     b18:	f0 91 0e 01 	lds	r31, 0x010E
     b1c:	e4 0f       	add	r30, r20
     b1e:	f5 1f       	adc	r31, r21
     b20:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     b22:	48 83       	st	Y, r20
     b24:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	81 f7       	brne	.-32     	; 0xb0a <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
     b2a:	87 e0       	ldi	r24, 0x07	; 7
     b2c:	8f 15       	cp	r24, r15
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <print_buffer+0x58>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	8f 0d       	add	r24, r15
     b34:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_set_page>
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <print_buffer+0x5e>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
     b40:	f3 94       	inc	r15
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	f8 16       	cp	r15, r24
     b46:	39 f0       	breq	.+14     	; 0xb56 <print_buffer+0x74>
     b48:	20 2f       	mov	r18, r16
     b4a:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     b4c:	8d 2d       	mov	r24, r13
     b4e:	9e 2d       	mov	r25, r14
     b50:	20 58       	subi	r18, 0x80	; 128
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	da cf       	rjmp	.-76     	; 0xb0a <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
	}
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	08 95       	ret

00000b66 <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     b66:	e0 e0       	ldi	r30, 0x00	; 0
     b68:	f0 e1       	ldi	r31, 0x10	; 16
     b6a:	8e ea       	ldi	r24, 0xAE	; 174
     b6c:	80 83       	st	Z, r24
     b6e:	81 ea       	ldi	r24, 0xA1	; 161
     b70:	80 83       	st	Z, r24
     b72:	8a ed       	ldi	r24, 0xDA	; 218
     b74:	80 83       	st	Z, r24
     b76:	82 e1       	ldi	r24, 0x12	; 18
     b78:	80 83       	st	Z, r24
     b7a:	88 ec       	ldi	r24, 0xC8	; 200
     b7c:	80 83       	st	Z, r24
     b7e:	88 ea       	ldi	r24, 0xA8	; 168
     b80:	80 83       	st	Z, r24
     b82:	8f e3       	ldi	r24, 0x3F	; 63
     b84:	80 83       	st	Z, r24
     b86:	85 ed       	ldi	r24, 0xD5	; 213
     b88:	80 83       	st	Z, r24
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	80 83       	st	Z, r24
     b8e:	81 e8       	ldi	r24, 0x81	; 129
     b90:	80 83       	st	Z, r24
     b92:	80 e5       	ldi	r24, 0x50	; 80
     b94:	80 83       	st	Z, r24
     b96:	89 ed       	ldi	r24, 0xD9	; 217
     b98:	80 83       	st	Z, r24
     b9a:	81 e2       	ldi	r24, 0x21	; 33
     b9c:	80 83       	st	Z, r24
     b9e:	80 e2       	ldi	r24, 0x20	; 32
     ba0:	80 83       	st	Z, r24
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	80 83       	st	Z, r24
     ba6:	8b ed       	ldi	r24, 0xDB	; 219
     ba8:	80 83       	st	Z, r24
     baa:	80 e3       	ldi	r24, 0x30	; 48
     bac:	80 83       	st	Z, r24
     bae:	8d ea       	ldi	r24, 0xAD	; 173
     bb0:	80 83       	st	Z, r24
     bb2:	10 82       	st	Z, r1
     bb4:	84 ea       	ldi	r24, 0xA4	; 164
     bb6:	80 83       	st	Z, r24
     bb8:	86 ea       	ldi	r24, 0xA6	; 166
     bba:	80 83       	st	Z, r24
     bbc:	8f ea       	ldi	r24, 0xAF	; 175
     bbe:	80 83       	st	Z, r24
     bc0:	83 ed       	ldi	r24, 0xD3	; 211
     bc2:	80 83       	st	Z, r24
     bc4:	10 82       	st	Z, r1
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	80 83       	st	Z, r24
     bca:	80 eb       	ldi	r24, 0xB0	; 176
     bcc:	80 83       	st	Z, r24
     bce:	10 82       	st	Z, r1
     bd0:	8f e7       	ldi	r24, 0x7F	; 127
     bd2:	80 83       	st	Z, r24
	//set the lower start column address
	oled_write_command(0);
	//set the upper start column address
	oled_write_command(127);
	
	clear_buffer();
     bd4:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_buffer>
	print_buffer();	
     bd8:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     bdc:	08 95       	ret

00000bde <print_string_to_buffer>:
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
     bec:	fc 01       	movw	r30, r24
     bee:	20 81       	ld	r18, Z
     bf0:	22 23       	and	r18, r18
     bf2:	99 f1       	breq	.+102    	; 0xc5a <print_string_to_buffer+0x7c>
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
     bf4:	f0 e8       	ldi	r31, 0x80	; 128
     bf6:	6f 9f       	mul	r22, r31
     bf8:	a0 01       	movw	r20, r0
     bfa:	11 24       	eor	r1, r1
{
	uint8_t i = 0;
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
     bfc:	ec 01       	movw	r28, r24
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
     bfe:	00 e0       	ldi	r16, 0x00	; 0
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     c00:	e1 2c       	mov	r14, r1
     c02:	f1 2c       	mov	r15, r1
     c04:	27 c0       	rjmp	.+78     	; 0xc54 <print_string_to_buffer+0x76>
     c06:	61 2f       	mov	r22, r17
     c08:	62 0f       	add	r22, r18
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
     c0a:	fa 01       	movw	r30, r20
     c0c:	e6 0f       	add	r30, r22
     c0e:	f1 1d       	adc	r31, r1
     c10:	a0 91 0d 01 	lds	r26, 0x010D
     c14:	b0 91 0e 01 	lds	r27, 0x010E
     c18:	ae 0f       	add	r26, r30
     c1a:	bf 1f       	adc	r27, r31
     c1c:	e8 81       	ld	r30, Y
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	b0 97       	sbiw	r30, 0x20	; 32
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	e2 0f       	add	r30, r18
     c30:	f3 1f       	adc	r31, r19
     c32:	e0 59       	subi	r30, 0x90	; 144
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	e4 91       	lpm	r30, Z
     c38:	ec 93       	st	X, r30
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
     c3e:	28 30       	cpi	r18, 0x08	; 8
     c40:	31 05       	cpc	r19, r1
     c42:	09 f7       	brne	.-62     	; 0xc06 <print_string_to_buffer+0x28>
     c44:	18 5f       	subi	r17, 0xF8	; 248
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
			col++;
		}
		i++;
     c46:	0f 5f       	subi	r16, 0xFF	; 255
{
	uint8_t i = 0;
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
     c48:	ec 01       	movw	r28, r24
     c4a:	c0 0f       	add	r28, r16
     c4c:	d1 1d       	adc	r29, r1
     c4e:	28 81       	ld	r18, Y
     c50:	22 23       	and	r18, r18
     c52:	19 f0       	breq	.+6      	; 0xc5a <print_string_to_buffer+0x7c>
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     c54:	2e 2d       	mov	r18, r14
     c56:	3f 2d       	mov	r19, r15
     c58:	d6 cf       	rjmp	.-84     	; 0xc06 <print_string_to_buffer+0x28>
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
			col++;
		}
		i++;
	}
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	08 95       	ret

00000c68 <print_selection>:

void print_selection(uint8_t page)
{
	position pos = { .column = 120, .page = page};
	print_string_to_buffer("<", pos);
     c68:	68 2f       	mov	r22, r24
     c6a:	78 e7       	ldi	r23, 0x78	; 120
     c6c:	84 e5       	ldi	r24, 0x54	; 84
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	print_buffer();
     c74:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     c78:	08 95       	ret

00000c7a <printGreetings>:

void printGreetings(void)
{
	int counter = 0;
	position pos = {.page = 3, .column = 2};
	print_string_to_buffer("I want to greet ", pos);
     c7a:	63 e0       	ldi	r22, 0x03	; 3
     c7c:	72 e0       	ldi	r23, 0x02	; 2
     c7e:	82 e6       	ldi	r24, 0x62	; 98
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("grandma, because", pos);
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	83 e7       	ldi	r24, 0x73	; 115
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" she is soooooooo pretty", pos);
     c92:	65 e0       	ldi	r22, 0x05	; 5
     c94:	72 e0       	ldi	r23, 0x02	; 2
     c96:	84 e8       	ldi	r24, 0x84	; 132
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	print_buffer();
     c9e:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     ca2:	2f ef       	ldi	r18, 0xFF	; 255
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	9e e0       	ldi	r25, 0x0E	; 14
     ca8:	21 50       	subi	r18, 0x01	; 1
     caa:	80 40       	sbci	r24, 0x00	; 0
     cac:	90 40       	sbci	r25, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <printGreetings+0x2e>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <printGreetings+0x38>
     cb2:	00 00       	nop
     cb4:	08 95       	ret

00000cb6 <printMenu>:
	_delay_ms(1000);
}

void printMenu(MenuNode* menu_entries)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	8c 01       	movw	r16, r24
	clear_buffer();
     cc0:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_buffer>
	if(menu_entries)
     cc4:	01 15       	cp	r16, r1
     cc6:	11 05       	cpc	r17, r1
     cc8:	51 f1       	breq	.+84     	; 0xd1e <printMenu+0x68>
	{
		for(int i = 0; i < menu_entries->m_num_submenus; i++)
     cca:	f8 01       	movw	r30, r16
     ccc:	80 85       	ldd	r24, Z+8	; 0x08
     cce:	88 23       	and	r24, r24
     cd0:	19 f1       	breq	.+70     	; 0xd18 <printMenu+0x62>
     cd2:	c0 e0       	ldi	r28, 0x00	; 0
     cd4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(menu_entries->m_submenus)
     cd6:	f8 01       	movw	r30, r16
     cd8:	26 81       	ldd	r18, Z+6	; 0x06
     cda:	37 81       	ldd	r19, Z+7	; 0x07
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	81 f0       	breq	.+32     	; 0xd02 <printMenu+0x4c>
			{
				//TODO check if num submenus < 8
				position pos = { .page = i, .column = 2 };
				print_string_to_buffer(menu_entries->m_submenus[i]->m_content.title, pos);
     ce2:	ce 01       	movw	r24, r28
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	f9 01       	movw	r30, r18
     cea:	e8 0f       	add	r30, r24
     cec:	f9 1f       	adc	r31, r25
     cee:	01 90       	ld	r0, Z+
     cf0:	f0 81       	ld	r31, Z
     cf2:	e0 2d       	mov	r30, r0
     cf4:	6c 2f       	mov	r22, r28
     cf6:	72 e0       	ldi	r23, 0x02	; 2
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <printMenu+0x54>
			}
			else
				printf("NULL submenu\n");
     d02:	8d e9       	ldi	r24, 0x9D	; 157
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
void printMenu(MenuNode* menu_entries)
{
	clear_buffer();
	if(menu_entries)
	{
		for(int i = 0; i < menu_entries->m_num_submenus; i++)
     d0a:	21 96       	adiw	r28, 0x01	; 1
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 85       	ldd	r24, Z+8	; 0x08
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	c8 17       	cp	r28, r24
     d14:	d9 07       	cpc	r29, r25
     d16:	fc f2       	brlt	.-66     	; 0xcd6 <printMenu+0x20>
				print_string_to_buffer(menu_entries->m_submenus[i]->m_content.title, pos);
			}
			else
				printf("NULL submenu\n");
		}
		print_buffer();		
     d18:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <printMenu+0x70>
	}	
	else
	{
		printf("empty menu pointer detected\n");
     d1e:	8a ea       	ldi	r24, 0xAA	; 170
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 79 08 	call	0x10f2	; 0x10f2 <puts>
	}
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <sayHello>:

void sayHello(void)
{
	clear_buffer();
     d30:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_buffer>
	print_buffer();
     d34:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     d38:	2f ef       	ldi	r18, 0xFF	; 255
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	9d e1       	ldi	r25, 0x1D	; 29
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	80 40       	sbci	r24, 0x00	; 0
     d42:	90 40       	sbci	r25, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <sayHello+0xe>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <sayHello+0x18>
     d48:	00 00       	nop
	_delay_ms(2000);
	position pos = { .page = 0, .column =0 };
	print_string_to_buffer(" .------------. ", pos);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	86 ec       	ldi	r24, 0xC6	; 198
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" | Ping Pong! | ", pos);
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	87 ed       	ldi	r24, 0xD7	; 215
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" `------------' ", pos);
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	88 ee       	ldi	r24, 0xE8	; 232
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       ^        ", pos);
     d6e:	63 e0       	ldi	r22, 0x03	; 3
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	89 ef       	ldi	r24, 0xF9	; 249
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |  (\\_/) ", pos);
     d7a:	64 e0       	ldi	r22, 0x04	; 4
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	8a e0       	ldi	r24, 0x0A	; 10
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |__(O.o) ", pos);
     d86:	65 e0       	ldi	r22, 0x05	; 5
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	8b e1       	ldi	r24, 0x1B	; 27
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("          (> <) ", pos);
     d92:	66 e0       	ldi	r22, 0x06	; 6
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	8c e2       	ldi	r24, 0x2C	; 44
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0e 94 ef 05 	call	0xbde	; 0xbde <print_string_to_buffer>
	print_buffer();	
     d9e:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     da2:	2f ef       	ldi	r18, 0xFF	; 255
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	9d e1       	ldi	r25, 0x1D	; 29
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <sayHello+0x78>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <sayHello+0x82>
     db2:	00 00       	nop
	_delay_ms(2000);
	clear_buffer();
     db4:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_buffer>
	print_buffer();
     db8:	0e 94 71 05 	call	0xae2	; 0xae2 <print_buffer>
     dbc:	08 95       	ret

00000dbe <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1<<SRE);
     dbe:	85 b7       	in	r24, 0x35	; 53
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	85 bf       	out	0x35, r24	; 53
	
	//realesing  JTAG pins from memory mapping
	SFIOR|=(1<<XMM2);
     dc4:	80 b7       	in	r24, 0x30	; 48
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	80 bf       	out	0x30, r24	; 48
	SFIOR&=(0<<XMM1);
     dca:	80 b7       	in	r24, 0x30	; 48
     dcc:	10 be       	out	0x30, r1	; 48
	SFIOR&=(0<<XMM0);
     dce:	80 b7       	in	r24, 0x30	; 48
     dd0:	10 be       	out	0x30, r1	; 48
     dd2:	08 95       	ret

00000dd4 <uart_putc>:
//send data to RS232
void uart_putc(unsigned char c)
{
	
	//wait while register is free
	while (!(UCSR0A & (1<<UDRE0)));
     dd4:	5d 9b       	sbis	0x0b, 5	; 11
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <uart_putc>
	
	//put character to USART data register
	UDR0 = c;
     dd8:	8c b9       	out	0x0c, r24	; 12
     dda:	08 95       	ret

00000ddc <uart_getc>:

//receive data from RS232
unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1<<RXC0)));
     ddc:	5f 9b       	sbis	0x0b, 7	; 11
     dde:	fe cf       	rjmp	.-4      	; 0xddc <uart_getc>
	
	//get value from USART data register
	return UDR0;
     de0:	8c b1       	in	r24, 0x0c	; 12
}
     de2:	08 95       	ret

00000de4 <uart_init>:

//initialize uart to 9600 8N1 (9600 Baud/Bit rate, 8 Bits data, no parity, 1 stop bit
void uart_init(unsigned int ubrr)
{
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr>>8);
     de4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     de6:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     de8:	88 e1       	ldi	r24, 0x18	; 24
     dea:	8a b9       	out	0x0a, r24	; 10
	
	//set UCSRC as accessed register, set number of character size to 8
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     dec:	86 e8       	ldi	r24, 0x86	; 134
     dee:	80 bd       	out	0x20, r24	; 32
	//set number of stop bits to 1
	UCSR0C &= (0<<USBS0);
     df0:	80 b5       	in	r24, 0x20	; 32
     df2:	10 bc       	out	0x20, r1	; 32
	//set connection to asynchronous
	UCSR0C &= (0<<UMSEL0); 
     df4:	80 b5       	in	r24, 0x20	; 32
     df6:	10 bc       	out	0x20, r1	; 32
	//disable parity mode
	UCSR0C &= (0<<UPM00);
     df8:	80 b5       	in	r24, 0x20	; 32
     dfa:	10 bc       	out	0x20, r1	; 32
	UCSR0C &= (0<<UPM10);
     dfc:	80 b5       	in	r24, 0x20	; 32
     dfe:	10 bc       	out	0x20, r1	; 32
	fdevopen(uart_putc, uart_getc);
     e00:	6e ee       	ldi	r22, 0xEE	; 238
     e02:	76 e0       	ldi	r23, 0x06	; 6
     e04:	8a ee       	ldi	r24, 0xEA	; 234
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	0e 94 2e 08 	call	0x105c	; 0x105c <fdevopen>
     e0c:	08 95       	ret

00000e0e <malloc>:
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	91 05       	cpc	r25, r1
     e16:	10 f4       	brcc	.+4      	; 0xe1c <malloc+0xe>
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	e0 91 51 03 	lds	r30, 0x0351
     e20:	f0 91 52 03 	lds	r31, 0x0352
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	30 97       	sbiw	r30, 0x00	; 0
     e2e:	39 f1       	breq	.+78     	; 0xe7e <malloc+0x70>
     e30:	40 81       	ld	r20, Z
     e32:	51 81       	ldd	r21, Z+1	; 0x01
     e34:	48 17       	cp	r20, r24
     e36:	59 07       	cpc	r21, r25
     e38:	b8 f0       	brcs	.+46     	; 0xe68 <malloc+0x5a>
     e3a:	48 17       	cp	r20, r24
     e3c:	59 07       	cpc	r21, r25
     e3e:	71 f4       	brne	.+28     	; 0xe5c <malloc+0x4e>
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	10 97       	sbiw	r26, 0x00	; 0
     e46:	29 f0       	breq	.+10     	; 0xe52 <malloc+0x44>
     e48:	13 96       	adiw	r26, 0x03	; 3
     e4a:	9c 93       	st	X, r25
     e4c:	8e 93       	st	-X, r24
     e4e:	12 97       	sbiw	r26, 0x02	; 2
     e50:	2c c0       	rjmp	.+88     	; 0xeaa <malloc+0x9c>
     e52:	90 93 52 03 	sts	0x0352, r25
     e56:	80 93 51 03 	sts	0x0351, r24
     e5a:	27 c0       	rjmp	.+78     	; 0xeaa <malloc+0x9c>
     e5c:	21 15       	cp	r18, r1
     e5e:	31 05       	cpc	r19, r1
     e60:	31 f0       	breq	.+12     	; 0xe6e <malloc+0x60>
     e62:	42 17       	cp	r20, r18
     e64:	53 07       	cpc	r21, r19
     e66:	18 f0       	brcs	.+6      	; 0xe6e <malloc+0x60>
     e68:	a9 01       	movw	r20, r18
     e6a:	db 01       	movw	r26, r22
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <malloc+0x62>
     e6e:	ef 01       	movw	r28, r30
     e70:	9a 01       	movw	r18, r20
     e72:	bd 01       	movw	r22, r26
     e74:	df 01       	movw	r26, r30
     e76:	02 80       	ldd	r0, Z+2	; 0x02
     e78:	f3 81       	ldd	r31, Z+3	; 0x03
     e7a:	e0 2d       	mov	r30, r0
     e7c:	d7 cf       	rjmp	.-82     	; 0xe2c <malloc+0x1e>
     e7e:	21 15       	cp	r18, r1
     e80:	31 05       	cpc	r19, r1
     e82:	f9 f0       	breq	.+62     	; 0xec2 <malloc+0xb4>
     e84:	28 1b       	sub	r18, r24
     e86:	39 0b       	sbc	r19, r25
     e88:	24 30       	cpi	r18, 0x04	; 4
     e8a:	31 05       	cpc	r19, r1
     e8c:	80 f4       	brcc	.+32     	; 0xeae <malloc+0xa0>
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	61 15       	cp	r22, r1
     e94:	71 05       	cpc	r23, r1
     e96:	21 f0       	breq	.+8      	; 0xea0 <malloc+0x92>
     e98:	fb 01       	movw	r30, r22
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	82 83       	std	Z+2, r24	; 0x02
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <malloc+0x9a>
     ea0:	90 93 52 03 	sts	0x0352, r25
     ea4:	80 93 51 03 	sts	0x0351, r24
     ea8:	fe 01       	movw	r30, r28
     eaa:	32 96       	adiw	r30, 0x02	; 2
     eac:	44 c0       	rjmp	.+136    	; 0xf36 <malloc+0x128>
     eae:	fe 01       	movw	r30, r28
     eb0:	e2 0f       	add	r30, r18
     eb2:	f3 1f       	adc	r31, r19
     eb4:	81 93       	st	Z+, r24
     eb6:	91 93       	st	Z+, r25
     eb8:	22 50       	subi	r18, 0x02	; 2
     eba:	31 09       	sbc	r19, r1
     ebc:	39 83       	std	Y+1, r19	; 0x01
     ebe:	28 83       	st	Y, r18
     ec0:	3a c0       	rjmp	.+116    	; 0xf36 <malloc+0x128>
     ec2:	20 91 4f 03 	lds	r18, 0x034F
     ec6:	30 91 50 03 	lds	r19, 0x0350
     eca:	23 2b       	or	r18, r19
     ecc:	41 f4       	brne	.+16     	; 0xede <malloc+0xd0>
     ece:	20 91 02 01 	lds	r18, 0x0102
     ed2:	30 91 03 01 	lds	r19, 0x0103
     ed6:	30 93 50 03 	sts	0x0350, r19
     eda:	20 93 4f 03 	sts	0x034F, r18
     ede:	20 91 00 01 	lds	r18, 0x0100
     ee2:	30 91 01 01 	lds	r19, 0x0101
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	41 f4       	brne	.+16     	; 0xefc <malloc+0xee>
     eec:	2d b7       	in	r18, 0x3d	; 61
     eee:	3e b7       	in	r19, 0x3e	; 62
     ef0:	40 91 04 01 	lds	r20, 0x0104
     ef4:	50 91 05 01 	lds	r21, 0x0105
     ef8:	24 1b       	sub	r18, r20
     efa:	35 0b       	sbc	r19, r21
     efc:	e0 91 4f 03 	lds	r30, 0x034F
     f00:	f0 91 50 03 	lds	r31, 0x0350
     f04:	e2 17       	cp	r30, r18
     f06:	f3 07       	cpc	r31, r19
     f08:	a0 f4       	brcc	.+40     	; 0xf32 <malloc+0x124>
     f0a:	2e 1b       	sub	r18, r30
     f0c:	3f 0b       	sbc	r19, r31
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	78 f0       	brcs	.+30     	; 0xf32 <malloc+0x124>
     f14:	ac 01       	movw	r20, r24
     f16:	4e 5f       	subi	r20, 0xFE	; 254
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	24 17       	cp	r18, r20
     f1c:	35 07       	cpc	r19, r21
     f1e:	48 f0       	brcs	.+18     	; 0xf32 <malloc+0x124>
     f20:	4e 0f       	add	r20, r30
     f22:	5f 1f       	adc	r21, r31
     f24:	50 93 50 03 	sts	0x0350, r21
     f28:	40 93 4f 03 	sts	0x034F, r20
     f2c:	81 93       	st	Z+, r24
     f2e:	91 93       	st	Z+, r25
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <malloc+0x128>
     f32:	e0 e0       	ldi	r30, 0x00	; 0
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	cf 01       	movw	r24, r30
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <free>:
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	09 f4       	brne	.+2      	; 0xf48 <free+0xa>
     f46:	87 c0       	rjmp	.+270    	; 0x1056 <free+0x118>
     f48:	fc 01       	movw	r30, r24
     f4a:	32 97       	sbiw	r30, 0x02	; 2
     f4c:	13 82       	std	Z+3, r1	; 0x03
     f4e:	12 82       	std	Z+2, r1	; 0x02
     f50:	c0 91 51 03 	lds	r28, 0x0351
     f54:	d0 91 52 03 	lds	r29, 0x0352
     f58:	20 97       	sbiw	r28, 0x00	; 0
     f5a:	81 f4       	brne	.+32     	; 0xf7c <free+0x3e>
     f5c:	20 81       	ld	r18, Z
     f5e:	31 81       	ldd	r19, Z+1	; 0x01
     f60:	28 0f       	add	r18, r24
     f62:	39 1f       	adc	r19, r25
     f64:	80 91 4f 03 	lds	r24, 0x034F
     f68:	90 91 50 03 	lds	r25, 0x0350
     f6c:	82 17       	cp	r24, r18
     f6e:	93 07       	cpc	r25, r19
     f70:	79 f5       	brne	.+94     	; 0xfd0 <free+0x92>
     f72:	f0 93 50 03 	sts	0x0350, r31
     f76:	e0 93 4f 03 	sts	0x034F, r30
     f7a:	6d c0       	rjmp	.+218    	; 0x1056 <free+0x118>
     f7c:	de 01       	movw	r26, r28
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	ae 17       	cp	r26, r30
     f84:	bf 07       	cpc	r27, r31
     f86:	50 f4       	brcc	.+20     	; 0xf9c <free+0x5e>
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	4d 91       	ld	r20, X+
     f8c:	5c 91       	ld	r21, X
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	9d 01       	movw	r18, r26
     f92:	41 15       	cp	r20, r1
     f94:	51 05       	cpc	r21, r1
     f96:	09 f1       	breq	.+66     	; 0xfda <free+0x9c>
     f98:	da 01       	movw	r26, r20
     f9a:	f3 cf       	rjmp	.-26     	; 0xf82 <free+0x44>
     f9c:	b3 83       	std	Z+3, r27	; 0x03
     f9e:	a2 83       	std	Z+2, r26	; 0x02
     fa0:	40 81       	ld	r20, Z
     fa2:	51 81       	ldd	r21, Z+1	; 0x01
     fa4:	84 0f       	add	r24, r20
     fa6:	95 1f       	adc	r25, r21
     fa8:	8a 17       	cp	r24, r26
     faa:	9b 07       	cpc	r25, r27
     fac:	71 f4       	brne	.+28     	; 0xfca <free+0x8c>
     fae:	8d 91       	ld	r24, X+
     fb0:	9c 91       	ld	r25, X
     fb2:	11 97       	sbiw	r26, 0x01	; 1
     fb4:	84 0f       	add	r24, r20
     fb6:	95 1f       	adc	r25, r21
     fb8:	02 96       	adiw	r24, 0x02	; 2
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	93 83       	std	Z+3, r25	; 0x03
     fc8:	82 83       	std	Z+2, r24	; 0x02
     fca:	21 15       	cp	r18, r1
     fcc:	31 05       	cpc	r19, r1
     fce:	29 f4       	brne	.+10     	; 0xfda <free+0x9c>
     fd0:	f0 93 52 03 	sts	0x0352, r31
     fd4:	e0 93 51 03 	sts	0x0351, r30
     fd8:	3e c0       	rjmp	.+124    	; 0x1056 <free+0x118>
     fda:	d9 01       	movw	r26, r18
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	fc 93       	st	X, r31
     fe0:	ee 93       	st	-X, r30
     fe2:	12 97       	sbiw	r26, 0x02	; 2
     fe4:	4d 91       	ld	r20, X+
     fe6:	5d 91       	ld	r21, X+
     fe8:	a4 0f       	add	r26, r20
     fea:	b5 1f       	adc	r27, r21
     fec:	ea 17       	cp	r30, r26
     fee:	fb 07       	cpc	r31, r27
     ff0:	79 f4       	brne	.+30     	; 0x1010 <free+0xd2>
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	84 0f       	add	r24, r20
     ff8:	95 1f       	adc	r25, r21
     ffa:	02 96       	adiw	r24, 0x02	; 2
     ffc:	d9 01       	movw	r26, r18
     ffe:	11 96       	adiw	r26, 0x01	; 1
    1000:	9c 93       	st	X, r25
    1002:	8e 93       	st	-X, r24
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	9c 93       	st	X, r25
    100c:	8e 93       	st	-X, r24
    100e:	12 97       	sbiw	r26, 0x02	; 2
    1010:	e0 e0       	ldi	r30, 0x00	; 0
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	19 f0       	breq	.+6      	; 0x1022 <free+0xe4>
    101c:	fe 01       	movw	r30, r28
    101e:	ec 01       	movw	r28, r24
    1020:	f9 cf       	rjmp	.-14     	; 0x1014 <free+0xd6>
    1022:	ce 01       	movw	r24, r28
    1024:	02 96       	adiw	r24, 0x02	; 2
    1026:	28 81       	ld	r18, Y
    1028:	39 81       	ldd	r19, Y+1	; 0x01
    102a:	82 0f       	add	r24, r18
    102c:	93 1f       	adc	r25, r19
    102e:	20 91 4f 03 	lds	r18, 0x034F
    1032:	30 91 50 03 	lds	r19, 0x0350
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	69 f4       	brne	.+26     	; 0x1056 <free+0x118>
    103c:	30 97       	sbiw	r30, 0x00	; 0
    103e:	29 f4       	brne	.+10     	; 0x104a <free+0x10c>
    1040:	10 92 52 03 	sts	0x0352, r1
    1044:	10 92 51 03 	sts	0x0351, r1
    1048:	02 c0       	rjmp	.+4      	; 0x104e <free+0x110>
    104a:	13 82       	std	Z+3, r1	; 0x03
    104c:	12 82       	std	Z+2, r1	; 0x02
    104e:	d0 93 50 03 	sts	0x0350, r29
    1052:	c0 93 4f 03 	sts	0x034F, r28
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <fdevopen>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
    1066:	8b 01       	movw	r16, r22
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	31 f4       	brne	.+12     	; 0x1078 <fdevopen+0x1c>
    106c:	61 15       	cp	r22, r1
    106e:	71 05       	cpc	r23, r1
    1070:	19 f4       	brne	.+6      	; 0x1078 <fdevopen+0x1c>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	38 c0       	rjmp	.+112    	; 0x10e8 <fdevopen+0x8c>
    1078:	6e e0       	ldi	r22, 0x0E	; 14
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 a6 08 	call	0x114c	; 0x114c <calloc>
    1084:	fc 01       	movw	r30, r24
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	a1 f3       	breq	.-24     	; 0x1072 <fdevopen+0x16>
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	83 83       	std	Z+3, r24	; 0x03
    108e:	01 15       	cp	r16, r1
    1090:	11 05       	cpc	r17, r1
    1092:	71 f0       	breq	.+28     	; 0x10b0 <fdevopen+0x54>
    1094:	13 87       	std	Z+11, r17	; 0x0b
    1096:	02 87       	std	Z+10, r16	; 0x0a
    1098:	81 e8       	ldi	r24, 0x81	; 129
    109a:	83 83       	std	Z+3, r24	; 0x03
    109c:	80 91 53 03 	lds	r24, 0x0353
    10a0:	90 91 54 03 	lds	r25, 0x0354
    10a4:	89 2b       	or	r24, r25
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <fdevopen+0x54>
    10a8:	f0 93 54 03 	sts	0x0354, r31
    10ac:	e0 93 53 03 	sts	0x0353, r30
    10b0:	20 97       	sbiw	r28, 0x00	; 0
    10b2:	c9 f0       	breq	.+50     	; 0x10e6 <fdevopen+0x8a>
    10b4:	d1 87       	std	Z+9, r29	; 0x09
    10b6:	c0 87       	std	Z+8, r28	; 0x08
    10b8:	83 81       	ldd	r24, Z+3	; 0x03
    10ba:	82 60       	ori	r24, 0x02	; 2
    10bc:	83 83       	std	Z+3, r24	; 0x03
    10be:	80 91 55 03 	lds	r24, 0x0355
    10c2:	90 91 56 03 	lds	r25, 0x0356
    10c6:	89 2b       	or	r24, r25
    10c8:	71 f4       	brne	.+28     	; 0x10e6 <fdevopen+0x8a>
    10ca:	f0 93 56 03 	sts	0x0356, r31
    10ce:	e0 93 55 03 	sts	0x0355, r30
    10d2:	80 91 57 03 	lds	r24, 0x0357
    10d6:	90 91 58 03 	lds	r25, 0x0358
    10da:	89 2b       	or	r24, r25
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <fdevopen+0x8a>
    10de:	f0 93 58 03 	sts	0x0358, r31
    10e2:	e0 93 57 03 	sts	0x0357, r30
    10e6:	cf 01       	movw	r24, r30
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	08 95       	ret

000010f2 <puts>:
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	e0 91 55 03 	lds	r30, 0x0355
    10fe:	f0 91 56 03 	lds	r31, 0x0356
    1102:	23 81       	ldd	r18, Z+3	; 0x03
    1104:	21 ff       	sbrs	r18, 1
    1106:	1b c0       	rjmp	.+54     	; 0x113e <puts+0x4c>
    1108:	ec 01       	movw	r28, r24
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	89 91       	ld	r24, Y+
    1110:	60 91 55 03 	lds	r22, 0x0355
    1114:	70 91 56 03 	lds	r23, 0x0356
    1118:	db 01       	movw	r26, r22
    111a:	18 96       	adiw	r26, 0x08	; 8
    111c:	ed 91       	ld	r30, X+
    111e:	fc 91       	ld	r31, X
    1120:	19 97       	sbiw	r26, 0x09	; 9
    1122:	88 23       	and	r24, r24
    1124:	31 f0       	breq	.+12     	; 0x1132 <puts+0x40>
    1126:	09 95       	icall
    1128:	89 2b       	or	r24, r25
    112a:	89 f3       	breq	.-30     	; 0x110e <puts+0x1c>
    112c:	0f ef       	ldi	r16, 0xFF	; 255
    112e:	1f ef       	ldi	r17, 0xFF	; 255
    1130:	ee cf       	rjmp	.-36     	; 0x110e <puts+0x1c>
    1132:	8a e0       	ldi	r24, 0x0A	; 10
    1134:	09 95       	icall
    1136:	89 2b       	or	r24, r25
    1138:	11 f4       	brne	.+4      	; 0x113e <puts+0x4c>
    113a:	c8 01       	movw	r24, r16
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <puts+0x50>
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	08 95       	ret

0000114c <calloc>:
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	86 9f       	mul	r24, r22
    1156:	80 01       	movw	r16, r0
    1158:	87 9f       	mul	r24, r23
    115a:	10 0d       	add	r17, r0
    115c:	96 9f       	mul	r25, r22
    115e:	10 0d       	add	r17, r0
    1160:	11 24       	eor	r1, r1
    1162:	c8 01       	movw	r24, r16
    1164:	0e 94 07 07 	call	0xe0e	; 0xe0e <malloc>
    1168:	ec 01       	movw	r28, r24
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	29 f0       	breq	.+10     	; 0x1178 <calloc+0x2c>
    116e:	a8 01       	movw	r20, r16
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 c2 08 	call	0x1184	; 0x1184 <memset>
    1178:	ce 01       	movw	r24, r28
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <memset>:
    1184:	dc 01       	movw	r26, r24
    1186:	01 c0       	rjmp	.+2      	; 0x118a <memset+0x6>
    1188:	6d 93       	st	X+, r22
    118a:	41 50       	subi	r20, 0x01	; 1
    118c:	50 40       	sbci	r21, 0x00	; 0
    118e:	e0 f7       	brcc	.-8      	; 0x1188 <memset+0x4>
    1190:	08 95       	ret

00001192 <_exit>:
    1192:	f8 94       	cli

00001194 <__stop_program>:
    1194:	ff cf       	rjmp	.-2      	; 0x1194 <__stop_program>
