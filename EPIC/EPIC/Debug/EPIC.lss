
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000296  00800100  000035aa  0000363e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800396  00800396  000038d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000520  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005fb6  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ea8  00000000  00000000  00009e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000203d  00000000  00000000  0000bcae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000fb8  00000000  00000000  0000dcec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f27  00000000  00000000  0000eca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003ba7  00000000  00000000  0000fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000568  00000000  00000000  00013772  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__ctors_end>
       4:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__vector_1>
       8:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_3>
      10:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      14:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      18:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      1c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      20:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      24:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      28:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      2c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      30:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      34:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      38:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      3c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      40:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      44:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      48:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      4c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      50:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      54:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      58:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      5c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      60:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      64:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      68:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      6c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__bad_interrupt>
      70:	40 0c       	add	r4, r0
      72:	58 0c       	add	r5, r8
      74:	3d 0c       	add	r3, r13
      76:	55 0c       	add	r5, r5
      78:	4f 0c       	add	r4, r15
      7a:	52 0c       	add	r5, r2
      7c:	5b 0c       	add	r5, r11
      7e:	5e 0c       	add	r5, r14

00000080 <__trampolines_end>:
      80:	61 03       	mulsu	r22, r17
      82:	5b 03       	fmul	r21, r19
      84:	52 03       	mulsu	r21, r18
      86:	4a 03       	fmul	r20, r18
      88:	40 03       	mulsu	r20, r16
      8a:	37 03       	mulsu	r19, r23
      8c:	27 03       	mulsu	r18, r23
      8e:	17 03       	mulsu	r17, r23
      90:	08 03       	fmul	r16, r16
      92:	fa 02       	muls	r31, r26
      94:	ee 02       	muls	r30, r30
      96:	e1 02       	muls	r30, r17
      98:	db 02       	muls	r29, r27
      9a:	ce 02       	muls	r28, r30
      9c:	c7 02       	muls	r28, r23
      9e:	ba 02       	muls	r27, r26
      a0:	b2 02       	muls	r27, r18
      a2:	a3 02       	muls	r26, r19
      a4:	98 02       	muls	r25, r24
      a6:	8b 02       	muls	r24, r27
      a8:	81 02       	muls	r24, r17
      aa:	70 02       	muls	r23, r16
      ac:	5e 02       	muls	r21, r30
      ae:	4d 02       	muls	r20, r29
      b0:	3c 02       	muls	r19, r28
      b2:	2b 02       	muls	r18, r27
      b4:	1a 02       	muls	r17, r26
      b6:	09 02       	muls	r16, r25
      b8:	f8 01       	movw	r30, r16
      ba:	e7 01       	movw	r28, r14
      bc:	d6 01       	movw	r26, r12
      be:	c5 01       	movw	r24, r10
      c0:	b4 01       	movw	r22, r8
      c2:	a3 01       	movw	r20, r6
      c4:	92 01       	movw	r18, r4
      c6:	86 01       	movw	r16, r12
      c8:	7c 01       	movw	r14, r24
      ca:	70 01       	movw	r14, r0
      cc:	63 01       	movw	r12, r6
      ce:	52 01       	movw	r10, r4
      d0:	41 01       	movw	r8, r2
      d2:	30 01       	movw	r6, r0
      d4:	29 01       	movw	r4, r18
      d6:	1a 01       	movw	r2, r20
      d8:	0f 01       	movw	r0, r30
      da:	ff 00       	.word	0x00ff	; ????
      dc:	f0 00       	.word	0x00f0	; ????
      de:	e0 00       	.word	0x00e0	; ????

000000e0 <s_back>:
      e0:	20 20 20 20 20 20 20 20 20 20 20 62 61 63 6b 00                back.

000000f0 <s_rb>:
      f0:	52 69 67 68 74 20 42 75 74 74 6f 6e 3a 20 00        Right Button: .

000000ff <s_songsong>:
      ff:	20 20 20 20 20 20 20 20 20 20 20 53 4f 4e 47 00                SONG.

0000010f <s_animations>:
     10f:	41 6e 69 6d 61 74 69 6f 6e 73 00                    Animations.

0000011a <s_greets>:
     11a:	53 68 6f 77 20 67 72 65 65 74 69 6e 67 73 00        Show greetings.

00000129 <s_greetings4>:
     129:	70 72 65 74 74 79 00                                pretty.

00000130 <s_greetings3>:
     130:	73 68 65 20 69 73 20 73 6f 6f 6f 6f 6f 6f 6f 6f     she is soooooooo
	...

00000141 <s_greetings2>:
     141:	67 72 61 6e 64 6d 61 2c 20 62 65 63 61 75 73 65     grandma, because
	...

00000152 <s_greetings1>:
     152:	49 20 77 61 6e 74 20 74 6f 20 67 72 65 65 74 20     I want to greet 
	...

00000163 <s_ir3>:
     163:	4e 6f 3a 20 4a 6f 79 20 44 4f 57 4e 00              No: Joy DOWN.

00000170 <s_ir2>:
     170:	59 65 73 3a 20 4a 6f 79 20 55 50 00                 Yes: Joy UP.

0000017c <s_ir1>:
     17c:	57 69 74 68 20 49 52 3a 20 00                       With IR: .

00000186 <s_with_ir>:
     186:	49 52 20 53 65 74 74 69 6e 67 73 00                 IR Settings.

00000192 <s_hello7>:
     192:	20 20 20 20 20 20 20 20 20 20 28 3e 20 3c 29 20               (> <) 
	...

000001a3 <s_hello6>:
     1a3:	20 20 20 20 20 20 20 7c 5f 5f 28 4f 2e 6f 29 20            |__(O.o) 
	...

000001b4 <s_hello5>:
     1b4:	20 20 20 20 20 20 20 7c 20 20 28 5c 5f 2f 29 20            |  (\_/) 
	...

000001c5 <s_hello4>:
     1c5:	20 20 20 20 20 20 20 5e 20 20 20 20 20 20 20 20            ^        
	...

000001d6 <s_hello3>:
     1d6:	20 60 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 20      `------------' 
	...

000001e7 <s_hello2>:
     1e7:	20 7c 20 50 69 6e 67 20 50 6f 6e 67 21 20 7c 20      | Ping Pong! | 
	...

000001f8 <s_hello1>:
     1f8:	20 2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 20      .------------. 
	...

00000209 <s_thumb7>:
     209:	20 20 28 5f 5f 5f 29 5f 5f 2e 7c 5f 5f 5f 5f 5f       (___)__.|_____
	...

0000021a <s_thumb6>:
     21a:	20 28 5f 5f 5f 5f 29 2e 5f 5f 7c 20 20 20 20 20      (____).__|     
	...

0000022b <s_thumb5>:
     22b:	28 5f 5f 5f 5f 29 7c 20 20 20 7c 20 20 20 20 20     (____)|   |     
	...

0000023c <s_thumb4>:
     23c:	20 28 5f 5f 5f 5f 29 20 20 60 7c 20 20 20 20 20      (____)  `|     
	...

0000024d <s_thumb3>:
     24d:	20 20 5f 5f 5f 5f 5c 20 5c 20 20 5f 5f 5f 5f 5f       ____\ \  _____
	...

0000025e <s_thumb2>:
     25e:	20 20 20 20 20 7c 20 5c 20 20 20 20 20 20 20 20          | \        
     26e:	20 00                                                .

00000270 <s_thumb1>:
     270:	20 20 20 20 20 20 2f 7c 20 20 20 20 20 20 20 20           /|        
	...

00000281 <s_last_christmas>:
     281:	4c 61 73 74 20 58 4d 41 53 00                       Last XMAS.

0000028b <s_jingle_bells>:
     28b:	4a 69 6e 67 6c 65 20 42 65 6c 6c 73 00              Jingle Bells.

00000298 <s_merry_x_mas>:
     298:	4d 65 72 72 79 20 58 4d 41 53 00                    Merry XMAS.

000002a3 <s_imperial>:
     2a3:	49 6d 70 65 72 69 61 6c 20 4d 61 72 63 68 00        Imperial March.

000002b2 <s_pokemon>:
     2b2:	50 6f 6b 65 6d 6f 6e 00                             Pokemon.

000002ba <s_cantina_band>:
     2ba:	43 61 6e 74 69 6e 61 20 42 61 6e 64 00              Cantina Band.

000002c7 <s_tetris>:
     2c7:	54 65 74 72 69 73 00                                Tetris.

000002ce <s_harry_potter>:
     2ce:	48 61 72 72 79 20 50 6f 74 74 65 72 00              Harry Potter.

000002db <s_songs>:
     2db:	53 6f 6e 67 73 00                                   Songs.

000002e1 <s_right_slid>:
     2e1:	52 69 67 68 74 20 53 6c 69 64 65 72 00              Right Slider.

000002ee <s_left_slid>:
     2ee:	4c 65 66 74 20 53 6c 69 64 65 72 00                 Left Slider.

000002fa <s_calibrate_slid>:
     2fa:	43 61 6c 69 62 20 53 6c 69 64 65 72 73 00           Calib Sliders.

00000308 <s_calibrate_joy>:
     308:	43 61 6c 69 62 20 4a 6f 79 73 74 69 63 6b 00        Calib Joystick.

00000317 <s_reset_highscore>:
     317:	52 65 73 65 74 20 48 69 67 68 73 63 6f 72 65 00     Reset Highscore.

00000327 <s_store_highscore>:
     327:	53 74 6f 72 65 20 48 69 67 68 73 63 6f 72 65 00     Store Highscore.

00000337 <s_settings>:
     337:	53 65 74 74 69 6e 67 73 00                          Settings.

00000340 <s_highscore>:
     340:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

0000034a <s_pingpang>:
     34a:	42 61 72 67 61 6d 65 00                             Bargame.

00000352 <s_pingpong>:
     352:	50 69 6e 67 50 6f 6e 67 00                          PingPong.

0000035b <s_games>:
     35b:	47 61 6d 65 73 00                                   Games.

00000361 <s_root>:
     361:	72 6f 6f 74 00                                      root.

00000366 <font8>:
	...
     36e:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     37e:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     38e:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     39e:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     3ae:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     3be:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     3ce:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     3de:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     3ee:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     3fe:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     40e:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     41e:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     42e:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     43e:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     44e:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     45e:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     46e:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     47e:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     48e:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     49e:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     4ae:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     4be:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     4ce:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     4de:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     4ee:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     4fe:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     50e:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     51e:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     52e:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     53e:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     54e:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     55e:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     56e:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     57e:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     58e:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     59e:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     5ae:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     5be:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     5ce:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     5de:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     5ee:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     5fe:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     60e:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     61e:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     62e:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     63e:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     64e:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

0000065e <__ctors_end>:
     65e:	11 24       	eor	r1, r1
     660:	1f be       	out	0x3f, r1	; 63
     662:	cf ef       	ldi	r28, 0xFF	; 255
     664:	d4 e0       	ldi	r29, 0x04	; 4
     666:	de bf       	out	0x3e, r29	; 62
     668:	cd bf       	out	0x3d, r28	; 61

0000066a <__do_copy_data>:
     66a:	13 e0       	ldi	r17, 0x03	; 3
     66c:	a0 e0       	ldi	r26, 0x00	; 0
     66e:	b1 e0       	ldi	r27, 0x01	; 1
     670:	ea ea       	ldi	r30, 0xAA	; 170
     672:	f5 e3       	ldi	r31, 0x35	; 53
     674:	02 c0       	rjmp	.+4      	; 0x67a <__do_copy_data+0x10>
     676:	05 90       	lpm	r0, Z+
     678:	0d 92       	st	X+, r0
     67a:	a6 39       	cpi	r26, 0x96	; 150
     67c:	b1 07       	cpc	r27, r17
     67e:	d9 f7       	brne	.-10     	; 0x676 <__do_copy_data+0xc>

00000680 <__do_clear_bss>:
     680:	23 e0       	ldi	r18, 0x03	; 3
     682:	a6 e9       	ldi	r26, 0x96	; 150
     684:	b3 e0       	ldi	r27, 0x03	; 3
     686:	01 c0       	rjmp	.+2      	; 0x68a <.do_clear_bss_start>

00000688 <.do_clear_bss_loop>:
     688:	1d 92       	st	X+, r1

0000068a <.do_clear_bss_start>:
     68a:	a7 3f       	cpi	r26, 0xF7	; 247
     68c:	b2 07       	cpc	r27, r18
     68e:	e1 f7       	brne	.-8      	; 0x688 <.do_clear_bss_loop>
     690:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <main>
     694:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <_exit>

00000698 <__bad_interrupt>:
     698:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000069c <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
     69c:	8b b7       	in	r24, 0x3b	; 59
     69e:	80 62       	ori	r24, 0x20	; 32
     6a0:	8b bf       	out	0x3b, r24	; 59
     6a2:	08 95       	ret

000006a4 <ADC_read>:
}

char ADC_read(char channel)
{
	volatile int * adc_channel = (int *) 0x1400;
	adc_channel[0] = channel;
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	90 93 01 14 	sts	0x1401, r25
     6aa:	80 93 00 14 	sts	0x1400, r24
	char value;
	while(!flag);
     6ae:	80 91 96 03 	lds	r24, 0x0396
     6b2:	90 91 97 03 	lds	r25, 0x0397
     6b6:	89 2b       	or	r24, r25
     6b8:	d1 f3       	breq	.-12     	; 0x6ae <ADC_read+0xa>
	value = adc_channel[20];
     6ba:	80 91 28 14 	lds	r24, 0x1428
     6be:	90 91 29 14 	lds	r25, 0x1429
	flag = 0;
     6c2:	10 92 97 03 	sts	0x0397, r1
     6c6:	10 92 96 03 	sts	0x0396, r1
	return value;
}
     6ca:	08 95       	ret

000006cc <__vector_3>:

//interrupt service routine to notice when data available
ISR(INT2_vect)
{
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	8f 93       	push	r24
     6d8:	9f 93       	push	r25
	flag = 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	90 93 97 03 	sts	0x0397, r25
     6e2:	80 93 96 03 	sts	0x0396, r24
}
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <can_init>:
volatile int msg_received_flag = 0;

void can_init(void)
{
	//initialize mcp
	mcp_init();
     6f4:	0e 94 c8 08 	call	0x1190	; 0x1190 <mcp_init>

	//ensure to be in config mode
	mcp_write(MCP_CANCTRL, MODE_MASK & MODE_CONFIG);
     6f8:	60 e8       	ldi	r22, 0x80	; 128
     6fa:	8f e0       	ldi	r24, 0x0F	; 15
     6fc:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>

	//turn off filters and rollover for receive buffer 0
	mcp_write(MCP_RXB0CTRL, NO_FILTERS_AND_MASKS);
     700:	60 e6       	ldi	r22, 0x60	; 96
     702:	80 e6       	ldi	r24, 0x60	; 96
     704:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>

	//enable interrupt for received message
	mcp_write(MCP_CANINTE, MCP_RX0IF);
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	8b e2       	ldi	r24, 0x2B	; 43
     70c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>

	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages)
	mcp_write(MCP_CANCTRL, MODE_NORMAL & MODE_MASK);
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8f e0       	ldi	r24, 0x0F	; 15
     714:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>
	#ifdef ATMEGA2560
		EICRB &= ~(1 << ISC30);
		EICRB &= ~(1 << ISC31);
		EIMSK |= (1 << INT3);
	#else
		MCUCR |= (1 << ISC11);
     718:	85 b7       	in	r24, 0x35	; 53
     71a:	88 60       	ori	r24, 0x08	; 8
     71c:	85 bf       	out	0x35, r24	; 53
		GICR |= (1 << INT0);
     71e:	8b b7       	in	r24, 0x3b	; 59
     720:	80 64       	ori	r24, 0x40	; 64
     722:	8b bf       	out	0x3b, r24	; 59
     724:	08 95       	ret

00000726 <can_error>:
}

bool can_error(void)
{
	//read CAN error status out of respective register
	return TXERR & mcp_read(MCP_TXB0CTRL);
     726:	80 e3       	ldi	r24, 0x30	; 48
     728:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
}
     72c:	82 95       	swap	r24
     72e:	81 70       	andi	r24, 0x01	; 1
     730:	08 95       	ret

00000732 <can_transmit_complete>:

bool can_transmit_complete(void)
{
	//check if transmission complete from status register
	return !(TXREQ & mcp_read(MCP_TXB0CTRL));
     732:	80 e3       	ldi	r24, 0x30	; 48
     734:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
     738:	83 fb       	bst	r24, 3
     73a:	88 27       	eor	r24, r24
     73c:	80 f9       	bld	r24, 0
}
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	89 27       	eor	r24, r25
     742:	08 95       	ret

00000744 <can_message_send>:
		GICR |= (1 << INT0);
	#endif
}

void can_message_send(can_message can_msg)
{
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	2b 97       	sbiw	r28, 0x0b	; 11
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	e9 82       	std	Y+1, r14	; 0x01
     762:	fa 82       	std	Y+2, r15	; 0x02
     764:	0b 83       	std	Y+3, r16	; 0x03
     766:	1c 83       	std	Y+4, r17	; 0x04
     768:	2d 83       	std	Y+5, r18	; 0x05
     76a:	3e 83       	std	Y+6, r19	; 0x06
     76c:	4f 83       	std	Y+7, r20	; 0x07
     76e:	58 87       	std	Y+8, r21	; 0x08
     770:	69 87       	std	Y+9, r22	; 0x09
     772:	7a 87       	std	Y+10, r23	; 0x0a
     774:	8b 87       	std	Y+11, r24	; 0x0b
     776:	e9 80       	ldd	r14, Y+1	; 0x01
     778:	fa 80       	ldd	r15, Y+2	; 0x02
	if(can_transmit_complete())
     77a:	0e 94 99 03 	call	0x732	; 0x732 <can_transmit_complete>
     77e:	88 23       	and	r24, r24
     780:	49 f1       	breq	.+82     	; 0x7d4 <can_message_send+0x90>
	{
		//write CAN msg ID to MCP2515
		mcp_write(MCP_TXB0SIDH, can_msg.id >> 3);
     782:	b7 01       	movw	r22, r14
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	76 95       	lsr	r23
     788:	67 95       	ror	r22
     78a:	8a 95       	dec	r24
     78c:	e1 f7       	brne	.-8      	; 0x786 <can_message_send+0x42>
     78e:	81 e3       	ldi	r24, 0x31	; 49
     790:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>
		mcp_write(MCP_TXB0SIDL, can_msg.id << 5);
     794:	6e 2d       	mov	r22, r14
     796:	62 95       	swap	r22
     798:	66 0f       	add	r22, r22
     79a:	60 7e       	andi	r22, 0xE0	; 224
     79c:	82 e3       	ldi	r24, 0x32	; 50
     79e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>

		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
     7a2:	60 2f       	mov	r22, r16
     7a4:	6f 70       	andi	r22, 0x0F	; 15
     7a6:	85 e3       	ldi	r24, 0x35	; 53
     7a8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>
     7ac:	7e 01       	movw	r14, r28
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	e8 0e       	add	r14, r24
     7b2:	f1 1c       	adc	r15, r1

		//write CAN data to MCP2515
		for(uint8_t i = 0; i < can_msg.length; i++)
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	10 17       	cp	r17, r16
     7b8:	49 f0       	breq	.+18     	; 0x7cc <can_message_send+0x88>
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
     7ba:	f7 01       	movw	r30, r14
     7bc:	61 91       	ld	r22, Z+
     7be:	7f 01       	movw	r14, r30
     7c0:	86 e3       	ldi	r24, 0x36	; 54
     7c2:	81 0f       	add	r24, r17
     7c4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>

		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);

		//write CAN data to MCP2515
		for(uint8_t i = 0; i < can_msg.length; i++)
     7c8:	1f 5f       	subi	r17, 0xFF	; 255
     7ca:	f5 cf       	rjmp	.-22     	; 0x7b6 <can_message_send+0x72>
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);

		//send transmission request for transmitted CAN msg to MCP2515
		mcp_request_to_send(TXB0);
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 cc 08 	call	0x1198	; 0x1198 <mcp_request_to_send>
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <can_message_send+0xa0>
	}
	else
	{
		if(can_error())
     7d4:	0e 94 93 03 	call	0x726	; 0x726 <can_error>
     7d8:	88 23       	and	r24, r24
     7da:	21 f0       	breq	.+8      	; 0x7e4 <can_message_send+0xa0>
			printf("CAN transmission error \n");
     7dc:	85 e1       	ldi	r24, 0x15	; 21
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
	}
}
     7e4:	2b 96       	adiw	r28, 0x0b	; 11
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <draw_heart_to_buffer>:
int level=0;
int grid[N_X][N_Y];		//Gives the status of each little block in the grid


void draw_heart_to_buffer(POS pos)
{
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	00 d0       	rcall	.+0      	; 0x806 <draw_heart_to_buffer+0x8>
     806:	00 d0       	rcall	.+0      	; 0x808 <draw_heart_to_buffer+0xa>
     808:	1f 92       	push	r1
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	18 2f       	mov	r17, r24
	TRI tri;
	tri.full=1;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	8c 83       	std	Y+4, r24	; 0x04
	tri.l=9;
	tri.pos=pos;
     814:	9a 83       	std	Y+2, r25	; 0x02
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
     816:	41 2f       	mov	r20, r17
     818:	59 2f       	mov	r21, r25
     81a:	69 e0       	ldi	r22, 0x09	; 9
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <draw_triangle_buffer>
	
	tri.pos.x +=5;
	tri.ori=UP;
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	8d 83       	std	Y+5, r24	; 0x05
	tri.l=4;
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	8b 83       	std	Y+3, r24	; 0x03
	tri.pos=pos;
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
	
	tri.pos.x +=5;
     82c:	45 e0       	ldi	r20, 0x05	; 5
     82e:	41 0f       	add	r20, r17
	tri.ori=UP;
	tri.l=4;
	
	draw_triangle_buffer(tri);
     830:	5a 81       	ldd	r21, Y+2	; 0x02
     832:	64 e0       	ldi	r22, 0x04	; 4
     834:	7c 81       	ldd	r23, Y+4	; 0x04
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <draw_triangle_buffer>
	
	tri.pos.x -=5;
	
	draw_triangle_buffer(tri);
     83c:	41 2f       	mov	r20, r17
     83e:	5a 81       	ldd	r21, Y+2	; 0x02
     840:	6b 81       	ldd	r22, Y+3	; 0x03
     842:	7c 81       	ldd	r23, Y+4	; 0x04
     844:	8d 81       	ldd	r24, Y+5	; 0x05
     846:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <draw_triangle_buffer>
}
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	08 95       	ret

0000085c <draw_lives_buffer>:

void draw_lives_buffer(int n_lives)
{
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	1f 92       	push	r1
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	8c 01       	movw	r16, r24
	POS pos;
	pos.x=N-10;
     870:	26 e7       	ldi	r18, 0x76	; 118
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     872:	e1 2c       	mov	r14, r1
     874:	f1 2c       	mov	r15, r1
     876:	e0 16       	cp	r14, r16
     878:	f1 06       	cpc	r15, r17
     87a:	5c f4       	brge	.+22     	; 0x892 <draw_lives_buffer+0x36>
	{
		draw_heart_to_buffer(pos);
     87c:	82 2f       	mov	r24, r18
     87e:	95 e0       	ldi	r25, 0x05	; 5
     880:	29 83       	std	Y+1, r18	; 0x01
     882:	0e 94 ff 03 	call	0x7fe	; 0x7fe <draw_heart_to_buffer>
		pos.x -= 11;
     886:	29 81       	ldd	r18, Y+1	; 0x01
     888:	2b 50       	subi	r18, 0x0B	; 11
{
	POS pos;
	pos.x=N-10;
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	e8 1a       	sub	r14, r24
     88e:	f8 0a       	sbc	r15, r24
     890:	f2 cf       	rjmp	.-28     	; 0x876 <draw_lives_buffer+0x1a>
	{
		draw_heart_to_buffer(pos);
		pos.x -= 11;
	}
	
}
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	08 95       	ret

000008a2 <update_ball>:
{
	switch (ball.dir)
	{
		case UP_RIGHT:
		{
			if(ball.pos.x == LIM_RIGHT)
     8a2:	70 91 de 03 	lds	r23, 0x03DE
			{
				ball.dir=UP_LEFT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
     8a6:	e0 91 df 03 	lds	r30, 0x03DF
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     8aa:	f0 91 a2 03 	lds	r31, 0x03A2
     8ae:	47 2f       	mov	r20, r23
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	20 91 a4 03 	lds	r18, 0x03A4
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	2f 0f       	add	r18, r31
     8ba:	31 1d       	adc	r19, r1
     8bc:	60 91 e0 03 	lds	r22, 0x03E0
     8c0:	80 91 9a 03 	lds	r24, 0x039A
     8c4:	90 91 9b 03 	lds	r25, 0x039B
	
}

void update_ball(void)
{
	switch (ball.dir)
     8c8:	61 30       	cpi	r22, 0x01	; 1
     8ca:	01 f1       	breq	.+64     	; 0x90c <update_ball+0x6a>
     8cc:	88 f1       	brcs	.+98     	; 0x930 <update_ball+0x8e>
     8ce:	62 30       	cpi	r22, 0x02	; 2
     8d0:	61 f0       	breq	.+24     	; 0x8ea <update_ball+0x48>
     8d2:	63 30       	cpi	r22, 0x03	; 3
     8d4:	01 f1       	breq	.+64     	; 0x916 <update_ball+0x74>
     8d6:	60 93 e0 03 	sts	0x03E0, r22
     8da:	90 93 9b 03 	sts	0x039B, r25
     8de:	80 93 9a 03 	sts	0x039A, r24
     8e2:	08 95       	ret
			{
				ball.dir=UP_LEFT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
     8e4:	eb 30       	cpi	r30, 0x0B	; 11
     8e6:	41 f5       	brne	.+80     	; 0x938 <update_ball+0x96>
			{
				ball.dir=DOWN_RIGHT;
     8e8:	62 e0       	ldi	r22, 0x02	; 2
			ball.pos.x--;
			ball.pos.y--;
		}break;
		case DOWN_RIGHT:
		{
			if(ball.pos.x == LIM_RIGHT)
     8ea:	7f 37       	cpi	r23, 0x7F	; 127
     8ec:	b9 f4       	brne	.+46     	; 0x91c <update_ball+0x7a>
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
			{
				ball.dir=DOWN_LEFT;
     8ee:	63 e0       	ldi	r22, 0x03	; 3
			{
				ball.dir=DOWN_RIGHT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_DOWN)
     8f0:	ef 33       	cpi	r30, 0x3F	; 63
     8f2:	a9 f1       	breq	.+106    	; 0x95e <update_ball+0xbc>
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     8f4:	ed 33       	cpi	r30, 0x3D	; 61
     8f6:	09 f0       	breq	.+2      	; 0x8fa <update_ball+0x58>
     8f8:	50 c0       	rjmp	.+160    	; 0x99a <update_ball+0xf8>
     8fa:	7f 17       	cp	r23, r31
     8fc:	08 f4       	brcc	.+2      	; 0x900 <update_ball+0x5e>
     8fe:	4d c0       	rjmp	.+154    	; 0x99a <update_ball+0xf8>
     900:	24 17       	cp	r18, r20
     902:	35 07       	cpc	r19, r21
     904:	0c f4       	brge	.+2      	; 0x908 <update_ball+0x66>
     906:	49 c0       	rjmp	.+146    	; 0x99a <update_ball+0xf8>
			{
				ball.dir=UP_LEFT;
				n_catched_balls++;
     908:	01 96       	adiw	r24, 0x01	; 1
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
			{
				ball.dir=UP_LEFT;
     90a:	61 e0       	ldi	r22, 0x01	; 1
			ball.pos.x++;
			ball.pos.y--;
		} break;
		case UP_LEFT:
		{
			if(ball.pos.x == LIM_LEFT)
     90c:	77 23       	and	r23, r23
     90e:	51 f3       	breq	.-44     	; 0x8e4 <update_ball+0x42>
			{
				ball.dir=UP_RIGHT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
     910:	eb 30       	cpi	r30, 0x0B	; 11
     912:	d1 f4       	brne	.+52     	; 0x948 <update_ball+0xa6>
			{
				ball.dir=DOWN_LEFT;
     914:	63 e0       	ldi	r22, 0x03	; 3
			ball.pos.x++;
			ball.pos.y++;
		}break;
		case DOWN_LEFT:
		{
			if(ball.pos.x == LIM_LEFT)
     916:	71 11       	cpse	r23, r1
     918:	eb cf       	rjmp	.-42     	; 0x8f0 <update_ball+0x4e>
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
			{
				ball.dir=DOWN_RIGHT;
     91a:	62 e0       	ldi	r22, 0x02	; 2
			{
				ball.dir=DOWN_LEFT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_DOWN)
     91c:	ef 33       	cpi	r30, 0x3F	; 63
     91e:	f9 f0       	breq	.+62     	; 0x95e <update_ball+0xbc>
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     920:	ed 33       	cpi	r30, 0x3D	; 61
     922:	99 f5       	brne	.+102    	; 0x98a <update_ball+0xe8>
     924:	7f 17       	cp	r23, r31
     926:	88 f1       	brcs	.+98     	; 0x98a <update_ball+0xe8>
     928:	24 17       	cp	r18, r20
     92a:	35 07       	cpc	r19, r21
     92c:	74 f1       	brlt	.+92     	; 0x98a <update_ball+0xe8>
			{
				ball.dir=UP_RIGHT;
				n_catched_balls++;
     92e:	01 96       	adiw	r24, 0x01	; 1
{
	switch (ball.dir)
	{
		case UP_RIGHT:
		{
			if(ball.pos.x == LIM_RIGHT)
     930:	7f 37       	cpi	r23, 0x7F	; 127
     932:	c1 f6       	brne	.-80     	; 0x8e4 <update_ball+0x42>
			{
				ball.dir=UP_LEFT;
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	ec cf       	rjmp	.-40     	; 0x910 <update_ball+0x6e>
     938:	10 92 e0 03 	sts	0x03E0, r1
     93c:	90 93 9b 03 	sts	0x039B, r25
     940:	80 93 9a 03 	sts	0x039A, r24
			{
				ball.dir=DOWN_RIGHT;
				update_ball();
				return;
			}
			ball.pos.x++;
     944:	7f 5f       	subi	r23, 0xFF	; 255
     946:	07 c0       	rjmp	.+14     	; 0x956 <update_ball+0xb4>
     948:	60 93 e0 03 	sts	0x03E0, r22
     94c:	90 93 9b 03 	sts	0x039B, r25
     950:	80 93 9a 03 	sts	0x039A, r24
			{
				ball.dir=DOWN_LEFT;
				update_ball();
				return;
			}
			ball.pos.x--;
     954:	71 50       	subi	r23, 0x01	; 1
     956:	70 93 de 03 	sts	0x03DE, r23
			ball.pos.y--;
     95a:	e1 50       	subi	r30, 0x01	; 1
     95c:	28 c0       	rjmp	.+80     	; 0x9ae <update_ball+0x10c>
				return;
			}
			if(ball.pos.y == LIM_DOWN)
			{
				ball.dir=UP_RIGHT;
				n_lives--;
     95e:	80 91 06 01 	lds	r24, 0x0106
     962:	90 91 07 01 	lds	r25, 0x0107
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	90 93 07 01 	sts	0x0107, r25
     96c:	80 93 06 01 	sts	0x0106, r24
				ball.pos.x=B_X;
     970:	10 92 de 03 	sts	0x03DE, r1
				ball.pos.y=B_Y;
     974:	8e e1       	ldi	r24, 0x1E	; 30
     976:	80 93 df 03 	sts	0x03DF, r24
				ball.dir=DOWN_RIGHT;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	80 93 e0 03 	sts	0x03E0, r24
				n_catched_balls = 0;
     980:	10 92 9b 03 	sts	0x039B, r1
     984:	10 92 9a 03 	sts	0x039A, r1
				return;
     988:	08 95       	ret
     98a:	60 93 e0 03 	sts	0x03E0, r22
     98e:	90 93 9b 03 	sts	0x039B, r25
     992:	80 93 9a 03 	sts	0x039A, r24
				ball.dir=UP_RIGHT;
				n_catched_balls++;
				update_ball();
				return;
			}
			ball.pos.x++;
     996:	7f 5f       	subi	r23, 0xFF	; 255
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <update_ball+0x106>
     99a:	60 93 e0 03 	sts	0x03E0, r22
     99e:	90 93 9b 03 	sts	0x039B, r25
     9a2:	80 93 9a 03 	sts	0x039A, r24
				ball.dir=UP_LEFT;
				n_catched_balls++;
				update_ball();
				return;
			}
			ball.pos.x--;
     9a6:	71 50       	subi	r23, 0x01	; 1
     9a8:	70 93 de 03 	sts	0x03DE, r23
			ball.pos.y++;
     9ac:	ef 5f       	subi	r30, 0xFF	; 255
     9ae:	e0 93 df 03 	sts	0x03DF, r30
     9b2:	08 95       	ret

000009b4 <update_player>:
}

void update_player(void)
{
	// Get player direction form CAN (JOYSTICK)
	switch (player.dir)
     9b4:	80 91 a7 03 	lds	r24, 0x03A7
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	81 f0       	breq	.+32     	; 0x9dc <update_player+0x28>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	a9 f4       	brne	.+42     	; 0x9ea <update_player+0x36>
	{
		case RIGHT:
		{
			if(player.rect.pos.x+player.rect.Lx >= LIM_RIGHT)
     9c0:	20 91 a2 03 	lds	r18, 0x03A2
     9c4:	80 91 a4 03 	lds	r24, 0x03A4
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	82 0f       	add	r24, r18
     9cc:	91 1d       	adc	r25, r1
     9ce:	8f 37       	cpi	r24, 0x7F	; 127
     9d0:	91 05       	cpc	r25, r1
     9d2:	5c f4       	brge	.+22     	; 0x9ea <update_player+0x36>
				return;
			player.rect.pos.x += 2;
     9d4:	2e 5f       	subi	r18, 0xFE	; 254
     9d6:	20 93 a2 03 	sts	0x03A2, r18
		}break;
     9da:	08 95       	ret
		case LEFT:
		{
			if(player.rect.pos.x <= LIM_LEFT+1)
     9dc:	80 91 a2 03 	lds	r24, 0x03A2
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	18 f0       	brcs	.+6      	; 0x9ea <update_player+0x36>
				return;
			player.rect.pos.x -= 2;
     9e4:	82 50       	subi	r24, 0x02	; 2
     9e6:	80 93 a2 03 	sts	0x03A2, r24
     9ea:	08 95       	ret

000009ec <draw_borders_buffer>:
	}
	return;
}

void draw_borders_buffer (void)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <draw_borders_buffer+0x6>
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <draw_borders_buffer+0x8>
     9f4:	1f 92       	push	r1
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
	RECT border;
	border.pos.x = LIM_LEFT;
     9fa:	19 82       	std	Y+1, r1	; 0x01
	border.pos.y = LIM_UP;
     9fc:	8b e0       	ldi	r24, 0x0B	; 11
     9fe:	8a 83       	std	Y+2, r24	; 0x02
	border.Lx = LIM_RIGHT-LIM_LEFT;
	border.Ly = 1;
	border.full = FULL;
     a00:	1d 82       	std	Y+5, r1	; 0x05
	draw_rectangle_buffer(border);
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	5b e0       	ldi	r21, 0x0B	; 11
     a06:	6f e7       	ldi	r22, 0x7F	; 127
     a08:	71 e0       	ldi	r23, 0x01	; 1
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
	border.Lx = 1;
	border.Ly = LIM_DOWN-LIM_UP;
	draw_rectangle_buffer(border);
     a10:	49 81       	ldd	r20, Y+1	; 0x01
     a12:	5a 81       	ldd	r21, Y+2	; 0x02
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	74 e3       	ldi	r23, 0x34	; 52
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
	border.pos.y = LIM_DOWN;
	border.Lx = LIM_RIGHT-LIM_LEFT;
	border.Ly = 1;
	draw_rectangle_buffer(border);
     a1e:	49 81       	ldd	r20, Y+1	; 0x01
     a20:	5f e3       	ldi	r21, 0x3F	; 63
     a22:	6f e7       	ldi	r22, 0x7F	; 127
     a24:	71 e0       	ldi	r23, 0x01	; 1
     a26:	8d 81       	ldd	r24, Y+5	; 0x05
     a28:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
	border.pos.x = LIM_RIGHT;
	border.pos.y = LIM_UP;
	border.Ly = LIM_DOWN-LIM_UP+1;
	border.Lx = 1;
	draw_rectangle_buffer(border);
     a2c:	4f e7       	ldi	r20, 0x7F	; 127
     a2e:	5b e0       	ldi	r21, 0x0B	; 11
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	75 e3       	ldi	r23, 0x35	; 53
     a34:	8d 81       	ldd	r24, Y+5	; 0x05
     a36:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <draw_grid_buffer>:

void draw_grid_buffer (void)
{
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	27 97       	sbiw	r28, 0x07	; 7
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	88 ea       	ldi	r24, 0xA8	; 168
     a68:	e8 2e       	mov	r14, r24
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	f8 2e       	mov	r15, r24
     a6e:	22 e0       	ldi	r18, 0x02	; 2
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	9d e0       	ldi	r25, 0x0D	; 13
     a76:	f7 01       	movw	r30, r14
     a78:	e0 0f       	add	r30, r16
     a7a:	f1 1f       	adc	r31, r17
			rect.pos.x=LIM_LEFT+EMPTY_SPACE_X+i*(EMPTY_SPACE_X+L_X);
			rect.pos.y=LIM_UP+EMPTY_SPACE_Y+j*(EMPTY_SPACE_Y+L_Y);
			rect.Ly=L_Y;
			rect.Lx=L_X;
			rect.full=grid[i][j];
			draw_rectangle_buffer(rect);
     a7c:	42 2f       	mov	r20, r18
     a7e:	59 2f       	mov	r21, r25
     a80:	6c e0       	ldi	r22, 0x0C	; 12
     a82:	73 e0       	ldi	r23, 0x03	; 3
     a84:	80 81       	ld	r24, Z
     a86:	2f 83       	std	Y+7, r18	; 0x07
     a88:	9e 83       	std	Y+6, r25	; 0x06
     a8a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
     a8e:	9e 81       	ldd	r25, Y+6	; 0x06
     a90:	9b 5f       	subi	r25, 0xFB	; 251
     a92:	0e 5f       	subi	r16, 0xFE	; 254
     a94:	1f 4f       	sbci	r17, 0xFF	; 255
	int j=0;
	
	RECT rect;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
     a96:	2f 81       	ldd	r18, Y+7	; 0x07
     a98:	9c 31       	cpi	r25, 0x1C	; 28
     a9a:	69 f7       	brne	.-38     	; 0xa76 <draw_grid_buffer+0x2c>
     a9c:	22 5f       	subi	r18, 0xF2	; 242
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	e8 0e       	add	r14, r24
     aa2:	f1 1c       	adc	r15, r1
	int i=0;
	int j=0;
	
	RECT rect;
	
	for(i=0;i<N_X;i++)
     aa4:	20 38       	cpi	r18, 0x80	; 128
     aa6:	21 f7       	brne	.-56     	; 0xa70 <draw_grid_buffer+0x26>
			rect.Ly=L_Y;
			rect.Lx=L_X;
			rect.full=grid[i][j];
			draw_rectangle_buffer(rect);
		}
}
     aa8:	27 96       	adiw	r28, 0x07	; 7
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	08 95       	ret

00000ac2 <bounce_ball_rect>:
int bounce_ball_rect (RECT rect)
{
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <bounce_ball_rect+0x10>
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <bounce_ball_rect+0x12>
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	87 2f       	mov	r24, r23
	switch (ball.dir)
     adc:	90 91 e0 03 	lds	r25, 0x03E0
     ae0:	91 30       	cpi	r25, 0x01	; 1
     ae2:	b1 f1       	breq	.+108    	; 0xb50 <bounce_ball_rect+0x8e>
     ae4:	38 f0       	brcs	.+14     	; 0xaf4 <bounce_ball_rect+0x32>
     ae6:	92 30       	cpi	r25, 0x02	; 2
     ae8:	09 f4       	brne	.+2      	; 0xaec <bounce_ball_rect+0x2a>
     aea:	5d c0       	rjmp	.+186    	; 0xba6 <bounce_ball_rect+0xe4>
     aec:	93 30       	cpi	r25, 0x03	; 3
     aee:	09 f4       	brne	.+2      	; 0xaf2 <bounce_ball_rect+0x30>
     af0:	77 c0       	rjmp	.+238    	; 0xbe0 <bounce_ball_rect+0x11e>
     af2:	95 c0       	rjmp	.+298    	; 0xc1e <bounce_ball_rect+0x15c>
	{
		case UP_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
     af4:	70 91 de 03 	lds	r23, 0x03DE
     af8:	e0 91 df 03 	lds	r30, 0x03DF
     afc:	25 2f       	mov	r18, r21
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	74 13       	cpse	r23, r20
     b04:	0c c0       	rjmp	.+24     	; 0xb1e <bounce_ball_rect+0x5c>
     b06:	e5 17       	cp	r30, r21
     b08:	50 f0       	brcs	.+20     	; 0xb1e <bounce_ball_rect+0x5c>
     b0a:	0e 2f       	mov	r16, r30
     b0c:	10 e0       	ldi	r17, 0x00	; 0
     b0e:	d9 01       	movw	r26, r18
     b10:	a8 0f       	add	r26, r24
     b12:	b9 1f       	adc	r27, r25
     b14:	a0 17       	cp	r26, r16
     b16:	b1 07       	cpc	r27, r17
     b18:	14 f0       	brlt	.+4      	; 0xb1e <bounce_ball_rect+0x5c>
			{
				ball.dir=UP_LEFT;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	14 c0       	rjmp	.+40     	; 0xb46 <bounce_ball_rect+0x84>
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	e8 17       	cp	r30, r24
     b26:	f9 07       	cpc	r31, r25
     b28:	09 f0       	breq	.+2      	; 0xb2c <bounce_ball_rect+0x6a>
     b2a:	79 c0       	rjmp	.+242    	; 0xc1e <bounce_ball_rect+0x15c>
     b2c:	74 17       	cp	r23, r20
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <bounce_ball_rect+0x70>
     b30:	76 c0       	rjmp	.+236    	; 0xc1e <bounce_ball_rect+0x15c>
     b32:	87 2f       	mov	r24, r23
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	64 0f       	add	r22, r20
     b3a:	71 1d       	adc	r23, r1
     b3c:	68 17       	cp	r22, r24
     b3e:	79 07       	cpc	r23, r25
     b40:	0c f4       	brge	.+2      	; 0xb44 <bounce_ball_rect+0x82>
     b42:	6d c0       	rjmp	.+218    	; 0xc1e <bounce_ball_rect+0x15c>
			{
				ball.dir=DOWN_RIGHT;
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	80 93 e0 03 	sts	0x03E0, r24
				return 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	69 c0       	rjmp	.+210    	; 0xc22 <bounce_ball_rect+0x160>
			}
		} break;
		case UP_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))//LIMIT_LEFT
     b50:	d0 90 de 03 	lds	r13, 0x03DE
     b54:	2d 2d       	mov	r18, r13
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	64 0f       	add	r22, r20
     b5c:	71 1d       	adc	r23, r1
     b5e:	a0 91 df 03 	lds	r26, 0x03DF
     b62:	e5 2f       	mov	r30, r21
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	26 17       	cp	r18, r22
     b6a:	37 07       	cpc	r19, r23
     b6c:	69 f4       	brne	.+26     	; 0xb88 <bounce_ball_rect+0xc6>
     b6e:	a5 17       	cp	r26, r21
     b70:	58 f0       	brcs	.+22     	; 0xb88 <bounce_ball_rect+0xc6>
     b72:	ea 2e       	mov	r14, r26
     b74:	f1 2c       	mov	r15, r1
     b76:	8f 01       	movw	r16, r30
     b78:	08 0f       	add	r16, r24
     b7a:	19 1f       	adc	r17, r25
     b7c:	0e 15       	cp	r16, r14
     b7e:	1f 05       	cpc	r17, r15
     b80:	1c f0       	brlt	.+6      	; 0xb88 <bounce_ball_rect+0xc6>
			{
				ball.dir=UP_RIGHT;
     b82:	10 92 e0 03 	sts	0x03E0, r1
     b86:	e1 cf       	rjmp	.-62     	; 0xb4a <bounce_ball_rect+0x88>
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	8e 0f       	add	r24, r30
     b8c:	9f 1f       	adc	r25, r31
     b8e:	a8 17       	cp	r26, r24
     b90:	b9 07       	cpc	r27, r25
     b92:	09 f0       	breq	.+2      	; 0xb96 <bounce_ball_rect+0xd4>
     b94:	44 c0       	rjmp	.+136    	; 0xc1e <bounce_ball_rect+0x15c>
     b96:	d4 16       	cp	r13, r20
     b98:	08 f4       	brcc	.+2      	; 0xb9c <bounce_ball_rect+0xda>
     b9a:	41 c0       	rjmp	.+130    	; 0xc1e <bounce_ball_rect+0x15c>
     b9c:	62 17       	cp	r22, r18
     b9e:	73 07       	cpc	r23, r19
     ba0:	f4 f1       	brlt	.+124    	; 0xc1e <bounce_ball_rect+0x15c>
			{
				ball.dir=DOWN_LEFT;
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	d0 cf       	rjmp	.-96     	; 0xb46 <bounce_ball_rect+0x84>
				return 1;
			}
		}break;
		case DOWN_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     ba6:	70 91 de 03 	lds	r23, 0x03DE
     baa:	e0 91 df 03 	lds	r30, 0x03DF
     bae:	74 13       	cpse	r23, r20
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <bounce_ball_rect+0x104>
     bb2:	e5 17       	cp	r30, r21
     bb4:	40 f0       	brcs	.+16     	; 0xbc6 <bounce_ball_rect+0x104>
     bb6:	2e 2f       	mov	r18, r30
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	85 0f       	add	r24, r21
     bbe:	91 1d       	adc	r25, r1
     bc0:	82 17       	cp	r24, r18
     bc2:	93 07       	cpc	r25, r19
     bc4:	74 f7       	brge	.-36     	; 0xba2 <bounce_ball_rect+0xe0>
			{
				ball.dir=DOWN_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))//LIMIT_DOWN
     bc6:	e5 13       	cpse	r30, r21
     bc8:	2a c0       	rjmp	.+84     	; 0xc1e <bounce_ball_rect+0x15c>
     bca:	74 17       	cp	r23, r20
     bcc:	40 f1       	brcs	.+80     	; 0xc1e <bounce_ball_rect+0x15c>
     bce:	87 2f       	mov	r24, r23
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	64 0f       	add	r22, r20
     bd6:	71 1d       	adc	r23, r1
     bd8:	68 17       	cp	r22, r24
     bda:	79 07       	cpc	r23, r25
     bdc:	94 f6       	brge	.-92     	; 0xb82 <bounce_ball_rect+0xc0>
     bde:	1f c0       	rjmp	.+62     	; 0xc1e <bounce_ball_rect+0x15c>
				return 1;
			}
		}break;
		case DOWN_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     be0:	b0 91 de 03 	lds	r27, 0x03DE
     be4:	2b 2f       	mov	r18, r27
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	64 0f       	add	r22, r20
     bec:	71 1d       	adc	r23, r1
     bee:	a0 91 df 03 	lds	r26, 0x03DF
     bf2:	26 17       	cp	r18, r22
     bf4:	37 07       	cpc	r19, r23
     bf6:	59 f4       	brne	.+22     	; 0xc0e <bounce_ball_rect+0x14c>
     bf8:	a5 17       	cp	r26, r21
     bfa:	48 f0       	brcs	.+18     	; 0xc0e <bounce_ball_rect+0x14c>
     bfc:	ea 2f       	mov	r30, r26
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	85 0f       	add	r24, r21
     c04:	91 1d       	adc	r25, r1
     c06:	8e 17       	cp	r24, r30
     c08:	9f 07       	cpc	r25, r31
     c0a:	0c f0       	brlt	.+2      	; 0xc0e <bounce_ball_rect+0x14c>
     c0c:	9b cf       	rjmp	.-202    	; 0xb44 <bounce_ball_rect+0x82>
			{
				ball.dir=DOWN_RIGHT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     c0e:	a5 13       	cpse	r26, r21
     c10:	06 c0       	rjmp	.+12     	; 0xc1e <bounce_ball_rect+0x15c>
     c12:	b4 17       	cp	r27, r20
     c14:	20 f0       	brcs	.+8      	; 0xc1e <bounce_ball_rect+0x15c>
     c16:	62 17       	cp	r22, r18
     c18:	73 07       	cpc	r23, r19
     c1a:	0c f0       	brlt	.+2      	; 0xc1e <bounce_ball_rect+0x15c>
     c1c:	7e cf       	rjmp	.-260    	; 0xb1a <bounce_ball_rect+0x58>
				ball.dir=UP_LEFT;
				return 1;
			}
		}break;
	}
	return 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	08 95       	ret

00000c3c <bounce_ball_grid>:

void bounce_ball_grid (void)
{
     c3c:	af 92       	push	r10
     c3e:	bf 92       	push	r11
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	27 97       	sbiw	r28, 0x07	; 7
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	98 ea       	ldi	r25, 0xA8	; 168
     c62:	e9 2e       	mov	r14, r25
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	f9 2e       	mov	r15, r25
     c68:	32 e0       	ldi	r19, 0x02	; 2
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j] == RECT_EMPT)
						grid[i][j] = DESTROYED;
					if(grid[i][j] == FULL)
						grid[i][j] = RECT_EMPT;
     c6a:	cc 24       	eor	r12, r12
     c6c:	c3 94       	inc	r12
     c6e:	d1 2c       	mov	r13, r1
				rect.Lx = L_X;
				rect.full = grid[i][j];
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j] == RECT_EMPT)
						grid[i][j] = DESTROYED;
     c70:	42 e0       	ldi	r20, 0x02	; 2
     c72:	a4 2e       	mov	r10, r20
     c74:	b1 2c       	mov	r11, r1
	}
	return 0;
}

void bounce_ball_grid (void)
{
     c76:	87 01       	movw	r16, r14
     c78:	2d e0       	ldi	r18, 0x0D	; 13
	RECT rect;
	
	for(int i = 0; i < N_X; i++)
		for(int j = 0; j < N_Y; j++)
			if(grid[i][j] != DESTROYED)
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	91 05       	cpc	r25, r1
     c84:	d1 f0       	breq	.+52     	; 0xcba <bounce_ball_grid+0x7e>
				rect.pos.x = LIM_LEFT + EMPTY_SPACE_X + i * (EMPTY_SPACE_X + L_X);
				rect.pos.y = LIM_UP + EMPTY_SPACE_Y + j * (EMPTY_SPACE_Y + L_Y);
				rect.Ly = L_Y;
				rect.Lx = L_X;
				rect.full = grid[i][j];
				if(bounce_ball_rect(rect) == 1)
     c86:	43 2f       	mov	r20, r19
     c88:	52 2f       	mov	r21, r18
     c8a:	6c e0       	ldi	r22, 0x0C	; 12
     c8c:	73 e0       	ldi	r23, 0x03	; 3
     c8e:	2f 83       	std	Y+7, r18	; 0x07
     c90:	3e 83       	std	Y+6, r19	; 0x06
     c92:	0e 94 61 05 	call	0xac2	; 0xac2 <bounce_ball_rect>
     c96:	2f 81       	ldd	r18, Y+7	; 0x07
     c98:	3e 81       	ldd	r19, Y+6	; 0x06
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	71 f4       	brne	.+28     	; 0xcba <bounce_ball_grid+0x7e>
				{
					if(grid[i][j] == RECT_EMPT)
     c9e:	f8 01       	movw	r30, r16
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	11 f4       	brne	.+4      	; 0xcac <bounce_ball_grid+0x70>
						grid[i][j] = DESTROYED;
     ca8:	b1 82       	std	Z+1, r11	; 0x01
     caa:	a0 82       	st	Z, r10
					if(grid[i][j] == FULL)
     cac:	f8 01       	movw	r30, r16
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	89 2b       	or	r24, r25
     cb4:	11 f4       	brne	.+4      	; 0xcba <bounce_ball_grid+0x7e>
						grid[i][j] = RECT_EMPT;
     cb6:	d1 82       	std	Z+1, r13	; 0x01
     cb8:	c0 82       	st	Z, r12
     cba:	0e 5f       	subi	r16, 0xFE	; 254
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	2b 5f       	subi	r18, 0xFB	; 251
void bounce_ball_grid (void)
{
	RECT rect;
	
	for(int i = 0; i < N_X; i++)
		for(int j = 0; j < N_Y; j++)
     cc0:	2c 31       	cpi	r18, 0x1C	; 28
     cc2:	d9 f6       	brne	.-74     	; 0xc7a <bounce_ball_grid+0x3e>
     cc4:	32 5f       	subi	r19, 0xF2	; 242
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	ef 0e       	add	r14, r31
     cca:	f1 1c       	adc	r15, r1

void bounce_ball_grid (void)
{
	RECT rect;
	
	for(int i = 0; i < N_X; i++)
     ccc:	30 38       	cpi	r19, 0x80	; 128
     cce:	99 f6       	brne	.-90     	; 0xc76 <bounce_ball_grid+0x3a>
					if(grid[i][j] == FULL)
						grid[i][j] = RECT_EMPT;
				}
			}
	return;
}
     cd0:	27 96       	adiw	r28, 0x07	; 7
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	08 95       	ret

00000cf2 <get_direction>:

int get_direction(void)
{
	JOY_POS pos = JOY_getPosition();
     cf2:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
	return pos.dir;
}
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <initialize_game>:

void initialize_game (void)
{
     cfa:	e8 ea       	ldi	r30, 0xA8	; 168
     cfc:	f3 e0       	ldi	r31, 0x03	; 3
	//initialize grid to perfect
	for(int i = 0; i < N_X; i++)
		for(int j = 0;j < N_Y; j++)
			grid[i][j] = FULL;
     cfe:	11 82       	std	Z+1, r1	; 0x01
     d00:	10 82       	st	Z, r1
     d02:	13 82       	std	Z+3, r1	; 0x03
     d04:	12 82       	std	Z+2, r1	; 0x02
     d06:	15 82       	std	Z+5, r1	; 0x05
     d08:	14 82       	std	Z+4, r1	; 0x04
     d0a:	36 96       	adiw	r30, 0x06	; 6
}

void initialize_game (void)
{
	//initialize grid to perfect
	for(int i = 0; i < N_X; i++)
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	ee 3d       	cpi	r30, 0xDE	; 222
     d10:	f8 07       	cpc	r31, r24
     d12:	a9 f7       	brne	.-22     	; 0xcfe <initialize_game+0x4>
		for(int j = 0;j < N_Y; j++)
			grid[i][j] = FULL;
	
	n_lives = 3;
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	90 93 07 01 	sts	0x0107, r25
     d1c:	80 93 06 01 	sts	0x0106, r24
     d20:	08 95       	ret

00000d22 <ping_pong_idle>:
}

void ping_pong_idle(void)
{
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
	send_song_CAN(MERRY_X_MAS);
     d2c:	85 e0       	ldi	r24, 0x05	; 5
     d2e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	
	bool pause = false;
	
	//Starting conditions
	ball.pos.x = B_X;
     d32:	10 92 de 03 	sts	0x03DE, r1
	ball.pos.y = B_Y;
     d36:	8e e1       	ldi	r24, 0x1E	; 30
     d38:	80 93 df 03 	sts	0x03DF, r24
	ball.dir = DOWN_RIGHT;
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	80 93 e0 03 	sts	0x03E0, r24
		
	player.rect.pos.x = 15;
     d42:	8f e0       	ldi	r24, 0x0F	; 15
     d44:	80 93 a2 03 	sts	0x03A2, r24
	player.rect.pos.y = Y_PLAYER;
     d48:	8d e3       	ldi	r24, 0x3D	; 61
     d4a:	80 93 a3 03 	sts	0x03A3, r24
	player.rect.Lx = DIM_PLAYER;
     d4e:	84 e1       	ldi	r24, 0x14	; 20
     d50:	80 93 a4 03 	sts	0x03A4, r24
	player.rect.Ly = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 a5 03 	sts	0x03A5, r24
	player.rect.full = 1;
     d5a:	80 93 a6 03 	sts	0x03A6, r24

void ping_pong_idle(void)
{
	send_song_CAN(MERRY_X_MAS);
	
	bool pause = false;
     d5e:	10 e0       	ldi	r17, 0x00	; 0
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
			
				level = n_catched_balls % DIM_PLAYER;
     d60:	c4 e1       	ldi	r28, 0x14	; 20
     d62:	d0 e0       	ldi	r29, 0x00	; 0
			if(!(pause))
			{
				player.dir = get_direction();
			
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
     d64:	04 e1       	ldi	r16, 0x14	; 20
	player.rect.full = 1;
	
	//idle function
	while(1)
	{
		while(n_lives >= 0 )
     d66:	80 91 06 01 	lds	r24, 0x0106
     d6a:	90 91 07 01 	lds	r25, 0x0107
     d6e:	97 fd       	sbrc	r25, 7
     d70:	79 c0       	rjmp	.+242    	; 0xe64 <ping_pong_idle+0x142>
		{
			clear_buffer();
     d72:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
			if(!(pause))
     d76:	11 11       	cpse	r17, r1
     d78:	4c c0       	rjmp	.+152    	; 0xe12 <ping_pong_idle+0xf0>
			{
				player.dir = get_direction();
     d7a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <get_direction>
     d7e:	80 93 a7 03 	sts	0x03A7, r24
			
				if(DIM_PLAYER > level)
     d82:	80 91 98 03 	lds	r24, 0x0398
     d86:	90 91 99 03 	lds	r25, 0x0399
     d8a:	84 31       	cpi	r24, 0x14	; 20
     d8c:	91 05       	cpc	r25, r1
     d8e:	0c f0       	brlt	.+2      	; 0xd92 <ping_pong_idle+0x70>
     d90:	a8 c0       	rjmp	.+336    	; 0xee2 <ping_pong_idle+0x1c0>
				player.rect.Lx = DIM_PLAYER - level;
     d92:	20 2f       	mov	r18, r16
     d94:	28 1b       	sub	r18, r24
     d96:	82 2f       	mov	r24, r18
     d98:	80 93 a4 03 	sts	0x03A4, r24
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
			
				level = n_catched_balls % DIM_PLAYER;
     d9c:	80 91 9a 03 	lds	r24, 0x039A
     da0:	90 91 9b 03 	lds	r25, 0x039B
     da4:	be 01       	movw	r22, r28
     da6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__divmodhi4>
     daa:	90 93 99 03 	sts	0x0399, r25
     dae:	80 93 98 03 	sts	0x0398, r24
			
				draw_lives_buffer(n_lives);
     db2:	80 91 06 01 	lds	r24, 0x0106
     db6:	90 91 07 01 	lds	r25, 0x0107
     dba:	0e 94 2e 04 	call	0x85c	; 0x85c <draw_lives_buffer>
				draw_borders_buffer();
     dbe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <draw_borders_buffer>
				draw_rectangle_buffer(player.rect);
     dc2:	40 91 a2 03 	lds	r20, 0x03A2
     dc6:	50 91 a3 03 	lds	r21, 0x03A3
     dca:	60 91 a4 03 	lds	r22, 0x03A4
     dce:	70 91 a5 03 	lds	r23, 0x03A5
     dd2:	80 91 a6 03 	lds	r24, 0x03A6
     dd6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
				draw_lives_buffer(n_lives);
     dda:	80 91 06 01 	lds	r24, 0x0106
     dde:	90 91 07 01 	lds	r25, 0x0107
     de2:	0e 94 2e 04 	call	0x85c	; 0x85c <draw_lives_buffer>
				draw_grid_buffer();
     de6:	0e 94 25 05 	call	0xa4a	; 0xa4a <draw_grid_buffer>
				draw_one_bit_buffer(ball.pos);
     dea:	80 91 de 03 	lds	r24, 0x03DE
     dee:	90 91 df 03 	lds	r25, 0x03DF
     df2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <draw_one_bit_buffer>
			
				bounce_ball_grid();
     df6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <bounce_ball_grid>
				update_ball();
     dfa:	0e 94 51 04 	call	0x8a2	; 0x8a2 <update_ball>
				update_player();
     dfe:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_player>
				print_buffer();
     e02:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
				if(JOY_button(R))
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <JOY_button>
     e0e:	88 23       	and	r24, r24
     e10:	11 f1       	breq	.+68     	; 0xe56 <ping_pong_idle+0x134>
					pause = true;
			}
			if(pause)
			{
				clear_buffer();
     e12:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
				position pos;
				pos.column = 45;
				pos.page = 1;
				print_string_to_buffer("PAUSE", pos);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	7d e2       	ldi	r23, 0x2D	; 45
     e1a:	8e e0       	ldi	r24, 0x0E	; 14
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
				pos.page = 3;
				pos.column = 2;
				print_string_to_buffer("LEFT: resume", pos);
     e22:	63 e0       	ldi	r22, 0x03	; 3
     e24:	72 e0       	ldi	r23, 0x02	; 2
     e26:	84 e1       	ldi	r24, 0x14	; 20
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
				pos.page++;
				print_string_to_buffer("RIGHT: leave", pos);
     e2e:	64 e0       	ldi	r22, 0x04	; 4
     e30:	72 e0       	ldi	r23, 0x02	; 2
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
				if (JOY_getPosition().dir == LEFT)
     e3a:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
     e3e:	f8 2e       	mov	r15, r24
					pause = false;
				if(JOY_getPosition().dir == RIGHT)
     e40:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	09 f4       	brne	.+2      	; 0xe4a <ping_pong_idle+0x128>
     e48:	41 c0       	rjmp	.+130    	; 0xecc <ping_pong_idle+0x1aa>
				pos.page = 3;
				pos.column = 2;
				print_string_to_buffer("LEFT: resume", pos);
				pos.page++;
				print_string_to_buffer("RIGHT: leave", pos);
				if (JOY_getPosition().dir == LEFT)
     e4a:	11 e0       	ldi	r17, 0x01	; 1
     e4c:	f1 12       	cpse	r15, r17
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <ping_pong_idle+0x130>
     e50:	10 e0       	ldi	r17, 0x00	; 0
					initialize_game();
					send_stop_CAN();
					print_thumb();
					return;
				}
				print_buffer();
     e52:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	9f e2       	ldi	r25, 0x2F	; 47
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <ping_pong_idle+0x138>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <ping_pong_idle+0x13e>
     e60:	00 00       	nop
     e62:	81 cf       	rjmp	.-254    	; 0xd66 <ping_pong_idle+0x44>
		}
	
		position pos;
		pos.column = 30;
		pos.page = 3;
		clear_buffer();
     e64:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
		print_string_to_buffer("GAME OVER!", pos);
     e68:	63 e0       	ldi	r22, 0x03	; 3
     e6a:	7e e1       	ldi	r23, 0x1E	; 30
     e6c:	88 ee       	ldi	r24, 0xE8	; 232
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		print_buffer();
     e74:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	8d e1       	ldi	r24, 0x1D	; 29
     e7e:	91 50       	subi	r25, 0x01	; 1
     e80:	20 40       	sbci	r18, 0x00	; 0
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <ping_pong_idle+0x15c>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <ping_pong_idle+0x166>
     e88:	00 00       	nop
		_delay_ms(2000);
		
		clear_buffer();
     e8a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
		pos.page = 3;
		pos.column = 2;
		print_string_to_buffer("LEFT: restart", pos);
     e8e:	63 e0       	ldi	r22, 0x03	; 3
     e90:	72 e0       	ldi	r23, 0x02	; 2
     e92:	83 ef       	ldi	r24, 0xF3	; 243
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		pos.page++;
		print_string_to_buffer("RIGHT: leave", pos);
     e9a:	64 e0       	ldi	r22, 0x04	; 4
     e9c:	72 e0       	ldi	r23, 0x02	; 2
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		print_buffer();
     ea6:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9f e2       	ldi	r25, 0x2F	; 47
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <ping_pong_idle+0x18c>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <ping_pong_idle+0x192>
     eb4:	00 00       	nop
		
		while(1)
		{
			_delay_ms(10);
			if (JOY_getPosition().dir == LEFT)
     eb6:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	19 f4       	brne	.+6      	; 0xec4 <ping_pong_idle+0x1a2>
			{
				initialize_game();
     ebe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <initialize_game>
     ec2:	51 cf       	rjmp	.-350    	; 0xd66 <ping_pong_idle+0x44>
				break;
			}
			if(JOY_getPosition().dir == RIGHT)
     ec4:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
     ec8:	82 30       	cpi	r24, 0x02	; 2
     eca:	79 f7       	brne	.-34     	; 0xeaa <ping_pong_idle+0x188>
			{
				initialize_game();
     ecc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <initialize_game>
				send_stop_CAN();
     ed0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <send_stop_CAN>
				return;
			}
		}
	}
	
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
			}
			if(JOY_getPosition().dir == RIGHT)
			{
				initialize_game();
				send_stop_CAN();
				print_thumb();
     ede:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <print_thumb>
				player.dir = get_direction();
			
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	59 cf       	rjmp	.-334    	; 0xd98 <ping_pong_idle+0x76>

00000ee6 <average>:
#include "data_fit.h"

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
     ee6:	20 91 08 01 	lds	r18, 0x0108
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	fc 01       	movw	r30, r24
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     eee:	40 e0       	ldi	r20, 0x00	; 0

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < L; i++)
     ef4:	46 17       	cp	r20, r22
     ef6:	39 f0       	breq	.+14     	; 0xf06 <average+0x20>
		sum += data[dim * i];
     ef8:	50 81       	ld	r21, Z
     efa:	85 0f       	add	r24, r21
     efc:	91 1d       	adc	r25, r1
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     efe:	4f 5f       	subi	r20, 0xFF	; 255
     f00:	e2 0f       	add	r30, r18
     f02:	f3 1f       	adc	r31, r19
     f04:	f7 cf       	rjmp	.-18     	; 0xef4 <average+0xe>
		sum += data[dim * i];
	return sum / L;
     f06:	64 2f       	mov	r22, r20
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__udivmodhi4>
     f0e:	86 2f       	mov	r24, r22
}
     f10:	08 95       	ret

00000f12 <order_data_distance>:
	//printf("\ndata=%d, avarage=%d disatnce=%d\n\n", data, avareage, d);
	return d;
}

void order_data_distance(uint8_t data_dist[MAX_DATA][2], uint8_t L)
{
     f12:	dc 01       	movw	r26, r24
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	36 17       	cp	r19, r22
     f18:	d9 f0       	breq	.+54     	; 0xf50 <order_data_distance+0x3e>
	{
		for(uint8_t j = i + 1; j < L; j++)
     f1a:	3f 5f       	subi	r19, 0xFF	; 255
     f1c:	23 2f       	mov	r18, r19
     f1e:	26 17       	cp	r18, r22
     f20:	a9 f0       	breq	.+42     	; 0xf4c <order_data_distance+0x3a>
		{
			if (data_dist[i][1] > data_dist[j][1])
     f22:	11 96       	adiw	r26, 0x01	; 1
     f24:	4c 91       	ld	r20, X
     f26:	11 97       	sbiw	r26, 0x01	; 1
     f28:	fc 01       	movw	r30, r24
     f2a:	e2 0f       	add	r30, r18
     f2c:	f1 1d       	adc	r31, r1
     f2e:	e2 0f       	add	r30, r18
     f30:	f1 1d       	adc	r31, r1
     f32:	51 81       	ldd	r21, Z+1	; 0x01
     f34:	54 17       	cp	r21, r20
     f36:	40 f4       	brcc	.+16     	; 0xf48 <order_data_distance+0x36>
			{
				temp_1 =  data_dist[i][1];
				data_dist[i][1] = data_dist[j][1];
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	5c 93       	st	X, r21
     f3c:	11 97       	sbiw	r26, 0x01	; 1
				data_dist[j][1] = temp_1;
     f3e:	41 83       	std	Z+1, r20	; 0x01
				temp_2 =  data_dist[i][0];
     f40:	4c 91       	ld	r20, X
				data_dist[i][0] = data_dist[j][0];
     f42:	50 81       	ld	r21, Z
     f44:	5c 93       	st	X, r21
				data_dist[j][0] = temp_2;
     f46:	40 83       	st	Z, r20
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
	{
		for(uint8_t j = i + 1; j < L; j++)
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	e9 cf       	rjmp	.-46     	; 0xf1e <order_data_distance+0xc>
     f4c:	12 96       	adiw	r26, 0x02	; 2
     f4e:	e3 cf       	rjmp	.-58     	; 0xf16 <order_data_distance+0x4>
				data_dist[j][0] = temp_2;
			}
		}
	}

}
     f50:	08 95       	ret

00000f52 <data_fit>:

uint8_t data_fit(uint8_t data[MAX_DATA], uint8_t L, uint8_t n_iter, uint8_t lim, uint8_t n_elim)
{
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	b8 2e       	mov	r11, r24
     f72:	a9 2e       	mov	r10, r25
     f74:	96 2e       	mov	r9, r22
     f76:	84 2e       	mov	r8, r20
     f78:	12 2f       	mov	r17, r18
				i = L;
			}
	avar = average(data_dist[0], L);
	dim = 1;
	return avar;
}
     f7a:	cd b6       	in	r12, 0x3d	; 61
     f7c:	de b6       	in	r13, 0x3e	; 62

}

uint8_t data_fit(uint8_t data[MAX_DATA], uint8_t L, uint8_t n_iter, uint8_t lim, uint8_t n_elim)
{
	uint8_t data_dist[L][2];
     f7e:	8d b7       	in	r24, 0x3d	; 61
     f80:	9e b7       	in	r25, 0x3e	; 62
     f82:	a2 e0       	ldi	r26, 0x02	; 2
     f84:	6a 9f       	mul	r22, r26
     f86:	80 19       	sub	r24, r0
     f88:	91 09       	sbc	r25, r1
     f8a:	11 24       	eor	r1, r1
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	9e bf       	out	0x3e, r25	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	8d bf       	out	0x3d, r24	; 61
     f96:	ed b7       	in	r30, 0x3d	; 61
     f98:	fe b7       	in	r31, 0x3e	; 62
     f9a:	31 96       	adiw	r30, 0x01	; 1
     f9c:	7f 01       	movw	r14, r30
	uint8_t i = 0, j = 0;
	dim = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 08 01 	sts	0x0108, r24
	uint8_t avar=average(data, L);
     fa4:	8b 2d       	mov	r24, r11
     fa6:	9a 2d       	mov	r25, r10
     fa8:	0e 94 73 07 	call	0xee6	; 0xee6 <average>
     fac:	5b 2d       	mov	r21, r11
	for(i = 0; i < L; i++)
     fae:	6b 2d       	mov	r22, r11
     fb0:	7a 2d       	mov	r23, r10
     fb2:	97 01       	movw	r18, r14
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	46 2f       	mov	r20, r22
     fb8:	45 1b       	sub	r20, r21
{
	uint8_t data_dist[L][2];
	uint8_t i = 0, j = 0;
	dim = 1;
	uint8_t avar=average(data, L);
	for(i = 0; i < L; i++)
     fba:	49 15       	cp	r20, r9
     fbc:	a0 f4       	brcc	.+40     	; 0xfe6 <data_fit+0x94>
     fbe:	fb 01       	movw	r30, r22
	{
		data_dist[i][0] = data[i];
     fc0:	db 01       	movw	r26, r22
     fc2:	4d 91       	ld	r20, X+
     fc4:	bd 01       	movw	r22, r26
     fc6:	d9 01       	movw	r26, r18
     fc8:	4c 93       	st	X, r20
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
     fca:	a0 81       	ld	r26, Z
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	a8 1b       	sub	r26, r24
     fd0:	b9 0b       	sbc	r27, r25
     fd2:	b7 ff       	sbrs	r27, 7
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <data_fit+0x8a>
     fd6:	b1 95       	neg	r27
     fd8:	a1 95       	neg	r26
     fda:	b1 09       	sbc	r27, r1
     fdc:	f9 01       	movw	r30, r18
     fde:	a1 83       	std	Z+1, r26	; 0x01
     fe0:	2e 5f       	subi	r18, 0xFE	; 254
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	e8 cf       	rjmp	.-48     	; 0xfb6 <data_fit+0x64>
	for(i = 0; i < L; i++)
	{
		data_dist[i][0] = data[i];
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	80 93 08 01 	sts	0x0108, r24
	order_data_distance(data_dist, L);
     fec:	69 2d       	mov	r22, r9
     fee:	c7 01       	movw	r24, r14
     ff0:	0e 94 89 07 	call	0xf12	; 0xf12 <order_data_distance>

	for(i = 0; i < n_iter; i++)
     ff4:	71 2c       	mov	r7, r1
	{
		if(L - i <= 2)
			i = n_iter;
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
     ff6:	a0 2e       	mov	r10, r16
     ff8:	b1 2c       	mov	r11, r1
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
     ffa:	78 14       	cp	r7, r8
     ffc:	b0 f5       	brcc	.+108    	; 0x106a <data_fit+0x118>
	{
		if(L - i <= 2)
     ffe:	89 2d       	mov	r24, r9
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9c 01       	movw	r18, r24
    1004:	27 19       	sub	r18, r7
    1006:	31 09       	sbc	r19, r1
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	0c f4       	brge	.+2      	; 0x1010 <data_fit+0xbe>
    100e:	78 2c       	mov	r7, r8
			i = n_iter;
		if(data_dist[L - 1][1] < lim)
    1010:	fc 01       	movw	r30, r24
    1012:	31 97       	sbiw	r30, 0x01	; 1
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	ee 0d       	add	r30, r14
    101a:	ff 1d       	adc	r31, r15
    101c:	21 81       	ldd	r18, Z+1	; 0x01
    101e:	21 17       	cp	r18, r17
    1020:	08 f4       	brcc	.+2      	; 0x1024 <data_fit+0xd2>
    1022:	78 2c       	mov	r7, r8
			i = n_iter;
		if(L - n_elim >= 2)
    1024:	8a 19       	sub	r24, r10
    1026:	9b 09       	sbc	r25, r11
    1028:	02 97       	sbiw	r24, 0x02	; 2
    102a:	0c f0       	brlt	.+2      	; 0x102e <data_fit+0xdc>
			L -= n_elim;
    102c:	90 1a       	sub	r9, r16
		avar = average(data_dist[0], L);
    102e:	69 2d       	mov	r22, r9
    1030:	c7 01       	movw	r24, r14
    1032:	0e 94 73 07 	call	0xee6	; 0xee6 <average>
		for (j = 0; j < L; j++)
    1036:	d7 01       	movw	r26, r14
    1038:	20 e0       	ldi	r18, 0x00	; 0
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
    103a:	90 e0       	ldi	r25, 0x00	; 0
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
    103c:	29 15       	cp	r18, r9
    103e:	79 f0       	breq	.+30     	; 0x105e <data_fit+0x10c>
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
    1040:	ec 91       	ld	r30, X
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	e8 1b       	sub	r30, r24
    1046:	f9 0b       	sbc	r31, r25
    1048:	f7 ff       	sbrs	r31, 7
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <data_fit+0x100>
    104c:	f1 95       	neg	r31
    104e:	e1 95       	neg	r30
    1050:	f1 09       	sbc	r31, r1
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	ec 93       	st	X, r30
    1056:	11 97       	sbiw	r26, 0x01	; 1
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
    1058:	2f 5f       	subi	r18, 0xFF	; 255
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	ef cf       	rjmp	.-34     	; 0x103c <data_fit+0xea>
		{
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
    105e:	69 2d       	mov	r22, r9
    1060:	c7 01       	movw	r24, r14
    1062:	0e 94 89 07 	call	0xf12	; 0xf12 <order_data_distance>
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
    1066:	73 94       	inc	r7
    1068:	c8 cf       	rjmp	.-112    	; 0xffa <data_fit+0xa8>
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
	}

	if(data_dist[0][1] >= lim)
    106a:	d7 01       	movw	r26, r14
    106c:	11 96       	adiw	r26, 0x01	; 1
    106e:	8c 91       	ld	r24, X
    1070:	81 17       	cp	r24, r17
    1072:	10 f0       	brcs	.+4      	; 0x1078 <data_fit+0x126>
		L -= n_elim;
    1074:	90 1a       	sub	r9, r16
    1076:	18 c0       	rjmp	.+48     	; 0x10a8 <data_fit+0x156>
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
    1078:	f7 01       	movw	r30, r14
    107a:	e9 0d       	add	r30, r9
    107c:	f1 1d       	adc	r31, r1
    107e:	e9 0d       	add	r30, r9
    1080:	f1 1d       	adc	r31, r1
    1082:	32 97       	sbiw	r30, 0x02	; 2
    1084:	81 81       	ldd	r24, Z+1	; 0x01
    1086:	18 17       	cp	r17, r24
    1088:	78 f4       	brcc	.+30     	; 0x10a8 <data_fit+0x156>
    108a:	80 e0       	ldi	r24, 0x00	; 0
		for(i = 0; i < L; i++)
    108c:	89 15       	cp	r24, r9
    108e:	60 f4       	brcc	.+24     	; 0x10a8 <data_fit+0x156>
			if(data_dist[i][1] > lim)
    1090:	f7 01       	movw	r30, r14
    1092:	e8 0f       	add	r30, r24
    1094:	f1 1d       	adc	r31, r1
    1096:	e8 0f       	add	r30, r24
    1098:	f1 1d       	adc	r31, r1
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	19 17       	cp	r17, r25
    109e:	10 f4       	brcc	.+4      	; 0x10a4 <data_fit+0x152>
			{
				L = i - 1;
    10a0:	81 50       	subi	r24, 0x01	; 1
				i = L;
    10a2:	98 2e       	mov	r9, r24
	}

	if(data_dist[0][1] >= lim)
		L -= n_elim;
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
		for(i = 0; i < L; i++)
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	f2 cf       	rjmp	.-28     	; 0x108c <data_fit+0x13a>
			if(data_dist[i][1] > lim)
			{
				L = i - 1;
				i = L;
			}
	avar = average(data_dist[0], L);
    10a8:	69 2d       	mov	r22, r9
    10aa:	c7 01       	movw	r24, r14
    10ac:	0e 94 73 07 	call	0xee6	; 0xee6 <average>
	dim = 1;
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	90 93 08 01 	sts	0x0108, r25
	return avar;
}
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de be       	out	0x3e, r13	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd be       	out	0x3d, r12	; 61
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	9f 90       	pop	r9
    10d6:	8f 90       	pop	r8
    10d8:	7f 90       	pop	r7
    10da:	08 95       	ret

000010dc <selectSlave>:
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    10dc:	c4 98       	cbi	0x18, 4	; 24
    10de:	08 95       	ret

000010e0 <deselectSlave>:
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    10e0:	c4 9a       	sbi	0x18, 4	; 24
    10e2:	08 95       	ret

000010e4 <mcp_write>:
	spi_init();
	mcp_reset();
}

void mcp_write(uint8_t address, uint8_t data)
{
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	1f 92       	push	r1
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	18 2f       	mov	r17, r24
	selectSlave();
    10f2:	69 83       	std	Y+1, r22	; 0x01
    10f4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <selectSlave>

	spi_MasterTransmit(WRITE);
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>
	spi_MasterTransmit(address);
    10fe:	81 2f       	mov	r24, r17
    1100:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>
	spi_MasterTransmit(data);
    1104:	69 81       	ldd	r22, Y+1	; 0x01
    1106:	86 2f       	mov	r24, r22
    1108:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>

	deselectSlave();
}
    110c:	0f 90       	pop	r0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17

	spi_MasterTransmit(WRITE);
	spi_MasterTransmit(address);
	spi_MasterTransmit(data);

	deselectSlave();
    1114:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <deselectSlave>

00001118 <mcp_read>:
}

uint8_t mcp_read(uint8_t address)
{
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	1f 92       	push	r1
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	18 2f       	mov	r17, r24
	selectSlave();
    1126:	0e 94 6e 08 	call	0x10dc	; 0x10dc <selectSlave>
	
	spi_MasterTransmit(READ);
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>
	
	spi_MasterTransmit(address);
    1130:	81 2f       	mov	r24, r17
    1132:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>

	uint8_t received_char = spi_SlaveReceive();
    1136:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <spi_SlaveReceive>

	deselectSlave();
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <deselectSlave>

	return received_char;
}
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	0f 90       	pop	r0
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	08 95       	ret

0000114c <mcp_reset>:
#else
	#define SPI_SS PB4
#endif

void mcp_reset(void)
{
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	1f 92       	push	r1
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	selectSlave();
    1156:	0e 94 6e 08 	call	0x10dc	; 0x10dc <selectSlave>

	spi_MasterTransmit(RESET);
    115a:	80 ec       	ldi	r24, 0xC0	; 192
    115c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>

	deselectSlave();
    1160:	0e 94 70 08 	call	0x10e0	; 0x10e0 <deselectSlave>
    1164:	8c ec       	ldi	r24, 0xCC	; 204
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <mcp_reset+0x1c>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <mcp_reset+0x22>
    116e:	00 00       	nop

	_delay_ms(1);

	//Self-test
	volatile uint8_t canstat;
	canstat = mcp_read(MCP_CANSTAT);
    1170:	8e e0       	ldi	r24, 0x0E	; 14
    1172:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
    1176:	89 83       	std	Y+1, r24	; 0x01
	if ((canstat & MODE_MASK) != MODE_CONFIG) {
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	80 7e       	andi	r24, 0xE0	; 224
    117c:	80 38       	cpi	r24, 0x80	; 128
    117e:	21 f0       	breq	.+8      	; 0x1188 <mcp_reset+0x3c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    1180:	81 e2       	ldi	r24, 0x21	; 33
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
	}
}
    1188:	0f 90       	pop	r0
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <mcp_init>:

void mcp_init(void)
{
	spi_init();
    1190:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <spi_init>
	mcp_reset();
    1194:	0c 94 a6 08 	jmp	0x114c	; 0x114c <mcp_reset>

00001198 <mcp_request_to_send>:
	deselectSlave();

}*/

void mcp_request_to_send (uint8_t out_buffer)
{
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	selectSlave();
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <selectSlave>

	spi_MasterTransmit(RTS | out_buffer);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	80 68       	ori	r24, 0x80	; 128
    11ac:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <spi_MasterTransmit>

	deselectSlave();
}
    11b0:	0f 90       	pop	r0
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
{
	selectSlave();

	spi_MasterTransmit(RTS | out_buffer);

	deselectSlave();
    11b6:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <deselectSlave>

000011ba <sendJoyPos>:
		}
	}
}

void sendJoyPos(void)
{
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	2b 97       	sbiw	r28, 0x0b	; 11
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	can_message joy_msg = { .id = JOY, .length = 3, .data = { joy_pos.x, joy_pos.y, joy_pos.dir } };
    11d6:	fe 01       	movw	r30, r28
    11d8:	31 96       	adiw	r30, 0x01	; 1
    11da:	8b e0       	ldi	r24, 0x0B	; 11
    11dc:	df 01       	movw	r26, r30
    11de:	1d 92       	st	X+, r1
    11e0:	8a 95       	dec	r24
    11e2:	e9 f7       	brne	.-6      	; 0x11de <sendJoyPos+0x24>
    11e4:	10 91 e8 03 	lds	r17, 0x03E8
    11e8:	20 91 e9 03 	lds	r18, 0x03E9
    11ec:	30 91 ea 03 	lds	r19, 0x03EA
	can_message_send(joy_msg);
    11f0:	e9 80       	ldd	r14, Y+1	; 0x01
    11f2:	fa 80       	ldd	r15, Y+2	; 0x02
    11f4:	03 e0       	ldi	r16, 0x03	; 3
    11f6:	4f 81       	ldd	r20, Y+7	; 0x07
    11f8:	58 85       	ldd	r21, Y+8	; 0x08
    11fa:	69 85       	ldd	r22, Y+9	; 0x09
    11fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    11fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1200:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
}
    1204:	2b 96       	adiw	r28, 0x0b	; 11
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <sendButton>:

void sendButton(void)
{
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	2b 97       	sbiw	r28, 0x0b	; 11
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
	static uint16_t counter = 1;
	uint8_t data_b[8] = { R, 0, 0, 0, 0, 0, 0, 0 };

	if(!JOY_button(R) && !JOY_button(L))
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <JOY_button>
    1242:	88 23       	and	r24, r24
    1244:	09 f4       	brne	.+2      	; 0x1248 <sendButton+0x2a>
    1246:	40 c0       	rjmp	.+128    	; 0x12c8 <sendButton+0xaa>
	return;

	counter --;
    1248:	80 91 09 01 	lds	r24, 0x0109
    124c:	90 91 0a 01 	lds	r25, 0x010A
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	90 93 0a 01 	sts	0x010A, r25
    1256:	80 93 09 01 	sts	0x0109, r24

	if(JOY_button(L))
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <JOY_button>
	data_b[0] = L;

	if(counter == 0)
    1262:	20 91 09 01 	lds	r18, 0x0109
    1266:	30 91 0a 01 	lds	r19, 0x010A
    126a:	23 2b       	or	r18, r19
    126c:	99 f5       	brne	.+102    	; 0x12d4 <sendButton+0xb6>
	{
		can_message button_msg = { .id = BUTTONS, .length = 1, .data[0] = data_b[0] };
    126e:	fe 01       	movw	r30, r28
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	9b e0       	ldi	r25, 0x0B	; 11
    1274:	df 01       	movw	r26, r30
    1276:	1d 92       	st	X+, r1
    1278:	9a 95       	dec	r25
    127a:	e9 f7       	brne	.-6      	; 0x1276 <sendButton+0x58>
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	e9 2e       	mov	r14, r25
    1280:	99 83       	std	Y+1, r25	; 0x01
    1282:	1a 82       	std	Y+2, r1	; 0x02
		can_message_send(button_msg);
    1284:	f1 2c       	mov	r15, r1
    1286:	01 e0       	ldi	r16, 0x01	; 1
    1288:	18 2f       	mov	r17, r24
    128a:	2d 81       	ldd	r18, Y+5	; 0x05
    128c:	3e 81       	ldd	r19, Y+6	; 0x06
    128e:	4f 81       	ldd	r20, Y+7	; 0x07
    1290:	58 85       	ldd	r21, Y+8	; 0x08
    1292:	69 85       	ldd	r22, Y+9	; 0x09
    1294:	7a 85       	ldd	r23, Y+10	; 0x0a
    1296:	8b 85       	ldd	r24, Y+11	; 0x0b
    1298:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
		counter = 10;
    129c:	8a e0       	ldi	r24, 0x0A	; 10
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	90 93 0a 01 	sts	0x010A, r25
    12a4:	80 93 09 01 	sts	0x0109, r24
		printf("CAN Button sent\n");
    12a8:	83 e5       	ldi	r24, 0x53	; 83
    12aa:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    12ac:	2b 96       	adiw	r28, 0x0b	; 11
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
	if(counter == 0)
	{
		can_message button_msg = { .id = BUTTONS, .length = 1, .data[0] = data_b[0] };
		can_message_send(button_msg);
		counter = 10;
		printf("CAN Button sent\n");
    12c4:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>
void sendButton(void)
{
	static uint16_t counter = 1;
	uint8_t data_b[8] = { R, 0, 0, 0, 0, 0, 0, 0 };

	if(!JOY_button(R) && !JOY_button(L))
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <JOY_button>
    12d0:	81 11       	cpse	r24, r1
    12d2:	ba cf       	rjmp	.-140    	; 0x1248 <sendButton+0x2a>
		can_message button_msg = { .id = BUTTONS, .length = 1, .data[0] = data_b[0] };
		can_message_send(button_msg);
		counter = 10;
		printf("CAN Button sent\n");
	}
}
    12d4:	2b 96       	adiw	r28, 0x0b	; 11
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	08 95       	ret

000012ee <sendSliderPos>:

void sendSliderPos(void)
{
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	2b 97       	sbiw	r28, 0x0b	; 11
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	can_message slid_msg = { .id = SLIDERS, .length = 2, .data = {slid_pos.r, slid_pos.l}};
    130a:	fe 01       	movw	r30, r28
    130c:	31 96       	adiw	r30, 0x01	; 1
    130e:	8b e0       	ldi	r24, 0x0B	; 11
    1310:	df 01       	movw	r26, r30
    1312:	1d 92       	st	X+, r1
    1314:	8a 95       	dec	r24
    1316:	e9 f7       	brne	.-6      	; 0x1312 <sendSliderPos+0x24>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	e8 2e       	mov	r14, r24
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	1a 82       	std	Y+2, r1	; 0x02
    1320:	10 91 e7 03 	lds	r17, 0x03E7
    1324:	20 91 e6 03 	lds	r18, 0x03E6
	can_message_send(slid_msg);
    1328:	f1 2c       	mov	r15, r1
    132a:	02 e0       	ldi	r16, 0x02	; 2
    132c:	3e 81       	ldd	r19, Y+6	; 0x06
    132e:	4f 81       	ldd	r20, Y+7	; 0x07
    1330:	58 85       	ldd	r21, Y+8	; 0x08
    1332:	69 85       	ldd	r22, Y+9	; 0x09
    1334:	7a 85       	ldd	r23, Y+10	; 0x0a
    1336:	8b 85       	ldd	r24, Y+11	; 0x0b
    1338:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
}
    133c:	2b 96       	adiw	r28, 0x0b	; 11
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	08 95       	ret

00001356 <playPingPong>:
SLID slid_pos, old_slid_pos;

static int score = 0;

void playPingPong(void)
{		
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	a5 97       	sbiw	r28, 0x25	; 37
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
	char scorestring[15];
	
	can_message can_msg = { .id = START_PING_PONG, .length = 0 };
    1372:	fe 01       	movw	r30, r28
    1374:	7b 96       	adiw	r30, 0x1b	; 27
    1376:	8b e0       	ldi	r24, 0x0B	; 11
    1378:	df 01       	movw	r26, r30
    137a:	1d 92       	st	X+, r1
    137c:	8a 95       	dec	r24
    137e:	e9 f7       	brne	.-6      	; 0x137a <playPingPong+0x24>
    1380:	87 e0       	ldi	r24, 0x07	; 7
    1382:	e8 2e       	mov	r14, r24
    1384:	8b 8f       	std	Y+27, r24	; 0x1b
    1386:	1c 8e       	std	Y+28, r1	; 0x1c
	can_message_send(can_msg);
    1388:	f1 2c       	mov	r15, r1
    138a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    138c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    138e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1390:	38 a1       	ldd	r19, Y+32	; 0x20
    1392:	49 a1       	ldd	r20, Y+33	; 0x21
    1394:	5a a1       	ldd	r21, Y+34	; 0x22
    1396:	6b a1       	ldd	r22, Y+35	; 0x23
    1398:	7c a1       	ldd	r23, Y+36	; 0x24
    139a:	8d a1       	ldd	r24, Y+37	; 0x25
    139c:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f e2       	ldi	r25, 0x2F	; 47
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <playPingPong+0x4e>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <playPingPong+0x54>
    13aa:	00 00       	nop
	_delay_ms(10);
	
	clear_buffer();
    13ac:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	position pos;
	position scorepos = { .page = 4, .column = 2 };
	pos.page = 1;
	pos.column = 2;
	print_string_to_buffer("PINGPONG GAME", pos);
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	72 e0       	ldi	r23, 0x02	; 2
    13b4:	83 e6       	ldi	r24, 0x63	; 99
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("LEFT SLID: leave", pos);
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	72 e0       	ldi	r23, 0x02	; 2
    13c0:	81 e7       	ldi	r24, 0x71	; 113
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	
	score = 0;	
    13c8:	10 92 9d 03 	sts	0x039D, r1
    13cc:	10 92 9c 03 	sts	0x039C, r1
		
		sendButton();
		
		_delay_ms(10);
		
		sprintf(scorestring, "Score: %d", score);
    13d0:	8d e9       	ldi	r24, 0x9D	; 157
    13d2:	e8 2e       	mov	r14, r24
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	f8 2e       	mov	r15, r24
    13d8:	8e 01       	movw	r16, r28
    13da:	0f 5f       	subi	r16, 0xFF	; 255
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
	
	score = 0;	

	while(1)
	{
		joy_pos = JOY_getPosition();
    13de:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    13e2:	60 93 e8 03 	sts	0x03E8, r22
    13e6:	70 93 e9 03 	sts	0x03E9, r23
    13ea:	80 93 ea 03 	sts	0x03EA, r24
		slid_pos = SLID_getPosition();
    13ee:	0e 94 92 13 	call	0x2724	; 0x2724 <SLID_getPosition>
    13f2:	90 93 e7 03 	sts	0x03E7, r25
    13f6:	80 93 e6 03 	sts	0x03E6, r24
		
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
    13fa:	40 91 e8 03 	lds	r20, 0x03E8
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	60 91 e3 03 	lds	r22, 0x03E3
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	cb 01       	movw	r24, r22
    1408:	0a 96       	adiw	r24, 0x0a	; 10
    140a:	84 17       	cp	r24, r20
    140c:	95 07       	cpc	r25, r21
    140e:	ac f0       	brlt	.+42     	; 0x143a <playPingPong+0xe4>
    1410:	80 91 e9 03 	lds	r24, 0x03E9
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	20 91 e4 03 	lds	r18, 0x03E4
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	f9 01       	movw	r30, r18
    141e:	3a 96       	adiw	r30, 0x0a	; 10
    1420:	e8 17       	cp	r30, r24
    1422:	f9 07       	cpc	r31, r25
    1424:	54 f0       	brlt	.+20     	; 0x143a <playPingPong+0xe4>
    1426:	6a 50       	subi	r22, 0x0A	; 10
    1428:	71 09       	sbc	r23, r1
    142a:	46 17       	cp	r20, r22
    142c:	57 07       	cpc	r21, r23
    142e:	2c f0       	brlt	.+10     	; 0x143a <playPingPong+0xe4>
    1430:	2a 50       	subi	r18, 0x0A	; 10
    1432:	31 09       	sbc	r19, r1
    1434:	82 17       	cp	r24, r18
    1436:	93 07       	cpc	r25, r19
    1438:	34 f4       	brge	.+12     	; 0x1446 <playPingPong+0xf0>
		{
			sendJoyPos();
    143a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <sendJoyPos>
			printf("CAN Joy sent\n");
    143e:	82 e8       	ldi	r24, 0x82	; 130
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
    1446:	af ef       	ldi	r26, 0xFF	; 255
    1448:	bf e2       	ldi	r27, 0x2F	; 47
    144a:	11 97       	sbiw	r26, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <playPingPong+0xf4>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <playPingPong+0xfa>
    1450:	00 00       	nop
		}
		
		_delay_ms(10);
		
		if(slid_pos.r > old_slid_pos.r + 10 || slid_pos.l > old_slid_pos.l + 10 || slid_pos.r < old_slid_pos.r - 10 || slid_pos.l < old_slid_pos.l - 10)
    1452:	40 91 e7 03 	lds	r20, 0x03E7
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	60 91 e2 03 	lds	r22, 0x03E2
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	cb 01       	movw	r24, r22
    1460:	0a 96       	adiw	r24, 0x0a	; 10
    1462:	84 17       	cp	r24, r20
    1464:	95 07       	cpc	r25, r21
    1466:	ac f0       	brlt	.+42     	; 0x1492 <playPingPong+0x13c>
    1468:	80 91 e6 03 	lds	r24, 0x03E6
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	20 91 e1 03 	lds	r18, 0x03E1
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	f9 01       	movw	r30, r18
    1476:	3a 96       	adiw	r30, 0x0a	; 10
    1478:	e8 17       	cp	r30, r24
    147a:	f9 07       	cpc	r31, r25
    147c:	54 f0       	brlt	.+20     	; 0x1492 <playPingPong+0x13c>
    147e:	6a 50       	subi	r22, 0x0A	; 10
    1480:	71 09       	sbc	r23, r1
    1482:	46 17       	cp	r20, r22
    1484:	57 07       	cpc	r21, r23
    1486:	2c f0       	brlt	.+10     	; 0x1492 <playPingPong+0x13c>
    1488:	2a 50       	subi	r18, 0x0A	; 10
    148a:	31 09       	sbc	r19, r1
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	34 f4       	brge	.+12     	; 0x149e <playPingPong+0x148>
		{
			//printf("old l: %d, old r: %d, new l: %d, new r: %d\n", old_slid_pos.l, old_slid_pos.r, slid_pos.l,slid_pos.r);
			sendSliderPos();
    1492:	0e 94 77 09 	call	0x12ee	; 0x12ee <sendSliderPos>
			//printf("slid r: %d slid l: %d \n", slid_pos.l, slid_pos.r);
			printf("Can SLid sent\n");
    1496:	8f e8       	ldi	r24, 0x8F	; 143
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	9f e2       	ldi	r25, 0x2F	; 47
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <playPingPong+0x14c>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <playPingPong+0x152>
    14a8:	00 00       	nop
		}
		
		_delay_ms(10);
		
		sendButton();
    14aa:	0e 94 0f 09 	call	0x121e	; 0x121e <sendButton>
    14ae:	af ef       	ldi	r26, 0xFF	; 255
    14b0:	bf e2       	ldi	r27, 0x2F	; 47
    14b2:	11 97       	sbiw	r26, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <playPingPong+0x15c>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <playPingPong+0x162>
    14b8:	00 00       	nop
		
		_delay_ms(10);
		
		sprintf(scorestring, "Score: %d", score);
    14ba:	80 91 9d 03 	lds	r24, 0x039D
    14be:	8f 93       	push	r24
    14c0:	80 91 9c 03 	lds	r24, 0x039C
    14c4:	8f 93       	push	r24
    14c6:	ff 92       	push	r15
    14c8:	ef 92       	push	r14
    14ca:	1f 93       	push	r17
    14cc:	0f 93       	push	r16
    14ce:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <sprintf>
		print_string_to_buffer(scorestring, scorepos);
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	72 e0       	ldi	r23, 0x02	; 2
    14d6:	c8 01       	movw	r24, r16
    14d8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		print_buffer();
    14dc:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
		
		old_joy_pos = joy_pos;
    14e0:	20 91 e8 03 	lds	r18, 0x03E8
    14e4:	30 91 e9 03 	lds	r19, 0x03E9
    14e8:	40 91 ea 03 	lds	r20, 0x03EA
    14ec:	20 93 e3 03 	sts	0x03E3, r18
    14f0:	30 93 e4 03 	sts	0x03E4, r19
    14f4:	40 93 e5 03 	sts	0x03E5, r20
		old_slid_pos = slid_pos;	
    14f8:	80 91 e6 03 	lds	r24, 0x03E6
    14fc:	90 91 e7 03 	lds	r25, 0x03E7
    1500:	90 93 e2 03 	sts	0x03E2, r25
    1504:	80 93 e1 03 	sts	0x03E1, r24
		
		if(SLID_getPosition().l < 10)
    1508:	0e 94 92 13 	call	0x2724	; 0x2724 <SLID_getPosition>
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	8a 30       	cpi	r24, 0x0A	; 10
    151a:	08 f0       	brcs	.+2      	; 0x151e <playPingPong+0x1c8>
    151c:	60 cf       	rjmp	.-320    	; 0x13de <playPingPong+0x88>
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f e2       	ldi	r25, 0x2F	; 47
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <playPingPong+0x1cc>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <playPingPong+0x1d2>
    1528:	00 00       	nop
		{
			_delay_ms(10);
			can_message can_msg = { .id = STOP_PING_PONG, .length = 0 };
    152a:	fe 01       	movw	r30, r28
    152c:	70 96       	adiw	r30, 0x10	; 16
    152e:	8b e0       	ldi	r24, 0x0B	; 11
    1530:	df 01       	movw	r26, r30
    1532:	1d 92       	st	X+, r1
    1534:	8a 95       	dec	r24
    1536:	e9 f7       	brne	.-6      	; 0x1532 <playPingPong+0x1dc>
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	e8 2e       	mov	r14, r24
    153c:	88 8b       	std	Y+16, r24	; 0x10
    153e:	19 8a       	std	Y+17, r1	; 0x11
			can_message_send(can_msg);
    1540:	f1 2c       	mov	r15, r1
    1542:	0a 89       	ldd	r16, Y+18	; 0x12
    1544:	1b 89       	ldd	r17, Y+19	; 0x13
    1546:	2c 89       	ldd	r18, Y+20	; 0x14
    1548:	3d 89       	ldd	r19, Y+21	; 0x15
    154a:	4e 89       	ldd	r20, Y+22	; 0x16
    154c:	5f 89       	ldd	r21, Y+23	; 0x17
    154e:	68 8d       	ldd	r22, Y+24	; 0x18
    1550:	79 8d       	ldd	r23, Y+25	; 0x19
    1552:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1554:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	9f e2       	ldi	r25, 0x2F	; 47
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <playPingPong+0x206>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <playPingPong+0x20c>
    1562:	00 00       	nop
			_delay_ms(10);
			return;			
		}
	}
}
    1564:	a5 96       	adiw	r28, 0x25	; 37
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	08 95       	ret

0000157e <setScore>:
	score = 0;
}

void setScore(int newscore)
{
	score = newscore;
    157e:	90 93 9d 03 	sts	0x039D, r25
    1582:	80 93 9c 03 	sts	0x039C, r24
    1586:	08 95       	ret

00001588 <sendCANGameWithoutIR>:
}

void sendCANGameWithoutIR(void)
{
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	2b 97       	sbiw	r28, 0x0b	; 11
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
	can_message can_msg = { .id = WITHOUT_IR, .length = 0 };
    15a4:	fe 01       	movw	r30, r28
    15a6:	31 96       	adiw	r30, 0x01	; 1
    15a8:	8b e0       	ldi	r24, 0x0B	; 11
    15aa:	df 01       	movw	r26, r30
    15ac:	1d 92       	st	X+, r1
    15ae:	8a 95       	dec	r24
    15b0:	e9 f7       	brne	.-6      	; 0x15ac <sendCANGameWithoutIR+0x24>
    15b2:	8a e0       	ldi	r24, 0x0A	; 10
    15b4:	e8 2e       	mov	r14, r24
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	1a 82       	std	Y+2, r1	; 0x02
	can_message_send(can_msg);
    15ba:	f1 2c       	mov	r15, r1
    15bc:	0b 81       	ldd	r16, Y+3	; 0x03
    15be:	1c 81       	ldd	r17, Y+4	; 0x04
    15c0:	2d 81       	ldd	r18, Y+5	; 0x05
    15c2:	3e 81       	ldd	r19, Y+6	; 0x06
    15c4:	4f 81       	ldd	r20, Y+7	; 0x07
    15c6:	58 85       	ldd	r21, Y+8	; 0x08
    15c8:	69 85       	ldd	r22, Y+9	; 0x09
    15ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    15cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ce:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
	printf("CAN STOP IR sent\n");
    15d2:	87 ea       	ldi	r24, 0xA7	; 167
    15d4:	92 e0       	ldi	r25, 0x02	; 2
}
    15d6:	2b 96       	adiw	r28, 0x0b	; 11
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14

void sendCANGameWithoutIR(void)
{
	can_message can_msg = { .id = WITHOUT_IR, .length = 0 };
	can_message_send(can_msg);
	printf("CAN STOP IR sent\n");
    15ee:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>

000015f2 <sendCANGameWithIR>:
}

void sendCANGameWithIR(void)
{
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	2b 97       	sbiw	r28, 0x0b	; 11
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
	can_message can_msg = { .id = WITH_IR, .length = 0 };
    160e:	fe 01       	movw	r30, r28
    1610:	31 96       	adiw	r30, 0x01	; 1
    1612:	8b e0       	ldi	r24, 0x0B	; 11
    1614:	df 01       	movw	r26, r30
    1616:	1d 92       	st	X+, r1
    1618:	8a 95       	dec	r24
    161a:	e9 f7       	brne	.-6      	; 0x1616 <sendCANGameWithIR+0x24>
    161c:	89 e0       	ldi	r24, 0x09	; 9
    161e:	e8 2e       	mov	r14, r24
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	1a 82       	std	Y+2, r1	; 0x02
	can_message_send(can_msg);
    1624:	f1 2c       	mov	r15, r1
    1626:	0b 81       	ldd	r16, Y+3	; 0x03
    1628:	1c 81       	ldd	r17, Y+4	; 0x04
    162a:	2d 81       	ldd	r18, Y+5	; 0x05
    162c:	3e 81       	ldd	r19, Y+6	; 0x06
    162e:	4f 81       	ldd	r20, Y+7	; 0x07
    1630:	58 85       	ldd	r21, Y+8	; 0x08
    1632:	69 85       	ldd	r22, Y+9	; 0x09
    1634:	7a 85       	ldd	r23, Y+10	; 0x0a
    1636:	8b 85       	ldd	r24, Y+11	; 0x0b
    1638:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
	printf("CAN START IR sent\n");
    163c:	88 eb       	ldi	r24, 0xB8	; 184
    163e:	92 e0       	ldi	r25, 0x02	; 2
}
    1640:	2b 96       	adiw	r28, 0x0b	; 11
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14

void sendCANGameWithIR(void)
{
	can_message can_msg = { .id = WITH_IR, .length = 0 };
	can_message_send(can_msg);
	printf("CAN START IR sent\n");
    1658:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>

0000165c <irSettings>:
}

void irSettings(void)
{
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	60 97       	sbiw	r28, 0x10	; 16
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    167a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	position pos = { .page = 2, .column = 2 };
    167e:	04 e2       	ldi	r16, 0x24	; 36
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	7e 01       	movw	r14, r28
    1684:	81 e1       	ldi	r24, 0x11	; 17
    1686:	e8 0e       	add	r14, r24
    1688:	f1 1c       	adc	r15, r1
    168a:	9e ed       	ldi	r25, 0xDE	; 222
    168c:	d9 2e       	mov	r13, r25
    168e:	d0 0e       	add	r13, r16
    1690:	fe 01       	movw	r30, r28
    1692:	31 96       	adiw	r30, 0x01	; 1
	char string[MAX_STRING_LENGTH];
	for(int i = 0; i < 3; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
    1694:	11 92       	st	Z+, r1
	clear_buffer();
	position pos = { .page = 2, .column = 2 };
	char string[MAX_STRING_LENGTH];
	for(int i = 0; i < 3; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    1696:	ee 15       	cp	r30, r14
    1698:	ff 05       	cpc	r31, r15
    169a:	e1 f7       	brne	.-8      	; 0x1694 <irSettings+0x38>
		string[i] = 0;
		getStringFromMem(string, 36 + i);
    169c:	b8 01       	movw	r22, r16
    169e:	ce 01       	movw	r24, r28
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
		print_string_to_buffer(string, pos);
    16a6:	6d 2d       	mov	r22, r13
    16a8:	72 e0       	ldi	r23, 0x02	; 2
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
    16b2:	0f 5f       	subi	r16, 0xFF	; 255
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
void irSettings(void)
{
	clear_buffer();
	position pos = { .page = 2, .column = 2 };
	char string[MAX_STRING_LENGTH];
	for(int i = 0; i < 3; i++)
    16b6:	07 32       	cpi	r16, 0x27	; 39
    16b8:	11 05       	cpc	r17, r1
    16ba:	39 f7       	brne	.-50     	; 0x168a <irSettings+0x2e>
		string[i] = 0;
		getStringFromMem(string, 36 + i);
		print_string_to_buffer(string, pos);
		pos.page++;
	}
	print_buffer();
    16bc:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 ef       	ldi	r25, 0xF0	; 240
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <irSettings+0x68>
	while(1)
	{
		_delay_ms(50);
		//without this printf the function directly closes and goes back to its previous entry
		//printf("joy z : %d\n", JOY_getPosition().y);
		if(JOY_getPosition().y > 250)
    16c8:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    16cc:	7b 3f       	cpi	r23, 0xFB	; 251
    16ce:	68 f0       	brcs	.+26     	; 0x16ea <irSettings+0x8e>
		{
			while(JOY_getPosition().dir != NEUTRAL);
    16d0:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    16d4:	81 11       	cpse	r24, r1
    16d6:	fc cf       	rjmp	.-8      	; 0x16d0 <irSettings+0x74>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	9f e2       	ldi	r25, 0x2F	; 47
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <irSettings+0x80>
    16e0:	00 c0       	rjmp	.+0      	; 0x16e2 <irSettings+0x86>
    16e2:	00 00       	nop
			_delay_ms(10);
			sendCANGameWithIR();
    16e4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <sendCANGameWithIR>
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <irSettings+0xb6>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 ef       	ldi	r25, 0xF0	; 240
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <irSettings+0x92>
			_delay_ms(10);
			return;
		}
		_delay_ms(50);
		if(JOY_getPosition().y < 10)
    16f2:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    16f6:	7a 30       	cpi	r23, 0x0A	; 10
    16f8:	00 f5       	brcc	.+64     	; 0x173a <irSettings+0xde>
		{
			while(JOY_getPosition().dir != NEUTRAL);
    16fa:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    16fe:	81 11       	cpse	r24, r1
    1700:	fc cf       	rjmp	.-8      	; 0x16fa <irSettings+0x9e>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	9f e2       	ldi	r25, 0x2F	; 47
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <irSettings+0xaa>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <irSettings+0xb0>
    170c:	00 00       	nop
			_delay_ms(10);
			sendCANGameWithoutIR();
    170e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <sendCANGameWithoutIR>
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	9f e2       	ldi	r25, 0x2F	; 47
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <irSettings+0xba>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <irSettings+0xc0>
    171c:	00 00       	nop
			_delay_ms(10);
			return;
		}
		_delay_ms(50);
	}
    171e:	60 96       	adiw	r28, 0x10	; 16
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	08 95       	ret
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 ef       	ldi	r25, 0xF0	; 240
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <irSettings+0xe2>
    1742:	be cf       	rjmp	.-132    	; 0x16c0 <irSettings+0x64>

00001744 <send_song_CAN>:
#include "song_handler.h"

void send_song_CAN(uint8_t song)
{
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	2b 97       	sbiw	r28, 0x0b	; 11
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
	can_message song_msg = { .id = START_SONG, .length = 1, .data[0] = song };
    1760:	fe 01       	movw	r30, r28
    1762:	31 96       	adiw	r30, 0x01	; 1
    1764:	9b e0       	ldi	r25, 0x0B	; 11
    1766:	df 01       	movw	r26, r30
    1768:	1d 92       	st	X+, r1
    176a:	9a 95       	dec	r25
    176c:	e9 f7       	brne	.-6      	; 0x1768 <send_song_CAN+0x24>
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	e9 2e       	mov	r14, r25
    1772:	99 83       	std	Y+1, r25	; 0x01
    1774:	1a 82       	std	Y+2, r1	; 0x02
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	9b 83       	std	Y+3, r25	; 0x03
    177a:	8c 83       	std	Y+4, r24	; 0x04
	can_message_send(song_msg);
    177c:	f1 2c       	mov	r15, r1
    177e:	01 e0       	ldi	r16, 0x01	; 1
    1780:	18 2f       	mov	r17, r24
    1782:	2d 81       	ldd	r18, Y+5	; 0x05
    1784:	3e 81       	ldd	r19, Y+6	; 0x06
    1786:	4f 81       	ldd	r20, Y+7	; 0x07
    1788:	58 85       	ldd	r21, Y+8	; 0x08
    178a:	69 85       	ldd	r22, Y+9	; 0x09
    178c:	7a 85       	ldd	r23, Y+10	; 0x0a
    178e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1790:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	9f e2       	ldi	r25, 0x2F	; 47
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <send_song_CAN+0x54>
    179c:	00 c0       	rjmp	.+0      	; 0x179e <send_song_CAN+0x5a>
    179e:	00 00       	nop
	_delay_ms(10);
	printf("CAN START SONG\n");
    17a0:	8a ec       	ldi	r24, 0xCA	; 202
    17a2:	92 e0       	ldi	r25, 0x02	; 2
}
    17a4:	2b 96       	adiw	r28, 0x0b	; 11
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
void send_song_CAN(uint8_t song)
{
	can_message song_msg = { .id = START_SONG, .length = 1, .data[0] = song };
	can_message_send(song_msg);
	_delay_ms(10);
	printf("CAN START SONG\n");
    17bc:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>

000017c0 <send_stop_CAN>:
}

void send_stop_CAN(void)
{
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	2b 97       	sbiw	r28, 0x0b	; 11
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
	can_message song_msg = { .id = END_SONG, .length = 0 };
    17dc:	fe 01       	movw	r30, r28
    17de:	31 96       	adiw	r30, 0x01	; 1
    17e0:	8b e0       	ldi	r24, 0x0B	; 11
    17e2:	df 01       	movw	r26, r30
    17e4:	1d 92       	st	X+, r1
    17e6:	8a 95       	dec	r24
    17e8:	e9 f7       	brne	.-6      	; 0x17e4 <send_stop_CAN+0x24>
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	e8 2e       	mov	r14, r24
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	1a 82       	std	Y+2, r1	; 0x02
	can_message_send(song_msg);
    17f2:	f1 2c       	mov	r15, r1
    17f4:	0b 81       	ldd	r16, Y+3	; 0x03
    17f6:	1c 81       	ldd	r17, Y+4	; 0x04
    17f8:	2d 81       	ldd	r18, Y+5	; 0x05
    17fa:	3e 81       	ldd	r19, Y+6	; 0x06
    17fc:	4f 81       	ldd	r20, Y+7	; 0x07
    17fe:	58 85       	ldd	r21, Y+8	; 0x08
    1800:	69 85       	ldd	r22, Y+9	; 0x09
    1802:	7a 85       	ldd	r23, Y+10	; 0x0a
    1804:	8b 85       	ldd	r24, Y+11	; 0x0b
    1806:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	9f e2       	ldi	r25, 0x2F	; 47
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <send_stop_CAN+0x4e>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <send_stop_CAN+0x54>
    1814:	00 00       	nop
	_delay_ms(10);
	printf("CAN END SONG\n");
    1816:	89 ed       	ldi	r24, 0xD9	; 217
    1818:	92 e0       	ldi	r25, 0x02	; 2
}
    181a:	2b 96       	adiw	r28, 0x0b	; 11
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
void send_stop_CAN(void)
{
	can_message song_msg = { .id = END_SONG, .length = 0 };
	can_message_send(song_msg);
	_delay_ms(10);
	printf("CAN END SONG\n");
    1832:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>

00001836 <displaySong>:
	send_song_CAN(MERRY_X_MAS);
	handleUserInput(MERRY_X_MAS);
}

void displaySong(uint8_t song)
{
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	61 97       	sbiw	r28, 0x11	; 17
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    184e:	89 8b       	std	Y+17, r24	; 0x11
    1850:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
    1854:	8e 01       	movw	r16, r28
    1856:	0f 5e       	subi	r16, 0xEF	; 239
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
	position pos = { .page = 1, .column = 2 };
    185a:	fe 01       	movw	r30, r28
    185c:	31 96       	adiw	r30, 0x01	; 1
    185e:	89 89       	ldd	r24, Y+17	; 0x11
	char string[MAX_STRING_LENGTH];
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
    1860:	11 92       	st	Z+, r1
void displaySong(uint8_t song)
{
	clear_buffer();
	position pos = { .page = 1, .column = 2 };
	char string[MAX_STRING_LENGTH];
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    1862:	e0 17       	cp	r30, r16
    1864:	f1 07       	cpc	r31, r17
    1866:	e1 f7       	brne	.-8      	; 0x1860 <displaySong+0x2a>
		string[i] = 0;
	switch(song)
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	91 05       	cpc	r25, r1
    186e:	a0 f4       	brcc	.+40     	; 0x1898 <displaySong+0x62>
    1870:	fc 01       	movw	r30, r24
    1872:	e8 5c       	subi	r30, 0xC8	; 200
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__tablejump2__>
	{
		case CANTINA_BAND:
		{
			getStringFromMem(string, 15);
    187a:	6f e0       	ldi	r22, 0x0F	; 15
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <displaySong+0x4e>
			print_string_to_buffer(string, pos);
			break;
		}
		case HARRY_POTTER:
		{
			getStringFromMem(string, 13);
    1880:	6d e0       	ldi	r22, 0x0D	; 13
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
			print_string_to_buffer(string, pos);
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	72 e0       	ldi	r23, 0x02	; 2
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
}

void displaySong(uint8_t song)
{
	clear_buffer();
	position pos = { .page = 1, .column = 2 };
    1898:	fe 01       	movw	r30, r28
    189a:	31 96       	adiw	r30, 0x01	; 1
    189c:	12 c0       	rjmp	.+36     	; 0x18c2 <displaySong+0x8c>
			print_string_to_buffer(string, pos);
			break;
		}
		case IMPERIAL:
		{
			getStringFromMem(string, 17);
    189e:	61 e1       	ldi	r22, 0x11	; 17
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	f0 cf       	rjmp	.-32     	; 0x1884 <displaySong+0x4e>
			print_string_to_buffer(string, pos);
			break;
		}
		case MERRY_X_MAS:
		{
			getStringFromMem(string, 18);
    18a4:	62 e1       	ldi	r22, 0x12	; 18
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	ed cf       	rjmp	.-38     	; 0x1884 <displaySong+0x4e>
			print_string_to_buffer(string, pos);
			break;
		}
		case POKEMON:
		{
			getStringFromMem(string, 16);
    18aa:	60 e1       	ldi	r22, 0x10	; 16
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	ea cf       	rjmp	.-44     	; 0x1884 <displaySong+0x4e>
			print_string_to_buffer(string, pos);
			break;
		}
		case TETRIS:
		{
			getStringFromMem(string, 14);
    18b0:	6e e0       	ldi	r22, 0x0E	; 14
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	e7 cf       	rjmp	.-50     	; 0x1884 <displaySong+0x4e>
			print_string_to_buffer(string, pos);
			break;
		}
		case JINGLE_BELLS:
		{
			getStringFromMem(string, 19);
    18b6:	63 e1       	ldi	r22, 0x13	; 19
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	e4 cf       	rjmp	.-56     	; 0x1884 <displaySong+0x4e>
			print_string_to_buffer(string, pos);
			break;
		}
		case LAST_CHRISTMAS:
		{
			getStringFromMem(string, 20);
    18bc:	64 e1       	ldi	r22, 0x14	; 20
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	e1 cf       	rjmp	.-62     	; 0x1884 <displaySong+0x4e>
			break;
		}
	}
	pos.page++;
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
    18c2:	11 92       	st	Z+, r1
			print_string_to_buffer(string, pos);
			break;
		}
	}
	pos.page++;
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    18c4:	e0 17       	cp	r30, r16
    18c6:	f1 07       	cpc	r31, r17
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <displaySong+0x8c>
		string[i] = 0;
	getStringFromMem(string, 45);
    18ca:	6d e2       	ldi	r22, 0x2D	; 45
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	ce 01       	movw	r24, r28
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
	print_string_to_buffer(string, pos);
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	72 e0       	ldi	r23, 0x02	; 2
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
    18e2:	fe 01       	movw	r30, r28
    18e4:	31 96       	adiw	r30, 0x01	; 1
	/*print_string_to_buffer("Up: previous song", pos);
	pos.page++;
	print_string_to_buffer("Down: next song", pos);*/
	pos.page++;
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
    18e6:	11 92       	st	Z+, r1
	pos.page++;
	/*print_string_to_buffer("Up: previous song", pos);
	pos.page++;
	print_string_to_buffer("Down: next song", pos);*/
	pos.page++;
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    18e8:	e0 17       	cp	r30, r16
    18ea:	f1 07       	cpc	r31, r17
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <displaySong+0xb0>
		string[i] = 0;
	getStringFromMem(string, 46);
    18ee:	6e e2       	ldi	r22, 0x2E	; 46
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
	print_string_to_buffer(string, pos);
    18fa:	64 e0       	ldi	r22, 0x04	; 4
    18fc:	72 e0       	ldi	r23, 0x02	; 2
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
    1906:	fe 01       	movw	r30, r28
    1908:	31 96       	adiw	r30, 0x01	; 1
	pos.page++;
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
    190a:	11 92       	st	Z+, r1
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
	getStringFromMem(string, 46);
	print_string_to_buffer(string, pos);
	pos.page++;
	for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    190c:	e0 17       	cp	r30, r16
    190e:	f1 07       	cpc	r31, r17
    1910:	e1 f7       	brne	.-8      	; 0x190a <displaySong+0xd4>
		string[i] = 0;
	getStringFromMem(string, 47);
    1912:	6f e2       	ldi	r22, 0x2F	; 47
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	ce 01       	movw	r24, r28
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
	print_string_to_buffer(string, pos);
    191e:	65 e0       	ldi	r22, 0x05	; 5
    1920:	72 e0       	ldi	r23, 0x02	; 2
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	print_buffer();
    192a:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
}
    192e:	61 96       	adiw	r28, 0x11	; 17
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret

00001944 <handleUserInput>:

void handleUserInput(uint8_t song)
{
	while(1)
	{
		if(JOY_button(R))
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <JOY_button>
    194c:	81 11       	cpse	r24, r1
		{
			send_stop_CAN();
    194e:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <send_stop_CAN>
    1952:	2f ef       	ldi	r18, 0xFF	; 255
    1954:	8f e7       	ldi	r24, 0x7F	; 127
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	21 50       	subi	r18, 0x01	; 1
    195a:	80 40       	sbci	r24, 0x00	; 0
    195c:	90 40       	sbci	r25, 0x00	; 0
    195e:	e1 f7       	brne	.-8      	; 0x1958 <handleUserInput+0x14>
    1960:	00 c0       	rjmp	.+0      	; 0x1962 <handleUserInput+0x1e>
    1962:	00 c0       	rjmp	.+0      	; 0x1964 <handleUserInput+0x20>
    1964:	ef cf       	rjmp	.-34     	; 0x1944 <handleUserInput>

00001966 <song_harry_potter>:
	printf("CAN END SONG\n");
}

void song_harry_potter(void)
{
	displaySong(HARRY_POTTER);
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(HARRY_POTTER);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(HARRY_POTTER);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

00001978 <song_cantina_band>:
}

void song_cantina_band(void)
{
	displaySong(CANTINA_BAND);
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(CANTINA_BAND);
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(CANTINA_BAND);
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

0000198a <song_pokemon>:
}

void song_pokemon(void)
{
	displaySong(POKEMON);
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(POKEMON);
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(POKEMON);
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

0000199c <song_tetris>:
}

void song_tetris(void)
{
	displaySong(TETRIS);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(TETRIS);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(TETRIS);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

000019ae <song_octaves>:
}

void song_octaves(void)
{
	displaySong(IMPERIAL);
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(IMPERIAL);
    19b4:	84 e0       	ldi	r24, 0x04	; 4
    19b6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(IMPERIAL);
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

000019c0 <song_jingle_bells>:
}

void song_jingle_bells(void)
{
	displaySong(JINGLE_BELLS);
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(JINGLE_BELLS);
    19c6:	86 e0       	ldi	r24, 0x06	; 6
    19c8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(JINGLE_BELLS);
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

000019d2 <song_last_christmas>:
}

void song_last_christmas(void)
{
	displaySong(LAST_CHRISTMAS);
    19d2:	87 e0       	ldi	r24, 0x07	; 7
    19d4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(LAST_CHRISTMAS);
    19d8:	87 e0       	ldi	r24, 0x07	; 7
    19da:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(LAST_CHRISTMAS);
    19de:	87 e0       	ldi	r24, 0x07	; 7
    19e0:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

000019e4 <song_merry_x_mas>:
}

void song_merry_x_mas(void)
{
	displaySong(MERRY_X_MAS);
    19e4:	85 e0       	ldi	r24, 0x05	; 5
    19e6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <displaySong>
	send_song_CAN(MERRY_X_MAS);
    19ea:	85 e0       	ldi	r24, 0x05	; 5
    19ec:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	handleUserInput(MERRY_X_MAS);
    19f0:	85 e0       	ldi	r24, 0x05	; 5
    19f2:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <handleUserInput>

000019f6 <spi_Masterinit>:
	SPCR = (1 << SPE);
}

void spi_Masterinit(void)
{
	DDRB = 0xFF;
    19f6:	8f ef       	ldi	r24, 0xFF	; 255
    19f8:	87 bb       	out	0x17, r24	; 23

	//set MOSI, SCK and SS output, all others input
	DDR_SPI |= (1 << DD_SS) | (1 << DD_MOSI) | (1 << DD_SCK);
    19fa:	87 b3       	in	r24, 0x17	; 23
    19fc:	80 6b       	ori	r24, 0xB0	; 176
    19fe:	87 bb       	out	0x17, r24	; 23

	//enable SPI, Master, set clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1a00:	8d b1       	in	r24, 0x0d	; 13
    1a02:	81 65       	ori	r24, 0x51	; 81
    1a04:	8d b9       	out	0x0d, r24	; 13
    1a06:	08 95       	ret

00001a08 <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
    1a08:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <spi_Masterinit>

00001a0c <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	//start transmission
	SPDR = cData;
    1a0c:	8f b9       	out	0x0f, r24	; 15

	//wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
    1a0e:	77 9b       	sbis	0x0e, 7	; 14
    1a10:	fe cf       	rjmp	.-4      	; 0x1a0e <spi_MasterTransmit+0x2>
}
    1a12:	08 95       	ret

00001a14 <spi_SlaveReceive>:

char spi_SlaveReceive(void)
{
	//send dummy data
	SPDR = 0xFF;
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	8f b9       	out	0x0f, r24	; 15

	//wait for reception complete
	while(!(SPSR & (1 << SPIF)));
    1a18:	77 9b       	sbis	0x0e, 7	; 14
    1a1a:	fe cf       	rjmp	.-4      	; 0x1a18 <spi_SlaveReceive+0x4>

	//return data register
	return SPDR;
    1a1c:	8f b1       	in	r24, 0x0f	; 15
}
    1a1e:	08 95       	ret

00001a20 <draw_one_bit_buffer>:
		}
     }
}

void draw_one_bit_buffer(POS bit)
{
    1a20:	29 2f       	mov	r18, r25
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
    1a22:	90 34       	cpi	r25, 0x40	; 64
    1a24:	10 f4       	brcc	.+4      	; 0x1a2a <draw_one_bit_buffer+0xa>
    1a26:	87 ff       	sbrs	r24, 7
    1a28:	11 c0       	rjmp	.+34     	; 0x1a4c <draw_one_bit_buffer+0x2c>
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
    1a2a:	1f 92       	push	r1
    1a2c:	2f 93       	push	r18
    1a2e:	1f 92       	push	r1
    1a30:	8f 93       	push	r24
    1a32:	86 ee       	ldi	r24, 0xE6	; 230
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	9f 93       	push	r25
    1a38:	8f 93       	push	r24
    1a3a:	0e 94 77 16 	call	0x2cee	; 0x2cee <printf>
		return;
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	08 95       	ret
	}
    start = start_calc(bit);
    res |= (1 << start);
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    1a4c:	39 2f       	mov	r19, r25
    1a4e:	36 95       	lsr	r19
    1a50:	36 95       	lsr	r19
    1a52:	36 95       	lsr	r19
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	34 9f       	mul	r19, r20
    1a5a:	80 0d       	add	r24, r0
    1a5c:	91 1d       	adc	r25, r1
    1a5e:	11 24       	eor	r1, r1
    1a60:	e0 91 0b 01 	lds	r30, 0x010B
    1a64:	f0 91 0c 01 	lds	r31, 0x010C
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	30 81       	ld	r19, Z
}

/* calculates the position the char column in memory */
int start_calc(POS rect)
{
    return rect.y % 8;
    1a6e:	27 70       	andi	r18, 0x07	; 7
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <draw_one_bit_buffer+0x5a>
    1a78:	88 0f       	add	r24, r24
    1a7a:	0a 94       	dec	r0
    1a7c:	ea f7       	brpl	.-6      	; 0x1a78 <draw_one_bit_buffer+0x58>
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    1a7e:	38 2b       	or	r19, r24
    1a80:	30 83       	st	Z, r19
    1a82:	08 95       	ret

00001a84 <draw_rectangle_buffer>:
    bit_page = abs(rect.Ly - (start_calc(rect.pos)));
    return bit_page;
}

void draw_rectangle_buffer(RECT rect)
{
    1a84:	2f 92       	push	r2
    1a86:	3f 92       	push	r3
    1a88:	4f 92       	push	r4
    1a8a:	5f 92       	push	r5
    1a8c:	6f 92       	push	r6
    1a8e:	7f 92       	push	r7
    1a90:	8f 92       	push	r8
    1a92:	9f 92       	push	r9
    1a94:	af 92       	push	r10
    1a96:	bf 92       	push	r11
    1a98:	cf 92       	push	r12
    1a9a:	df 92       	push	r13
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <draw_rectangle_buffer+0x26>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <draw_rectangle_buffer+0x28>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <draw_rectangle_buffer+0x2a>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    1ab4:	e4 2e       	mov	r14, r20
    1ab6:	f1 2c       	mov	r15, r1
    1ab8:	27 01       	movw	r4, r14
    1aba:	17 01       	movw	r2, r14
    1abc:	26 0e       	add	r2, r22
    1abe:	31 1c       	adc	r3, r1
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    1ac0:	65 2e       	mov	r6, r21
    1ac2:	71 2c       	mov	r7, r1
    1ac4:	63 01       	movw	r12, r6
    1ac6:	c7 0e       	add	r12, r23
    1ac8:	d1 1c       	adc	r13, r1
				draw_one_bit_buffer(current);
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    1aca:	51 01       	movw	r10, r2
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	a8 1a       	sub	r10, r24
    1ad0:	b1 08       	sbc	r11, r1
    1ad2:	46 01       	movw	r8, r12
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	88 1a       	sub	r8, r24
    1ad8:	91 08       	sbc	r9, r1
{
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    1ada:	42 14       	cp	r4, r2
    1adc:	53 04       	cpc	r5, r3
    1ade:	bc f5       	brge	.+110    	; 0x1b4e <draw_rectangle_buffer+0xca>
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    1ae0:	83 01       	movw	r16, r6
      {
		current.x = i;
    1ae2:	4e 82       	std	Y+6, r4	; 0x06
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    1ae4:	0c 15       	cp	r16, r12
    1ae6:	1d 05       	cpc	r17, r13
    1ae8:	74 f5       	brge	.+92     	; 0x1b46 <draw_rectangle_buffer+0xc2>
      {
		current.x = i;
		current.y = j;
    1aea:	90 2f       	mov	r25, r16
		switch(rect.full)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	39 f0       	breq	.+14     	; 0x1b00 <draw_rectangle_buffer+0x7c>
    1af2:	18 f0       	brcs	.+6      	; 0x1afa <draw_rectangle_buffer+0x76>
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	a1 f0       	breq	.+40     	; 0x1b20 <draw_rectangle_buffer+0x9c>
    1af8:	23 c0       	rjmp	.+70     	; 0x1b40 <draw_rectangle_buffer+0xbc>
		{
			case(FULL):
			{
				draw_one_bit_buffer(current);
    1afa:	8e 81       	ldd	r24, Y+6	; 0x06
    1afc:	90 2f       	mov	r25, r16
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <draw_rectangle_buffer+0x96>
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    1b00:	4e 14       	cp	r4, r14
    1b02:	5f 04       	cpc	r5, r15
    1b04:	49 f0       	breq	.+18     	; 0x1b18 <draw_rectangle_buffer+0x94>
    1b06:	06 15       	cp	r16, r6
    1b08:	17 05       	cpc	r17, r7
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <draw_rectangle_buffer+0x94>
    1b0c:	4a 14       	cp	r4, r10
    1b0e:	5b 04       	cpc	r5, r11
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <draw_rectangle_buffer+0x94>
    1b12:	08 15       	cp	r16, r8
    1b14:	19 05       	cpc	r17, r9
    1b16:	a1 f4       	brne	.+40     	; 0x1b40 <draw_rectangle_buffer+0xbc>
				draw_one_bit_buffer(current);
    1b18:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <draw_one_bit_buffer>
    1b1e:	10 c0       	rjmp	.+32     	; 0x1b40 <draw_rectangle_buffer+0xbc>
				break;
			}
			case(TRI_EMPT):
			{
				if(((i == rect.pos.x) && (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) && (j == rect.Ly + rect.pos.y - 1)) || (full == 1))
    1b20:	4e 14       	cp	r4, r14
    1b22:	5f 04       	cpc	r5, r15
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <draw_rectangle_buffer+0xa8>
    1b26:	06 15       	cp	r16, r6
    1b28:	17 05       	cpc	r17, r7
    1b2a:	b1 f3       	breq	.-20     	; 0x1b18 <draw_rectangle_buffer+0x94>
    1b2c:	4a 14       	cp	r4, r10
    1b2e:	5b 04       	cpc	r5, r11
    1b30:	19 f4       	brne	.+6      	; 0x1b38 <draw_rectangle_buffer+0xb4>
    1b32:	08 15       	cp	r16, r8
    1b34:	19 05       	cpc	r17, r9
    1b36:	81 f3       	breq	.-32     	; 0x1b18 <draw_rectangle_buffer+0x94>
    1b38:	80 91 9e 03 	lds	r24, 0x039E
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	61 f3       	breq	.-40     	; 0x1b18 <draw_rectangle_buffer+0x94>
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    1b40:	0f 5f       	subi	r16, 0xFF	; 255
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	cf cf       	rjmp	.-98     	; 0x1ae4 <draw_rectangle_buffer+0x60>
{
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	48 1a       	sub	r4, r24
    1b4a:	58 0a       	sbc	r5, r24
    1b4c:	c6 cf       	rjmp	.-116    	; 0x1ada <draw_rectangle_buffer+0x56>
				draw_one_bit_buffer(current);
				break;
			}
		}
     }
}
    1b4e:	26 96       	adiw	r28, 0x06	; 6
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	9f 90       	pop	r9
    1b70:	8f 90       	pop	r8
    1b72:	7f 90       	pop	r7
    1b74:	6f 90       	pop	r6
    1b76:	5f 90       	pop	r5
    1b78:	4f 90       	pop	r4
    1b7a:	3f 90       	pop	r3
    1b7c:	2f 90       	pop	r2
    1b7e:	08 95       	ret

00001b80 <draw_triangle_buffer>:
    res |= (1 << start);
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
}

void draw_triangle_buffer(TRI tri)
{
    1b80:	bf 92       	push	r11
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	2a 97       	sbiw	r28, 0x0a	; 10
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	d6 2e       	mov	r13, r22
    RECT rect;
	int i=0;
    rect.pos.x = tri.pos.x;
    1ba4:	c4 2e       	mov	r12, r20
    rect.pos.y = tri.pos.y;
    1ba6:	b5 2e       	mov	r11, r21
    rect.full = tri.full;
    1ba8:	7d 83       	std	Y+5, r23	; 0x05
	full = 1;
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	90 93 9e 03 	sts	0x039E, r25
    switch (tri.ori)
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	a9 f0       	breq	.+42     	; 0x1bde <draw_triangle_buffer+0x5e>
    1bb4:	40 f4       	brcc	.+16     	; 0x1bc6 <draw_triangle_buffer+0x46>
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <draw_triangle_buffer+0x3c>
    1bba:	74 c0       	rjmp	.+232    	; 0x1ca4 <draw_triangle_buffer+0x124>
    1bbc:	00 e0       	ldi	r16, 0x00	; 0
    1bbe:	10 e0       	ldi	r17, 0x00	; 0
    1bc0:	e6 2e       	mov	r14, r22
    1bc2:	f1 2c       	mov	r15, r1
    1bc4:	26 c0       	rjmp	.+76     	; 0x1c12 <draw_triangle_buffer+0x92>
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <draw_triangle_buffer+0x4c>
    1bca:	53 c0       	rjmp	.+166    	; 0x1c72 <draw_triangle_buffer+0xf2>
    1bcc:	84 30       	cpi	r24, 0x04	; 4
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <draw_triangle_buffer+0x52>
    1bd0:	69 c0       	rjmp	.+210    	; 0x1ca4 <draw_triangle_buffer+0x124>
    1bd2:	00 e0       	ldi	r16, 0x00	; 0
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    1bd6:	b4 1a       	sub	r11, r20
    1bd8:	e6 2e       	mov	r14, r22
    1bda:	f1 2c       	mov	r15, r1
    1bdc:	35 c0       	rjmp	.+106    	; 0x1c48 <draw_triangle_buffer+0xc8>
    1bde:	00 e0       	ldi	r16, 0x00	; 0
    1be0:	10 e0       	ldi	r17, 0x00	; 0
    1be2:	b4 1a       	sub	r11, r20
    1be4:	e6 2e       	mov	r14, r22
    1be6:	f1 2c       	mov	r15, r1
    1be8:	5b 2d       	mov	r21, r11
    1bea:	5c 0d       	add	r21, r12
    1bec:	7d 2d       	mov	r23, r13
    1bee:	70 0f       	add	r23, r16
            rect.Lx = 1;
            rect.Ly = tri.l;
			i = rect.Ly;
            do
            {
                draw_rectangle_buffer(rect);
    1bf0:	4c 2d       	mov	r20, r12
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
				full = 0;
    1bfa:	10 92 9e 03 	sts	0x039E, r1
    1bfe:	02 50       	subi	r16, 0x02	; 2
    1c00:	11 09       	sbc	r17, r1
    1c02:	c3 94       	inc	r12
    1c04:	c8 01       	movw	r24, r16
    1c06:	8e 0d       	add	r24, r14
    1c08:	9f 1d       	adc	r25, r15
                rect.Ly -= 2;
				i -= 2;
                rect.pos.y++;
                rect.pos.x++;
            }
            while(i > 0);
    1c0a:	18 16       	cp	r1, r24
    1c0c:	19 06       	cpc	r1, r25
    1c0e:	64 f3       	brlt	.-40     	; 0x1be8 <draw_triangle_buffer+0x68>
    1c10:	49 c0       	rjmp	.+146    	; 0x1ca4 <draw_triangle_buffer+0x124>
    1c12:	4c 2d       	mov	r20, r12
    1c14:	40 1b       	sub	r20, r16
    1c16:	5b 2d       	mov	r21, r11
    1c18:	50 0f       	add	r21, r16
    1c1a:	80 2f       	mov	r24, r16
    1c1c:	88 0f       	add	r24, r24
    1c1e:	7d 2d       	mov	r23, r13
    1c20:	78 1b       	sub	r23, r24
            rect.Lx = 1;
            rect.Ly = tri.l;
            i = rect.Ly;
			do
            {
                draw_rectangle_buffer(rect);
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
				full = 0;
    1c2a:	10 92 9e 03 	sts	0x039E, r1
    1c2e:	0f 5f       	subi	r16, 0xFF	; 255
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	c8 01       	movw	r24, r16
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	97 01       	movw	r18, r14
    1c3a:	28 1b       	sub	r18, r24
    1c3c:	39 0b       	sbc	r19, r25
    1c3e:	c9 01       	movw	r24, r18
                rect.Ly -= 2;
				i -= 2;
                rect.pos.y++;
                rect.pos.x--;
            }
            while(i > 0);
    1c40:	18 16       	cp	r1, r24
    1c42:	19 06       	cpc	r1, r25
    1c44:	34 f3       	brlt	.-52     	; 0x1c12 <draw_triangle_buffer+0x92>
    1c46:	2e c0       	rjmp	.+92     	; 0x1ca4 <draw_triangle_buffer+0x124>
    1c48:	5b 2d       	mov	r21, r11
    1c4a:	5c 0d       	add	r21, r12
    1c4c:	6d 2d       	mov	r22, r13
    1c4e:	60 0f       	add	r22, r16
            rect.Ly = 1;
            rect.Lx = tri.l;
			i = rect.Lx;
            do
            {
                draw_rectangle_buffer(rect);
    1c50:	4c 2d       	mov	r20, r12
    1c52:	71 e0       	ldi	r23, 0x01	; 1
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
				full = 0;
    1c5a:	10 92 9e 03 	sts	0x039E, r1
    1c5e:	02 50       	subi	r16, 0x02	; 2
    1c60:	11 09       	sbc	r17, r1
    1c62:	c3 94       	inc	r12
    1c64:	c8 01       	movw	r24, r16
    1c66:	8e 0d       	add	r24, r14
    1c68:	9f 1d       	adc	r25, r15
                rect.Lx -= 2;
				i -= 2;
                rect.pos.y++;
                rect.pos.x++;
            }
            while(i > 0);
    1c6a:	18 16       	cp	r1, r24
    1c6c:	19 06       	cpc	r1, r25
    1c6e:	64 f3       	brlt	.-40     	; 0x1c48 <draw_triangle_buffer+0xc8>
    1c70:	19 c0       	rjmp	.+50     	; 0x1ca4 <draw_triangle_buffer+0x124>
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	b4 0e       	add	r11, r20
    1c78:	e6 2e       	mov	r14, r22
    1c7a:	f1 2c       	mov	r15, r1
    1c7c:	5b 2d       	mov	r21, r11
    1c7e:	5c 19       	sub	r21, r12
    1c80:	6d 2d       	mov	r22, r13
    1c82:	60 0f       	add	r22, r16
            rect.Ly = 1;
            rect.Lx = tri.l;
            i = rect.Lx;
			do
            {
                draw_rectangle_buffer(rect);
    1c84:	4c 2d       	mov	r20, r12
    1c86:	71 e0       	ldi	r23, 0x01	; 1
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
				full = 0;
    1c8e:	10 92 9e 03 	sts	0x039E, r1
    1c92:	02 50       	subi	r16, 0x02	; 2
    1c94:	11 09       	sbc	r17, r1
    1c96:	c3 94       	inc	r12
    1c98:	c8 01       	movw	r24, r16
    1c9a:	8e 0d       	add	r24, r14
    1c9c:	9f 1d       	adc	r25, r15
                rect.Lx -= 2;
				i -= 2;
                rect.pos.y--;
                rect.pos.x++;
            }
            while(i > 0);
    1c9e:	18 16       	cp	r1, r24
    1ca0:	19 06       	cpc	r1, r25
    1ca2:	64 f3       	brlt	.-40     	; 0x1c7c <draw_triangle_buffer+0xfc>
        default:
        {
            break;
        }
    }
}
    1ca4:	2a 96       	adiw	r28, 0x0a	; 10
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
    1cc0:	bf 90       	pop	r11
    1cc2:	08 95       	ret

00001cc4 <animations>:
	print_buffer();
	_delay_ms(2000);
}

void animations(void)
{
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
	send_song_CAN(HARRY_POTTER);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 a2 0b 	call	0x1744	; 0x1744 <send_song_CAN>
	
	clear_buffer();
    1cf2:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	position strin;
	strin.column = 4;
	strin.page = 3;
	
	
	print_string_to_buffer("HAVE FUN WITH", strin);
    1cf6:	63 e0       	ldi	r22, 0x03	; 3
    1cf8:	74 e0       	ldi	r23, 0x04	; 4
    1cfa:	8a e0       	ldi	r24, 0x0A	; 10
    1cfc:	93 e0       	ldi	r25, 0x03	; 3
    1cfe:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	strin.page++;
	print_string_to_buffer("SQUARES AND", strin);
    1d02:	64 e0       	ldi	r22, 0x04	; 4
    1d04:	74 e0       	ldi	r23, 0x04	; 4
    1d06:	88 e1       	ldi	r24, 0x18	; 24
    1d08:	93 e0       	ldi	r25, 0x03	; 3
    1d0a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	strin.page++;
	print_string_to_buffer("TRIANGLES", strin);
    1d0e:	65 e0       	ldi	r22, 0x05	; 5
    1d10:	74 e0       	ldi	r23, 0x04	; 4
    1d12:	84 e2       	ldi	r24, 0x24	; 36
    1d14:	93 e0       	ldi	r25, 0x03	; 3
    1d16:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	
	
	
	while (JOY_getPosition().dir != NEUTRAL);
    1d1a:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	fc cf       	rjmp	.-8      	; 0x1d1a <animations+0x56>

	TRI tri;
	tri.pos.x = 33;
	tri.pos.y = 0;
    1d22:	1f 82       	std	Y+7, r1	; 0x07
	tri.l = 10;
	tri.ori = RIGHT;
	tri.full = FULL;
	draw_triangle_buffer(tri);
    1d24:	81 e2       	ldi	r24, 0x21	; 33
    1d26:	8e 83       	std	Y+6, r24	; 0x06
    1d28:	1a e0       	ldi	r17, 0x0A	; 10
    1d2a:	18 87       	std	Y+8, r17	; 0x08
    1d2c:	19 86       	std	Y+9, r1	; 0x09
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	8a 87       	std	Y+10, r24	; 0x0a
    1d32:	41 e2       	ldi	r20, 0x21	; 33
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	6a e0       	ldi	r22, 0x0A	; 10
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <draw_triangle_buffer>
	
	RECT rect;
	rect.pos.x = 0;
	rect.pos.y = 0;
	rect.Lx = 10;
    1d3e:	1b 83       	std	Y+3, r17	; 0x03
	rect.Ly = 10;
	rect.full = RECT_EMPT;
	draw_rectangle_buffer(rect);
    1d40:	19 82       	std	Y+1, r1	; 0x01
    1d42:	1a 82       	std	Y+2, r1	; 0x02
    1d44:	1c 83       	std	Y+4, r17	; 0x04
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	6a e0       	ldi	r22, 0x0A	; 10
    1d50:	7a e0       	ldi	r23, 0x0A	; 10
    1d52:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
	
	print_buffer();
    1d56:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
    1d5a:	2f ef       	ldi	r18, 0xFF	; 255
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	9d e1       	ldi	r25, 0x1D	; 29
    1d60:	21 50       	subi	r18, 0x01	; 1
    1d62:	80 40       	sbci	r24, 0x00	; 0
    1d64:	90 40       	sbci	r25, 0x00	; 0
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <animations+0x9c>
    1d68:	00 c0       	rjmp	.+0      	; 0x1d6a <animations+0xa6>
    1d6a:	00 00       	nop
	RECT rect;
	rect.pos.x = 0;
	rect.pos.y = 0;
	rect.Lx = 10;
	rect.Ly = 10;
	rect.full = RECT_EMPT;
    1d6c:	bb 24       	eor	r11, r11
    1d6e:	b3 94       	inc	r11
	tri.full = FULL;
	draw_triangle_buffer(tri);
	
	RECT rect;
	rect.pos.x = 0;
	rect.pos.y = 0;
    1d70:	00 e0       	ldi	r16, 0x00	; 0
	tri.ori = RIGHT;
	tri.full = FULL;
	draw_triangle_buffer(tri);
	
	RECT rect;
	rect.pos.x = 0;
    1d72:	e1 2c       	mov	r14, r1

	TRI tri;
	tri.pos.x = 33;
	tri.pos.y = 0;
	tri.l = 10;
	tri.ori = RIGHT;
    1d74:	52 e0       	ldi	r21, 0x02	; 2
    1d76:	f5 2e       	mov	r15, r21
	tri.full = FULL;
    1d78:	d1 2c       	mov	r13, r1
	while (JOY_getPosition().dir != NEUTRAL);

	TRI tri;
	tri.pos.x = 33;
	tri.pos.y = 0;
	tri.l = 10;
    1d7a:	6a e0       	ldi	r22, 0x0A	; 10
    1d7c:	c6 2e       	mov	r12, r22
	
	
	while (JOY_getPosition().dir != NEUTRAL);

	TRI tri;
	tri.pos.x = 33;
    1d7e:	11 e2       	ldi	r17, 0x21	; 33
		clear_buffer();
		tri.pos.x ++;
		if(tri.pos.x + tri.l == 120)
		{
			tri.pos.x = 33;
			tri.pos.y = 33;
    1d80:	71 e2       	ldi	r23, 0x21	; 33
    1d82:	97 2e       	mov	r9, r23
				tri.full = TRI_EMPT;
			else
				tri.full = FULL;
			tri.ori++;
			if(tri.ori == DOWN)
				tri.ori = LEFT;
    1d84:	88 24       	eor	r8, r8
    1d86:	83 94       	inc	r8
		rect.pos.y++;
		if(rect.pos.y + rect.Ly == 50)
		{
			rect.pos.x = 0;
			rect.pos.y = 0;
			rect.Lx = 10;
    1d88:	ea e0       	ldi	r30, 0x0A	; 10
    1d8a:	ae 2e       	mov	r10, r30
	draw_rectangle_buffer(rect);
	
	print_buffer();
	_delay_ms(2000);
	
	while (JOY_getPosition().dir != UP)
    1d8c:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <animations+0xd2>
    1d94:	42 c0       	rjmp	.+132    	; 0x1e1a <animations+0x156>
	{
		clear_buffer();
    1d96:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
		tri.pos.x ++;
    1d9a:	1f 5f       	subi	r17, 0xFF	; 255
		if(tri.pos.x + tri.l == 120)
    1d9c:	2c 2d       	mov	r18, r12
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	21 0f       	add	r18, r17
    1da2:	31 1d       	adc	r19, r1
    1da4:	28 37       	cpi	r18, 0x78	; 120
    1da6:	31 05       	cpc	r19, r1
    1da8:	81 f4       	brne	.+32     	; 0x1dca <animations+0x106>
		{
			tri.pos.x = 33;
			tri.pos.y = 33;
    1daa:	9f 82       	std	Y+7, r9	; 0x07
			tri.l = 20;
			if(tri.full == FULL)
    1dac:	d1 10       	cpse	r13, r1
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <animations+0xf2>
				tri.full = TRI_EMPT;
    1db0:	43 e0       	ldi	r20, 0x03	; 3
    1db2:	d4 2e       	mov	r13, r20
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <animations+0xf4>
			else
				tri.full = FULL;
    1db6:	d1 2c       	mov	r13, r1
			tri.ori++;
    1db8:	f3 94       	inc	r15
			if(tri.ori == DOWN)
    1dba:	24 e0       	ldi	r18, 0x04	; 4
    1dbc:	f2 12       	cpse	r15, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <animations+0x100>
				tri.ori = LEFT;
    1dc0:	ff 24       	eor	r15, r15
    1dc2:	f3 94       	inc	r15
		tri.pos.x ++;
		if(tri.pos.x + tri.l == 120)
		{
			tri.pos.x = 33;
			tri.pos.y = 33;
			tri.l = 20;
    1dc4:	34 e1       	ldi	r19, 0x14	; 20
    1dc6:	c3 2e       	mov	r12, r19
	{
		clear_buffer();
		tri.pos.x ++;
		if(tri.pos.x + tri.l == 120)
		{
			tri.pos.x = 33;
    1dc8:	11 e2       	ldi	r17, 0x21	; 33
				tri.full = FULL;
			tri.ori++;
			if(tri.ori == DOWN)
				tri.ori = LEFT;
		}
		draw_triangle_buffer(tri);
    1dca:	1e 83       	std	Y+6, r17	; 0x06
    1dcc:	c8 86       	std	Y+8, r12	; 0x08
    1dce:	d9 86       	std	Y+9, r13	; 0x09
    1dd0:	fa 86       	std	Y+10, r15	; 0x0a
    1dd2:	41 2f       	mov	r20, r17
    1dd4:	5f 81       	ldd	r21, Y+7	; 0x07
    1dd6:	b6 01       	movw	r22, r12
    1dd8:	8f 2d       	mov	r24, r15
    1dda:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <draw_triangle_buffer>
		
		rect.pos.x += 2;
		rect.pos.y++;
    1dde:	0f 5f       	subi	r16, 0xFF	; 255
		if(rect.pos.y + rect.Ly == 50)
    1de0:	08 32       	cpi	r16, 0x28	; 40
    1de2:	19 f0       	breq	.+6      	; 0x1dea <animations+0x126>
			if(tri.ori == DOWN)
				tri.ori = LEFT;
		}
		draw_triangle_buffer(tri);
		
		rect.pos.x += 2;
    1de4:	e3 94       	inc	r14
    1de6:	e3 94       	inc	r14
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <animations+0x12e>
		rect.pos.y++;
		if(rect.pos.y + rect.Ly == 50)
		{
			rect.pos.x = 0;
			rect.pos.y = 0;
			rect.Lx = 10;
    1dea:	ab 82       	std	Y+3, r10	; 0x03
			rect.Ly = 10;
			if(rect.full == FULL)
				rect.full = RECT_EMPT;
    1dec:	b8 24       	eor	r11, r8
		rect.pos.x += 2;
		rect.pos.y++;
		if(rect.pos.y + rect.Ly == 50)
		{
			rect.pos.x = 0;
			rect.pos.y = 0;
    1dee:	00 e0       	ldi	r16, 0x00	; 0
		
		rect.pos.x += 2;
		rect.pos.y++;
		if(rect.pos.y + rect.Ly == 50)
		{
			rect.pos.x = 0;
    1df0:	e1 2c       	mov	r14, r1
			if(rect.full == FULL)
				rect.full = RECT_EMPT;
			else
				rect.full = FULL;
		}
		draw_rectangle_buffer(rect);
    1df2:	e9 82       	std	Y+1, r14	; 0x01
    1df4:	0a 83       	std	Y+2, r16	; 0x02
    1df6:	ac 82       	std	Y+4, r10	; 0x04
    1df8:	bd 82       	std	Y+5, r11	; 0x05
    1dfa:	4e 2d       	mov	r20, r14
    1dfc:	50 2f       	mov	r21, r16
    1dfe:	6b 81       	ldd	r22, Y+3	; 0x03
    1e00:	7a e0       	ldi	r23, 0x0A	; 10
    1e02:	8b 2d       	mov	r24, r11
    1e04:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <draw_rectangle_buffer>
		
		print_buffer();
    1e08:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	9f e2       	ldi	r25, 0x2F	; 47
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <animations+0x14c>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <animations+0x152>
    1e16:	00 00       	nop
    1e18:	b9 cf       	rjmp	.-142    	; 0x1d8c <animations+0xc8>
	
	send_stop_CAN();
		
	

}
    1e1a:	2a 96       	adiw	r28, 0x0a	; 10
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	bf 90       	pop	r11
    1e38:	af 90       	pop	r10
    1e3a:	9f 90       	pop	r9
    1e3c:	8f 90       	pop	r8
		
		print_buffer();
		_delay_ms(10);	
	}
	
	send_stop_CAN();
    1e3e:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <send_stop_CAN>

00001e42 <assignParents>:
		printf("Menu out of memory\n");
	return _mnode;
}

static void assignParents(MenuNode* node)
{
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1e4a:	10 e0       	ldi	r17, 0x00	; 0
    1e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4e:	18 17       	cp	r17, r24
    1e50:	a0 f4       	brcc	.+40     	; 0x1e7a <assignParents+0x38>
	{
		node->m_submenus[i]->m_parent = node;
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	8e 81       	ldd	r24, Y+6	; 0x06
    1e56:	e9 2f       	mov	r30, r25
    1e58:	f8 2f       	mov	r31, r24
    1e5a:	e1 0f       	add	r30, r17
    1e5c:	f1 1d       	adc	r31, r1
    1e5e:	e1 0f       	add	r30, r17
    1e60:	f1 1d       	adc	r31, r1
    1e62:	a0 81       	ld	r26, Z
    1e64:	b1 81       	ldd	r27, Z+1	; 0x01
    1e66:	14 96       	adiw	r26, 0x04	; 4
    1e68:	dc 93       	st	X, r29
    1e6a:	ce 93       	st	-X, r28
    1e6c:	13 97       	sbiw	r26, 0x03	; 3
		assignParents(node->m_submenus[i]);
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <assignParents>
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1e76:	1f 5f       	subi	r17, 0xFF	; 255
    1e78:	e9 cf       	rjmp	.-46     	; 0x1e4c <assignParents+0xa>
	{
		node->m_submenus[i]->m_parent = node;
		assignParents(node->m_submenus[i]);
	}	
}
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	08 95       	ret

00001e82 <createMenuNode>:
extern void animations(void);

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
	static uint16_t current_adress = 0x1C00;
	
	MenuNode* _mnode = (void *) current_adress;
    1e86:	c0 91 0d 01 	lds	r28, 0x010D
    1e8a:	d0 91 0e 01 	lds	r29, 0x010E
	current_adress += sizeof(MenuNode);
    1e8e:	9e 01       	movw	r18, r28
    1e90:	28 5f       	subi	r18, 0xF8	; 248
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255

	_mnode->m_submenus = (void *) current_adress;
    1e94:	3e 83       	std	Y+6, r19	; 0x06
    1e96:	2d 83       	std	Y+5, r18	; 0x05
	current_adress += num_of_submenus * sizeof(MenuNode *);
    1e98:	24 0f       	add	r18, r20
    1e9a:	31 1d       	adc	r19, r1
    1e9c:	24 0f       	add	r18, r20
    1e9e:	31 1d       	adc	r19, r1
    1ea0:	30 93 0e 01 	sts	0x010E, r19
    1ea4:	20 93 0d 01 	sts	0x010D, r18

	_mnode->m_num_submenus = num_of_submenus;
    1ea8:	4f 83       	std	Y+7, r20	; 0x07
	_mnode->m_content.title_id = title_id;
    1eaa:	88 83       	st	Y, r24
	//printf("title id: %d, memory addr: 0x%02x\n", title_id, current_adress - num_of_submenus * sizeof(MenuNode *));
	_mnode->m_content.operation = operation;
    1eac:	7a 83       	std	Y+2, r23	; 0x02
    1eae:	69 83       	std	Y+1, r22	; 0x01
	
	if(current_adress >= 0x1FFF)
    1eb0:	2f 3f       	cpi	r18, 0xFF	; 255
    1eb2:	3f 41       	sbci	r19, 0x1F	; 31
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <createMenuNode+0x3c>
		printf("Menu out of memory\n");
    1eb6:	8e e2       	ldi	r24, 0x2E	; 46
    1eb8:	93 e0       	ldi	r25, 0x03	; 3
    1eba:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
	return _mnode;
}
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <createMenu>:
	return _menu;
}


void createMenu(void)
{
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
	_menu = createMenuNode(0, NULL, 5);
    1eca:	45 e0       	ldi	r20, 0x05	; 5
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1ed6:	90 93 a0 03 	sts	0x03A0, r25
    1eda:	80 93 9f 03 	sts	0x039F, r24
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
    1ede:	fc 01       	movw	r30, r24
    1ee0:	c5 81       	ldd	r28, Z+5	; 0x05
    1ee2:	d6 81       	ldd	r29, Z+6	; 0x06
    1ee4:	42 e0       	ldi	r20, 0x02	; 2
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1ef0:	99 83       	std	Y+1, r25	; 0x01
    1ef2:	88 83       	st	Y, r24
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &playPingPong, 0);
    1ef4:	e0 91 9f 03 	lds	r30, 0x039F
    1ef8:	f0 91 a0 03 	lds	r31, 0x03A0
    1efc:	05 80       	ldd	r0, Z+5	; 0x05
    1efe:	f6 81       	ldd	r31, Z+6	; 0x06
    1f00:	e0 2d       	mov	r30, r0
    1f02:	01 90       	ld	r0, Z+
    1f04:	f0 81       	ld	r31, Z
    1f06:	e0 2d       	mov	r30, r0
    1f08:	c5 81       	ldd	r28, Z+5	; 0x05
    1f0a:	d6 81       	ldd	r29, Z+6	; 0x06
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	6b ea       	ldi	r22, 0xAB	; 171
    1f10:	79 e0       	ldi	r23, 0x09	; 9
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1f18:	99 83       	std	Y+1, r25	; 0x01
    1f1a:	88 83       	st	Y, r24
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &ping_pong_idle, 0);
    1f1c:	e0 91 9f 03 	lds	r30, 0x039F
    1f20:	f0 91 a0 03 	lds	r31, 0x03A0
    1f24:	05 80       	ldd	r0, Z+5	; 0x05
    1f26:	f6 81       	ldd	r31, Z+6	; 0x06
    1f28:	e0 2d       	mov	r30, r0
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	f0 81       	ld	r31, Z
    1f2e:	e0 2d       	mov	r30, r0
    1f30:	c5 81       	ldd	r28, Z+5	; 0x05
    1f32:	d6 81       	ldd	r29, Z+6	; 0x06
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	61 e9       	ldi	r22, 0x91	; 145
    1f38:	76 e0       	ldi	r23, 0x06	; 6
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1f40:	9b 83       	std	Y+3, r25	; 0x03
    1f42:	8a 83       	std	Y+2, r24	; 0x02
	_menu->m_submenus[1] = createMenuNode(5, NULL, 3);
    1f44:	e0 91 9f 03 	lds	r30, 0x039F
    1f48:	f0 91 a0 03 	lds	r31, 0x03A0
    1f4c:	c5 81       	ldd	r28, Z+5	; 0x05
    1f4e:	d6 81       	ldd	r29, Z+6	; 0x06
    1f50:	43 e0       	ldi	r20, 0x03	; 3
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1f5c:	9b 83       	std	Y+3, r25	; 0x03
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
	_menu->m_submenus[1]->m_submenus[0] = createMenuNode(8, &calibrateJoystick, 0);
    1f60:	e0 91 9f 03 	lds	r30, 0x039F
    1f64:	f0 91 a0 03 	lds	r31, 0x03A0
    1f68:	05 80       	ldd	r0, Z+5	; 0x05
    1f6a:	f6 81       	ldd	r31, Z+6	; 0x06
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	02 80       	ldd	r0, Z+2	; 0x02
    1f70:	f3 81       	ldd	r31, Z+3	; 0x03
    1f72:	e0 2d       	mov	r30, r0
    1f74:	c5 81       	ldd	r28, Z+5	; 0x05
    1f76:	d6 81       	ldd	r29, Z+6	; 0x06
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	64 e0       	ldi	r22, 0x04	; 4
    1f7c:	73 e1       	ldi	r23, 0x13	; 19
    1f7e:	88 e0       	ldi	r24, 0x08	; 8
    1f80:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1f84:	99 83       	std	Y+1, r25	; 0x01
    1f86:	88 83       	st	Y, r24
	_menu->m_submenus[1]->m_submenus[1] = createMenuNode(9, NULL, 2);
    1f88:	e0 91 9f 03 	lds	r30, 0x039F
    1f8c:	f0 91 a0 03 	lds	r31, 0x03A0
    1f90:	05 80       	ldd	r0, Z+5	; 0x05
    1f92:	f6 81       	ldd	r31, Z+6	; 0x06
    1f94:	e0 2d       	mov	r30, r0
    1f96:	02 80       	ldd	r0, Z+2	; 0x02
    1f98:	f3 81       	ldd	r31, Z+3	; 0x03
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	c5 81       	ldd	r28, Z+5	; 0x05
    1f9e:	d6 81       	ldd	r29, Z+6	; 0x06
    1fa0:	42 e0       	ldi	r20, 0x02	; 2
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	89 e0       	ldi	r24, 0x09	; 9
    1fa8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1fac:	9b 83       	std	Y+3, r25	; 0x03
    1fae:	8a 83       	std	Y+2, r24	; 0x02
	_menu->m_submenus[1]->m_submenus[1]->m_submenus[0] = createMenuNode(10, NULL, 0);
    1fb0:	e0 91 9f 03 	lds	r30, 0x039F
    1fb4:	f0 91 a0 03 	lds	r31, 0x03A0
    1fb8:	05 80       	ldd	r0, Z+5	; 0x05
    1fba:	f6 81       	ldd	r31, Z+6	; 0x06
    1fbc:	e0 2d       	mov	r30, r0
    1fbe:	02 80       	ldd	r0, Z+2	; 0x02
    1fc0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	05 80       	ldd	r0, Z+5	; 0x05
    1fc6:	f6 81       	ldd	r31, Z+6	; 0x06
    1fc8:	e0 2d       	mov	r30, r0
    1fca:	02 80       	ldd	r0, Z+2	; 0x02
    1fcc:	f3 81       	ldd	r31, Z+3	; 0x03
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	c5 81       	ldd	r28, Z+5	; 0x05
    1fd2:	d6 81       	ldd	r29, Z+6	; 0x06
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	8a e0       	ldi	r24, 0x0A	; 10
    1fdc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    1fe0:	99 83       	std	Y+1, r25	; 0x01
    1fe2:	88 83       	st	Y, r24
	_menu->m_submenus[1]->m_submenus[1]->m_submenus[1] = createMenuNode(11, NULL, 0);
    1fe4:	e0 91 9f 03 	lds	r30, 0x039F
    1fe8:	f0 91 a0 03 	lds	r31, 0x03A0
    1fec:	05 80       	ldd	r0, Z+5	; 0x05
    1fee:	f6 81       	ldd	r31, Z+6	; 0x06
    1ff0:	e0 2d       	mov	r30, r0
    1ff2:	02 80       	ldd	r0, Z+2	; 0x02
    1ff4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ff6:	e0 2d       	mov	r30, r0
    1ff8:	05 80       	ldd	r0, Z+5	; 0x05
    1ffa:	f6 81       	ldd	r31, Z+6	; 0x06
    1ffc:	e0 2d       	mov	r30, r0
    1ffe:	02 80       	ldd	r0, Z+2	; 0x02
    2000:	f3 81       	ldd	r31, Z+3	; 0x03
    2002:	e0 2d       	mov	r30, r0
    2004:	c5 81       	ldd	r28, Z+5	; 0x05
    2006:	d6 81       	ldd	r29, Z+6	; 0x06
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	8b e0       	ldi	r24, 0x0B	; 11
    2010:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2014:	9b 83       	std	Y+3, r25	; 0x03
    2016:	8a 83       	std	Y+2, r24	; 0x02
	_menu->m_submenus[1]->m_submenus[2] = createMenuNode(35, &irSettings, 0);
    2018:	e0 91 9f 03 	lds	r30, 0x039F
    201c:	f0 91 a0 03 	lds	r31, 0x03A0
    2020:	05 80       	ldd	r0, Z+5	; 0x05
    2022:	f6 81       	ldd	r31, Z+6	; 0x06
    2024:	e0 2d       	mov	r30, r0
    2026:	02 80       	ldd	r0, Z+2	; 0x02
    2028:	f3 81       	ldd	r31, Z+3	; 0x03
    202a:	e0 2d       	mov	r30, r0
    202c:	c5 81       	ldd	r28, Z+5	; 0x05
    202e:	d6 81       	ldd	r29, Z+6	; 0x06
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	6e e2       	ldi	r22, 0x2E	; 46
    2034:	7b e0       	ldi	r23, 0x0B	; 11
    2036:	83 e2       	ldi	r24, 0x23	; 35
    2038:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    203c:	9d 83       	std	Y+5, r25	; 0x05
    203e:	8c 83       	std	Y+4, r24	; 0x04
	_menu->m_submenus[2] = createMenuNode(12, NULL, 8);
    2040:	e0 91 9f 03 	lds	r30, 0x039F
    2044:	f0 91 a0 03 	lds	r31, 0x03A0
    2048:	c5 81       	ldd	r28, Z+5	; 0x05
    204a:	d6 81       	ldd	r29, Z+6	; 0x06
    204c:	48 e0       	ldi	r20, 0x08	; 8
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	8c e0       	ldi	r24, 0x0C	; 12
    2054:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2058:	9d 83       	std	Y+5, r25	; 0x05
    205a:	8c 83       	std	Y+4, r24	; 0x04
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(13, &song_harry_potter, 0);
    205c:	e0 91 9f 03 	lds	r30, 0x039F
    2060:	f0 91 a0 03 	lds	r31, 0x03A0
    2064:	05 80       	ldd	r0, Z+5	; 0x05
    2066:	f6 81       	ldd	r31, Z+6	; 0x06
    2068:	e0 2d       	mov	r30, r0
    206a:	04 80       	ldd	r0, Z+4	; 0x04
    206c:	f5 81       	ldd	r31, Z+5	; 0x05
    206e:	e0 2d       	mov	r30, r0
    2070:	c5 81       	ldd	r28, Z+5	; 0x05
    2072:	d6 81       	ldd	r29, Z+6	; 0x06
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	63 eb       	ldi	r22, 0xB3	; 179
    2078:	7c e0       	ldi	r23, 0x0C	; 12
    207a:	8d e0       	ldi	r24, 0x0D	; 13
    207c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2080:	99 83       	std	Y+1, r25	; 0x01
    2082:	88 83       	st	Y, r24
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(14, &song_tetris, 0);
    2084:	e0 91 9f 03 	lds	r30, 0x039F
    2088:	f0 91 a0 03 	lds	r31, 0x03A0
    208c:	05 80       	ldd	r0, Z+5	; 0x05
    208e:	f6 81       	ldd	r31, Z+6	; 0x06
    2090:	e0 2d       	mov	r30, r0
    2092:	04 80       	ldd	r0, Z+4	; 0x04
    2094:	f5 81       	ldd	r31, Z+5	; 0x05
    2096:	e0 2d       	mov	r30, r0
    2098:	c5 81       	ldd	r28, Z+5	; 0x05
    209a:	d6 81       	ldd	r29, Z+6	; 0x06
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	6e ec       	ldi	r22, 0xCE	; 206
    20a0:	7c e0       	ldi	r23, 0x0C	; 12
    20a2:	8e e0       	ldi	r24, 0x0E	; 14
    20a4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(15, &song_cantina_band, 0);
    20ac:	e0 91 9f 03 	lds	r30, 0x039F
    20b0:	f0 91 a0 03 	lds	r31, 0x03A0
    20b4:	05 80       	ldd	r0, Z+5	; 0x05
    20b6:	f6 81       	ldd	r31, Z+6	; 0x06
    20b8:	e0 2d       	mov	r30, r0
    20ba:	04 80       	ldd	r0, Z+4	; 0x04
    20bc:	f5 81       	ldd	r31, Z+5	; 0x05
    20be:	e0 2d       	mov	r30, r0
    20c0:	c5 81       	ldd	r28, Z+5	; 0x05
    20c2:	d6 81       	ldd	r29, Z+6	; 0x06
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	6c eb       	ldi	r22, 0xBC	; 188
    20c8:	7c e0       	ldi	r23, 0x0C	; 12
    20ca:	8f e0       	ldi	r24, 0x0F	; 15
    20cc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    20d0:	9d 83       	std	Y+5, r25	; 0x05
    20d2:	8c 83       	std	Y+4, r24	; 0x04
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(16, &song_pokemon, 0);
    20d4:	e0 91 9f 03 	lds	r30, 0x039F
    20d8:	f0 91 a0 03 	lds	r31, 0x03A0
    20dc:	05 80       	ldd	r0, Z+5	; 0x05
    20de:	f6 81       	ldd	r31, Z+6	; 0x06
    20e0:	e0 2d       	mov	r30, r0
    20e2:	04 80       	ldd	r0, Z+4	; 0x04
    20e4:	f5 81       	ldd	r31, Z+5	; 0x05
    20e6:	e0 2d       	mov	r30, r0
    20e8:	c5 81       	ldd	r28, Z+5	; 0x05
    20ea:	d6 81       	ldd	r29, Z+6	; 0x06
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	65 ec       	ldi	r22, 0xC5	; 197
    20f0:	7c e0       	ldi	r23, 0x0C	; 12
    20f2:	80 e1       	ldi	r24, 0x10	; 16
    20f4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    20f8:	9f 83       	std	Y+7, r25	; 0x07
    20fa:	8e 83       	std	Y+6, r24	; 0x06
	_menu->m_submenus[2]->m_submenus[4] = createMenuNode(17, &song_octaves, 0);
    20fc:	e0 91 9f 03 	lds	r30, 0x039F
    2100:	f0 91 a0 03 	lds	r31, 0x03A0
    2104:	05 80       	ldd	r0, Z+5	; 0x05
    2106:	f6 81       	ldd	r31, Z+6	; 0x06
    2108:	e0 2d       	mov	r30, r0
    210a:	04 80       	ldd	r0, Z+4	; 0x04
    210c:	f5 81       	ldd	r31, Z+5	; 0x05
    210e:	e0 2d       	mov	r30, r0
    2110:	c5 81       	ldd	r28, Z+5	; 0x05
    2112:	d6 81       	ldd	r29, Z+6	; 0x06
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	67 ed       	ldi	r22, 0xD7	; 215
    2118:	7c e0       	ldi	r23, 0x0C	; 12
    211a:	81 e1       	ldi	r24, 0x11	; 17
    211c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2120:	99 87       	std	Y+9, r25	; 0x09
    2122:	88 87       	std	Y+8, r24	; 0x08
	_menu->m_submenus[2]->m_submenus[5] = createMenuNode(18, &song_merry_x_mas, 0);
    2124:	e0 91 9f 03 	lds	r30, 0x039F
    2128:	f0 91 a0 03 	lds	r31, 0x03A0
    212c:	05 80       	ldd	r0, Z+5	; 0x05
    212e:	f6 81       	ldd	r31, Z+6	; 0x06
    2130:	e0 2d       	mov	r30, r0
    2132:	04 80       	ldd	r0, Z+4	; 0x04
    2134:	f5 81       	ldd	r31, Z+5	; 0x05
    2136:	e0 2d       	mov	r30, r0
    2138:	c5 81       	ldd	r28, Z+5	; 0x05
    213a:	d6 81       	ldd	r29, Z+6	; 0x06
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	62 ef       	ldi	r22, 0xF2	; 242
    2140:	7c e0       	ldi	r23, 0x0C	; 12
    2142:	82 e1       	ldi	r24, 0x12	; 18
    2144:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2148:	9b 87       	std	Y+11, r25	; 0x0b
    214a:	8a 87       	std	Y+10, r24	; 0x0a
	_menu->m_submenus[2]->m_submenus[6] = createMenuNode(19, &song_jingle_bells, 0);
    214c:	e0 91 9f 03 	lds	r30, 0x039F
    2150:	f0 91 a0 03 	lds	r31, 0x03A0
    2154:	05 80       	ldd	r0, Z+5	; 0x05
    2156:	f6 81       	ldd	r31, Z+6	; 0x06
    2158:	e0 2d       	mov	r30, r0
    215a:	04 80       	ldd	r0, Z+4	; 0x04
    215c:	f5 81       	ldd	r31, Z+5	; 0x05
    215e:	e0 2d       	mov	r30, r0
    2160:	c5 81       	ldd	r28, Z+5	; 0x05
    2162:	d6 81       	ldd	r29, Z+6	; 0x06
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	60 ee       	ldi	r22, 0xE0	; 224
    2168:	7c e0       	ldi	r23, 0x0C	; 12
    216a:	83 e1       	ldi	r24, 0x13	; 19
    216c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2170:	9d 87       	std	Y+13, r25	; 0x0d
    2172:	8c 87       	std	Y+12, r24	; 0x0c
	_menu->m_submenus[2]->m_submenus[7] = createMenuNode(20, &song_last_christmas, 0);
    2174:	e0 91 9f 03 	lds	r30, 0x039F
    2178:	f0 91 a0 03 	lds	r31, 0x03A0
    217c:	05 80       	ldd	r0, Z+5	; 0x05
    217e:	f6 81       	ldd	r31, Z+6	; 0x06
    2180:	e0 2d       	mov	r30, r0
    2182:	04 80       	ldd	r0, Z+4	; 0x04
    2184:	f5 81       	ldd	r31, Z+5	; 0x05
    2186:	e0 2d       	mov	r30, r0
    2188:	c5 81       	ldd	r28, Z+5	; 0x05
    218a:	d6 81       	ldd	r29, Z+6	; 0x06
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	69 ee       	ldi	r22, 0xE9	; 233
    2190:	7c e0       	ldi	r23, 0x0C	; 12
    2192:	84 e1       	ldi	r24, 0x14	; 20
    2194:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    2198:	9f 87       	std	Y+15, r25	; 0x0f
    219a:	8e 87       	std	Y+14, r24	; 0x0e
	_menu->m_submenus[3] = createMenuNode(44, &animations, 0);
    219c:	e0 91 9f 03 	lds	r30, 0x039F
    21a0:	f0 91 a0 03 	lds	r31, 0x03A0
    21a4:	c5 81       	ldd	r28, Z+5	; 0x05
    21a6:	d6 81       	ldd	r29, Z+6	; 0x06
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	62 e6       	ldi	r22, 0x62	; 98
    21ac:	7e e0       	ldi	r23, 0x0E	; 14
    21ae:	8c e2       	ldi	r24, 0x2C	; 44
    21b0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    21b4:	9f 83       	std	Y+7, r25	; 0x07
    21b6:	8e 83       	std	Y+6, r24	; 0x06
	_menu->m_submenus[4] = createMenuNode(43, &printGreetings, 0);
    21b8:	e0 91 9f 03 	lds	r30, 0x039F
    21bc:	f0 91 a0 03 	lds	r31, 0x03A0
    21c0:	c5 81       	ldd	r28, Z+5	; 0x05
    21c2:	d6 81       	ldd	r29, Z+6	; 0x06
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	61 eb       	ldi	r22, 0xB1	; 177
    21c8:	74 e1       	ldi	r23, 0x14	; 20
    21ca:	8b e2       	ldi	r24, 0x2B	; 43
    21cc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <createMenuNode>
    21d0:	99 87       	std	Y+9, r25	; 0x09
    21d2:	88 87       	std	Y+8, r24	; 0x08
	assignParents(_menu);
    21d4:	80 91 9f 03 	lds	r24, 0x039F
    21d8:	90 91 a0 03 	lds	r25, 0x03A0
    21dc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <assignParents>
	printf("PARENTS ASSIGNED\n");
    21e0:	81 e4       	ldi	r24, 0x41	; 65
    21e2:	93 e0       	ldi	r25, 0x03	; 3
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
	_menu->m_submenus[2]->m_submenus[6] = createMenuNode(19, &song_jingle_bells, 0);
	_menu->m_submenus[2]->m_submenus[7] = createMenuNode(20, &song_last_christmas, 0);
	_menu->m_submenus[3] = createMenuNode(44, &animations, 0);
	_menu->m_submenus[4] = createMenuNode(43, &printGreetings, 0);
	assignParents(_menu);
	printf("PARENTS ASSIGNED\n");
    21e8:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>

000021ec <getMenuRoot>:
	}	
}

MenuNode* getMenuRoot(void)
{
	createMenu();
    21ec:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <createMenu>
	return _menu;
}
    21f0:	80 91 9f 03 	lds	r24, 0x039F
    21f4:	90 91 a0 03 	lds	r25, 0x03A0
    21f8:	08 95       	ret

000021fa <getNextEntry>:
	assignParents(_menu);
	printf("PARENTS ASSIGNED\n");
}

MenuNode* getNextEntry(MenuNode* node)
{
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	fc 01       	movw	r30, r24
	if(node->m_parent)
    2202:	a3 81       	ldd	r26, Z+3	; 0x03
    2204:	b4 81       	ldd	r27, Z+4	; 0x04
    2206:	10 97       	sbiw	r26, 0x00	; 0
    2208:	21 f1       	breq	.+72     	; 0x2252 <getNextEntry+0x58>
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
    220a:	17 96       	adiw	r26, 0x07	; 7
    220c:	8c 91       	ld	r24, X
    220e:	17 97       	sbiw	r26, 0x07	; 7
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	10 e0       	ldi	r17, 0x00	; 0
    2216:	21 2f       	mov	r18, r17
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	28 17       	cp	r18, r24
    221c:	39 07       	cpc	r19, r25
    221e:	cc f4       	brge	.+50     	; 0x2252 <getNextEntry+0x58>
			if(node->m_parent->m_submenus[i] == node)
    2220:	15 96       	adiw	r26, 0x05	; 5
    2222:	4d 91       	ld	r20, X+
    2224:	5c 91       	ld	r21, X
    2226:	16 97       	sbiw	r26, 0x06	; 6
    2228:	e9 01       	movw	r28, r18
    222a:	cc 0f       	add	r28, r28
    222c:	dd 1f       	adc	r29, r29
    222e:	c4 0f       	add	r28, r20
    2230:	d5 1f       	adc	r29, r21
    2232:	68 81       	ld	r22, Y
    2234:	79 81       	ldd	r23, Y+1	; 0x01
    2236:	6e 17       	cp	r22, r30
    2238:	7f 07       	cpc	r23, r31
    223a:	49 f4       	brne	.+18     	; 0x224e <getNextEntry+0x54>
	  		return node->m_parent->m_submenus[i+1];
    223c:	f9 01       	movw	r30, r18
    223e:	31 96       	adiw	r30, 0x01	; 1
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	e4 0f       	add	r30, r20
    2246:	f5 1f       	adc	r31, r21
    2248:	80 81       	ld	r24, Z
    224a:	91 81       	ldd	r25, Z+1	; 0x01
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <getNextEntry+0x5a>
}

MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
    224e:	1f 5f       	subi	r17, 0xFF	; 255
    2250:	e2 cf       	rjmp	.-60     	; 0x2216 <getNextEntry+0x1c>
    2252:	cf 01       	movw	r24, r30
			if(node->m_parent->m_submenus[i] == node)
	  		return node->m_parent->m_submenus[i+1];
	return node;
}
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	08 95       	ret

0000225c <getPreviousEntry>:

MenuNode* getPreviousEntry(MenuNode* node)
{
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	fc 01       	movw	r30, r24
	if(node->m_parent)
    2264:	a3 81       	ldd	r26, Z+3	; 0x03
    2266:	b4 81       	ldd	r27, Z+4	; 0x04
    2268:	10 97       	sbiw	r26, 0x00	; 0
    226a:	21 f1       	breq	.+72     	; 0x22b4 <getPreviousEntry+0x58>
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
    226c:	17 96       	adiw	r26, 0x07	; 7
    226e:	1c 91       	ld	r17, X
    2270:	17 97       	sbiw	r26, 0x07	; 7
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	81 17       	cp	r24, r17
    2278:	e8 f4       	brcc	.+58     	; 0x22b4 <getPreviousEntry+0x58>
			if(node->m_parent->m_submenus[i] == node)
    227a:	15 96       	adiw	r26, 0x05	; 5
    227c:	2d 91       	ld	r18, X+
    227e:	3c 91       	ld	r19, X
    2280:	16 97       	sbiw	r26, 0x06	; 6
    2282:	ac 01       	movw	r20, r24
    2284:	4f 5f       	subi	r20, 0xFF	; 255
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	ec 01       	movw	r28, r24
    228a:	cc 0f       	add	r28, r28
    228c:	dd 1f       	adc	r29, r29
    228e:	c2 0f       	add	r28, r18
    2290:	d3 1f       	adc	r29, r19
    2292:	68 81       	ld	r22, Y
    2294:	79 81       	ldd	r23, Y+1	; 0x01
    2296:	6e 17       	cp	r22, r30
    2298:	7f 07       	cpc	r23, r31
    229a:	51 f4       	brne	.+20     	; 0x22b0 <getPreviousEntry+0x54>
				return node->m_parent->m_submenus[i-1];
    229c:	fc 01       	movw	r30, r24
    229e:	e1 50       	subi	r30, 0x01	; 1
    22a0:	f0 48       	sbci	r31, 0x80	; 128
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	e2 0f       	add	r30, r18
    22a8:	f3 1f       	adc	r31, r19
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <getPreviousEntry+0x5a>

MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
			if(node->m_parent->m_submenus[i] == node)
    22b0:	ca 01       	movw	r24, r20
    22b2:	e1 cf       	rjmp	.-62     	; 0x2276 <getPreviousEntry+0x1a>
    22b4:	cf 01       	movw	r24, r30
				return node->m_parent->m_submenus[i-1];
	return node;
}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	08 95       	ret

000022be <menuLevelDown>:

MenuNode* menuLevelDown(MenuNode* const node, uint8_t index_of_submenu)
{
    22be:	fc 01       	movw	r30, r24
	if(0 <= index_of_submenu && index_of_submenu <= node->m_num_submenus)
    22c0:	87 81       	ldd	r24, Z+7	; 0x07
    22c2:	86 17       	cp	r24, r22
    22c4:	58 f0       	brcs	.+22     	; 0x22dc <menuLevelDown+0x1e>
		return node->m_submenus[index_of_submenu];
    22c6:	95 81       	ldd	r25, Z+5	; 0x05
    22c8:	86 81       	ldd	r24, Z+6	; 0x06
    22ca:	e9 2f       	mov	r30, r25
    22cc:	f8 2f       	mov	r31, r24
    22ce:	e6 0f       	add	r30, r22
    22d0:	f1 1d       	adc	r31, r1
    22d2:	e6 0f       	add	r30, r22
    22d4:	f1 1d       	adc	r31, r1
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	08 95       	ret
	return node;
    22dc:	cf 01       	movw	r24, r30
}
    22de:	08 95       	ret

000022e0 <menuLevelUp>:

MenuNode* menuLevelUp(MenuNode* const node)
{
    22e0:	fc 01       	movw	r30, r24
	if(node <= (MenuNode *) 0x1C00)
    22e2:	e1 30       	cpi	r30, 0x01	; 1
    22e4:	8c e1       	ldi	r24, 0x1C	; 28
    22e6:	f8 07       	cpc	r31, r24
    22e8:	20 f0       	brcs	.+8      	; 0x22f2 <menuLevelUp+0x12>
		return node;
	if(node->m_parent)
    22ea:	83 81       	ldd	r24, Z+3	; 0x03
    22ec:	94 81       	ldd	r25, Z+4	; 0x04
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <menuLevelUp+0x14>
    22f2:	cf 01       	movw	r24, r30
		return node->m_parent;
	return node;
}
    22f4:	08 95       	ret

000022f6 <main_init>:
JOY_POS joy_pos;

uint8_t current_selection = 0;

void main_init(void)
{
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	2b 97       	sbiw	r28, 0x0b	; 11
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
	cli();
    2312:	f8 94       	cli
	uart_init();
    2314:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <uart_init>
	printf("start init\n");
    2318:	82 e5       	ldi	r24, 0x52	; 82
    231a:	93 e0       	ldi	r25, 0x03	; 3
    231c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
	sram_init();
    2320:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <sram_init>
	adc_init();
    2324:	0e 94 4e 03 	call	0x69c	; 0x69c <adc_init>
	USB_init();
    2328:	0e 94 ef 12 	call	0x25de	; 0x25de <USB_init>
	can_init();
    232c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <can_init>
	oled_init();
    2330:	0e 94 39 14 	call	0x2872	; 0x2872 <oled_init>
	menu_main = getMenuRoot();
    2334:	0e 94 f6 10 	call	0x21ec	; 0x21ec <getMenuRoot>
    2338:	90 93 ec 03 	sts	0x03EC, r25
    233c:	80 93 eb 03 	sts	0x03EB, r24
	send_stop_CAN();
    2340:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <send_stop_CAN>
	can_message song_msg = { .id = STOP_PING_PONG, .length = 0 };
    2344:	fe 01       	movw	r30, r28
    2346:	31 96       	adiw	r30, 0x01	; 1
    2348:	8b e0       	ldi	r24, 0x0B	; 11
    234a:	df 01       	movw	r26, r30
    234c:	1d 92       	st	X+, r1
    234e:	8a 95       	dec	r24
    2350:	e9 f7       	brne	.-6      	; 0x234c <main_init+0x56>
    2352:	86 e0       	ldi	r24, 0x06	; 6
    2354:	e8 2e       	mov	r14, r24
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	1a 82       	std	Y+2, r1	; 0x02
	can_message_send(song_msg);
    235a:	f1 2c       	mov	r15, r1
    235c:	0b 81       	ldd	r16, Y+3	; 0x03
    235e:	1c 81       	ldd	r17, Y+4	; 0x04
    2360:	2d 81       	ldd	r18, Y+5	; 0x05
    2362:	3e 81       	ldd	r19, Y+6	; 0x06
    2364:	4f 81       	ldd	r20, Y+7	; 0x07
    2366:	58 85       	ldd	r21, Y+8	; 0x08
    2368:	69 85       	ldd	r22, Y+9	; 0x09
    236a:	7a 85       	ldd	r23, Y+10	; 0x0a
    236c:	8b 85       	ldd	r24, Y+11	; 0x0b
    236e:	0e 94 a2 03 	call	0x744	; 0x744 <can_message_send>
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	9f e2       	ldi	r25, 0x2F	; 47
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <main_init+0x80>
    237a:	00 c0       	rjmp	.+0      	; 0x237c <main_init+0x86>
    237c:	00 00       	nop
	_delay_ms(10);
	sei();
    237e:	78 94       	sei
	printf("INIT DONE\n");
    2380:	8d e5       	ldi	r24, 0x5D	; 93
    2382:	93 e0       	ldi	r25, 0x03	; 3
}
    2384:	2b 96       	adiw	r28, 0x0b	; 11
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
	send_stop_CAN();
	can_message song_msg = { .id = STOP_PING_PONG, .length = 0 };
	can_message_send(song_msg);
	_delay_ms(10);
	sei();
	printf("INIT DONE\n");
    239c:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <puts>

000023a0 <main>:
}

int main(void)
{
	main_init();
    23a0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <main_init>
	
	//say hello to the guy in front of the display
	sayHello();
    23a4:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <sayHello>

	while(1)
	{

		joy_pos = JOY_getPosition();
    23a8:	0e 94 05 13 	call	0x260a	; 0x260a <JOY_getPosition>
    23ac:	60 93 e8 03 	sts	0x03E8, r22
    23b0:	70 93 e9 03 	sts	0x03E9, r23
    23b4:	80 93 ea 03 	sts	0x03EA, r24
    23b8:	8f ef       	ldi	r24, 0xFF	; 255
    23ba:	9f e2       	ldi	r25, 0x2F	; 47
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x1c>
    23c0:	00 c0       	rjmp	.+0      	; 0x23c2 <main+0x22>
    23c2:	00 00       	nop
		//printf("joy pos: %d, %d, %d \n", joy_pos.dir, joy_pos.x, joy_pos.y);
		
		_delay_ms(10);

		switch(joy_pos.dir)
    23c4:	80 91 ea 03 	lds	r24, 0x03EA
    23c8:	e0 91 eb 03 	lds	r30, 0x03EB
    23cc:	f0 91 ec 03 	lds	r31, 0x03EC
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	01 f1       	breq	.+64     	; 0x2414 <main+0x74>
    23d4:	20 f4       	brcc	.+8      	; 0x23de <main+0x3e>
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	09 f4       	brne	.+2      	; 0x23dc <main+0x3c>
    23da:	62 c0       	rjmp	.+196    	; 0x24a0 <main+0x100>
    23dc:	6e c0       	rjmp	.+220    	; 0x24ba <main+0x11a>
    23de:	83 30       	cpi	r24, 0x03	; 3
    23e0:	21 f0       	breq	.+8      	; 0x23ea <main+0x4a>
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <main+0x48>
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <main+0xc6>
    23e8:	68 c0       	rjmp	.+208    	; 0x24ba <main+0x11a>
		{
			case UP:
			{
				current_selection = current_selection == 0 ? menu_main->m_num_submenus-1 : current_selection-1;
    23ea:	80 91 a1 03 	lds	r24, 0x03A1
    23ee:	81 11       	cpse	r24, r1
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <main+0x54>
    23f2:	87 81       	ldd	r24, Z+7	; 0x07
    23f4:	81 50       	subi	r24, 0x01	; 1
    23f6:	80 93 a1 03 	sts	0x03A1, r24
				getPreviousEntry(menu_main->m_submenus[current_selection]);
    23fa:	25 81       	ldd	r18, Z+5	; 0x05
    23fc:	96 81       	ldd	r25, Z+6	; 0x06
    23fe:	e2 2f       	mov	r30, r18
    2400:	f9 2f       	mov	r31, r25
    2402:	e8 0f       	add	r30, r24
    2404:	f1 1d       	adc	r31, r1
    2406:	e8 0f       	add	r30, r24
    2408:	f1 1d       	adc	r31, r1
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	0e 94 2e 11 	call	0x225c	; 0x225c <getPreviousEntry>
				break;
    2412:	53 c0       	rjmp	.+166    	; 0x24ba <main+0x11a>
			}
			case RIGHT:
			{
				if(menuLevelDown(menu_main, current_selection)->m_num_submenus > 0)
    2414:	60 91 a1 03 	lds	r22, 0x03A1
    2418:	cf 01       	movw	r24, r30
    241a:	0e 94 5f 11 	call	0x22be	; 0x22be <menuLevelDown>
    241e:	dc 01       	movw	r26, r24
    2420:	17 96       	adiw	r26, 0x07	; 7
    2422:	2c 91       	ld	r18, X
    2424:	80 91 eb 03 	lds	r24, 0x03EB
    2428:	90 91 ec 03 	lds	r25, 0x03EC
				{
					menu_main = menuLevelDown(menu_main, current_selection);
    242c:	60 91 a1 03 	lds	r22, 0x03A1
				getPreviousEntry(menu_main->m_submenus[current_selection]);
				break;
			}
			case RIGHT:
			{
				if(menuLevelDown(menu_main, current_selection)->m_num_submenus > 0)
    2430:	22 23       	and	r18, r18
    2432:	19 f0       	breq	.+6      	; 0x243a <main+0x9a>
				{
					menu_main = menuLevelDown(menu_main, current_selection);
    2434:	0e 94 5f 11 	call	0x22be	; 0x22be <menuLevelDown>
    2438:	3a c0       	rjmp	.+116    	; 0x24ae <main+0x10e>
					current_selection = 0;
				}
				else
				{
					if(menuLevelDown(menu_main, current_selection)->m_content.operation)
    243a:	0e 94 5f 11 	call	0x22be	; 0x22be <menuLevelDown>
    243e:	fc 01       	movw	r30, r24
    2440:	81 81       	ldd	r24, Z+1	; 0x01
    2442:	92 81       	ldd	r25, Z+2	; 0x02
    2444:	89 2b       	or	r24, r25
    2446:	c9 f1       	breq	.+114    	; 0x24ba <main+0x11a>
						menuLevelDown(menu_main, current_selection)->m_content.operation();
    2448:	60 91 a1 03 	lds	r22, 0x03A1
    244c:	80 91 eb 03 	lds	r24, 0x03EB
    2450:	90 91 ec 03 	lds	r25, 0x03EC
    2454:	0e 94 5f 11 	call	0x22be	; 0x22be <menuLevelDown>
    2458:	dc 01       	movw	r26, r24
    245a:	11 96       	adiw	r26, 0x01	; 1
    245c:	ed 91       	ld	r30, X+
    245e:	fc 91       	ld	r31, X
    2460:	12 97       	sbiw	r26, 0x02	; 2
    2462:	09 95       	icall
    2464:	2a c0       	rjmp	.+84     	; 0x24ba <main+0x11a>
				}
				break;
			}
			case DOWN:
			{
				current_selection = current_selection == menu_main->m_num_submenus-1 ? 0 : current_selection+1;
    2466:	40 91 a1 03 	lds	r20, 0x03A1
    246a:	24 2f       	mov	r18, r20
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	87 81       	ldd	r24, Z+7	; 0x07
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	28 17       	cp	r18, r24
    2476:	39 07       	cpc	r19, r25
    2478:	19 f0       	breq	.+6      	; 0x2480 <main+0xe0>
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	84 0f       	add	r24, r20
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <main+0xe2>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	80 93 a1 03 	sts	0x03A1, r24
				getNextEntry(menu_main->m_submenus[current_selection]);
    2486:	25 81       	ldd	r18, Z+5	; 0x05
    2488:	96 81       	ldd	r25, Z+6	; 0x06
    248a:	e2 2f       	mov	r30, r18
    248c:	f9 2f       	mov	r31, r25
    248e:	e8 0f       	add	r30, r24
    2490:	f1 1d       	adc	r31, r1
    2492:	e8 0f       	add	r30, r24
    2494:	f1 1d       	adc	r31, r1
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <getNextEntry>
				break;
    249e:	0d c0       	rjmp	.+26     	; 0x24ba <main+0x11a>
			}
			case LEFT:
			{
				if(menu_main->m_parent)
    24a0:	83 81       	ldd	r24, Z+3	; 0x03
    24a2:	94 81       	ldd	r25, Z+4	; 0x04
    24a4:	89 2b       	or	r24, r25
    24a6:	49 f0       	breq	.+18     	; 0x24ba <main+0x11a>
				{
					menu_main = menuLevelUp(menu_main);
    24a8:	cf 01       	movw	r24, r30
    24aa:	0e 94 70 11 	call	0x22e0	; 0x22e0 <menuLevelUp>
    24ae:	90 93 ec 03 	sts	0x03EC, r25
    24b2:	80 93 eb 03 	sts	0x03EB, r24
					current_selection = 0;
    24b6:	10 92 a1 03 	sts	0x03A1, r1
			}
			default:
				break;
		}

		printMenu(menu_main);
    24ba:	80 91 eb 03 	lds	r24, 0x03EB
    24be:	90 91 ec 03 	lds	r25, 0x03EC
    24c2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <printMenu>
		print_selection(current_selection);
    24c6:	80 91 a1 03 	lds	r24, 0x03A1
    24ca:	0e 94 a9 14 	call	0x2952	; 0x2952 <print_selection>
    24ce:	bf ef       	ldi	r27, 0xFF	; 255
    24d0:	ef e7       	ldi	r30, 0x7F	; 127
    24d2:	f4 e0       	ldi	r31, 0x04	; 4
    24d4:	b1 50       	subi	r27, 0x01	; 1
    24d6:	e0 40       	sbci	r30, 0x00	; 0
    24d8:	f0 40       	sbci	r31, 0x00	; 0
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <main+0x134>
    24dc:	00 c0       	rjmp	.+0      	; 0x24de <main+0x13e>
    24de:	00 00       	nop
    24e0:	63 cf       	rjmp	.-314    	; 0x23a8 <main+0x8>

000024e2 <__vector_1>:
		printf("CAN id: %d, CAN data length: %d, CAN data: %c, %c, %c, %c \n",node_2.id, node_2.length, node_2.data[0], node_2.data[1], node_2.data[2], node_2.data[3]);
	}*/
}

ISR(INT0_vect)
{
    24e2:	1f 92       	push	r1
    24e4:	0f 92       	push	r0
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	0f 92       	push	r0
    24ea:	11 24       	eor	r1, r1
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	2f 93       	push	r18
    24fa:	3f 93       	push	r19
    24fc:	4f 93       	push	r20
    24fe:	5f 93       	push	r21
    2500:	6f 93       	push	r22
    2502:	7f 93       	push	r23
    2504:	8f 93       	push	r24
    2506:	9f 93       	push	r25
    2508:	af 93       	push	r26
    250a:	bf 93       	push	r27
    250c:	ef 93       	push	r30
    250e:	ff 93       	push	r31
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	2b 97       	sbiw	r28, 0x0b	; 11
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	cd bf       	out	0x3d, r28	; 61
	//handle CAN message
	can_message can_msg;
	
	//read upper 8 bit of id
	can_msg.id = mcp_read(MCP_RXB0SIDH) << 3;
    251e:	81 e6       	ldi	r24, 0x61	; 97
    2520:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
    2524:	08 2f       	mov	r16, r24
	
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 5;
    2526:	82 e6       	ldi	r24, 0x62	; 98
    2528:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
{
	//handle CAN message
	can_message can_msg;
	
	//read upper 8 bit of id
	can_msg.id = mcp_read(MCP_RXB0SIDH) << 3;
    252c:	98 e0       	ldi	r25, 0x08	; 8
    252e:	09 9f       	mul	r16, r25
    2530:	80 01       	movw	r16, r0
    2532:	11 24       	eor	r1, r1
	
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 5;
    2534:	82 95       	swap	r24
    2536:	86 95       	lsr	r24
    2538:	87 70       	andi	r24, 0x07	; 7
    253a:	08 2b       	or	r16, r24
	
	//read length of CAN data
	can_msg.length = mcp_read(MCP_RXB0DLC);
    253c:	85 e6       	ldi	r24, 0x65	; 101
    253e:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
    2542:	c8 2e       	mov	r12, r24
    2544:	7e 01       	movw	r14, r28
    2546:	e4 e0       	ldi	r30, 0x04	; 4
    2548:	ee 0e       	add	r14, r30
    254a:	f1 1c       	adc	r15, r1
	
	//read CAN data
	for(uint8_t i = 0; i < can_msg.length; i++)
    254c:	d1 2c       	mov	r13, r1
    254e:	dc 14       	cp	r13, r12
    2550:	49 f0       	breq	.+18     	; 0x2564 <__vector_1+0x82>
		can_msg.data[i] = mcp_read(MCP_RXB0D0+i);
    2552:	86 e6       	ldi	r24, 0x66	; 102
    2554:	8d 0d       	add	r24, r13
    2556:	0e 94 8c 08 	call	0x1118	; 0x1118 <mcp_read>
    255a:	f7 01       	movw	r30, r14
    255c:	81 93       	st	Z+, r24
    255e:	7f 01       	movw	r14, r30
	
	//read length of CAN data
	can_msg.length = mcp_read(MCP_RXB0DLC);
	
	//read CAN data
	for(uint8_t i = 0; i < can_msg.length; i++)
    2560:	d3 94       	inc	r13
    2562:	f5 cf       	rjmp	.-22     	; 0x254e <__vector_1+0x6c>
		can_msg.data[i] = mcp_read(MCP_RXB0D0+i);
	
	switch(can_msg.id)
    2564:	05 30       	cpi	r16, 0x05	; 5
    2566:	11 05       	cpc	r17, r1
    2568:	99 f4       	brne	.+38     	; 0x2590 <__vector_1+0xae>
	{
		case(SCORE):
		{
			printf("Got new score: %d \n", can_msg.data[0]);
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	08 2f       	mov	r16, r24
    256e:	10 e0       	ldi	r17, 0x00	; 0
    2570:	1f 92       	push	r1
    2572:	8f 93       	push	r24
    2574:	27 e6       	ldi	r18, 0x67	; 103
    2576:	33 e0       	ldi	r19, 0x03	; 3
    2578:	3f 93       	push	r19
    257a:	2f 93       	push	r18
    257c:	0e 94 77 16 	call	0x2cee	; 0x2cee <printf>
			setScore(can_msg.data[0]);
    2580:	c8 01       	movw	r24, r16
    2582:	0e 94 bf 0a 	call	0x157e	; 0x157e <setScore>
			break;
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	04 c0       	rjmp	.+8      	; 0x2598 <__vector_1+0xb6>
		}
		default:
		{
			printf("Unknown CAN message \n");
    2590:	8b e7       	ldi	r24, 0x7B	; 123
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <puts>
			break;
		}
	}
	
	//clear interrupt bits for rx buffer 0
	mcp_write(MCP_CANINTF, MCP_RX0IF & 0x00);
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	8c e2       	ldi	r24, 0x2C	; 44
    259c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <mcp_write>
    25a0:	2b 96       	adiw	r28, 0x0b	; 11
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	ff 90       	pop	r15
    25ce:	ef 90       	pop	r14
    25d0:	df 90       	pop	r13
    25d2:	cf 90       	pop	r12
    25d4:	0f 90       	pop	r0
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	0f 90       	pop	r0
    25da:	1f 90       	pop	r1
    25dc:	18 95       	reti

000025de <USB_init>:
uint8_t margin = 15;

void USB_init()
{
	//set PIN 0 and 1 of port B as inputs for buttons
	DDRB &= ~(1 << PB0) & ~(1 << PB1);
    25de:	87 b3       	in	r24, 0x17	; 23
    25e0:	8c 7f       	andi	r24, 0xFC	; 252
    25e2:	87 bb       	out	0x17, r24	; 23
    25e4:	08 95       	ret

000025e6 <JOY_button>:
}

bool JOY_button(int button)
{
	//printf("%x", ~(PINB & (1 << button)));
	return  (PINB & (1 << button));
    25e6:	96 b3       	in	r25, 0x16	; 22
    25e8:	21 e0       	ldi	r18, 0x01	; 1
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <JOY_button+0xc>
    25ee:	22 0f       	add	r18, r18
    25f0:	33 1f       	adc	r19, r19
    25f2:	8a 95       	dec	r24
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <JOY_button+0x8>
    25f6:	89 2f       	mov	r24, r25
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	28 23       	and	r18, r24
    25fc:	39 23       	and	r19, r25
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	23 2b       	or	r18, r19
    2602:	09 f4       	brne	.+2      	; 0x2606 <JOY_button+0x20>
    2604:	80 e0       	ldi	r24, 0x00	; 0
}
    2606:	08 95       	ret

00002608 <calibrateJoystick>:
	print_thumb();
	_delay_ms(1000);*/
}

void calibrateJoystick(void)
{
    2608:	08 95       	ret

0000260a <JOY_getPosition>:
	print_thumb();
	_delay_ms(2000);*/
}

JOY_POS JOY_getPosition(void)
{
    260a:	cf 92       	push	r12
    260c:	df 92       	push	r13
    260e:	ff 92       	push	r15
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	2f 97       	sbiw	r28, 0x0f	; 15
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	6e 01       	movw	r12, r28
    262a:	80 e1       	ldi	r24, 0x10	; 16
    262c:	c8 0e       	add	r12, r24
    262e:	d1 1c       	adc	r13, r1
    2630:	8e 01       	movw	r16, r28
    2632:	0f 5f       	subi	r16, 0xFF	; 255
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t i = 0;
	JOY_POS real;
	
	for(i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_H);
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_read>
    263c:	f8 01       	movw	r30, r16
    263e:	81 93       	st	Z+, r24
    2640:	8f 01       	movw	r16, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2642:	f0 e1       	ldi	r31, 0x10	; 16
    2644:	fa 95       	dec	r31
    2646:	f1 f7       	brne	.-4      	; 0x2644 <JOY_getPosition+0x3a>
    2648:	00 c0       	rjmp	.+0      	; 0x264a <JOY_getPosition+0x40>
{
	uint8_t x[15];
	uint8_t i = 0;
	JOY_POS real;
	
	for(i = 0; i < 15; i++)
    264a:	0c 15       	cp	r16, r12
    264c:	1d 05       	cpc	r17, r13
    264e:	99 f7       	brne	.-26     	; 0x2636 <JOY_getPosition+0x2c>
	{
		x[i] = ADC_read(JOY_H);
		_delay_us(10);
	}
	real.x = data_fit(x, 15, 2, 2, 5);
    2650:	05 e0       	ldi	r16, 0x05	; 5
    2652:	22 e0       	ldi	r18, 0x02	; 2
    2654:	42 e0       	ldi	r20, 0x02	; 2
    2656:	6f e0       	ldi	r22, 0x0F	; 15
    2658:	ce 01       	movw	r24, r28
    265a:	01 96       	adiw	r24, 0x01	; 1
    265c:	0e 94 a9 07 	call	0xf52	; 0xf52 <data_fit>
    2660:	f8 2e       	mov	r15, r24
    2662:	8e 01       	movw	r16, r28
    2664:	0f 5f       	subi	r16, 0xFF	; 255
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_V);
    2668:	85 e0       	ldi	r24, 0x05	; 5
    266a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_read>
    266e:	f8 01       	movw	r30, r16
    2670:	81 93       	st	Z+, r24
    2672:	8f 01       	movw	r16, r30
    2674:	f0 e1       	ldi	r31, 0x10	; 16
    2676:	fa 95       	dec	r31
    2678:	f1 f7       	brne	.-4      	; 0x2676 <JOY_getPosition+0x6c>
    267a:	00 c0       	rjmp	.+0      	; 0x267c <JOY_getPosition+0x72>
		x[i] = ADC_read(JOY_H);
		_delay_us(10);
	}
	real.x = data_fit(x, 15, 2, 2, 5);
	
	for(i = 0; i < 15; i++)
    267c:	0c 15       	cp	r16, r12
    267e:	1d 05       	cpc	r17, r13
    2680:	99 f7       	brne	.-26     	; 0x2668 <JOY_getPosition+0x5e>
	{
		x[i] = ADC_read(JOY_V);
		_delay_us(10);
	}
	real.y = data_fit(x, 15, 2, 2, 5);
    2682:	05 e0       	ldi	r16, 0x05	; 5
    2684:	22 e0       	ldi	r18, 0x02	; 2
    2686:	42 e0       	ldi	r20, 0x02	; 2
    2688:	6f e0       	ldi	r22, 0x0F	; 15
    268a:	ce 01       	movw	r24, r28
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	0e 94 a9 07 	call	0xf52	; 0xf52 <data_fit>
    2692:	78 2f       	mov	r23, r24
	
	if(real.y >= -real.x + 255 && real.y >= real.x)
    2694:	e8 2f       	mov	r30, r24
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	4f 2d       	mov	r20, r15
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	af ef       	ldi	r26, 0xFF	; 255
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	a4 1b       	sub	r26, r20
    26a2:	b5 0b       	sbc	r27, r21
    26a4:	20 91 0f 01 	lds	r18, 0x010F
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
    26a8:	ea 17       	cp	r30, r26
    26aa:	fb 07       	cpc	r31, r27
    26ac:	64 f0       	brlt	.+24     	; 0x26c6 <JOY_getPosition+0xbc>
    26ae:	8f 15       	cp	r24, r15
    26b0:	08 f1       	brcs	.+66     	; 0x26f4 <JOY_getPosition+0xea>
    26b2:	83 e0       	ldi	r24, 0x03	; 3

	switch(real.dir)
	{
		case UP:
		{
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
    26b4:	90 91 11 01 	lds	r25, 0x0111
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	29 0f       	add	r18, r25
    26bc:	31 1d       	adc	r19, r1
    26be:	2e 17       	cp	r18, r30
    26c0:	3f 07       	cpc	r19, r31
    26c2:	0c f1       	brlt	.+66     	; 0x2706 <JOY_getPosition+0xfc>
    26c4:	0b c0       	rjmp	.+22     	; 0x26dc <JOY_getPosition+0xd2>
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
	{
		real.dir = RIGHT;
	}
	if(real.y < -real.x + 255 && real.y >= real.x)
    26c6:	8f 15       	cp	r24, r15
    26c8:	58 f0       	brcs	.+22     	; 0x26e0 <JOY_getPosition+0xd6>
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
			break;
		}
		case LEFT:
		{
			real.dir = real.x < mid_point.x - margin ? real.dir : NEUTRAL;
    26ca:	e0 91 10 01 	lds	r30, 0x0110
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	e2 1b       	sub	r30, r18
    26d2:	f1 09       	sbc	r31, r1
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	4e 17       	cp	r20, r30
    26d8:	5f 07       	cpc	r21, r31
    26da:	ac f0       	brlt	.+42     	; 0x2706 <JOY_getPosition+0xfc>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	13 c0       	rjmp	.+38     	; 0x2706 <JOY_getPosition+0xfc>
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
			break;
		}
		case DOWN:
		{
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
    26e0:	40 91 11 01 	lds	r20, 0x0111
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	42 1b       	sub	r20, r18
    26e8:	51 09       	sbc	r21, r1
    26ea:	e4 17       	cp	r30, r20
    26ec:	f5 07       	cpc	r31, r21
    26ee:	b4 f7       	brge	.-20     	; 0x26dc <JOY_getPosition+0xd2>
    26f0:	84 e0       	ldi	r24, 0x04	; 4
    26f2:	09 c0       	rjmp	.+18     	; 0x2706 <JOY_getPosition+0xfc>
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
	{
		real.dir = RIGHT;
    26f4:	82 e0       	ldi	r24, 0x02	; 2
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
			break;
		}
		case RIGHT:
		{
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
    26f6:	90 91 10 01 	lds	r25, 0x0110
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	29 0f       	add	r18, r25
    26fe:	31 1d       	adc	r19, r1
    2700:	24 17       	cp	r18, r20
    2702:	35 07       	cpc	r19, r21
    2704:	5c f7       	brge	.-42     	; 0x26dc <JOY_getPosition+0xd2>
			break;
		}
	}

	return real;
}
    2706:	6f 2d       	mov	r22, r15
    2708:	2f 96       	adiw	r28, 0x0f	; 15
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	1f 91       	pop	r17
    271a:	0f 91       	pop	r16
    271c:	ff 90       	pop	r15
    271e:	df 90       	pop	r13
    2720:	cf 90       	pop	r12
    2722:	08 95       	ret

00002724 <SLID_getPosition>:

SLID SLID_getPosition(void)
{
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	2f 97       	sbiw	r28, 0x0f	; 15
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	7e 01       	movw	r14, r28
    2744:	80 e1       	ldi	r24, 0x10	; 16
    2746:	e8 0e       	add	r14, r24
    2748:	f1 1c       	adc	r15, r1
    274a:	8e 01       	movw	r16, r28
    274c:	0f 5f       	subi	r16, 0xFF	; 255
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t value[15];
	SLID slid;
	uint8_t i=0;
	for (i = 0; i < 15; i++)
	{
		value[i] = ADC_read(SL_L);
    2750:	87 e0       	ldi	r24, 0x07	; 7
    2752:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_read>
    2756:	f8 01       	movw	r30, r16
    2758:	81 93       	st	Z+, r24
    275a:	8f 01       	movw	r16, r30
    275c:	f0 e1       	ldi	r31, 0x10	; 16
    275e:	fa 95       	dec	r31
    2760:	f1 f7       	brne	.-4      	; 0x275e <SLID_getPosition+0x3a>
    2762:	00 c0       	rjmp	.+0      	; 0x2764 <SLID_getPosition+0x40>
SLID SLID_getPosition(void)
{
	uint8_t value[15];
	SLID slid;
	uint8_t i=0;
	for (i = 0; i < 15; i++)
    2764:	0e 15       	cp	r16, r14
    2766:	1f 05       	cpc	r17, r15
    2768:	99 f7       	brne	.-26     	; 0x2750 <SLID_getPosition+0x2c>
	{
		value[i] = ADC_read(SL_L);
		_delay_us(10);
	}
	slid.l = data_fit(value, 15, 2, 2, 4);
    276a:	04 e0       	ldi	r16, 0x04	; 4
    276c:	22 e0       	ldi	r18, 0x02	; 2
    276e:	42 e0       	ldi	r20, 0x02	; 2
    2770:	6f e0       	ldi	r22, 0x0F	; 15
    2772:	ce 01       	movw	r24, r28
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	0e 94 a9 07 	call	0xf52	; 0xf52 <data_fit>
    277a:	d8 2e       	mov	r13, r24
    277c:	8e 01       	movw	r16, r28
    277e:	0f 5f       	subi	r16, 0xFF	; 255
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
	for (i = 0; i < 15; i++)
	{
		value[i] = ADC_read(SL_R);
    2782:	86 e0       	ldi	r24, 0x06	; 6
    2784:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_read>
    2788:	f8 01       	movw	r30, r16
    278a:	81 93       	st	Z+, r24
    278c:	8f 01       	movw	r16, r30
    278e:	f0 e1       	ldi	r31, 0x10	; 16
    2790:	fa 95       	dec	r31
    2792:	f1 f7       	brne	.-4      	; 0x2790 <SLID_getPosition+0x6c>
    2794:	00 c0       	rjmp	.+0      	; 0x2796 <SLID_getPosition+0x72>
	{
		value[i] = ADC_read(SL_L);
		_delay_us(10);
	}
	slid.l = data_fit(value, 15, 2, 2, 4);
	for (i = 0; i < 15; i++)
    2796:	0e 15       	cp	r16, r14
    2798:	1f 05       	cpc	r17, r15
    279a:	99 f7       	brne	.-26     	; 0x2782 <SLID_getPosition+0x5e>
	{
		value[i] = ADC_read(SL_R);
		_delay_us(10);
	}
	slid.r = data_fit(value, 15, 2, 2, 4);
    279c:	04 e0       	ldi	r16, 0x04	; 4
    279e:	22 e0       	ldi	r18, 0x02	; 2
    27a0:	42 e0       	ldi	r20, 0x02	; 2
    27a2:	6f e0       	ldi	r22, 0x0F	; 15
    27a4:	ce 01       	movw	r24, r28
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	0e 94 a9 07 	call	0xf52	; 0xf52 <data_fit>
    27ac:	98 2f       	mov	r25, r24
	//printf("left %d, right %d \n", value.l, value.r);
	return slid;
}
    27ae:	8d 2d       	mov	r24, r13
    27b0:	2f 96       	adiw	r28, 0x0f	; 15
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	ff 90       	pop	r15
    27c6:	ef 90       	pop	r14
    27c8:	df 90       	pop	r13
    27ca:	08 95       	ret

000027cc <getStringFromMem>:
#include <avr/pgmspace.h>
#include <stdio.h>

void getStringFromMem(char string[MAX_STRING_LENGTH], uint8_t id)
{
	strcpy_P(string, (PGM_P)pgm_read_word(&(string_table[id])));
    27cc:	e6 2f       	mov	r30, r22
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	e0 58       	subi	r30, 0x80	; 128
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	65 91       	lpm	r22, Z+
    27da:	74 91       	lpm	r23, Z
    27dc:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <strcpy_P>

000027e0 <clear_buffer>:
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
}

void clear_buffer(void)
{
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	ac 01       	movw	r20, r24
    27ea:	42 0f       	add	r20, r18
    27ec:	53 1f       	adc	r21, r19
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
		{
			oled_buffer[i * N + j] = 0x00;
    27ee:	e0 91 13 01 	lds	r30, 0x0113
    27f2:	f0 91 14 01 	lds	r31, 0x0114
    27f6:	e4 0f       	add	r30, r20
    27f8:	f5 1f       	adc	r31, r21
    27fa:	10 82       	st	Z, r1
    27fc:	01 96       	adiw	r24, 0x01	; 1
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
    27fe:	80 38       	cpi	r24, 0x80	; 128
    2800:	91 05       	cpc	r25, r1
    2802:	91 f7       	brne	.-28     	; 0x27e8 <clear_buffer+0x8>
    2804:	20 58       	subi	r18, 0x80	; 128
    2806:	3f 4f       	sbci	r19, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
    2808:	21 15       	cp	r18, r1
    280a:	84 e0       	ldi	r24, 0x04	; 4
    280c:	38 07       	cpc	r19, r24
    280e:	51 f7       	brne	.-44     	; 0x27e4 <clear_buffer+0x4>
    2810:	08 95       	ret

00002812 <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    2812:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2814:	e1 e0       	ldi	r30, 0x01	; 1
    2816:	f0 e1       	ldi	r31, 0x10	; 16
    2818:	80 83       	st	Z, r24
    281a:	10 82       	st	Z, r1
    281c:	80 e1       	ldi	r24, 0x10	; 16
    281e:	80 83       	st	Z, r24
    2820:	08 95       	ret

00002822 <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
	oled_set_page(0x0);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	0e 94 09 14 	call	0x2812	; 0x2812 <oled_set_page>
    282e:	c0 e0       	ldi	r28, 0x00	; 0
    2830:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
    2832:	10 e0       	ldi	r17, 0x00	; 0
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	4c 0f       	add	r20, r28
    283c:	5d 1f       	adc	r21, r29
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    283e:	e0 91 13 01 	lds	r30, 0x0113
    2842:	f0 91 14 01 	lds	r31, 0x0114
    2846:	e4 0f       	add	r30, r20
    2848:	f5 1f       	adc	r31, r21
    284a:	80 81       	ld	r24, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    284c:	80 93 01 12 	sts	0x1201, r24
    2850:	2f 5f       	subi	r18, 0xFF	; 255
    2852:	3f 4f       	sbci	r19, 0xFF	; 255
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    2854:	20 38       	cpi	r18, 0x80	; 128
    2856:	31 05       	cpc	r19, r1
    2858:	79 f7       	brne	.-34     	; 0x2838 <print_buffer+0x16>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    285a:	1f 5f       	subi	r17, 0xFF	; 255
    285c:	81 2f       	mov	r24, r17
    285e:	0e 94 09 14 	call	0x2812	; 0x2812 <oled_set_page>
    2862:	c0 58       	subi	r28, 0x80	; 128
    2864:	df 4f       	sbci	r29, 0xFF	; 255
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2866:	18 30       	cpi	r17, 0x08	; 8
    2868:	29 f7       	brne	.-54     	; 0x2834 <print_buffer+0x12>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
	}
}
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	08 95       	ret

00002872 <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2872:	e1 e0       	ldi	r30, 0x01	; 1
    2874:	f0 e1       	ldi	r31, 0x10	; 16
    2876:	8e ea       	ldi	r24, 0xAE	; 174
    2878:	80 83       	st	Z, r24
    287a:	81 ea       	ldi	r24, 0xA1	; 161
    287c:	80 83       	st	Z, r24
    287e:	8a ed       	ldi	r24, 0xDA	; 218
    2880:	80 83       	st	Z, r24
    2882:	82 e1       	ldi	r24, 0x12	; 18
    2884:	80 83       	st	Z, r24
    2886:	88 ec       	ldi	r24, 0xC8	; 200
    2888:	80 83       	st	Z, r24
    288a:	88 ea       	ldi	r24, 0xA8	; 168
    288c:	80 83       	st	Z, r24
    288e:	8f e3       	ldi	r24, 0x3F	; 63
    2890:	80 83       	st	Z, r24
    2892:	85 ed       	ldi	r24, 0xD5	; 213
    2894:	80 83       	st	Z, r24
    2896:	80 e8       	ldi	r24, 0x80	; 128
    2898:	80 83       	st	Z, r24
    289a:	81 e8       	ldi	r24, 0x81	; 129
    289c:	80 83       	st	Z, r24
    289e:	80 e5       	ldi	r24, 0x50	; 80
    28a0:	80 83       	st	Z, r24
    28a2:	89 ed       	ldi	r24, 0xD9	; 217
    28a4:	80 83       	st	Z, r24
    28a6:	81 e2       	ldi	r24, 0x21	; 33
    28a8:	80 83       	st	Z, r24
    28aa:	80 e2       	ldi	r24, 0x20	; 32
    28ac:	80 83       	st	Z, r24
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	80 83       	st	Z, r24
    28b2:	8b ed       	ldi	r24, 0xDB	; 219
    28b4:	80 83       	st	Z, r24
    28b6:	80 e3       	ldi	r24, 0x30	; 48
    28b8:	80 83       	st	Z, r24
    28ba:	8d ea       	ldi	r24, 0xAD	; 173
    28bc:	80 83       	st	Z, r24
    28be:	10 82       	st	Z, r1
    28c0:	84 ea       	ldi	r24, 0xA4	; 164
    28c2:	80 83       	st	Z, r24
    28c4:	86 ea       	ldi	r24, 0xA6	; 166
    28c6:	80 83       	st	Z, r24
    28c8:	8f ea       	ldi	r24, 0xAF	; 175
    28ca:	80 83       	st	Z, r24
    28cc:	83 ed       	ldi	r24, 0xD3	; 211
    28ce:	80 83       	st	Z, r24
    28d0:	10 82       	st	Z, r1
    28d2:	80 e4       	ldi	r24, 0x40	; 64
    28d4:	80 83       	st	Z, r24
    28d6:	80 eb       	ldi	r24, 0xB0	; 176
    28d8:	80 83       	st	Z, r24
    28da:	10 82       	st	Z, r1
    28dc:	80 e1       	ldi	r24, 0x10	; 16
    28de:	80 83       	st	Z, r24
	oled_write_command(0x00);
	//set the upper nibble of start column address
	oled_write_command(0x10);


	clear_buffer();
    28e0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	print_buffer();
    28e4:	0c 94 11 14 	jmp	0x2822	; 0x2822 <print_buffer>

000028e8 <print_string_to_buffer>:
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	07 2f       	mov	r16, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    28f2:	20 e8       	ldi	r18, 0x80	; 128
    28f4:	62 9f       	mul	r22, r18
    28f6:	b0 01       	movw	r22, r0
    28f8:	11 24       	eor	r1, r1
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
    28fa:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t col = pos.column;

	while (word[i] != '\0')
    28fc:	ec 01       	movw	r28, r24
    28fe:	c1 0f       	add	r28, r17
    2900:	d1 1d       	adc	r29, r1
    2902:	28 81       	ld	r18, Y
    2904:	22 23       	and	r18, r18
    2906:	01 f1       	breq	.+64     	; 0x2948 <print_string_to_buffer+0x60>
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 2f       	mov	r20, r16
    290e:	42 0f       	add	r20, r18
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2910:	fb 01       	movw	r30, r22
    2912:	e4 0f       	add	r30, r20
    2914:	f1 1d       	adc	r31, r1
    2916:	a0 91 13 01 	lds	r26, 0x0113
    291a:	b0 91 14 01 	lds	r27, 0x0114
    291e:	ae 0f       	add	r26, r30
    2920:	bf 1f       	adc	r27, r31
    2922:	48 81       	ld	r20, Y
    2924:	f9 01       	movw	r30, r18
    2926:	58 e0       	ldi	r21, 0x08	; 8
    2928:	45 9f       	mul	r20, r21
    292a:	e0 0d       	add	r30, r0
    292c:	f1 1d       	adc	r31, r1
    292e:	11 24       	eor	r1, r1
    2930:	ea 59       	subi	r30, 0x9A	; 154
    2932:	fd 4f       	sbci	r31, 0xFD	; 253
    2934:	e4 91       	lpm	r30, Z
    2936:	ec 93       	st	X, r30
    2938:	2f 5f       	subi	r18, 0xFF	; 255
    293a:	3f 4f       	sbci	r19, 0xFF	; 255

	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
    293c:	28 30       	cpi	r18, 0x08	; 8
    293e:	31 05       	cpc	r19, r1
    2940:	29 f7       	brne	.-54     	; 0x290c <print_string_to_buffer+0x24>
    2942:	08 5f       	subi	r16, 0xF8	; 248
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
			col++;
		}
		i++;
    2944:	1f 5f       	subi	r17, 0xFF	; 255
    2946:	da cf       	rjmp	.-76     	; 0x28fc <print_string_to_buffer+0x14>
	}
}
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <print_selection>:

void print_selection(uint8_t page)
{
	position pos = { .column = 120, .page = page};
	print_string_to_buffer("<", pos);
    2952:	68 2f       	mov	r22, r24
    2954:	78 e7       	ldi	r23, 0x78	; 120
    2956:	80 e9       	ldi	r24, 0x90	; 144
    2958:	93 e0       	ldi	r25, 0x03	; 3
    295a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
	print_buffer();
    295e:	0c 94 11 14 	jmp	0x2822	; 0x2822 <print_buffer>

00002962 <printGreetings>:
		_delay_ms(2000);
	}*/
}

void printGreetings(void)
{
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	60 97       	sbiw	r28, 0x10	; 16
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    297c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 1, .column = 2 };
    2980:	ff 24       	eor	r15, r15
    2982:	f3 94       	inc	r15
    2984:	8e 01       	movw	r16, r28
    2986:	0f 5e       	subi	r16, 0xEF	; 239
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	31 96       	adiw	r30, 0x01	; 1
	for(int i = 0; i < 4; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
		string[i] = 0;
    298e:	11 92       	st	Z+, r1
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 1, .column = 2 };
	for(int i = 0; i < 4; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    2990:	e0 17       	cp	r30, r16
    2992:	f1 07       	cpc	r31, r17
    2994:	e1 f7       	brne	.-8      	; 0x298e <printGreetings+0x2c>
    2996:	66 e2       	ldi	r22, 0x26	; 38
    2998:	6f 0d       	add	r22, r15
		string[i] = 0;
		getStringFromMem(string, 39 + i);
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
		print_string_to_buffer(string, pos);
    29a2:	6f 2d       	mov	r22, r15
    29a4:	72 e0       	ldi	r23, 0x02	; 2
    29a6:	ce 01       	movw	r24, r28
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		pos.page++;
    29ae:	f3 94       	inc	r15
void printGreetings(void)
{
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 1, .column = 2 };
	for(int i = 0; i < 4; i++)
    29b0:	25 e0       	ldi	r18, 0x05	; 5
    29b2:	f2 12       	cpse	r15, r18
    29b4:	ea cf       	rjmp	.-44     	; 0x298a <printGreetings+0x28>
		string[i] = 0;
		getStringFromMem(string, 39 + i);
		print_string_to_buffer(string, pos);
		pos.page++;
	}	
	print_buffer();
    29b6:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29ba:	8f ef       	ldi	r24, 0xFF	; 255
    29bc:	9f ef       	ldi	r25, 0xFF	; 255
    29be:	2b e3       	ldi	r18, 0x3B	; 59
    29c0:	81 50       	subi	r24, 0x01	; 1
    29c2:	90 40       	sbci	r25, 0x00	; 0
    29c4:	20 40       	sbci	r18, 0x00	; 0
    29c6:	e1 f7       	brne	.-8      	; 0x29c0 <printGreetings+0x5e>
    29c8:	00 c0       	rjmp	.+0      	; 0x29ca <printGreetings+0x68>
    29ca:	00 00       	nop
	_delay_ms(4000);
}
    29cc:	60 96       	adiw	r28, 0x10	; 16
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ff 90       	pop	r15
    29e2:	08 95       	ret

000029e4 <print_thumb>:

void print_thumb(void)
{
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	60 97       	sbiw	r28, 0x10	; 16
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    29fe:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
    2a02:	f1 2c       	mov	r15, r1
    2a04:	8e 01       	movw	r16, r28
    2a06:	0f 5e       	subi	r16, 0xEF	; 239
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	31 96       	adiw	r30, 0x01	; 1
	for(int i = 0; i < 7; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
			string[i] = 0;
    2a0e:	11 92       	st	Z+, r1
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    2a10:	e0 17       	cp	r30, r16
    2a12:	f1 07       	cpc	r31, r17
    2a14:	e1 f7       	brne	.-8      	; 0x2a0e <print_thumb+0x2a>
    2a16:	65 e1       	ldi	r22, 0x15	; 21
    2a18:	6f 0d       	add	r22, r15
			string[i] = 0;
		getStringFromMem(string, 21 + i);
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
		print_string_to_buffer(string, pos);
    2a22:	6f 2d       	mov	r22, r15
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		pos.page++;
    2a2e:	f3 94       	inc	r15
void print_thumb(void)
{
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
    2a30:	27 e0       	ldi	r18, 0x07	; 7
    2a32:	f2 12       	cpse	r15, r18
    2a34:	ea cf       	rjmp	.-44     	; 0x2a0a <print_thumb+0x26>
			string[i] = 0;
		getStringFromMem(string, 21 + i);
		print_string_to_buffer(string, pos);
		pos.page++;
	}
	print_buffer();
    2a36:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
    2a3a:	8f ef       	ldi	r24, 0xFF	; 255
    2a3c:	9f ef       	ldi	r25, 0xFF	; 255
    2a3e:	2d e1       	ldi	r18, 0x1D	; 29
    2a40:	81 50       	subi	r24, 0x01	; 1
    2a42:	90 40       	sbci	r25, 0x00	; 0
    2a44:	20 40       	sbci	r18, 0x00	; 0
    2a46:	e1 f7       	brne	.-8      	; 0x2a40 <print_thumb+0x5c>
    2a48:	00 c0       	rjmp	.+0      	; 0x2a4a <print_thumb+0x66>
    2a4a:	00 00       	nop
	_delay_ms(2000);
}
    2a4c:	60 96       	adiw	r28, 0x10	; 16
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	08 95       	ret

00002a64 <printMenu>:

void printMenu(MenuNode* menu_entries)
{
    2a64:	bf 92       	push	r11
    2a66:	cf 92       	push	r12
    2a68:	df 92       	push	r13
    2a6a:	ef 92       	push	r14
    2a6c:	ff 92       	push	r15
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	60 97       	sbiw	r28, 0x10	; 16
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	7c 01       	movw	r14, r24
	char string[MAX_STRING_LENGTH];
	
	clear_buffer();
    2a88:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	
	for(int i = 0; i < menu_entries->m_num_submenus; i++)
    2a8c:	00 e0       	ldi	r16, 0x00	; 0
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
    2a90:	6e 01       	movw	r12, r28
    2a92:	81 e1       	ldi	r24, 0x11	; 17
    2a94:	c8 0e       	add	r12, r24
    2a96:	d1 1c       	adc	r13, r1
    2a98:	f7 01       	movw	r30, r14
    2a9a:	87 81       	ldd	r24, Z+7	; 0x07
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	08 17       	cp	r16, r24
    2aa0:	19 07       	cpc	r17, r25
    2aa2:	14 f5       	brge	.+68     	; 0x2ae8 <printMenu+0x84>
	{
		//TODO check if num submenus < 8
		position pos = { .page = i, .column = 2 };
    2aa4:	b0 2e       	mov	r11, r16
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	31 96       	adiw	r30, 0x01	; 1
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
			string[i] = 0;
    2aaa:	11 92       	st	Z+, r1
	
	for(int i = 0; i < menu_entries->m_num_submenus; i++)
	{
		//TODO check if num submenus < 8
		position pos = { .page = i, .column = 2 };
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    2aac:	ec 15       	cp	r30, r12
    2aae:	fd 05       	cpc	r31, r13
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <printMenu+0x46>
			string[i] = 0;
		getStringFromMem(string, menu_entries->m_submenus[i]->m_content.title_id);
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	d7 01       	movw	r26, r14
    2aba:	15 96       	adiw	r26, 0x05	; 5
    2abc:	ed 91       	ld	r30, X+
    2abe:	fc 91       	ld	r31, X
    2ac0:	16 97       	sbiw	r26, 0x06	; 6
    2ac2:	e8 0f       	add	r30, r24
    2ac4:	f9 1f       	adc	r31, r25
    2ac6:	01 90       	ld	r0, Z+
    2ac8:	f0 81       	ld	r31, Z
    2aca:	e0 2d       	mov	r30, r0
    2acc:	60 81       	ld	r22, Z
    2ace:	ce 01       	movw	r24, r28
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
		print_string_to_buffer(string, pos);
    2ad6:	6b 2d       	mov	r22, r11
    2ad8:	72 e0       	ldi	r23, 0x02	; 2
    2ada:	ce 01       	movw	r24, r28
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
{
	char string[MAX_STRING_LENGTH];
	
	clear_buffer();
	
	for(int i = 0; i < menu_entries->m_num_submenus; i++)
    2ae2:	0f 5f       	subi	r16, 0xFF	; 255
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	d8 cf       	rjmp	.-80     	; 0x2a98 <printMenu+0x34>
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
			string[i] = 0;
		getStringFromMem(string, menu_entries->m_submenus[i]->m_content.title_id);
		print_string_to_buffer(string, pos);
	}
	print_buffer();
    2ae8:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
}
    2aec:	60 96       	adiw	r28, 0x10	; 16
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	ff 90       	pop	r15
    2b02:	ef 90       	pop	r14
    2b04:	df 90       	pop	r13
    2b06:	cf 90       	pop	r12
    2b08:	bf 90       	pop	r11
    2b0a:	08 95       	ret

00002b0c <sayHello>:

void sayHello(void)
{
    2b0c:	ff 92       	push	r15
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	60 97       	sbiw	r28, 0x10	; 16
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    2b26:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <clear_buffer>
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
    2b2a:	f1 2c       	mov	r15, r1
    2b2c:	8e 01       	movw	r16, r28
    2b2e:	0f 5e       	subi	r16, 0xEF	; 239
    2b30:	1f 4f       	sbci	r17, 0xFF	; 255
    2b32:	fe 01       	movw	r30, r28
    2b34:	31 96       	adiw	r30, 0x01	; 1
	for(int i = 0; i < 7; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
			string[i] = 0;
    2b36:	11 92       	st	Z+, r1
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
    2b38:	e0 17       	cp	r30, r16
    2b3a:	f1 07       	cpc	r31, r17
    2b3c:	e1 f7       	brne	.-8      	; 0x2b36 <sayHello+0x2a>
    2b3e:	6c e1       	ldi	r22, 0x1C	; 28
    2b40:	6f 0d       	add	r22, r15
			string[i] = 0;
		getStringFromMem(string, 28 + i);
    2b42:	ce 01       	movw	r24, r28
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	0e 94 e6 13 	call	0x27cc	; 0x27cc <getStringFromMem>
		print_string_to_buffer(string, pos);
    2b4a:	6f 2d       	mov	r22, r15
    2b4c:	70 e0       	ldi	r23, 0x00	; 0
    2b4e:	ce 01       	movw	r24, r28
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	0e 94 74 14 	call	0x28e8	; 0x28e8 <print_string_to_buffer>
		pos.page++;
    2b56:	f3 94       	inc	r15
void sayHello(void)
{
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
    2b58:	27 e0       	ldi	r18, 0x07	; 7
    2b5a:	f2 12       	cpse	r15, r18
    2b5c:	ea cf       	rjmp	.-44     	; 0x2b32 <sayHello+0x26>
			string[i] = 0;
		getStringFromMem(string, 28 + i);
		print_string_to_buffer(string, pos);
		pos.page++;
	}
	print_buffer();
    2b5e:	0e 94 11 14 	call	0x2822	; 0x2822 <print_buffer>
    2b62:	8f ef       	ldi	r24, 0xFF	; 255
    2b64:	9f ef       	ldi	r25, 0xFF	; 255
    2b66:	2d e1       	ldi	r18, 0x1D	; 29
    2b68:	81 50       	subi	r24, 0x01	; 1
    2b6a:	90 40       	sbci	r25, 0x00	; 0
    2b6c:	20 40       	sbci	r18, 0x00	; 0
    2b6e:	e1 f7       	brne	.-8      	; 0x2b68 <sayHello+0x5c>
    2b70:	00 c0       	rjmp	.+0      	; 0x2b72 <sayHello+0x66>
    2b72:	00 00       	nop
	_delay_ms(2000);
}
    2b74:	60 96       	adiw	r28, 0x10	; 16
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	08 95       	ret

00002b8c <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1 << SRE);
    2b8c:	85 b7       	in	r24, 0x35	; 53
    2b8e:	80 68       	ori	r24, 0x80	; 128
    2b90:	85 bf       	out	0x35, r24	; 53

	//realesing  JTAG pins from memory mapping
	SFIOR |= (1 << XMM2);
    2b92:	80 b7       	in	r24, 0x30	; 48
    2b94:	80 62       	ori	r24, 0x20	; 32
    2b96:	80 bf       	out	0x30, r24	; 48
	SFIOR &= (0 << XMM1);
    2b98:	80 b7       	in	r24, 0x30	; 48
    2b9a:	10 be       	out	0x30, r1	; 48
	SFIOR &= (0 << XMM0);
    2b9c:	80 b7       	in	r24, 0x30	; 48
    2b9e:	10 be       	out	0x30, r1	; 48
    2ba0:	08 95       	ret

00002ba2 <uart_putc>:
}

int uart_putc(uint8_t c)
{
	//wait while register is free
	while (!(UCSR0A & (1 << UDRE0)));
    2ba2:	5d 9b       	sbis	0x0b, 5	; 11
    2ba4:	fe cf       	rjmp	.-4      	; 0x2ba2 <uart_putc>

	//put character to USART data register
	UDR0 = c;
    2ba6:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	08 95       	ret

00002bae <uart_getc>:

int uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1 << RXC0)));
    2bae:	5f 9b       	sbis	0x0b, 7	; 11
    2bb0:	fe cf       	rjmp	.-4      	; 0x2bae <uart_getc>

	//get value from USART data register
	return UDR0;
    2bb2:	8c b1       	in	r24, 0x0c	; 12
}
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	08 95       	ret

00002bb8 <uart_init>:

void uart_init(void)
{
	uint8_t ubrr = MYUBRR;
	//set baudrate to 9600
	UBRR0H = (uint8_t) (ubrr >> 8);
    2bb8:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (uint8_t) ubrr;
    2bba:	8f e1       	ldi	r24, 0x1F	; 31
    2bbc:	89 b9       	out	0x09, r24	; 9

	//enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
    2bbe:	8a b1       	in	r24, 0x0a	; 10
    2bc0:	88 61       	ori	r24, 0x18	; 24
    2bc2:	8a b9       	out	0x0a, r24	; 10

	//set UCSRC as accessed register, set number of character size to 8
	#ifdef ATMEGA2560
		UCSR0C |= (3 << UCSZ00);
	#else
		UCSR0C |= (1 << URSEL0) | (3 << UCSZ00);
    2bc4:	80 b5       	in	r24, 0x20	; 32
    2bc6:	86 68       	ori	r24, 0x86	; 134
    2bc8:	80 bd       	out	0x20, r24	; 32
	#endif

	//set number of stop bits to 1
	UCSR0C &= ~(1 << USBS0);
    2bca:	80 b5       	in	r24, 0x20	; 32
    2bcc:	87 7f       	andi	r24, 0xF7	; 247
    2bce:	80 bd       	out	0x20, r24	; 32
	//set connection to asynchronous
	#ifdef ATMEGA2560
		UCSR0C &= ~(1 << UMSEL00);
		UCSR0C &= ~(1 << UMSEL01);
	#else
		UCSR0C &= ~(1 << UMSEL0);
    2bd0:	80 b5       	in	r24, 0x20	; 32
    2bd2:	8f 7b       	andi	r24, 0xBF	; 191
    2bd4:	80 bd       	out	0x20, r24	; 32
	#endif

	//disable parity mode
	UCSR0C &= ~(1 << UPM00);
    2bd6:	80 b5       	in	r24, 0x20	; 32
    2bd8:	8f 7e       	andi	r24, 0xEF	; 239
    2bda:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= ~(1 << UPM10);
    2bdc:	80 b5       	in	r24, 0x20	; 32
    2bde:	8f 7e       	andi	r24, 0xEF	; 239
    2be0:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_putc, uart_getc);
    2be2:	67 ed       	ldi	r22, 0xD7	; 215
    2be4:	75 e1       	ldi	r23, 0x15	; 21
    2be6:	81 ed       	ldi	r24, 0xD1	; 209
    2be8:	95 e1       	ldi	r25, 0x15	; 21
    2bea:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <fdevopen>

00002bee <__udivmodhi4>:
    2bee:	aa 1b       	sub	r26, r26
    2bf0:	bb 1b       	sub	r27, r27
    2bf2:	51 e1       	ldi	r21, 0x11	; 17
    2bf4:	07 c0       	rjmp	.+14     	; 0x2c04 <__udivmodhi4_ep>

00002bf6 <__udivmodhi4_loop>:
    2bf6:	aa 1f       	adc	r26, r26
    2bf8:	bb 1f       	adc	r27, r27
    2bfa:	a6 17       	cp	r26, r22
    2bfc:	b7 07       	cpc	r27, r23
    2bfe:	10 f0       	brcs	.+4      	; 0x2c04 <__udivmodhi4_ep>
    2c00:	a6 1b       	sub	r26, r22
    2c02:	b7 0b       	sbc	r27, r23

00002c04 <__udivmodhi4_ep>:
    2c04:	88 1f       	adc	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	5a 95       	dec	r21
    2c0a:	a9 f7       	brne	.-22     	; 0x2bf6 <__udivmodhi4_loop>
    2c0c:	80 95       	com	r24
    2c0e:	90 95       	com	r25
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	08 95       	ret

00002c16 <__divmodhi4>:
    2c16:	97 fb       	bst	r25, 7
    2c18:	07 2e       	mov	r0, r23
    2c1a:	16 f4       	brtc	.+4      	; 0x2c20 <__divmodhi4+0xa>
    2c1c:	00 94       	com	r0
    2c1e:	07 d0       	rcall	.+14     	; 0x2c2e <__divmodhi4_neg1>
    2c20:	77 fd       	sbrc	r23, 7
    2c22:	09 d0       	rcall	.+18     	; 0x2c36 <__divmodhi4_neg2>
    2c24:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__udivmodhi4>
    2c28:	07 fc       	sbrc	r0, 7
    2c2a:	05 d0       	rcall	.+10     	; 0x2c36 <__divmodhi4_neg2>
    2c2c:	3e f4       	brtc	.+14     	; 0x2c3c <__divmodhi4_exit>

00002c2e <__divmodhi4_neg1>:
    2c2e:	90 95       	com	r25
    2c30:	81 95       	neg	r24
    2c32:	9f 4f       	sbci	r25, 0xFF	; 255
    2c34:	08 95       	ret

00002c36 <__divmodhi4_neg2>:
    2c36:	70 95       	com	r23
    2c38:	61 95       	neg	r22
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255

00002c3c <__divmodhi4_exit>:
    2c3c:	08 95       	ret

00002c3e <__tablejump2__>:
    2c3e:	ee 0f       	add	r30, r30
    2c40:	ff 1f       	adc	r31, r31

00002c42 <__tablejump__>:
    2c42:	05 90       	lpm	r0, Z+
    2c44:	f4 91       	lpm	r31, Z
    2c46:	e0 2d       	mov	r30, r0
    2c48:	09 94       	ijmp

00002c4a <strcpy_P>:
    2c4a:	fb 01       	movw	r30, r22
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	05 90       	lpm	r0, Z+
    2c50:	0d 92       	st	X+, r0
    2c52:	00 20       	and	r0, r0
    2c54:	e1 f7       	brne	.-8      	; 0x2c4e <strcpy_P+0x4>
    2c56:	08 95       	ret

00002c58 <fdevopen>:
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	ec 01       	movw	r28, r24
    2c62:	8b 01       	movw	r16, r22
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	31 f4       	brne	.+12     	; 0x2c74 <fdevopen+0x1c>
    2c68:	61 15       	cp	r22, r1
    2c6a:	71 05       	cpc	r23, r1
    2c6c:	19 f4       	brne	.+6      	; 0x2c74 <fdevopen+0x1c>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	38 c0       	rjmp	.+112    	; 0x2ce4 <fdevopen+0x8c>
    2c74:	6e e0       	ldi	r22, 0x0E	; 14
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 ac 18 	call	0x3158	; 0x3158 <calloc>
    2c80:	fc 01       	movw	r30, r24
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	a1 f3       	breq	.-24     	; 0x2c6e <fdevopen+0x16>
    2c86:	80 e8       	ldi	r24, 0x80	; 128
    2c88:	83 83       	std	Z+3, r24	; 0x03
    2c8a:	01 15       	cp	r16, r1
    2c8c:	11 05       	cpc	r17, r1
    2c8e:	71 f0       	breq	.+28     	; 0x2cac <fdevopen+0x54>
    2c90:	13 87       	std	Z+11, r17	; 0x0b
    2c92:	02 87       	std	Z+10, r16	; 0x0a
    2c94:	81 e8       	ldi	r24, 0x81	; 129
    2c96:	83 83       	std	Z+3, r24	; 0x03
    2c98:	80 91 ed 03 	lds	r24, 0x03ED
    2c9c:	90 91 ee 03 	lds	r25, 0x03EE
    2ca0:	89 2b       	or	r24, r25
    2ca2:	21 f4       	brne	.+8      	; 0x2cac <fdevopen+0x54>
    2ca4:	f0 93 ee 03 	sts	0x03EE, r31
    2ca8:	e0 93 ed 03 	sts	0x03ED, r30
    2cac:	20 97       	sbiw	r28, 0x00	; 0
    2cae:	c9 f0       	breq	.+50     	; 0x2ce2 <fdevopen+0x8a>
    2cb0:	d1 87       	std	Z+9, r29	; 0x09
    2cb2:	c0 87       	std	Z+8, r28	; 0x08
    2cb4:	83 81       	ldd	r24, Z+3	; 0x03
    2cb6:	82 60       	ori	r24, 0x02	; 2
    2cb8:	83 83       	std	Z+3, r24	; 0x03
    2cba:	80 91 ef 03 	lds	r24, 0x03EF
    2cbe:	90 91 f0 03 	lds	r25, 0x03F0
    2cc2:	89 2b       	or	r24, r25
    2cc4:	71 f4       	brne	.+28     	; 0x2ce2 <fdevopen+0x8a>
    2cc6:	f0 93 f0 03 	sts	0x03F0, r31
    2cca:	e0 93 ef 03 	sts	0x03EF, r30
    2cce:	80 91 f1 03 	lds	r24, 0x03F1
    2cd2:	90 91 f2 03 	lds	r25, 0x03F2
    2cd6:	89 2b       	or	r24, r25
    2cd8:	21 f4       	brne	.+8      	; 0x2ce2 <fdevopen+0x8a>
    2cda:	f0 93 f2 03 	sts	0x03F2, r31
    2cde:	e0 93 f1 03 	sts	0x03F1, r30
    2ce2:	cf 01       	movw	r24, r30
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <printf>:
    2cee:	a0 e0       	ldi	r26, 0x00	; 0
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ed e7       	ldi	r30, 0x7D	; 125
    2cf4:	f6 e1       	ldi	r31, 0x16	; 22
    2cf6:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__prologue_saves__+0x20>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	35 96       	adiw	r30, 0x05	; 5
    2cfe:	61 91       	ld	r22, Z+
    2d00:	71 91       	ld	r23, Z+
    2d02:	af 01       	movw	r20, r30
    2d04:	80 91 ef 03 	lds	r24, 0x03EF
    2d08:	90 91 f0 03 	lds	r25, 0x03F0
    2d0c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vfprintf>
    2d10:	e2 e0       	ldi	r30, 0x02	; 2
    2d12:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__epilogue_restores__+0x20>

00002d16 <puts>:
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	e0 91 ef 03 	lds	r30, 0x03EF
    2d22:	f0 91 f0 03 	lds	r31, 0x03F0
    2d26:	23 81       	ldd	r18, Z+3	; 0x03
    2d28:	21 ff       	sbrs	r18, 1
    2d2a:	1b c0       	rjmp	.+54     	; 0x2d62 <puts+0x4c>
    2d2c:	ec 01       	movw	r28, r24
    2d2e:	00 e0       	ldi	r16, 0x00	; 0
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	89 91       	ld	r24, Y+
    2d34:	60 91 ef 03 	lds	r22, 0x03EF
    2d38:	70 91 f0 03 	lds	r23, 0x03F0
    2d3c:	db 01       	movw	r26, r22
    2d3e:	18 96       	adiw	r26, 0x08	; 8
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	19 97       	sbiw	r26, 0x09	; 9
    2d46:	88 23       	and	r24, r24
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <puts+0x40>
    2d4a:	09 95       	icall
    2d4c:	89 2b       	or	r24, r25
    2d4e:	89 f3       	breq	.-30     	; 0x2d32 <puts+0x1c>
    2d50:	0f ef       	ldi	r16, 0xFF	; 255
    2d52:	1f ef       	ldi	r17, 0xFF	; 255
    2d54:	ee cf       	rjmp	.-36     	; 0x2d32 <puts+0x1c>
    2d56:	8a e0       	ldi	r24, 0x0A	; 10
    2d58:	09 95       	icall
    2d5a:	89 2b       	or	r24, r25
    2d5c:	11 f4       	brne	.+4      	; 0x2d62 <puts+0x4c>
    2d5e:	c8 01       	movw	r24, r16
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <puts+0x50>
    2d62:	8f ef       	ldi	r24, 0xFF	; 255
    2d64:	9f ef       	ldi	r25, 0xFF	; 255
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <sprintf>:
    2d70:	ae e0       	ldi	r26, 0x0E	; 14
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ee eb       	ldi	r30, 0xBE	; 190
    2d76:	f6 e1       	ldi	r31, 0x16	; 22
    2d78:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x1c>
    2d7c:	0d 89       	ldd	r16, Y+21	; 0x15
    2d7e:	1e 89       	ldd	r17, Y+22	; 0x16
    2d80:	86 e0       	ldi	r24, 0x06	; 6
    2d82:	8c 83       	std	Y+4, r24	; 0x04
    2d84:	1a 83       	std	Y+2, r17	; 0x02
    2d86:	09 83       	std	Y+1, r16	; 0x01
    2d88:	8f ef       	ldi	r24, 0xFF	; 255
    2d8a:	9f e7       	ldi	r25, 0x7F	; 127
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	ae 01       	movw	r20, r28
    2d92:	47 5e       	subi	r20, 0xE7	; 231
    2d94:	5f 4f       	sbci	r21, 0xFF	; 255
    2d96:	6f 89       	ldd	r22, Y+23	; 0x17
    2d98:	78 8d       	ldd	r23, Y+24	; 0x18
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vfprintf>
    2da2:	ef 81       	ldd	r30, Y+7	; 0x07
    2da4:	f8 85       	ldd	r31, Y+8	; 0x08
    2da6:	e0 0f       	add	r30, r16
    2da8:	f1 1f       	adc	r31, r17
    2daa:	10 82       	st	Z, r1
    2dac:	2e 96       	adiw	r28, 0x0e	; 14
    2dae:	e4 e0       	ldi	r30, 0x04	; 4
    2db0:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x1c>

00002db4 <vfprintf>:
    2db4:	ac e0       	ldi	r26, 0x0C	; 12
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e0 ee       	ldi	r30, 0xE0	; 224
    2dba:	f6 e1       	ldi	r31, 0x16	; 22
    2dbc:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__prologue_saves__>
    2dc0:	7c 01       	movw	r14, r24
    2dc2:	6b 01       	movw	r12, r22
    2dc4:	8a 01       	movw	r16, r20
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	17 82       	std	Z+7, r1	; 0x07
    2dca:	16 82       	std	Z+6, r1	; 0x06
    2dcc:	83 81       	ldd	r24, Z+3	; 0x03
    2dce:	81 ff       	sbrs	r24, 1
    2dd0:	bd c1       	rjmp	.+890    	; 0x314c <vfprintf+0x398>
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	4c 01       	movw	r8, r24
    2dd8:	f7 01       	movw	r30, r14
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	f6 01       	movw	r30, r12
    2dde:	93 fd       	sbrc	r25, 3
    2de0:	85 91       	lpm	r24, Z+
    2de2:	93 ff       	sbrs	r25, 3
    2de4:	81 91       	ld	r24, Z+
    2de6:	6f 01       	movw	r12, r30
    2de8:	88 23       	and	r24, r24
    2dea:	09 f4       	brne	.+2      	; 0x2dee <vfprintf+0x3a>
    2dec:	ab c1       	rjmp	.+854    	; 0x3144 <vfprintf+0x390>
    2dee:	85 32       	cpi	r24, 0x25	; 37
    2df0:	39 f4       	brne	.+14     	; 0x2e00 <vfprintf+0x4c>
    2df2:	93 fd       	sbrc	r25, 3
    2df4:	85 91       	lpm	r24, Z+
    2df6:	93 ff       	sbrs	r25, 3
    2df8:	81 91       	ld	r24, Z+
    2dfa:	6f 01       	movw	r12, r30
    2dfc:	85 32       	cpi	r24, 0x25	; 37
    2dfe:	29 f4       	brne	.+10     	; 0x2e0a <vfprintf+0x56>
    2e00:	b7 01       	movw	r22, r14
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    2e08:	e7 cf       	rjmp	.-50     	; 0x2dd8 <vfprintf+0x24>
    2e0a:	51 2c       	mov	r5, r1
    2e0c:	31 2c       	mov	r3, r1
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	20 32       	cpi	r18, 0x20	; 32
    2e12:	a0 f4       	brcc	.+40     	; 0x2e3c <vfprintf+0x88>
    2e14:	8b 32       	cpi	r24, 0x2B	; 43
    2e16:	69 f0       	breq	.+26     	; 0x2e32 <vfprintf+0x7e>
    2e18:	30 f4       	brcc	.+12     	; 0x2e26 <vfprintf+0x72>
    2e1a:	80 32       	cpi	r24, 0x20	; 32
    2e1c:	59 f0       	breq	.+22     	; 0x2e34 <vfprintf+0x80>
    2e1e:	83 32       	cpi	r24, 0x23	; 35
    2e20:	69 f4       	brne	.+26     	; 0x2e3c <vfprintf+0x88>
    2e22:	20 61       	ori	r18, 0x10	; 16
    2e24:	2c c0       	rjmp	.+88     	; 0x2e7e <vfprintf+0xca>
    2e26:	8d 32       	cpi	r24, 0x2D	; 45
    2e28:	39 f0       	breq	.+14     	; 0x2e38 <vfprintf+0x84>
    2e2a:	80 33       	cpi	r24, 0x30	; 48
    2e2c:	39 f4       	brne	.+14     	; 0x2e3c <vfprintf+0x88>
    2e2e:	21 60       	ori	r18, 0x01	; 1
    2e30:	26 c0       	rjmp	.+76     	; 0x2e7e <vfprintf+0xca>
    2e32:	22 60       	ori	r18, 0x02	; 2
    2e34:	24 60       	ori	r18, 0x04	; 4
    2e36:	23 c0       	rjmp	.+70     	; 0x2e7e <vfprintf+0xca>
    2e38:	28 60       	ori	r18, 0x08	; 8
    2e3a:	21 c0       	rjmp	.+66     	; 0x2e7e <vfprintf+0xca>
    2e3c:	27 fd       	sbrc	r18, 7
    2e3e:	27 c0       	rjmp	.+78     	; 0x2e8e <vfprintf+0xda>
    2e40:	30 ed       	ldi	r19, 0xD0	; 208
    2e42:	38 0f       	add	r19, r24
    2e44:	3a 30       	cpi	r19, 0x0A	; 10
    2e46:	78 f4       	brcc	.+30     	; 0x2e66 <vfprintf+0xb2>
    2e48:	26 ff       	sbrs	r18, 6
    2e4a:	06 c0       	rjmp	.+12     	; 0x2e58 <vfprintf+0xa4>
    2e4c:	fa e0       	ldi	r31, 0x0A	; 10
    2e4e:	5f 9e       	mul	r5, r31
    2e50:	30 0d       	add	r19, r0
    2e52:	11 24       	eor	r1, r1
    2e54:	53 2e       	mov	r5, r19
    2e56:	13 c0       	rjmp	.+38     	; 0x2e7e <vfprintf+0xca>
    2e58:	8a e0       	ldi	r24, 0x0A	; 10
    2e5a:	38 9e       	mul	r3, r24
    2e5c:	30 0d       	add	r19, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	33 2e       	mov	r3, r19
    2e62:	20 62       	ori	r18, 0x20	; 32
    2e64:	0c c0       	rjmp	.+24     	; 0x2e7e <vfprintf+0xca>
    2e66:	8e 32       	cpi	r24, 0x2E	; 46
    2e68:	21 f4       	brne	.+8      	; 0x2e72 <vfprintf+0xbe>
    2e6a:	26 fd       	sbrc	r18, 6
    2e6c:	6b c1       	rjmp	.+726    	; 0x3144 <vfprintf+0x390>
    2e6e:	20 64       	ori	r18, 0x40	; 64
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <vfprintf+0xca>
    2e72:	8c 36       	cpi	r24, 0x6C	; 108
    2e74:	11 f4       	brne	.+4      	; 0x2e7a <vfprintf+0xc6>
    2e76:	20 68       	ori	r18, 0x80	; 128
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <vfprintf+0xca>
    2e7a:	88 36       	cpi	r24, 0x68	; 104
    2e7c:	41 f4       	brne	.+16     	; 0x2e8e <vfprintf+0xda>
    2e7e:	f6 01       	movw	r30, r12
    2e80:	93 fd       	sbrc	r25, 3
    2e82:	85 91       	lpm	r24, Z+
    2e84:	93 ff       	sbrs	r25, 3
    2e86:	81 91       	ld	r24, Z+
    2e88:	6f 01       	movw	r12, r30
    2e8a:	81 11       	cpse	r24, r1
    2e8c:	c1 cf       	rjmp	.-126    	; 0x2e10 <vfprintf+0x5c>
    2e8e:	98 2f       	mov	r25, r24
    2e90:	9f 7d       	andi	r25, 0xDF	; 223
    2e92:	95 54       	subi	r25, 0x45	; 69
    2e94:	93 30       	cpi	r25, 0x03	; 3
    2e96:	28 f4       	brcc	.+10     	; 0x2ea2 <vfprintf+0xee>
    2e98:	0c 5f       	subi	r16, 0xFC	; 252
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	ff e3       	ldi	r31, 0x3F	; 63
    2e9e:	f9 83       	std	Y+1, r31	; 0x01
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <vfprintf+0x108>
    2ea2:	83 36       	cpi	r24, 0x63	; 99
    2ea4:	31 f0       	breq	.+12     	; 0x2eb2 <vfprintf+0xfe>
    2ea6:	83 37       	cpi	r24, 0x73	; 115
    2ea8:	71 f0       	breq	.+28     	; 0x2ec6 <vfprintf+0x112>
    2eaa:	83 35       	cpi	r24, 0x53	; 83
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <vfprintf+0xfc>
    2eae:	5b c0       	rjmp	.+182    	; 0x2f66 <vfprintf+0x1b2>
    2eb0:	22 c0       	rjmp	.+68     	; 0x2ef6 <vfprintf+0x142>
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	80 81       	ld	r24, Z
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	0e 5f       	subi	r16, 0xFE	; 254
    2eba:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebc:	44 24       	eor	r4, r4
    2ebe:	43 94       	inc	r4
    2ec0:	51 2c       	mov	r5, r1
    2ec2:	54 01       	movw	r10, r8
    2ec4:	15 c0       	rjmp	.+42     	; 0x2ef0 <vfprintf+0x13c>
    2ec6:	38 01       	movw	r6, r16
    2ec8:	f2 e0       	ldi	r31, 0x02	; 2
    2eca:	6f 0e       	add	r6, r31
    2ecc:	71 1c       	adc	r7, r1
    2ece:	f8 01       	movw	r30, r16
    2ed0:	a0 80       	ld	r10, Z
    2ed2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ed4:	26 ff       	sbrs	r18, 6
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <vfprintf+0x12a>
    2ed8:	65 2d       	mov	r22, r5
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <vfprintf+0x12e>
    2ede:	6f ef       	ldi	r22, 0xFF	; 255
    2ee0:	7f ef       	ldi	r23, 0xFF	; 255
    2ee2:	c5 01       	movw	r24, r10
    2ee4:	2c 87       	std	Y+12, r18	; 0x0c
    2ee6:	0e 94 01 1a 	call	0x3402	; 0x3402 <strnlen>
    2eea:	2c 01       	movw	r4, r24
    2eec:	83 01       	movw	r16, r6
    2eee:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ef0:	2f 77       	andi	r18, 0x7F	; 127
    2ef2:	22 2e       	mov	r2, r18
    2ef4:	17 c0       	rjmp	.+46     	; 0x2f24 <vfprintf+0x170>
    2ef6:	38 01       	movw	r6, r16
    2ef8:	f2 e0       	ldi	r31, 0x02	; 2
    2efa:	6f 0e       	add	r6, r31
    2efc:	71 1c       	adc	r7, r1
    2efe:	f8 01       	movw	r30, r16
    2f00:	a0 80       	ld	r10, Z
    2f02:	b1 80       	ldd	r11, Z+1	; 0x01
    2f04:	26 ff       	sbrs	r18, 6
    2f06:	03 c0       	rjmp	.+6      	; 0x2f0e <vfprintf+0x15a>
    2f08:	65 2d       	mov	r22, r5
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	02 c0       	rjmp	.+4      	; 0x2f12 <vfprintf+0x15e>
    2f0e:	6f ef       	ldi	r22, 0xFF	; 255
    2f10:	7f ef       	ldi	r23, 0xFF	; 255
    2f12:	c5 01       	movw	r24, r10
    2f14:	2c 87       	std	Y+12, r18	; 0x0c
    2f16:	0e 94 ef 19 	call	0x33de	; 0x33de <strnlen_P>
    2f1a:	2c 01       	movw	r4, r24
    2f1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f1e:	20 68       	ori	r18, 0x80	; 128
    2f20:	22 2e       	mov	r2, r18
    2f22:	83 01       	movw	r16, r6
    2f24:	23 fc       	sbrc	r2, 3
    2f26:	1b c0       	rjmp	.+54     	; 0x2f5e <vfprintf+0x1aa>
    2f28:	83 2d       	mov	r24, r3
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	48 16       	cp	r4, r24
    2f2e:	59 06       	cpc	r5, r25
    2f30:	b0 f4       	brcc	.+44     	; 0x2f5e <vfprintf+0x1aa>
    2f32:	b7 01       	movw	r22, r14
    2f34:	80 e2       	ldi	r24, 0x20	; 32
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    2f3c:	3a 94       	dec	r3
    2f3e:	f4 cf       	rjmp	.-24     	; 0x2f28 <vfprintf+0x174>
    2f40:	f5 01       	movw	r30, r10
    2f42:	27 fc       	sbrc	r2, 7
    2f44:	85 91       	lpm	r24, Z+
    2f46:	27 fe       	sbrs	r2, 7
    2f48:	81 91       	ld	r24, Z+
    2f4a:	5f 01       	movw	r10, r30
    2f4c:	b7 01       	movw	r22, r14
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    2f54:	31 10       	cpse	r3, r1
    2f56:	3a 94       	dec	r3
    2f58:	f1 e0       	ldi	r31, 0x01	; 1
    2f5a:	4f 1a       	sub	r4, r31
    2f5c:	51 08       	sbc	r5, r1
    2f5e:	41 14       	cp	r4, r1
    2f60:	51 04       	cpc	r5, r1
    2f62:	71 f7       	brne	.-36     	; 0x2f40 <vfprintf+0x18c>
    2f64:	e5 c0       	rjmp	.+458    	; 0x3130 <vfprintf+0x37c>
    2f66:	84 36       	cpi	r24, 0x64	; 100
    2f68:	11 f0       	breq	.+4      	; 0x2f6e <vfprintf+0x1ba>
    2f6a:	89 36       	cpi	r24, 0x69	; 105
    2f6c:	39 f5       	brne	.+78     	; 0x2fbc <vfprintf+0x208>
    2f6e:	f8 01       	movw	r30, r16
    2f70:	27 ff       	sbrs	r18, 7
    2f72:	07 c0       	rjmp	.+14     	; 0x2f82 <vfprintf+0x1ce>
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	0c 5f       	subi	r16, 0xFC	; 252
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	08 c0       	rjmp	.+16     	; 0x2f92 <vfprintf+0x1de>
    2f82:	60 81       	ld	r22, Z
    2f84:	71 81       	ldd	r23, Z+1	; 0x01
    2f86:	88 27       	eor	r24, r24
    2f88:	77 fd       	sbrc	r23, 7
    2f8a:	80 95       	com	r24
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	0e 5f       	subi	r16, 0xFE	; 254
    2f90:	1f 4f       	sbci	r17, 0xFF	; 255
    2f92:	2f 76       	andi	r18, 0x6F	; 111
    2f94:	b2 2e       	mov	r11, r18
    2f96:	97 ff       	sbrs	r25, 7
    2f98:	09 c0       	rjmp	.+18     	; 0x2fac <vfprintf+0x1f8>
    2f9a:	90 95       	com	r25
    2f9c:	80 95       	com	r24
    2f9e:	70 95       	com	r23
    2fa0:	61 95       	neg	r22
    2fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa8:	20 68       	ori	r18, 0x80	; 128
    2faa:	b2 2e       	mov	r11, r18
    2fac:	2a e0       	ldi	r18, 0x0A	; 10
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	a4 01       	movw	r20, r8
    2fb2:	0e 94 3e 1a 	call	0x347c	; 0x347c <__ultoa_invert>
    2fb6:	a8 2e       	mov	r10, r24
    2fb8:	a8 18       	sub	r10, r8
    2fba:	44 c0       	rjmp	.+136    	; 0x3044 <vfprintf+0x290>
    2fbc:	85 37       	cpi	r24, 0x75	; 117
    2fbe:	29 f4       	brne	.+10     	; 0x2fca <vfprintf+0x216>
    2fc0:	2f 7e       	andi	r18, 0xEF	; 239
    2fc2:	b2 2e       	mov	r11, r18
    2fc4:	2a e0       	ldi	r18, 0x0A	; 10
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	25 c0       	rjmp	.+74     	; 0x3014 <vfprintf+0x260>
    2fca:	f2 2f       	mov	r31, r18
    2fcc:	f9 7f       	andi	r31, 0xF9	; 249
    2fce:	bf 2e       	mov	r11, r31
    2fd0:	8f 36       	cpi	r24, 0x6F	; 111
    2fd2:	c1 f0       	breq	.+48     	; 0x3004 <vfprintf+0x250>
    2fd4:	18 f4       	brcc	.+6      	; 0x2fdc <vfprintf+0x228>
    2fd6:	88 35       	cpi	r24, 0x58	; 88
    2fd8:	79 f0       	breq	.+30     	; 0x2ff8 <vfprintf+0x244>
    2fda:	b4 c0       	rjmp	.+360    	; 0x3144 <vfprintf+0x390>
    2fdc:	80 37       	cpi	r24, 0x70	; 112
    2fde:	19 f0       	breq	.+6      	; 0x2fe6 <vfprintf+0x232>
    2fe0:	88 37       	cpi	r24, 0x78	; 120
    2fe2:	21 f0       	breq	.+8      	; 0x2fec <vfprintf+0x238>
    2fe4:	af c0       	rjmp	.+350    	; 0x3144 <vfprintf+0x390>
    2fe6:	2f 2f       	mov	r18, r31
    2fe8:	20 61       	ori	r18, 0x10	; 16
    2fea:	b2 2e       	mov	r11, r18
    2fec:	b4 fe       	sbrs	r11, 4
    2fee:	0d c0       	rjmp	.+26     	; 0x300a <vfprintf+0x256>
    2ff0:	8b 2d       	mov	r24, r11
    2ff2:	84 60       	ori	r24, 0x04	; 4
    2ff4:	b8 2e       	mov	r11, r24
    2ff6:	09 c0       	rjmp	.+18     	; 0x300a <vfprintf+0x256>
    2ff8:	24 ff       	sbrs	r18, 4
    2ffa:	0a c0       	rjmp	.+20     	; 0x3010 <vfprintf+0x25c>
    2ffc:	9f 2f       	mov	r25, r31
    2ffe:	96 60       	ori	r25, 0x06	; 6
    3000:	b9 2e       	mov	r11, r25
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <vfprintf+0x25c>
    3004:	28 e0       	ldi	r18, 0x08	; 8
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	05 c0       	rjmp	.+10     	; 0x3014 <vfprintf+0x260>
    300a:	20 e1       	ldi	r18, 0x10	; 16
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <vfprintf+0x260>
    3010:	20 e1       	ldi	r18, 0x10	; 16
    3012:	32 e0       	ldi	r19, 0x02	; 2
    3014:	f8 01       	movw	r30, r16
    3016:	b7 fe       	sbrs	r11, 7
    3018:	07 c0       	rjmp	.+14     	; 0x3028 <vfprintf+0x274>
    301a:	60 81       	ld	r22, Z
    301c:	71 81       	ldd	r23, Z+1	; 0x01
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	0c 5f       	subi	r16, 0xFC	; 252
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <vfprintf+0x280>
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 5f       	subi	r16, 0xFE	; 254
    3032:	1f 4f       	sbci	r17, 0xFF	; 255
    3034:	a4 01       	movw	r20, r8
    3036:	0e 94 3e 1a 	call	0x347c	; 0x347c <__ultoa_invert>
    303a:	a8 2e       	mov	r10, r24
    303c:	a8 18       	sub	r10, r8
    303e:	fb 2d       	mov	r31, r11
    3040:	ff 77       	andi	r31, 0x7F	; 127
    3042:	bf 2e       	mov	r11, r31
    3044:	b6 fe       	sbrs	r11, 6
    3046:	0b c0       	rjmp	.+22     	; 0x305e <vfprintf+0x2aa>
    3048:	2b 2d       	mov	r18, r11
    304a:	2e 7f       	andi	r18, 0xFE	; 254
    304c:	a5 14       	cp	r10, r5
    304e:	50 f4       	brcc	.+20     	; 0x3064 <vfprintf+0x2b0>
    3050:	b4 fe       	sbrs	r11, 4
    3052:	0a c0       	rjmp	.+20     	; 0x3068 <vfprintf+0x2b4>
    3054:	b2 fc       	sbrc	r11, 2
    3056:	08 c0       	rjmp	.+16     	; 0x3068 <vfprintf+0x2b4>
    3058:	2b 2d       	mov	r18, r11
    305a:	2e 7e       	andi	r18, 0xEE	; 238
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <vfprintf+0x2b4>
    305e:	7a 2c       	mov	r7, r10
    3060:	2b 2d       	mov	r18, r11
    3062:	03 c0       	rjmp	.+6      	; 0x306a <vfprintf+0x2b6>
    3064:	7a 2c       	mov	r7, r10
    3066:	01 c0       	rjmp	.+2      	; 0x306a <vfprintf+0x2b6>
    3068:	75 2c       	mov	r7, r5
    306a:	24 ff       	sbrs	r18, 4
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <vfprintf+0x2d4>
    306e:	fe 01       	movw	r30, r28
    3070:	ea 0d       	add	r30, r10
    3072:	f1 1d       	adc	r31, r1
    3074:	80 81       	ld	r24, Z
    3076:	80 33       	cpi	r24, 0x30	; 48
    3078:	11 f4       	brne	.+4      	; 0x307e <vfprintf+0x2ca>
    307a:	29 7e       	andi	r18, 0xE9	; 233
    307c:	09 c0       	rjmp	.+18     	; 0x3090 <vfprintf+0x2dc>
    307e:	22 ff       	sbrs	r18, 2
    3080:	06 c0       	rjmp	.+12     	; 0x308e <vfprintf+0x2da>
    3082:	73 94       	inc	r7
    3084:	73 94       	inc	r7
    3086:	04 c0       	rjmp	.+8      	; 0x3090 <vfprintf+0x2dc>
    3088:	82 2f       	mov	r24, r18
    308a:	86 78       	andi	r24, 0x86	; 134
    308c:	09 f0       	breq	.+2      	; 0x3090 <vfprintf+0x2dc>
    308e:	73 94       	inc	r7
    3090:	23 fd       	sbrc	r18, 3
    3092:	13 c0       	rjmp	.+38     	; 0x30ba <vfprintf+0x306>
    3094:	20 ff       	sbrs	r18, 0
    3096:	06 c0       	rjmp	.+12     	; 0x30a4 <vfprintf+0x2f0>
    3098:	5a 2c       	mov	r5, r10
    309a:	73 14       	cp	r7, r3
    309c:	18 f4       	brcc	.+6      	; 0x30a4 <vfprintf+0x2f0>
    309e:	53 0c       	add	r5, r3
    30a0:	57 18       	sub	r5, r7
    30a2:	73 2c       	mov	r7, r3
    30a4:	73 14       	cp	r7, r3
    30a6:	68 f4       	brcc	.+26     	; 0x30c2 <vfprintf+0x30e>
    30a8:	b7 01       	movw	r22, r14
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	2c 87       	std	Y+12, r18	; 0x0c
    30b0:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    30b4:	73 94       	inc	r7
    30b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    30b8:	f5 cf       	rjmp	.-22     	; 0x30a4 <vfprintf+0x2f0>
    30ba:	73 14       	cp	r7, r3
    30bc:	10 f4       	brcc	.+4      	; 0x30c2 <vfprintf+0x30e>
    30be:	37 18       	sub	r3, r7
    30c0:	01 c0       	rjmp	.+2      	; 0x30c4 <vfprintf+0x310>
    30c2:	31 2c       	mov	r3, r1
    30c4:	24 ff       	sbrs	r18, 4
    30c6:	12 c0       	rjmp	.+36     	; 0x30ec <vfprintf+0x338>
    30c8:	b7 01       	movw	r22, r14
    30ca:	80 e3       	ldi	r24, 0x30	; 48
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	2c 87       	std	Y+12, r18	; 0x0c
    30d0:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    30d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30d6:	22 ff       	sbrs	r18, 2
    30d8:	17 c0       	rjmp	.+46     	; 0x3108 <vfprintf+0x354>
    30da:	21 ff       	sbrs	r18, 1
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <vfprintf+0x330>
    30de:	88 e5       	ldi	r24, 0x58	; 88
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <vfprintf+0x334>
    30e4:	88 e7       	ldi	r24, 0x78	; 120
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	b7 01       	movw	r22, r14
    30ea:	0c c0       	rjmp	.+24     	; 0x3104 <vfprintf+0x350>
    30ec:	82 2f       	mov	r24, r18
    30ee:	86 78       	andi	r24, 0x86	; 134
    30f0:	59 f0       	breq	.+22     	; 0x3108 <vfprintf+0x354>
    30f2:	21 fd       	sbrc	r18, 1
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <vfprintf+0x346>
    30f6:	80 e2       	ldi	r24, 0x20	; 32
    30f8:	01 c0       	rjmp	.+2      	; 0x30fc <vfprintf+0x348>
    30fa:	8b e2       	ldi	r24, 0x2B	; 43
    30fc:	27 fd       	sbrc	r18, 7
    30fe:	8d e2       	ldi	r24, 0x2D	; 45
    3100:	b7 01       	movw	r22, r14
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    3108:	a5 14       	cp	r10, r5
    310a:	38 f4       	brcc	.+14     	; 0x311a <vfprintf+0x366>
    310c:	b7 01       	movw	r22, r14
    310e:	80 e3       	ldi	r24, 0x30	; 48
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    3116:	5a 94       	dec	r5
    3118:	f7 cf       	rjmp	.-18     	; 0x3108 <vfprintf+0x354>
    311a:	aa 94       	dec	r10
    311c:	f4 01       	movw	r30, r8
    311e:	ea 0d       	add	r30, r10
    3120:	f1 1d       	adc	r31, r1
    3122:	80 81       	ld	r24, Z
    3124:	b7 01       	movw	r22, r14
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    312c:	a1 10       	cpse	r10, r1
    312e:	f5 cf       	rjmp	.-22     	; 0x311a <vfprintf+0x366>
    3130:	33 20       	and	r3, r3
    3132:	09 f4       	brne	.+2      	; 0x3136 <vfprintf+0x382>
    3134:	51 ce       	rjmp	.-862    	; 0x2dd8 <vfprintf+0x24>
    3136:	b7 01       	movw	r22, r14
    3138:	80 e2       	ldi	r24, 0x20	; 32
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	0e 94 0c 1a 	call	0x3418	; 0x3418 <fputc>
    3140:	3a 94       	dec	r3
    3142:	f6 cf       	rjmp	.-20     	; 0x3130 <vfprintf+0x37c>
    3144:	f7 01       	movw	r30, r14
    3146:	86 81       	ldd	r24, Z+6	; 0x06
    3148:	97 81       	ldd	r25, Z+7	; 0x07
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0x39c>
    314c:	8f ef       	ldi	r24, 0xFF	; 255
    314e:	9f ef       	ldi	r25, 0xFF	; 255
    3150:	2c 96       	adiw	r28, 0x0c	; 12
    3152:	e2 e1       	ldi	r30, 0x12	; 18
    3154:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__epilogue_restores__>

00003158 <calloc>:
    3158:	0f 93       	push	r16
    315a:	1f 93       	push	r17
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	86 9f       	mul	r24, r22
    3162:	80 01       	movw	r16, r0
    3164:	87 9f       	mul	r24, r23
    3166:	10 0d       	add	r17, r0
    3168:	96 9f       	mul	r25, r22
    316a:	10 0d       	add	r17, r0
    316c:	11 24       	eor	r1, r1
    316e:	c8 01       	movw	r24, r16
    3170:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
    3174:	ec 01       	movw	r28, r24
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	29 f0       	breq	.+10     	; 0x3184 <calloc+0x2c>
    317a:	a8 01       	movw	r20, r16
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <memset>
    3184:	ce 01       	movw	r24, r28
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	08 95       	ret

00003190 <malloc>:
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	91 05       	cpc	r25, r1
    3198:	10 f4       	brcc	.+4      	; 0x319e <malloc+0xe>
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	e0 91 f5 03 	lds	r30, 0x03F5
    31a2:	f0 91 f6 03 	lds	r31, 0x03F6
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	a0 e0       	ldi	r26, 0x00	; 0
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	30 97       	sbiw	r30, 0x00	; 0
    31b0:	39 f1       	breq	.+78     	; 0x3200 <malloc+0x70>
    31b2:	40 81       	ld	r20, Z
    31b4:	51 81       	ldd	r21, Z+1	; 0x01
    31b6:	48 17       	cp	r20, r24
    31b8:	59 07       	cpc	r21, r25
    31ba:	b8 f0       	brcs	.+46     	; 0x31ea <malloc+0x5a>
    31bc:	48 17       	cp	r20, r24
    31be:	59 07       	cpc	r21, r25
    31c0:	71 f4       	brne	.+28     	; 0x31de <malloc+0x4e>
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	10 97       	sbiw	r26, 0x00	; 0
    31c8:	29 f0       	breq	.+10     	; 0x31d4 <malloc+0x44>
    31ca:	13 96       	adiw	r26, 0x03	; 3
    31cc:	9c 93       	st	X, r25
    31ce:	8e 93       	st	-X, r24
    31d0:	12 97       	sbiw	r26, 0x02	; 2
    31d2:	2c c0       	rjmp	.+88     	; 0x322c <malloc+0x9c>
    31d4:	90 93 f6 03 	sts	0x03F6, r25
    31d8:	80 93 f5 03 	sts	0x03F5, r24
    31dc:	27 c0       	rjmp	.+78     	; 0x322c <malloc+0x9c>
    31de:	21 15       	cp	r18, r1
    31e0:	31 05       	cpc	r19, r1
    31e2:	31 f0       	breq	.+12     	; 0x31f0 <malloc+0x60>
    31e4:	42 17       	cp	r20, r18
    31e6:	53 07       	cpc	r21, r19
    31e8:	18 f0       	brcs	.+6      	; 0x31f0 <malloc+0x60>
    31ea:	a9 01       	movw	r20, r18
    31ec:	db 01       	movw	r26, r22
    31ee:	01 c0       	rjmp	.+2      	; 0x31f2 <malloc+0x62>
    31f0:	ef 01       	movw	r28, r30
    31f2:	9a 01       	movw	r18, r20
    31f4:	bd 01       	movw	r22, r26
    31f6:	df 01       	movw	r26, r30
    31f8:	02 80       	ldd	r0, Z+2	; 0x02
    31fa:	f3 81       	ldd	r31, Z+3	; 0x03
    31fc:	e0 2d       	mov	r30, r0
    31fe:	d7 cf       	rjmp	.-82     	; 0x31ae <malloc+0x1e>
    3200:	21 15       	cp	r18, r1
    3202:	31 05       	cpc	r19, r1
    3204:	f9 f0       	breq	.+62     	; 0x3244 <malloc+0xb4>
    3206:	28 1b       	sub	r18, r24
    3208:	39 0b       	sbc	r19, r25
    320a:	24 30       	cpi	r18, 0x04	; 4
    320c:	31 05       	cpc	r19, r1
    320e:	80 f4       	brcc	.+32     	; 0x3230 <malloc+0xa0>
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	61 15       	cp	r22, r1
    3216:	71 05       	cpc	r23, r1
    3218:	21 f0       	breq	.+8      	; 0x3222 <malloc+0x92>
    321a:	fb 01       	movw	r30, r22
    321c:	93 83       	std	Z+3, r25	; 0x03
    321e:	82 83       	std	Z+2, r24	; 0x02
    3220:	04 c0       	rjmp	.+8      	; 0x322a <malloc+0x9a>
    3222:	90 93 f6 03 	sts	0x03F6, r25
    3226:	80 93 f5 03 	sts	0x03F5, r24
    322a:	fe 01       	movw	r30, r28
    322c:	32 96       	adiw	r30, 0x02	; 2
    322e:	44 c0       	rjmp	.+136    	; 0x32b8 <malloc+0x128>
    3230:	fe 01       	movw	r30, r28
    3232:	e2 0f       	add	r30, r18
    3234:	f3 1f       	adc	r31, r19
    3236:	81 93       	st	Z+, r24
    3238:	91 93       	st	Z+, r25
    323a:	22 50       	subi	r18, 0x02	; 2
    323c:	31 09       	sbc	r19, r1
    323e:	39 83       	std	Y+1, r19	; 0x01
    3240:	28 83       	st	Y, r18
    3242:	3a c0       	rjmp	.+116    	; 0x32b8 <malloc+0x128>
    3244:	20 91 f3 03 	lds	r18, 0x03F3
    3248:	30 91 f4 03 	lds	r19, 0x03F4
    324c:	23 2b       	or	r18, r19
    324e:	41 f4       	brne	.+16     	; 0x3260 <malloc+0xd0>
    3250:	20 91 02 01 	lds	r18, 0x0102
    3254:	30 91 03 01 	lds	r19, 0x0103
    3258:	30 93 f4 03 	sts	0x03F4, r19
    325c:	20 93 f3 03 	sts	0x03F3, r18
    3260:	20 91 00 01 	lds	r18, 0x0100
    3264:	30 91 01 01 	lds	r19, 0x0101
    3268:	21 15       	cp	r18, r1
    326a:	31 05       	cpc	r19, r1
    326c:	41 f4       	brne	.+16     	; 0x327e <malloc+0xee>
    326e:	2d b7       	in	r18, 0x3d	; 61
    3270:	3e b7       	in	r19, 0x3e	; 62
    3272:	40 91 04 01 	lds	r20, 0x0104
    3276:	50 91 05 01 	lds	r21, 0x0105
    327a:	24 1b       	sub	r18, r20
    327c:	35 0b       	sbc	r19, r21
    327e:	e0 91 f3 03 	lds	r30, 0x03F3
    3282:	f0 91 f4 03 	lds	r31, 0x03F4
    3286:	e2 17       	cp	r30, r18
    3288:	f3 07       	cpc	r31, r19
    328a:	a0 f4       	brcc	.+40     	; 0x32b4 <malloc+0x124>
    328c:	2e 1b       	sub	r18, r30
    328e:	3f 0b       	sbc	r19, r31
    3290:	28 17       	cp	r18, r24
    3292:	39 07       	cpc	r19, r25
    3294:	78 f0       	brcs	.+30     	; 0x32b4 <malloc+0x124>
    3296:	ac 01       	movw	r20, r24
    3298:	4e 5f       	subi	r20, 0xFE	; 254
    329a:	5f 4f       	sbci	r21, 0xFF	; 255
    329c:	24 17       	cp	r18, r20
    329e:	35 07       	cpc	r19, r21
    32a0:	48 f0       	brcs	.+18     	; 0x32b4 <malloc+0x124>
    32a2:	4e 0f       	add	r20, r30
    32a4:	5f 1f       	adc	r21, r31
    32a6:	50 93 f4 03 	sts	0x03F4, r21
    32aa:	40 93 f3 03 	sts	0x03F3, r20
    32ae:	81 93       	st	Z+, r24
    32b0:	91 93       	st	Z+, r25
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <malloc+0x128>
    32b4:	e0 e0       	ldi	r30, 0x00	; 0
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	cf 01       	movw	r24, r30
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	08 95       	ret

000032c0 <free>:
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	09 f4       	brne	.+2      	; 0x32ca <free+0xa>
    32c8:	87 c0       	rjmp	.+270    	; 0x33d8 <free+0x118>
    32ca:	fc 01       	movw	r30, r24
    32cc:	32 97       	sbiw	r30, 0x02	; 2
    32ce:	13 82       	std	Z+3, r1	; 0x03
    32d0:	12 82       	std	Z+2, r1	; 0x02
    32d2:	c0 91 f5 03 	lds	r28, 0x03F5
    32d6:	d0 91 f6 03 	lds	r29, 0x03F6
    32da:	20 97       	sbiw	r28, 0x00	; 0
    32dc:	81 f4       	brne	.+32     	; 0x32fe <free+0x3e>
    32de:	20 81       	ld	r18, Z
    32e0:	31 81       	ldd	r19, Z+1	; 0x01
    32e2:	28 0f       	add	r18, r24
    32e4:	39 1f       	adc	r19, r25
    32e6:	80 91 f3 03 	lds	r24, 0x03F3
    32ea:	90 91 f4 03 	lds	r25, 0x03F4
    32ee:	82 17       	cp	r24, r18
    32f0:	93 07       	cpc	r25, r19
    32f2:	79 f5       	brne	.+94     	; 0x3352 <free+0x92>
    32f4:	f0 93 f4 03 	sts	0x03F4, r31
    32f8:	e0 93 f3 03 	sts	0x03F3, r30
    32fc:	6d c0       	rjmp	.+218    	; 0x33d8 <free+0x118>
    32fe:	de 01       	movw	r26, r28
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	ae 17       	cp	r26, r30
    3306:	bf 07       	cpc	r27, r31
    3308:	50 f4       	brcc	.+20     	; 0x331e <free+0x5e>
    330a:	12 96       	adiw	r26, 0x02	; 2
    330c:	4d 91       	ld	r20, X+
    330e:	5c 91       	ld	r21, X
    3310:	13 97       	sbiw	r26, 0x03	; 3
    3312:	9d 01       	movw	r18, r26
    3314:	41 15       	cp	r20, r1
    3316:	51 05       	cpc	r21, r1
    3318:	09 f1       	breq	.+66     	; 0x335c <free+0x9c>
    331a:	da 01       	movw	r26, r20
    331c:	f3 cf       	rjmp	.-26     	; 0x3304 <free+0x44>
    331e:	b3 83       	std	Z+3, r27	; 0x03
    3320:	a2 83       	std	Z+2, r26	; 0x02
    3322:	40 81       	ld	r20, Z
    3324:	51 81       	ldd	r21, Z+1	; 0x01
    3326:	84 0f       	add	r24, r20
    3328:	95 1f       	adc	r25, r21
    332a:	8a 17       	cp	r24, r26
    332c:	9b 07       	cpc	r25, r27
    332e:	71 f4       	brne	.+28     	; 0x334c <free+0x8c>
    3330:	8d 91       	ld	r24, X+
    3332:	9c 91       	ld	r25, X
    3334:	11 97       	sbiw	r26, 0x01	; 1
    3336:	84 0f       	add	r24, r20
    3338:	95 1f       	adc	r25, r21
    333a:	02 96       	adiw	r24, 0x02	; 2
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
    3340:	12 96       	adiw	r26, 0x02	; 2
    3342:	8d 91       	ld	r24, X+
    3344:	9c 91       	ld	r25, X
    3346:	13 97       	sbiw	r26, 0x03	; 3
    3348:	93 83       	std	Z+3, r25	; 0x03
    334a:	82 83       	std	Z+2, r24	; 0x02
    334c:	21 15       	cp	r18, r1
    334e:	31 05       	cpc	r19, r1
    3350:	29 f4       	brne	.+10     	; 0x335c <free+0x9c>
    3352:	f0 93 f6 03 	sts	0x03F6, r31
    3356:	e0 93 f5 03 	sts	0x03F5, r30
    335a:	3e c0       	rjmp	.+124    	; 0x33d8 <free+0x118>
    335c:	d9 01       	movw	r26, r18
    335e:	13 96       	adiw	r26, 0x03	; 3
    3360:	fc 93       	st	X, r31
    3362:	ee 93       	st	-X, r30
    3364:	12 97       	sbiw	r26, 0x02	; 2
    3366:	4d 91       	ld	r20, X+
    3368:	5d 91       	ld	r21, X+
    336a:	a4 0f       	add	r26, r20
    336c:	b5 1f       	adc	r27, r21
    336e:	ea 17       	cp	r30, r26
    3370:	fb 07       	cpc	r31, r27
    3372:	79 f4       	brne	.+30     	; 0x3392 <free+0xd2>
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	84 0f       	add	r24, r20
    337a:	95 1f       	adc	r25, r21
    337c:	02 96       	adiw	r24, 0x02	; 2
    337e:	d9 01       	movw	r26, r18
    3380:	11 96       	adiw	r26, 0x01	; 1
    3382:	9c 93       	st	X, r25
    3384:	8e 93       	st	-X, r24
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	13 96       	adiw	r26, 0x03	; 3
    338c:	9c 93       	st	X, r25
    338e:	8e 93       	st	-X, r24
    3390:	12 97       	sbiw	r26, 0x02	; 2
    3392:	e0 e0       	ldi	r30, 0x00	; 0
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	9b 81       	ldd	r25, Y+3	; 0x03
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	19 f0       	breq	.+6      	; 0x33a4 <free+0xe4>
    339e:	fe 01       	movw	r30, r28
    33a0:	ec 01       	movw	r28, r24
    33a2:	f9 cf       	rjmp	.-14     	; 0x3396 <free+0xd6>
    33a4:	ce 01       	movw	r24, r28
    33a6:	02 96       	adiw	r24, 0x02	; 2
    33a8:	28 81       	ld	r18, Y
    33aa:	39 81       	ldd	r19, Y+1	; 0x01
    33ac:	82 0f       	add	r24, r18
    33ae:	93 1f       	adc	r25, r19
    33b0:	20 91 f3 03 	lds	r18, 0x03F3
    33b4:	30 91 f4 03 	lds	r19, 0x03F4
    33b8:	28 17       	cp	r18, r24
    33ba:	39 07       	cpc	r19, r25
    33bc:	69 f4       	brne	.+26     	; 0x33d8 <free+0x118>
    33be:	30 97       	sbiw	r30, 0x00	; 0
    33c0:	29 f4       	brne	.+10     	; 0x33cc <free+0x10c>
    33c2:	10 92 f6 03 	sts	0x03F6, r1
    33c6:	10 92 f5 03 	sts	0x03F5, r1
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <free+0x110>
    33cc:	13 82       	std	Z+3, r1	; 0x03
    33ce:	12 82       	std	Z+2, r1	; 0x02
    33d0:	d0 93 f4 03 	sts	0x03F4, r29
    33d4:	c0 93 f3 03 	sts	0x03F3, r28
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	08 95       	ret

000033de <strnlen_P>:
    33de:	fc 01       	movw	r30, r24
    33e0:	05 90       	lpm	r0, Z+
    33e2:	61 50       	subi	r22, 0x01	; 1
    33e4:	70 40       	sbci	r23, 0x00	; 0
    33e6:	01 10       	cpse	r0, r1
    33e8:	d8 f7       	brcc	.-10     	; 0x33e0 <strnlen_P+0x2>
    33ea:	80 95       	com	r24
    33ec:	90 95       	com	r25
    33ee:	8e 0f       	add	r24, r30
    33f0:	9f 1f       	adc	r25, r31
    33f2:	08 95       	ret

000033f4 <memset>:
    33f4:	dc 01       	movw	r26, r24
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <memset+0x6>
    33f8:	6d 93       	st	X+, r22
    33fa:	41 50       	subi	r20, 0x01	; 1
    33fc:	50 40       	sbci	r21, 0x00	; 0
    33fe:	e0 f7       	brcc	.-8      	; 0x33f8 <memset+0x4>
    3400:	08 95       	ret

00003402 <strnlen>:
    3402:	fc 01       	movw	r30, r24
    3404:	61 50       	subi	r22, 0x01	; 1
    3406:	70 40       	sbci	r23, 0x00	; 0
    3408:	01 90       	ld	r0, Z+
    340a:	01 10       	cpse	r0, r1
    340c:	d8 f7       	brcc	.-10     	; 0x3404 <strnlen+0x2>
    340e:	80 95       	com	r24
    3410:	90 95       	com	r25
    3412:	8e 0f       	add	r24, r30
    3414:	9f 1f       	adc	r25, r31
    3416:	08 95       	ret

00003418 <fputc>:
    3418:	0f 93       	push	r16
    341a:	1f 93       	push	r17
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	18 2f       	mov	r17, r24
    3422:	09 2f       	mov	r16, r25
    3424:	eb 01       	movw	r28, r22
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	81 fd       	sbrc	r24, 1
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <fputc+0x1a>
    342c:	8f ef       	ldi	r24, 0xFF	; 255
    342e:	9f ef       	ldi	r25, 0xFF	; 255
    3430:	20 c0       	rjmp	.+64     	; 0x3472 <fputc+0x5a>
    3432:	82 ff       	sbrs	r24, 2
    3434:	10 c0       	rjmp	.+32     	; 0x3456 <fputc+0x3e>
    3436:	4e 81       	ldd	r20, Y+6	; 0x06
    3438:	5f 81       	ldd	r21, Y+7	; 0x07
    343a:	2c 81       	ldd	r18, Y+4	; 0x04
    343c:	3d 81       	ldd	r19, Y+5	; 0x05
    343e:	42 17       	cp	r20, r18
    3440:	53 07       	cpc	r21, r19
    3442:	7c f4       	brge	.+30     	; 0x3462 <fputc+0x4a>
    3444:	e8 81       	ld	r30, Y
    3446:	f9 81       	ldd	r31, Y+1	; 0x01
    3448:	9f 01       	movw	r18, r30
    344a:	2f 5f       	subi	r18, 0xFF	; 255
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	39 83       	std	Y+1, r19	; 0x01
    3450:	28 83       	st	Y, r18
    3452:	10 83       	st	Z, r17
    3454:	06 c0       	rjmp	.+12     	; 0x3462 <fputc+0x4a>
    3456:	e8 85       	ldd	r30, Y+8	; 0x08
    3458:	f9 85       	ldd	r31, Y+9	; 0x09
    345a:	81 2f       	mov	r24, r17
    345c:	09 95       	icall
    345e:	89 2b       	or	r24, r25
    3460:	29 f7       	brne	.-54     	; 0x342c <fputc+0x14>
    3462:	2e 81       	ldd	r18, Y+6	; 0x06
    3464:	3f 81       	ldd	r19, Y+7	; 0x07
    3466:	2f 5f       	subi	r18, 0xFF	; 255
    3468:	3f 4f       	sbci	r19, 0xFF	; 255
    346a:	3f 83       	std	Y+7, r19	; 0x07
    346c:	2e 83       	std	Y+6, r18	; 0x06
    346e:	81 2f       	mov	r24, r17
    3470:	90 2f       	mov	r25, r16
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	08 95       	ret

0000347c <__ultoa_invert>:
    347c:	fa 01       	movw	r30, r20
    347e:	aa 27       	eor	r26, r26
    3480:	28 30       	cpi	r18, 0x08	; 8
    3482:	51 f1       	breq	.+84     	; 0x34d8 <__ultoa_invert+0x5c>
    3484:	20 31       	cpi	r18, 0x10	; 16
    3486:	81 f1       	breq	.+96     	; 0x34e8 <__ultoa_invert+0x6c>
    3488:	e8 94       	clt
    348a:	6f 93       	push	r22
    348c:	6e 7f       	andi	r22, 0xFE	; 254
    348e:	6e 5f       	subi	r22, 0xFE	; 254
    3490:	7f 4f       	sbci	r23, 0xFF	; 255
    3492:	8f 4f       	sbci	r24, 0xFF	; 255
    3494:	9f 4f       	sbci	r25, 0xFF	; 255
    3496:	af 4f       	sbci	r26, 0xFF	; 255
    3498:	b1 e0       	ldi	r27, 0x01	; 1
    349a:	3e d0       	rcall	.+124    	; 0x3518 <__ultoa_invert+0x9c>
    349c:	b4 e0       	ldi	r27, 0x04	; 4
    349e:	3c d0       	rcall	.+120    	; 0x3518 <__ultoa_invert+0x9c>
    34a0:	67 0f       	add	r22, r23
    34a2:	78 1f       	adc	r23, r24
    34a4:	89 1f       	adc	r24, r25
    34a6:	9a 1f       	adc	r25, r26
    34a8:	a1 1d       	adc	r26, r1
    34aa:	68 0f       	add	r22, r24
    34ac:	79 1f       	adc	r23, r25
    34ae:	8a 1f       	adc	r24, r26
    34b0:	91 1d       	adc	r25, r1
    34b2:	a1 1d       	adc	r26, r1
    34b4:	6a 0f       	add	r22, r26
    34b6:	71 1d       	adc	r23, r1
    34b8:	81 1d       	adc	r24, r1
    34ba:	91 1d       	adc	r25, r1
    34bc:	a1 1d       	adc	r26, r1
    34be:	20 d0       	rcall	.+64     	; 0x3500 <__ultoa_invert+0x84>
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <__ultoa_invert+0x48>
    34c2:	68 94       	set
    34c4:	3f 91       	pop	r19
    34c6:	2a e0       	ldi	r18, 0x0A	; 10
    34c8:	26 9f       	mul	r18, r22
    34ca:	11 24       	eor	r1, r1
    34cc:	30 19       	sub	r19, r0
    34ce:	30 5d       	subi	r19, 0xD0	; 208
    34d0:	31 93       	st	Z+, r19
    34d2:	de f6       	brtc	.-74     	; 0x348a <__ultoa_invert+0xe>
    34d4:	cf 01       	movw	r24, r30
    34d6:	08 95       	ret
    34d8:	46 2f       	mov	r20, r22
    34da:	47 70       	andi	r20, 0x07	; 7
    34dc:	40 5d       	subi	r20, 0xD0	; 208
    34de:	41 93       	st	Z+, r20
    34e0:	b3 e0       	ldi	r27, 0x03	; 3
    34e2:	0f d0       	rcall	.+30     	; 0x3502 <__ultoa_invert+0x86>
    34e4:	c9 f7       	brne	.-14     	; 0x34d8 <__ultoa_invert+0x5c>
    34e6:	f6 cf       	rjmp	.-20     	; 0x34d4 <__ultoa_invert+0x58>
    34e8:	46 2f       	mov	r20, r22
    34ea:	4f 70       	andi	r20, 0x0F	; 15
    34ec:	40 5d       	subi	r20, 0xD0	; 208
    34ee:	4a 33       	cpi	r20, 0x3A	; 58
    34f0:	18 f0       	brcs	.+6      	; 0x34f8 <__ultoa_invert+0x7c>
    34f2:	49 5d       	subi	r20, 0xD9	; 217
    34f4:	31 fd       	sbrc	r19, 1
    34f6:	40 52       	subi	r20, 0x20	; 32
    34f8:	41 93       	st	Z+, r20
    34fa:	02 d0       	rcall	.+4      	; 0x3500 <__ultoa_invert+0x84>
    34fc:	a9 f7       	brne	.-22     	; 0x34e8 <__ultoa_invert+0x6c>
    34fe:	ea cf       	rjmp	.-44     	; 0x34d4 <__ultoa_invert+0x58>
    3500:	b4 e0       	ldi	r27, 0x04	; 4
    3502:	a6 95       	lsr	r26
    3504:	97 95       	ror	r25
    3506:	87 95       	ror	r24
    3508:	77 95       	ror	r23
    350a:	67 95       	ror	r22
    350c:	ba 95       	dec	r27
    350e:	c9 f7       	brne	.-14     	; 0x3502 <__ultoa_invert+0x86>
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	61 05       	cpc	r22, r1
    3514:	71 05       	cpc	r23, r1
    3516:	08 95       	ret
    3518:	9b 01       	movw	r18, r22
    351a:	ac 01       	movw	r20, r24
    351c:	0a 2e       	mov	r0, r26
    351e:	06 94       	lsr	r0
    3520:	57 95       	ror	r21
    3522:	47 95       	ror	r20
    3524:	37 95       	ror	r19
    3526:	27 95       	ror	r18
    3528:	ba 95       	dec	r27
    352a:	c9 f7       	brne	.-14     	; 0x351e <__ultoa_invert+0xa2>
    352c:	62 0f       	add	r22, r18
    352e:	73 1f       	adc	r23, r19
    3530:	84 1f       	adc	r24, r20
    3532:	95 1f       	adc	r25, r21
    3534:	a0 1d       	adc	r26, r0
    3536:	08 95       	ret

00003538 <__prologue_saves__>:
    3538:	2f 92       	push	r2
    353a:	3f 92       	push	r3
    353c:	4f 92       	push	r4
    353e:	5f 92       	push	r5
    3540:	6f 92       	push	r6
    3542:	7f 92       	push	r7
    3544:	8f 92       	push	r8
    3546:	9f 92       	push	r9
    3548:	af 92       	push	r10
    354a:	bf 92       	push	r11
    354c:	cf 92       	push	r12
    354e:	df 92       	push	r13
    3550:	ef 92       	push	r14
    3552:	ff 92       	push	r15
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	ca 1b       	sub	r28, r26
    3562:	db 0b       	sbc	r29, r27
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	09 94       	ijmp

00003570 <__epilogue_restores__>:
    3570:	2a 88       	ldd	r2, Y+18	; 0x12
    3572:	39 88       	ldd	r3, Y+17	; 0x11
    3574:	48 88       	ldd	r4, Y+16	; 0x10
    3576:	5f 84       	ldd	r5, Y+15	; 0x0f
    3578:	6e 84       	ldd	r6, Y+14	; 0x0e
    357a:	7d 84       	ldd	r7, Y+13	; 0x0d
    357c:	8c 84       	ldd	r8, Y+12	; 0x0c
    357e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3580:	aa 84       	ldd	r10, Y+10	; 0x0a
    3582:	b9 84       	ldd	r11, Y+9	; 0x09
    3584:	c8 84       	ldd	r12, Y+8	; 0x08
    3586:	df 80       	ldd	r13, Y+7	; 0x07
    3588:	ee 80       	ldd	r14, Y+6	; 0x06
    358a:	fd 80       	ldd	r15, Y+5	; 0x05
    358c:	0c 81       	ldd	r16, Y+4	; 0x04
    358e:	1b 81       	ldd	r17, Y+3	; 0x03
    3590:	aa 81       	ldd	r26, Y+2	; 0x02
    3592:	b9 81       	ldd	r27, Y+1	; 0x01
    3594:	ce 0f       	add	r28, r30
    3596:	d1 1d       	adc	r29, r1
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	ed 01       	movw	r28, r26
    35a4:	08 95       	ret

000035a6 <_exit>:
    35a6:	f8 94       	cli

000035a8 <__stop_program>:
    35a8:	ff cf       	rjmp	.-2      	; 0x35a8 <__stop_program>
