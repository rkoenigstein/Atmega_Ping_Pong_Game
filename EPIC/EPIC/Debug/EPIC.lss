
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  0000106e  00001102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000106e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001e2  008001e2  000011e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a2e  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001076  00000000  00000000  00003f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001047  00000000  00000000  00004fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a8  00000000  00000000  00005ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007af  00000000  00000000  0000679c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001500  00000000  00000000  00006f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  0000844b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee e6       	ldi	r30, 0x6E	; 110
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 3e       	cpi	r26, 0xE2	; 226
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a2 ee       	ldi	r26, 0xE2	; 226
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 3f       	cpi	r26, 0xF0	; 240
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
      a6:	0c 94 35 08 	jmp	0x106a	; 0x106a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_default>

000000ae <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
      ae:	8b b7       	in	r24, 0x3b	; 59
      b0:	80 62       	ori	r24, 0x20	; 32
      b2:	8b bf       	out	0x3b, r24	; 59
      b4:	08 95       	ret

000000b6 <__vector_3>:
	flag = 0;
	return value;
}

ISR(INT2_vect)
{
      b6:	1f 92       	push	r1
      b8:	0f 92       	push	r0
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	0f 92       	push	r0
      be:	11 24       	eor	r1, r1
      c0:	8f 93       	push	r24
      c2:	9f 93       	push	r25
	flag = 1;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	90 93 e3 01 	sts	0x01E3, r25
      cc:	80 93 e2 01 	sts	0x01E2, r24
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	0f 90       	pop	r0
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	0f 90       	pop	r0
      da:	1f 90       	pop	r1
      dc:	18 95       	reti

000000de <can_init>:
volatile int msg_received_flag = 0;

void can_init(void)
{
	
	mcp_init();
      de:	0e 94 41 02 	call	0x482	; 0x482 <mcp_init>
		
	//turn off filters and rollover for receive buffer 0
	mcp_bit_modify(NO_FILTERS_AND_MASKS, MCP_RXB0CTRL , 0xFF);
      e2:	4f ef       	ldi	r20, 0xFF	; 255
      e4:	60 e6       	ldi	r22, 0x60	; 96
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 66 02 	call	0x4cc	; 0x4cc <mcp_bit_modify>
	//enable interrupt for received message
	mcp_bit_modify(MCP_RX0IF, MCP_CANINTE, 0x00);
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	6b e2       	ldi	r22, 0x2B	; 43
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	0e 94 66 02 	call	0x4cc	; 0x4cc <mcp_bit_modify>
	
	//activate loopback mode on the MCP2515 for today
	mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_LOOPBACK);
      f6:	40 e4       	ldi	r20, 0x40	; 64
      f8:	6f e0       	ldi	r22, 0x0F	; 15
      fa:	80 ee       	ldi	r24, 0xE0	; 224
      fc:	0e 94 66 02 	call	0x4cc	; 0x4cc <mcp_bit_modify>
		
	printf("BFPCTRL: 0x%02x\n", mcp_read(0x0C));
     100:	8c e0       	ldi	r24, 0x0C	; 12
     102:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     106:	1f 92       	push	r1
     108:	8f 93       	push	r24
     10a:	88 e0       	ldi	r24, 0x08	; 8
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	9f 93       	push	r25
     110:	8f 93       	push	r24
     112:	0e 94 22 05 	call	0xa44	; 0xa44 <printf>
	
	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages
	//mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_NORMAL);
	
	//enabling CAN interrupts
	cli();
     116:	f8 94       	cli
	MCUCR |= (1<<ISC11);
     118:	85 b7       	in	r24, 0x35	; 53
     11a:	88 60       	ori	r24, 0x08	; 8
     11c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     11e:	8b b7       	in	r24, 0x3b	; 59
     120:	80 64       	ori	r24, 0x40	; 64
     122:	8b bf       	out	0x3b, r24	; 59
	sei();
     124:	78 94       	sei
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	08 95       	ret

00000130 <can_transmit_complete>:
}

bool can_transmit_complete(void)
{
	//check if transmission complete from status register
	return !(TXREQ & mcp_read(MCP_TXB0CTRL));
     130:	80 e3       	ldi	r24, 0x30	; 48
     132:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     136:	83 fb       	bst	r24, 3
     138:	88 27       	eor	r24, r24
     13a:	80 f9       	bld	r24, 0
}
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	89 27       	eor	r24, r25
     140:	08 95       	ret

00000142 <can_message_send>:
	sei();

}

void can_message_send(can_message can_msg)
{
     142:	ef 92       	push	r14
     144:	ff 92       	push	r15
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
     152:	2b 97       	sbiw	r28, 0x0b	; 11
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	de bf       	out	0x3e, r29	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	cd bf       	out	0x3d, r28	; 61
     15e:	e9 82       	std	Y+1, r14	; 0x01
     160:	fa 82       	std	Y+2, r15	; 0x02
     162:	0b 83       	std	Y+3, r16	; 0x03
     164:	1c 83       	std	Y+4, r17	; 0x04
     166:	2d 83       	std	Y+5, r18	; 0x05
     168:	3e 83       	std	Y+6, r19	; 0x06
     16a:	4f 83       	std	Y+7, r20	; 0x07
     16c:	58 87       	std	Y+8, r21	; 0x08
     16e:	69 87       	std	Y+9, r22	; 0x09
     170:	7a 87       	std	Y+10, r23	; 0x0a
     172:	8b 87       	std	Y+11, r24	; 0x0b
     174:	e9 80       	ldd	r14, Y+1	; 0x01
     176:	fa 80       	ldd	r15, Y+2	; 0x02
	if(can_transmit_complete())
     178:	0e 94 98 00 	call	0x130	; 0x130 <can_transmit_complete>
     17c:	88 23       	and	r24, r24
     17e:	71 f1       	breq	.+92     	; 0x1dc <can_message_send+0x9a>
	{
		printf("Sending\n");
     180:	89 e1       	ldi	r24, 0x19	; 25
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 36 05 	call	0xa6c	; 0xa6c <puts>
		//write CAN msg ID to MCP2515
		mcp_write(MCP_TXB0SIDH, can_msg.id >> 3);
     188:	b7 01       	movw	r22, r14
     18a:	76 95       	lsr	r23
     18c:	67 95       	ror	r22
     18e:	76 95       	lsr	r23
     190:	67 95       	ror	r22
     192:	76 95       	lsr	r23
     194:	67 95       	ror	r22
     196:	81 e3       	ldi	r24, 0x31	; 49
     198:	0e 94 46 02 	call	0x48c	; 0x48c <mcp_write>
		mcp_write(MCP_TXB0SIDL, can_msg.id << 5);
     19c:	6e 2d       	mov	r22, r14
     19e:	62 95       	swap	r22
     1a0:	66 0f       	add	r22, r22
     1a2:	60 7e       	andi	r22, 0xE0	; 224
     1a4:	82 e3       	ldi	r24, 0x32	; 50
     1a6:	0e 94 46 02 	call	0x48c	; 0x48c <mcp_write>
		
		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
     1aa:	60 2f       	mov	r22, r16
     1ac:	6f 70       	andi	r22, 0x0F	; 15
     1ae:	85 e3       	ldi	r24, 0x35	; 53
     1b0:	0e 94 46 02 	call	0x48c	; 0x48c <mcp_write>
	
		//write CAN data to MCP2515	
		for(uint8_t i = 0; i < can_msg.length; i++)
     1b4:	00 23       	and	r16, r16
     1b6:	79 f0       	breq	.+30     	; 0x1d6 <can_message_send+0x94>
     1b8:	7e 01       	movw	r14, r28
     1ba:	84 e0       	ldi	r24, 0x04	; 4
     1bc:	e8 0e       	add	r14, r24
     1be:	f1 1c       	adc	r15, r1
     1c0:	0a 5c       	subi	r16, 0xCA	; 202
     1c2:	16 e3       	ldi	r17, 0x36	; 54
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
     1c4:	f7 01       	movw	r30, r14
     1c6:	61 91       	ld	r22, Z+
     1c8:	7f 01       	movw	r14, r30
     1ca:	81 2f       	mov	r24, r17
     1cc:	0e 94 46 02 	call	0x48c	; 0x48c <mcp_write>
     1d0:	1f 5f       	subi	r17, 0xFF	; 255
		
		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
	
		//write CAN data to MCP2515	
		for(uint8_t i = 0; i < can_msg.length; i++)
     1d2:	10 13       	cpse	r17, r16
     1d4:	f7 cf       	rjmp	.-18     	; 0x1c4 <can_message_send+0x82>
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
		
		//send transmission request for transmitted CAN msg to MCP2515
		mcp_request_to_send(TXB0);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <mcp_request_to_send>
	}	
}
     1dc:	2b 96       	adiw	r28, 0x0b	; 11
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	08 95       	ret

000001f6 <can_data_receive>:
	//check if transmission complete from status register
	return !(TXREQ & mcp_read(MCP_TXB0CTRL));
}

can_message can_data_receive(void)
{
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	2b 97       	sbiw	r28, 0x0b	; 11
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	7c 01       	movw	r14, r24
	can_message can_msg; 
	
	printf("CANINTF.RX0IF: 0x%02x\n", mcp_read(MCP_CANINTF));
     21e:	8c e2       	ldi	r24, 0x2C	; 44
     220:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     224:	1f 92       	push	r1
     226:	8f 93       	push	r24
     228:	81 e2       	ldi	r24, 0x21	; 33
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	9f 93       	push	r25
     22e:	8f 93       	push	r24
     230:	0e 94 22 05 	call	0xa44	; 0xa44 <printf>
	
	printf("RXB0SIDH: 0x%02x\n", mcp_read(MCP_RXB0SIDH) );
     234:	81 e6       	ldi	r24, 0x61	; 97
     236:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     23a:	1f 92       	push	r1
     23c:	8f 93       	push	r24
     23e:	88 e3       	ldi	r24, 0x38	; 56
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	9f 93       	push	r25
     244:	8f 93       	push	r24
     246:	0e 94 22 05 	call	0xa44	; 0xa44 <printf>
	while(!msg_received_flag);
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	20 91 e4 01 	lds	r18, 0x01E4
     258:	30 91 e5 01 	lds	r19, 0x01E5
     25c:	23 2b       	or	r18, r19
     25e:	d1 f3       	breq	.-12     	; 0x254 <can_data_receive+0x5e>
	//while(!(mcp_read(0x2c) & (1 | 2)));
	printf("jkslfgdfg\n");
     260:	8a e4       	ldi	r24, 0x4A	; 74
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	0e 94 36 05 	call	0xa6c	; 0xa6c <puts>
	//read upper 8 bit of id
	can_msg.id = mcp_read(MCP_RXB0SIDH) << 5;
     268:	81 e6       	ldi	r24, 0x61	; 97
     26a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     26e:	c8 2e       	mov	r12, r24
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 3;
     270:	82 e6       	ldi	r24, 0x62	; 98
     272:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
	printf("RXB0SIDH: 0x%02x\n", mcp_read(MCP_RXB0SIDH) );
	while(!msg_received_flag);
	//while(!(mcp_read(0x2c) & (1 | 2)));
	printf("jkslfgdfg\n");
	//read upper 8 bit of id
	can_msg.id = mcp_read(MCP_RXB0SIDH) << 5;
     276:	90 e2       	ldi	r25, 0x20	; 32
     278:	c9 9e       	mul	r12, r25
     27a:	60 01       	movw	r12, r0
     27c:	11 24       	eor	r1, r1
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 3;
     27e:	86 95       	lsr	r24
     280:	86 95       	lsr	r24
     282:	86 95       	lsr	r24
     284:	c8 2a       	or	r12, r24
	//read length of CAN data
	can_msg.length = mcp_read(MCP_RXB0DLC);
     286:	85 e6       	ldi	r24, 0x65	; 101
     288:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     28c:	98 2e       	mov	r9, r24
	//read CAN data
	for(uint8_t i = 0; i < can_msg.length; i++)
     28e:	88 23       	and	r24, r24
     290:	a9 f0       	breq	.+42     	; 0x2bc <can_data_receive+0xc6>
     292:	8e 01       	movw	r16, r28
     294:	0c 5f       	subi	r16, 0xFC	; 252
     296:	1f 4f       	sbci	r17, 0xFF	; 255
     298:	0f 2e       	mov	r0, r31
     29a:	f6 e6       	ldi	r31, 0x66	; 102
     29c:	af 2e       	mov	r10, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	a8 0e       	add	r10, r24
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f6 e6       	ldi	r31, 0x66	; 102
     2a6:	bf 2e       	mov	r11, r31
     2a8:	f0 2d       	mov	r31, r0
		can_msg.data[i] = mcp_read(MCP_RXB0D0+i); 
     2aa:	8b 2d       	mov	r24, r11
     2ac:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     2b0:	f8 01       	movw	r30, r16
     2b2:	81 93       	st	Z+, r24
     2b4:	8f 01       	movw	r16, r30
     2b6:	b3 94       	inc	r11
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 3;
	//read length of CAN data
	can_msg.length = mcp_read(MCP_RXB0DLC);
	//read CAN data
	for(uint8_t i = 0; i < can_msg.length; i++)
     2b8:	ba 10       	cpse	r11, r10
     2ba:	f7 cf       	rjmp	.-18     	; 0x2aa <can_data_receive+0xb4>
		can_msg.data[i] = mcp_read(MCP_RXB0D0+i); 
	msg_received_flag = 0;
     2bc:	10 92 e5 01 	sts	0x01E5, r1
     2c0:	10 92 e4 01 	sts	0x01E4, r1
	
	//allow new message to be received into the buffer
	//mcp_write(MCP_RX0IF, 0x00);
	mcp_bit_modify(MCP_RX0IF, MCP_CANINTF, 0x00);
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	6c e2       	ldi	r22, 0x2C	; 44
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <mcp_bit_modify>
	return can_msg;
     2ce:	da 82       	std	Y+2, r13	; 0x02
     2d0:	c9 82       	std	Y+1, r12	; 0x01
     2d2:	9b 82       	std	Y+3, r9	; 0x03
     2d4:	8b e0       	ldi	r24, 0x0B	; 11
     2d6:	fe 01       	movw	r30, r28
     2d8:	31 96       	adiw	r30, 0x01	; 1
     2da:	d7 01       	movw	r26, r14
     2dc:	01 90       	ld	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	8a 95       	dec	r24
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <can_data_receive+0xe6>
}
     2e4:	c7 01       	movw	r24, r14
     2e6:	2b 96       	adiw	r28, 0x0b	; 11
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	df 90       	pop	r13
     300:	cf 90       	pop	r12
     302:	bf 90       	pop	r11
     304:	af 90       	pop	r10
     306:	9f 90       	pop	r9
     308:	08 95       	ret

0000030a <__vector_1>:
	
		
}

ISR(INT0_vect)
{
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
	printf("interrupted!\n");
     32c:	84 e5       	ldi	r24, 0x54	; 84
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 36 05 	call	0xa6c	; 0xa6c <puts>
	printf("CANINTF.RX0IF: 0x%02x\n", mcp_read(MCP_CANINTF));
     334:	8c e2       	ldi	r24, 0x2C	; 44
     336:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcp_read>
     33a:	1f 92       	push	r1
     33c:	8f 93       	push	r24
     33e:	81 e2       	ldi	r24, 0x21	; 33
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	9f 93       	push	r25
     344:	8f 93       	push	r24
     346:	0e 94 22 05 	call	0xa44	; 0xa44 <printf>
	mcp_bit_modify(MCP_RX0IF, MCP_CANINTF, 0x00);
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	6c e2       	ldi	r22, 0x2C	; 44
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 66 02 	call	0x4cc	; 0x4cc <mcp_bit_modify>
	msg_received_flag = 1;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	90 93 e5 01 	sts	0x01E5, r25
     35c:	80 93 e4 01 	sts	0x01E4, r24
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
}
     368:	ff 91       	pop	r31
     36a:	ef 91       	pop	r30
     36c:	bf 91       	pop	r27
     36e:	af 91       	pop	r26
     370:	9f 91       	pop	r25
     372:	8f 91       	pop	r24
     374:	7f 91       	pop	r23
     376:	6f 91       	pop	r22
     378:	5f 91       	pop	r21
     37a:	4f 91       	pop	r20
     37c:	3f 91       	pop	r19
     37e:	2f 91       	pop	r18
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <CAN_test>:

void CAN_test(void)
{
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	66 97       	sbiw	r28, 0x16	; 22
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
	//activate loopback mode on the MCP2515 for today
	mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_LOOPBACK);
     3a6:	40 e4       	ldi	r20, 0x40	; 64
     3a8:	6f e0       	ldi	r22, 0x0F	; 15
     3aa:	80 ee       	ldi	r24, 0xE0	; 224
     3ac:	0e 94 66 02 	call	0x4cc	; 0x4cc <mcp_bit_modify>

	//received CAN message
	can_message received_msg;

	//send CAN message 
	can_message can_msg = { .id = 1000, .length = 4, .data = {'a', 'c', 'A', '!'}};
     3b0:	fe 01       	movw	r30, r28
     3b2:	3c 96       	adiw	r30, 0x0c	; 12
     3b4:	8b e0       	ldi	r24, 0x0B	; 11
     3b6:	df 01       	movw	r26, r30
     3b8:	1d 92       	st	X+, r1
     3ba:	8a 95       	dec	r24
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <CAN_test+0x2e>
     3be:	88 ee       	ldi	r24, 0xE8	; 232
     3c0:	e8 2e       	mov	r14, r24
     3c2:	8c 87       	std	Y+12, r24	; 0x0c
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	8d 87       	std	Y+13, r24	; 0x0d
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	8e 87       	std	Y+14, r24	; 0x0e
     3cc:	81 e6       	ldi	r24, 0x61	; 97
     3ce:	8f 87       	std	Y+15, r24	; 0x0f
     3d0:	83 e6       	ldi	r24, 0x63	; 99
     3d2:	88 8b       	std	Y+16, r24	; 0x10
     3d4:	81 e4       	ldi	r24, 0x41	; 65
     3d6:	89 8b       	std	Y+17, r24	; 0x11
     3d8:	81 e2       	ldi	r24, 0x21	; 33
     3da:	8a 8b       	std	Y+18, r24	; 0x12
	can_message_send(can_msg);
     3dc:	0f 2e       	mov	r0, r31
     3de:	f3 e0       	ldi	r31, 0x03	; 3
     3e0:	ff 2e       	mov	r15, r31
     3e2:	f0 2d       	mov	r31, r0
     3e4:	04 e0       	ldi	r16, 0x04	; 4
     3e6:	11 e6       	ldi	r17, 0x61	; 97
     3e8:	23 e6       	ldi	r18, 0x63	; 99
     3ea:	31 e4       	ldi	r19, 0x41	; 65
     3ec:	41 e2       	ldi	r20, 0x21	; 33
     3ee:	5b 89       	ldd	r21, Y+19	; 0x13
     3f0:	6c 89       	ldd	r22, Y+20	; 0x14
     3f2:	7d 89       	ldd	r23, Y+21	; 0x15
     3f4:	8e 89       	ldd	r24, Y+22	; 0x16
     3f6:	0e 94 a1 00 	call	0x142	; 0x142 <can_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fa:	bf ef       	ldi	r27, 0xFF	; 255
     3fc:	2f e7       	ldi	r18, 0x7F	; 127
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	b1 50       	subi	r27, 0x01	; 1
     402:	20 40       	sbci	r18, 0x00	; 0
     404:	80 40       	sbci	r24, 0x00	; 0
     406:	e1 f7       	brne	.-8      	; 0x400 <CAN_test+0x76>
     408:	00 c0       	rjmp	.+0      	; 0x40a <CAN_test+0x80>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <CAN_test+0x82>
	_delay_ms(100);
	//receive CAN message
	received_msg = can_data_receive();
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <can_data_receive>
	
	printf("CAN id: %d, CAN data length: %d, CAN data: %c, %c, %c, %c\n", received_msg.id, received_msg.length, received_msg.data[0], received_msg.data[1], received_msg.data[2], received_msg.data[3]);
     414:	8f 81       	ldd	r24, Y+7	; 0x07
     416:	1f 92       	push	r1
     418:	8f 93       	push	r24
     41a:	8e 81       	ldd	r24, Y+6	; 0x06
     41c:	1f 92       	push	r1
     41e:	8f 93       	push	r24
     420:	8d 81       	ldd	r24, Y+5	; 0x05
     422:	1f 92       	push	r1
     424:	8f 93       	push	r24
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	1f 92       	push	r1
     42a:	8f 93       	push	r24
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	1f 92       	push	r1
     430:	8f 93       	push	r24
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	8f 93       	push	r24
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	8f 93       	push	r24
     43a:	81 e6       	ldi	r24, 0x61	; 97
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	0e 94 22 05 	call	0xa44	; 0xa44 <printf>
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
}
     450:	66 96       	adiw	r28, 0x16	; 22
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret

0000046a <mcp_reset>:
#define BIT_MODIFY		0b00000101

void mcp_reset(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << PB4);
     46a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(RESET);
     46c:	80 ec       	ldi	r24, 0xC0	; 192
     46e:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << PB4;
     472:	c4 9a       	sbi	0x18, 4	; 24
     474:	8c ec       	ldi	r24, 0xCC	; 204
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <mcp_reset+0xe>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <mcp_reset+0x14>
     47e:	00 00       	nop
     480:	08 95       	ret

00000482 <mcp_init>:
	
}

void mcp_init(void)
{
	spi_init();
     482:	0e 94 8b 02 	call	0x516	; 0x516 <spi_init>
	mcp_reset();
     486:	0e 94 35 02 	call	0x46a	; 0x46a <mcp_reset>
     48a:	08 95       	ret

0000048c <mcp_write>:
}

void mcp_write(uint8_t address, char data)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	d8 2f       	mov	r29, r24
     492:	c6 2f       	mov	r28, r22
	//select slave MCP2515
	PORTB &= ~(1 << PB4);
     494:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(WRITE);
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	spi_MasterTransmit(address);
     49c:	8d 2f       	mov	r24, r29
     49e:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	spi_MasterTransmit(data);
     4a2:	8c 2f       	mov	r24, r28
     4a4:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << PB4;
     4a8:	c4 9a       	sbi	0x18, 4	; 24
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <mcp_read>:

char mcp_read(uint8_t address)
{
     4b0:	cf 93       	push	r28
     4b2:	c8 2f       	mov	r28, r24
	//select slave MCP2515
	PORTB &= ~(1 << PB4);
     4b4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(READ);
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	spi_MasterTransmit(address);
     4bc:	8c 2f       	mov	r24, r28
     4be:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	
	char received_char = spi_SlaveReceive();
     4c2:	0e 94 92 02 	call	0x524	; 0x524 <spi_SlaveReceive>

	//deselect slave MCP2515
	PORTB |= 1 << PB4;
     4c6:	c4 9a       	sbi	0x18, 4	; 24
	
	return received_char;
}
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <mcp_bit_modify>:
		
	return received_char;
}

void mcp_bit_modify(char mask_byte, uint8_t reg_adr, char data )
{
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	d8 2f       	mov	r29, r24
     4d4:	16 2f       	mov	r17, r22
     4d6:	c4 2f       	mov	r28, r20
	//select slave MCP2515
	PORTB &= ~(1 << PB4);
     4d8:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(BIT_MODIFY);
     4da:	85 e0       	ldi	r24, 0x05	; 5
     4dc:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	spi_MasterTransmit(reg_adr);
     4e0:	81 2f       	mov	r24, r17
     4e2:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	spi_MasterTransmit(mask_byte);
     4e6:	8d 2f       	mov	r24, r29
     4e8:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	spi_MasterTransmit(data);
     4ec:	8c 2f       	mov	r24, r28
     4ee:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << PB4;
     4f2:	c4 9a       	sbi	0x18, 4	; 24

}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <mcp_request_to_send>:


void mcp_request_to_send (uint8_t out_buffer)
{
	//select slave MCP2515
	PORTB &= ~(1 << PB4);
     4fc:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(RTS|out_buffer);	
     4fe:	80 68       	ori	r24, 0x80	; 128
     500:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << PB4;
     504:	c4 9a       	sbi	0x18, 4	; 24
     506:	08 95       	ret

00000508 <spi_Masterinit>:
	SPCR = (1<<SPE);
}
void spi_Masterinit(void)
{	
	/* Set MOSI, SCK and SS output, all others input */
	DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
     508:	87 b3       	in	r24, 0x17	; 23
     50a:	80 6b       	ori	r24, 0xB0	; 176
     50c:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     50e:	8d b1       	in	r24, 0x0d	; 13
     510:	81 65       	ori	r24, 0x51	; 81
     512:	8d b9       	out	0x0d, r24	; 13
     514:	08 95       	ret

00000516 <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
     516:	0e 94 84 02 	call	0x508	; 0x508 <spi_Masterinit>
     51a:	08 95       	ret

0000051c <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     51c:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     51e:	77 9b       	sbis	0x0e, 7	; 14
     520:	fe cf       	rjmp	.-4      	; 0x51e <spi_MasterTransmit+0x2>
	

}
     522:	08 95       	ret

00000524 <spi_SlaveReceive>:


char spi_SlaveReceive(void)
{
	SPDR = 0xFF;
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	8f b9       	out	0x0f, r24	; 15
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
     528:	77 9b       	sbis	0x0e, 7	; 14
     52a:	fe cf       	rjmp	.-4      	; 0x528 <spi_SlaveReceive+0x4>
	;
	/* Return data register */
	return SPDR;
     52c:	8f b1       	in	r24, 0x0f	; 15
}
     52e:	08 95       	ret

00000530 <main_init>:
JOY_POS joy_pos;
uint8_t current_selection = 0;

void main_init (void)
{
	uart_init(BAUDRATE);
     530:	8f e1       	ldi	r24, 0x1F	; 31
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 9b 03 	call	0x736	; 0x736 <uart_init>
	sram_init();
     538:	0e 94 88 03 	call	0x710	; 0x710 <sram_init>
	adc_init();
     53c:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	JOY_init();
     540:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <JOY_init>
	can_init();
     544:	0e 94 6f 00 	call	0xde	; 0xde <can_init>
	sei();	
     548:	78 94       	sei
	oled_init();
     54a:	0e 94 4c 03 	call	0x698	; 0x698 <oled_init>
	//menu_main = getMenuRoot();
	printf("INIT DONE\n");
     54e:	8e eb       	ldi	r24, 0xBE	; 190
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 36 05 	call	0xa6c	; 0xa6c <puts>
     556:	08 95       	ret

00000558 <__vector_default>:
	}
	
ISR(BADISR_vect)
{
     558:	1f 92       	push	r1
     55a:	0f 92       	push	r0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	4f 93       	push	r20
     568:	5f 93       	push	r21
     56a:	6f 93       	push	r22
     56c:	7f 93       	push	r23
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
     572:	af 93       	push	r26
     574:	bf 93       	push	r27
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
	printf("getting random interrupts\n");
     57a:	88 ec       	ldi	r24, 0xC8	; 200
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 36 05 	call	0xa6c	; 0xa6c <puts>
}
     582:	ff 91       	pop	r31
     584:	ef 91       	pop	r30
     586:	bf 91       	pop	r27
     588:	af 91       	pop	r26
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	7f 91       	pop	r23
     590:	6f 91       	pop	r22
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <main>:

int main(void)
{
	main_init();
     5a4:	0e 94 98 02 	call	0x530	; 0x530 <main_init>
	
	//say hello to the guy in front of the display
	//sayHello();
	
	CAN_test();
     5a8:	0e 94 c5 01 	call	0x38a	; 0x38a <CAN_test>
     5ac:	2f ef       	ldi	r18, 0xFF	; 255
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	9e e0       	ldi	r25, 0x0E	; 14
     5b2:	21 50       	subi	r18, 0x01	; 1
     5b4:	80 40       	sbci	r24, 0x00	; 0
     5b6:	90 40       	sbci	r25, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0xe>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <main+0x18>
     5bc:	00 00       	nop
	//TEST_GAL();
	//TEST_ADC();
	//TEST_SRAM_test();
    //TEST_write_adress();
   return 0;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	08 95       	ret

000005c4 <JOY_init>:

//
void JOY_init()
{
	//set PIN 0 and 1 of port B as inputs
	DDRB &= (0<<0)&(0<<1);	
     5c4:	87 b3       	in	r24, 0x17	; 23
     5c6:	17 ba       	out	0x17, r1	; 23
     5c8:	08 95       	ret

000005ca <clear_buffer>:
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	14 c0       	rjmp	.+40     	; 0x5fc <clear_buffer+0x32>
     5d4:	9c 01       	movw	r18, r24
     5d6:	24 0f       	add	r18, r20
     5d8:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i*128+j] = 0x00;
     5da:	e0 91 06 01 	lds	r30, 0x0106
     5de:	f0 91 07 01 	lds	r31, 0x0107
     5e2:	e2 0f       	add	r30, r18
     5e4:	f3 1f       	adc	r31, r19
     5e6:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	80 38       	cpi	r24, 0x80	; 128
     5ec:	91 05       	cpc	r25, r1
     5ee:	91 f7       	brne	.-28     	; 0x5d4 <clear_buffer+0xa>
     5f0:	40 58       	subi	r20, 0x80	; 128
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
     5f4:	41 15       	cp	r20, r1
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	58 07       	cpc	r21, r24
     5fa:	19 f0       	breq	.+6      	; 0x602 <clear_buffer+0x38>
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     5fc:	87 2f       	mov	r24, r23
     5fe:	96 2f       	mov	r25, r22
     600:	e9 cf       	rjmp	.-46     	; 0x5d4 <clear_buffer+0xa>
     602:	08 95       	ret

00000604 <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
     604:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     606:	e0 e0       	ldi	r30, 0x00	; 0
     608:	f0 e1       	ldi	r31, 0x10	; 16
     60a:	80 83       	st	Z, r24
     60c:	10 82       	st	Z, r1
     60e:	8f e7       	ldi	r24, 0x7F	; 127
     610:	80 83       	st	Z, r24
     612:	08 95       	ret

00000614 <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
	oled_set_page(0);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 02 03 	call	0x604	; 0x604 <oled_set_page>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
     62c:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     62e:	68 94       	set
     630:	dd 24       	eor	r13, r13
     632:	d7 f8       	bld	r13, 7
     634:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     636:	c0 e0       	ldi	r28, 0x00	; 0
     638:	d2 e1       	ldi	r29, 0x12	; 18
     63a:	21 c0       	rjmp	.+66     	; 0x67e <print_buffer+0x6a>
     63c:	02 2f       	mov	r16, r18
     63e:	13 2f       	mov	r17, r19
     640:	a9 01       	movw	r20, r18
     642:	48 1b       	sub	r20, r24
     644:	59 0b       	sbc	r21, r25
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i*128+j]);
     646:	e0 91 06 01 	lds	r30, 0x0106
     64a:	f0 91 07 01 	lds	r31, 0x0107
     64e:	e4 0f       	add	r30, r20
     650:	f5 1f       	adc	r31, r21
     652:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     654:	48 83       	st	Y, r20
     656:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	81 f7       	brne	.-32     	; 0x63c <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	8f 15       	cp	r24, r15
     660:	28 f0       	brcs	.+10     	; 0x66c <print_buffer+0x58>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	8f 0d       	add	r24, r15
     666:	0e 94 02 03 	call	0x604	; 0x604 <oled_set_page>
     66a:	03 c0       	rjmp	.+6      	; 0x672 <print_buffer+0x5e>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 02 03 	call	0x604	; 0x604 <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
     672:	f3 94       	inc	r15
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	f8 16       	cp	r15, r24
     678:	39 f0       	breq	.+14     	; 0x688 <print_buffer+0x74>
     67a:	20 2f       	mov	r18, r16
     67c:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     67e:	8d 2d       	mov	r24, r13
     680:	9e 2d       	mov	r25, r14
     682:	20 58       	subi	r18, 0x80	; 128
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	da cf       	rjmp	.-76     	; 0x63c <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
	}
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	08 95       	ret

00000698 <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     698:	e0 e0       	ldi	r30, 0x00	; 0
     69a:	f0 e1       	ldi	r31, 0x10	; 16
     69c:	8e ea       	ldi	r24, 0xAE	; 174
     69e:	80 83       	st	Z, r24
     6a0:	81 ea       	ldi	r24, 0xA1	; 161
     6a2:	80 83       	st	Z, r24
     6a4:	8a ed       	ldi	r24, 0xDA	; 218
     6a6:	80 83       	st	Z, r24
     6a8:	82 e1       	ldi	r24, 0x12	; 18
     6aa:	80 83       	st	Z, r24
     6ac:	88 ec       	ldi	r24, 0xC8	; 200
     6ae:	80 83       	st	Z, r24
     6b0:	88 ea       	ldi	r24, 0xA8	; 168
     6b2:	80 83       	st	Z, r24
     6b4:	8f e3       	ldi	r24, 0x3F	; 63
     6b6:	80 83       	st	Z, r24
     6b8:	85 ed       	ldi	r24, 0xD5	; 213
     6ba:	80 83       	st	Z, r24
     6bc:	80 e8       	ldi	r24, 0x80	; 128
     6be:	80 83       	st	Z, r24
     6c0:	81 e8       	ldi	r24, 0x81	; 129
     6c2:	80 83       	st	Z, r24
     6c4:	80 e5       	ldi	r24, 0x50	; 80
     6c6:	80 83       	st	Z, r24
     6c8:	89 ed       	ldi	r24, 0xD9	; 217
     6ca:	80 83       	st	Z, r24
     6cc:	81 e2       	ldi	r24, 0x21	; 33
     6ce:	80 83       	st	Z, r24
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	80 83       	st	Z, r24
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	80 83       	st	Z, r24
     6d8:	8b ed       	ldi	r24, 0xDB	; 219
     6da:	80 83       	st	Z, r24
     6dc:	80 e3       	ldi	r24, 0x30	; 48
     6de:	80 83       	st	Z, r24
     6e0:	8d ea       	ldi	r24, 0xAD	; 173
     6e2:	80 83       	st	Z, r24
     6e4:	10 82       	st	Z, r1
     6e6:	84 ea       	ldi	r24, 0xA4	; 164
     6e8:	80 83       	st	Z, r24
     6ea:	86 ea       	ldi	r24, 0xA6	; 166
     6ec:	80 83       	st	Z, r24
     6ee:	8f ea       	ldi	r24, 0xAF	; 175
     6f0:	80 83       	st	Z, r24
     6f2:	83 ed       	ldi	r24, 0xD3	; 211
     6f4:	80 83       	st	Z, r24
     6f6:	10 82       	st	Z, r1
     6f8:	80 e4       	ldi	r24, 0x40	; 64
     6fa:	80 83       	st	Z, r24
     6fc:	80 eb       	ldi	r24, 0xB0	; 176
     6fe:	80 83       	st	Z, r24
     700:	10 82       	st	Z, r1
     702:	8f e7       	ldi	r24, 0x7F	; 127
     704:	80 83       	st	Z, r24
	//set the lower start column address
	oled_write_command(0);
	//set the upper start column address
	oled_write_command(127);
	
	clear_buffer();
     706:	0e 94 e5 02 	call	0x5ca	; 0x5ca <clear_buffer>
	print_buffer();	
     70a:	0e 94 0a 03 	call	0x614	; 0x614 <print_buffer>
     70e:	08 95       	ret

00000710 <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1<<SRE);
     710:	85 b7       	in	r24, 0x35	; 53
     712:	80 68       	ori	r24, 0x80	; 128
     714:	85 bf       	out	0x35, r24	; 53
	
	//realesing  JTAG pins from memory mapping
	SFIOR|=(1<<XMM2);
     716:	80 b7       	in	r24, 0x30	; 48
     718:	80 62       	ori	r24, 0x20	; 32
     71a:	80 bf       	out	0x30, r24	; 48
	SFIOR&=(0<<XMM1);
     71c:	80 b7       	in	r24, 0x30	; 48
     71e:	10 be       	out	0x30, r1	; 48
	SFIOR&=(0<<XMM0);
     720:	80 b7       	in	r24, 0x30	; 48
     722:	10 be       	out	0x30, r1	; 48
     724:	08 95       	ret

00000726 <uart_putc>:
//send data to RS232
void uart_putc(unsigned char c)
{
	
	//wait while register is free
	while (!(UCSR0A & (1<<UDRE0)));
     726:	5d 9b       	sbis	0x0b, 5	; 11
     728:	fe cf       	rjmp	.-4      	; 0x726 <uart_putc>
	
	//put character to USART data register
	UDR0 = c;
     72a:	8c b9       	out	0x0c, r24	; 12
     72c:	08 95       	ret

0000072e <uart_getc>:

//receive data from RS232
unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1<<RXC0)));
     72e:	5f 9b       	sbis	0x0b, 7	; 11
     730:	fe cf       	rjmp	.-4      	; 0x72e <uart_getc>
	
	//get value from USART data register
	return UDR0;
     732:	8c b1       	in	r24, 0x0c	; 12
}
     734:	08 95       	ret

00000736 <uart_init>:

//initialize uart to 9600 8N1 (9600 Baud/Bit rate, 8 Bits data, no parity, 1 stop bit
void uart_init(unsigned int ubrr)
{
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr>>8);
     736:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     738:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     73a:	88 e1       	ldi	r24, 0x18	; 24
     73c:	8a b9       	out	0x0a, r24	; 10
	
	//set UCSRC as accessed register, set number of character size to 8
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     73e:	86 e8       	ldi	r24, 0x86	; 134
     740:	80 bd       	out	0x20, r24	; 32
	//set number of stop bits to 1
	UCSR0C &= (0<<USBS0);
     742:	80 b5       	in	r24, 0x20	; 32
     744:	10 bc       	out	0x20, r1	; 32
	//set connection to asynchronous
	UCSR0C &= (0<<UMSEL0); 
     746:	80 b5       	in	r24, 0x20	; 32
     748:	10 bc       	out	0x20, r1	; 32
	//disable parity mode
	UCSR0C &= (0<<UPM00);
     74a:	80 b5       	in	r24, 0x20	; 32
     74c:	10 bc       	out	0x20, r1	; 32
	UCSR0C &= (0<<UPM10);
     74e:	80 b5       	in	r24, 0x20	; 32
     750:	10 bc       	out	0x20, r1	; 32
	fdevopen(uart_putc, uart_getc);
     752:	67 e9       	ldi	r22, 0x97	; 151
     754:	73 e0       	ldi	r23, 0x03	; 3
     756:	83 e9       	ldi	r24, 0x93	; 147
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <fdevopen>
     75e:	08 95       	ret

00000760 <malloc>:
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	91 05       	cpc	r25, r1
     768:	10 f4       	brcc	.+4      	; 0x76e <malloc+0xe>
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	e0 91 e8 01 	lds	r30, 0x01E8
     772:	f0 91 e9 01 	lds	r31, 0x01E9
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	30 97       	sbiw	r30, 0x00	; 0
     780:	39 f1       	breq	.+78     	; 0x7d0 <malloc+0x70>
     782:	40 81       	ld	r20, Z
     784:	51 81       	ldd	r21, Z+1	; 0x01
     786:	48 17       	cp	r20, r24
     788:	59 07       	cpc	r21, r25
     78a:	b8 f0       	brcs	.+46     	; 0x7ba <malloc+0x5a>
     78c:	48 17       	cp	r20, r24
     78e:	59 07       	cpc	r21, r25
     790:	71 f4       	brne	.+28     	; 0x7ae <malloc+0x4e>
     792:	82 81       	ldd	r24, Z+2	; 0x02
     794:	93 81       	ldd	r25, Z+3	; 0x03
     796:	10 97       	sbiw	r26, 0x00	; 0
     798:	29 f0       	breq	.+10     	; 0x7a4 <malloc+0x44>
     79a:	13 96       	adiw	r26, 0x03	; 3
     79c:	9c 93       	st	X, r25
     79e:	8e 93       	st	-X, r24
     7a0:	12 97       	sbiw	r26, 0x02	; 2
     7a2:	2c c0       	rjmp	.+88     	; 0x7fc <malloc+0x9c>
     7a4:	90 93 e9 01 	sts	0x01E9, r25
     7a8:	80 93 e8 01 	sts	0x01E8, r24
     7ac:	27 c0       	rjmp	.+78     	; 0x7fc <malloc+0x9c>
     7ae:	21 15       	cp	r18, r1
     7b0:	31 05       	cpc	r19, r1
     7b2:	31 f0       	breq	.+12     	; 0x7c0 <malloc+0x60>
     7b4:	42 17       	cp	r20, r18
     7b6:	53 07       	cpc	r21, r19
     7b8:	18 f0       	brcs	.+6      	; 0x7c0 <malloc+0x60>
     7ba:	a9 01       	movw	r20, r18
     7bc:	db 01       	movw	r26, r22
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <malloc+0x62>
     7c0:	ef 01       	movw	r28, r30
     7c2:	9a 01       	movw	r18, r20
     7c4:	bd 01       	movw	r22, r26
     7c6:	df 01       	movw	r26, r30
     7c8:	02 80       	ldd	r0, Z+2	; 0x02
     7ca:	f3 81       	ldd	r31, Z+3	; 0x03
     7cc:	e0 2d       	mov	r30, r0
     7ce:	d7 cf       	rjmp	.-82     	; 0x77e <malloc+0x1e>
     7d0:	21 15       	cp	r18, r1
     7d2:	31 05       	cpc	r19, r1
     7d4:	f9 f0       	breq	.+62     	; 0x814 <malloc+0xb4>
     7d6:	28 1b       	sub	r18, r24
     7d8:	39 0b       	sbc	r19, r25
     7da:	24 30       	cpi	r18, 0x04	; 4
     7dc:	31 05       	cpc	r19, r1
     7de:	80 f4       	brcc	.+32     	; 0x800 <malloc+0xa0>
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	9b 81       	ldd	r25, Y+3	; 0x03
     7e4:	61 15       	cp	r22, r1
     7e6:	71 05       	cpc	r23, r1
     7e8:	21 f0       	breq	.+8      	; 0x7f2 <malloc+0x92>
     7ea:	fb 01       	movw	r30, r22
     7ec:	93 83       	std	Z+3, r25	; 0x03
     7ee:	82 83       	std	Z+2, r24	; 0x02
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <malloc+0x9a>
     7f2:	90 93 e9 01 	sts	0x01E9, r25
     7f6:	80 93 e8 01 	sts	0x01E8, r24
     7fa:	fe 01       	movw	r30, r28
     7fc:	32 96       	adiw	r30, 0x02	; 2
     7fe:	44 c0       	rjmp	.+136    	; 0x888 <malloc+0x128>
     800:	fe 01       	movw	r30, r28
     802:	e2 0f       	add	r30, r18
     804:	f3 1f       	adc	r31, r19
     806:	81 93       	st	Z+, r24
     808:	91 93       	st	Z+, r25
     80a:	22 50       	subi	r18, 0x02	; 2
     80c:	31 09       	sbc	r19, r1
     80e:	39 83       	std	Y+1, r19	; 0x01
     810:	28 83       	st	Y, r18
     812:	3a c0       	rjmp	.+116    	; 0x888 <malloc+0x128>
     814:	20 91 e6 01 	lds	r18, 0x01E6
     818:	30 91 e7 01 	lds	r19, 0x01E7
     81c:	23 2b       	or	r18, r19
     81e:	41 f4       	brne	.+16     	; 0x830 <malloc+0xd0>
     820:	20 91 02 01 	lds	r18, 0x0102
     824:	30 91 03 01 	lds	r19, 0x0103
     828:	30 93 e7 01 	sts	0x01E7, r19
     82c:	20 93 e6 01 	sts	0x01E6, r18
     830:	20 91 00 01 	lds	r18, 0x0100
     834:	30 91 01 01 	lds	r19, 0x0101
     838:	21 15       	cp	r18, r1
     83a:	31 05       	cpc	r19, r1
     83c:	41 f4       	brne	.+16     	; 0x84e <malloc+0xee>
     83e:	2d b7       	in	r18, 0x3d	; 61
     840:	3e b7       	in	r19, 0x3e	; 62
     842:	40 91 04 01 	lds	r20, 0x0104
     846:	50 91 05 01 	lds	r21, 0x0105
     84a:	24 1b       	sub	r18, r20
     84c:	35 0b       	sbc	r19, r21
     84e:	e0 91 e6 01 	lds	r30, 0x01E6
     852:	f0 91 e7 01 	lds	r31, 0x01E7
     856:	e2 17       	cp	r30, r18
     858:	f3 07       	cpc	r31, r19
     85a:	a0 f4       	brcc	.+40     	; 0x884 <malloc+0x124>
     85c:	2e 1b       	sub	r18, r30
     85e:	3f 0b       	sbc	r19, r31
     860:	28 17       	cp	r18, r24
     862:	39 07       	cpc	r19, r25
     864:	78 f0       	brcs	.+30     	; 0x884 <malloc+0x124>
     866:	ac 01       	movw	r20, r24
     868:	4e 5f       	subi	r20, 0xFE	; 254
     86a:	5f 4f       	sbci	r21, 0xFF	; 255
     86c:	24 17       	cp	r18, r20
     86e:	35 07       	cpc	r19, r21
     870:	48 f0       	brcs	.+18     	; 0x884 <malloc+0x124>
     872:	4e 0f       	add	r20, r30
     874:	5f 1f       	adc	r21, r31
     876:	50 93 e7 01 	sts	0x01E7, r21
     87a:	40 93 e6 01 	sts	0x01E6, r20
     87e:	81 93       	st	Z+, r24
     880:	91 93       	st	Z+, r25
     882:	02 c0       	rjmp	.+4      	; 0x888 <malloc+0x128>
     884:	e0 e0       	ldi	r30, 0x00	; 0
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	cf 01       	movw	r24, r30
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <free>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	09 f4       	brne	.+2      	; 0x89a <free+0xa>
     898:	87 c0       	rjmp	.+270    	; 0x9a8 <free+0x118>
     89a:	fc 01       	movw	r30, r24
     89c:	32 97       	sbiw	r30, 0x02	; 2
     89e:	13 82       	std	Z+3, r1	; 0x03
     8a0:	12 82       	std	Z+2, r1	; 0x02
     8a2:	c0 91 e8 01 	lds	r28, 0x01E8
     8a6:	d0 91 e9 01 	lds	r29, 0x01E9
     8aa:	20 97       	sbiw	r28, 0x00	; 0
     8ac:	81 f4       	brne	.+32     	; 0x8ce <free+0x3e>
     8ae:	20 81       	ld	r18, Z
     8b0:	31 81       	ldd	r19, Z+1	; 0x01
     8b2:	28 0f       	add	r18, r24
     8b4:	39 1f       	adc	r19, r25
     8b6:	80 91 e6 01 	lds	r24, 0x01E6
     8ba:	90 91 e7 01 	lds	r25, 0x01E7
     8be:	82 17       	cp	r24, r18
     8c0:	93 07       	cpc	r25, r19
     8c2:	79 f5       	brne	.+94     	; 0x922 <free+0x92>
     8c4:	f0 93 e7 01 	sts	0x01E7, r31
     8c8:	e0 93 e6 01 	sts	0x01E6, r30
     8cc:	6d c0       	rjmp	.+218    	; 0x9a8 <free+0x118>
     8ce:	de 01       	movw	r26, r28
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	ae 17       	cp	r26, r30
     8d6:	bf 07       	cpc	r27, r31
     8d8:	50 f4       	brcc	.+20     	; 0x8ee <free+0x5e>
     8da:	12 96       	adiw	r26, 0x02	; 2
     8dc:	4d 91       	ld	r20, X+
     8de:	5c 91       	ld	r21, X
     8e0:	13 97       	sbiw	r26, 0x03	; 3
     8e2:	9d 01       	movw	r18, r26
     8e4:	41 15       	cp	r20, r1
     8e6:	51 05       	cpc	r21, r1
     8e8:	09 f1       	breq	.+66     	; 0x92c <free+0x9c>
     8ea:	da 01       	movw	r26, r20
     8ec:	f3 cf       	rjmp	.-26     	; 0x8d4 <free+0x44>
     8ee:	b3 83       	std	Z+3, r27	; 0x03
     8f0:	a2 83       	std	Z+2, r26	; 0x02
     8f2:	40 81       	ld	r20, Z
     8f4:	51 81       	ldd	r21, Z+1	; 0x01
     8f6:	84 0f       	add	r24, r20
     8f8:	95 1f       	adc	r25, r21
     8fa:	8a 17       	cp	r24, r26
     8fc:	9b 07       	cpc	r25, r27
     8fe:	71 f4       	brne	.+28     	; 0x91c <free+0x8c>
     900:	8d 91       	ld	r24, X+
     902:	9c 91       	ld	r25, X
     904:	11 97       	sbiw	r26, 0x01	; 1
     906:	84 0f       	add	r24, r20
     908:	95 1f       	adc	r25, r21
     90a:	02 96       	adiw	r24, 0x02	; 2
     90c:	91 83       	std	Z+1, r25	; 0x01
     90e:	80 83       	st	Z, r24
     910:	12 96       	adiw	r26, 0x02	; 2
     912:	8d 91       	ld	r24, X+
     914:	9c 91       	ld	r25, X
     916:	13 97       	sbiw	r26, 0x03	; 3
     918:	93 83       	std	Z+3, r25	; 0x03
     91a:	82 83       	std	Z+2, r24	; 0x02
     91c:	21 15       	cp	r18, r1
     91e:	31 05       	cpc	r19, r1
     920:	29 f4       	brne	.+10     	; 0x92c <free+0x9c>
     922:	f0 93 e9 01 	sts	0x01E9, r31
     926:	e0 93 e8 01 	sts	0x01E8, r30
     92a:	3e c0       	rjmp	.+124    	; 0x9a8 <free+0x118>
     92c:	d9 01       	movw	r26, r18
     92e:	13 96       	adiw	r26, 0x03	; 3
     930:	fc 93       	st	X, r31
     932:	ee 93       	st	-X, r30
     934:	12 97       	sbiw	r26, 0x02	; 2
     936:	4d 91       	ld	r20, X+
     938:	5d 91       	ld	r21, X+
     93a:	a4 0f       	add	r26, r20
     93c:	b5 1f       	adc	r27, r21
     93e:	ea 17       	cp	r30, r26
     940:	fb 07       	cpc	r31, r27
     942:	79 f4       	brne	.+30     	; 0x962 <free+0xd2>
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	84 0f       	add	r24, r20
     94a:	95 1f       	adc	r25, r21
     94c:	02 96       	adiw	r24, 0x02	; 2
     94e:	d9 01       	movw	r26, r18
     950:	11 96       	adiw	r26, 0x01	; 1
     952:	9c 93       	st	X, r25
     954:	8e 93       	st	-X, r24
     956:	82 81       	ldd	r24, Z+2	; 0x02
     958:	93 81       	ldd	r25, Z+3	; 0x03
     95a:	13 96       	adiw	r26, 0x03	; 3
     95c:	9c 93       	st	X, r25
     95e:	8e 93       	st	-X, r24
     960:	12 97       	sbiw	r26, 0x02	; 2
     962:	e0 e0       	ldi	r30, 0x00	; 0
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	9b 81       	ldd	r25, Y+3	; 0x03
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	19 f0       	breq	.+6      	; 0x974 <free+0xe4>
     96e:	fe 01       	movw	r30, r28
     970:	ec 01       	movw	r28, r24
     972:	f9 cf       	rjmp	.-14     	; 0x966 <free+0xd6>
     974:	ce 01       	movw	r24, r28
     976:	02 96       	adiw	r24, 0x02	; 2
     978:	28 81       	ld	r18, Y
     97a:	39 81       	ldd	r19, Y+1	; 0x01
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	20 91 e6 01 	lds	r18, 0x01E6
     984:	30 91 e7 01 	lds	r19, 0x01E7
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	69 f4       	brne	.+26     	; 0x9a8 <free+0x118>
     98e:	30 97       	sbiw	r30, 0x00	; 0
     990:	29 f4       	brne	.+10     	; 0x99c <free+0x10c>
     992:	10 92 e9 01 	sts	0x01E9, r1
     996:	10 92 e8 01 	sts	0x01E8, r1
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <free+0x110>
     99c:	13 82       	std	Z+3, r1	; 0x03
     99e:	12 82       	std	Z+2, r1	; 0x02
     9a0:	d0 93 e7 01 	sts	0x01E7, r29
     9a4:	c0 93 e6 01 	sts	0x01E6, r28
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <fdevopen>:
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
     9b8:	8b 01       	movw	r16, r22
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	31 f4       	brne	.+12     	; 0x9ca <fdevopen+0x1c>
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <fdevopen+0x1c>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	38 c0       	rjmp	.+112    	; 0xa3a <fdevopen+0x8c>
     9ca:	6e e0       	ldi	r22, 0x0E	; 14
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 35 07 	call	0xe6a	; 0xe6a <calloc>
     9d6:	fc 01       	movw	r30, r24
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	a1 f3       	breq	.-24     	; 0x9c4 <fdevopen+0x16>
     9dc:	80 e8       	ldi	r24, 0x80	; 128
     9de:	83 83       	std	Z+3, r24	; 0x03
     9e0:	01 15       	cp	r16, r1
     9e2:	11 05       	cpc	r17, r1
     9e4:	71 f0       	breq	.+28     	; 0xa02 <fdevopen+0x54>
     9e6:	13 87       	std	Z+11, r17	; 0x0b
     9e8:	02 87       	std	Z+10, r16	; 0x0a
     9ea:	81 e8       	ldi	r24, 0x81	; 129
     9ec:	83 83       	std	Z+3, r24	; 0x03
     9ee:	80 91 ea 01 	lds	r24, 0x01EA
     9f2:	90 91 eb 01 	lds	r25, 0x01EB
     9f6:	89 2b       	or	r24, r25
     9f8:	21 f4       	brne	.+8      	; 0xa02 <fdevopen+0x54>
     9fa:	f0 93 eb 01 	sts	0x01EB, r31
     9fe:	e0 93 ea 01 	sts	0x01EA, r30
     a02:	20 97       	sbiw	r28, 0x00	; 0
     a04:	c9 f0       	breq	.+50     	; 0xa38 <fdevopen+0x8a>
     a06:	d1 87       	std	Z+9, r29	; 0x09
     a08:	c0 87       	std	Z+8, r28	; 0x08
     a0a:	83 81       	ldd	r24, Z+3	; 0x03
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	83 83       	std	Z+3, r24	; 0x03
     a10:	80 91 ec 01 	lds	r24, 0x01EC
     a14:	90 91 ed 01 	lds	r25, 0x01ED
     a18:	89 2b       	or	r24, r25
     a1a:	71 f4       	brne	.+28     	; 0xa38 <fdevopen+0x8a>
     a1c:	f0 93 ed 01 	sts	0x01ED, r31
     a20:	e0 93 ec 01 	sts	0x01EC, r30
     a24:	80 91 ee 01 	lds	r24, 0x01EE
     a28:	90 91 ef 01 	lds	r25, 0x01EF
     a2c:	89 2b       	or	r24, r25
     a2e:	21 f4       	brne	.+8      	; 0xa38 <fdevopen+0x8a>
     a30:	f0 93 ef 01 	sts	0x01EF, r31
     a34:	e0 93 ee 01 	sts	0x01EE, r30
     a38:	cf 01       	movw	r24, r30
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <printf>:
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e8 e2       	ldi	r30, 0x28	; 40
     a4a:	f5 e0       	ldi	r31, 0x05	; 5
     a4c:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__prologue_saves__+0x20>
     a50:	fe 01       	movw	r30, r28
     a52:	35 96       	adiw	r30, 0x05	; 5
     a54:	61 91       	ld	r22, Z+
     a56:	71 91       	ld	r23, Z+
     a58:	af 01       	movw	r20, r30
     a5a:	80 91 ec 01 	lds	r24, 0x01EC
     a5e:	90 91 ed 01 	lds	r25, 0x01ED
     a62:	0e 94 63 05 	call	0xac6	; 0xac6 <vfprintf>
     a66:	e2 e0       	ldi	r30, 0x02	; 2
     a68:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__epilogue_restores__+0x20>

00000a6c <puts>:
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	e0 91 ec 01 	lds	r30, 0x01EC
     a78:	f0 91 ed 01 	lds	r31, 0x01ED
     a7c:	23 81       	ldd	r18, Z+3	; 0x03
     a7e:	21 ff       	sbrs	r18, 1
     a80:	1b c0       	rjmp	.+54     	; 0xab8 <puts+0x4c>
     a82:	ec 01       	movw	r28, r24
     a84:	00 e0       	ldi	r16, 0x00	; 0
     a86:	10 e0       	ldi	r17, 0x00	; 0
     a88:	89 91       	ld	r24, Y+
     a8a:	60 91 ec 01 	lds	r22, 0x01EC
     a8e:	70 91 ed 01 	lds	r23, 0x01ED
     a92:	db 01       	movw	r26, r22
     a94:	18 96       	adiw	r26, 0x08	; 8
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	19 97       	sbiw	r26, 0x09	; 9
     a9c:	88 23       	and	r24, r24
     a9e:	31 f0       	breq	.+12     	; 0xaac <puts+0x40>
     aa0:	09 95       	icall
     aa2:	89 2b       	or	r24, r25
     aa4:	89 f3       	breq	.-30     	; 0xa88 <puts+0x1c>
     aa6:	0f ef       	ldi	r16, 0xFF	; 255
     aa8:	1f ef       	ldi	r17, 0xFF	; 255
     aaa:	ee cf       	rjmp	.-36     	; 0xa88 <puts+0x1c>
     aac:	8a e0       	ldi	r24, 0x0A	; 10
     aae:	09 95       	icall
     ab0:	89 2b       	or	r24, r25
     ab2:	11 f4       	brne	.+4      	; 0xab8 <puts+0x4c>
     ab4:	c8 01       	movw	r24, r16
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <puts+0x50>
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	9f ef       	ldi	r25, 0xFF	; 255
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <vfprintf>:
     ac6:	ac e0       	ldi	r26, 0x0C	; 12
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e9 e6       	ldi	r30, 0x69	; 105
     acc:	f5 e0       	ldi	r31, 0x05	; 5
     ace:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__prologue_saves__>
     ad2:	7c 01       	movw	r14, r24
     ad4:	6b 01       	movw	r12, r22
     ad6:	8a 01       	movw	r16, r20
     ad8:	fc 01       	movw	r30, r24
     ada:	17 82       	std	Z+7, r1	; 0x07
     adc:	16 82       	std	Z+6, r1	; 0x06
     ade:	83 81       	ldd	r24, Z+3	; 0x03
     ae0:	81 ff       	sbrs	r24, 1
     ae2:	bd c1       	rjmp	.+890    	; 0xe5e <vfprintf+0x398>
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	4c 01       	movw	r8, r24
     aea:	f7 01       	movw	r30, r14
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	f6 01       	movw	r30, r12
     af0:	93 fd       	sbrc	r25, 3
     af2:	85 91       	lpm	r24, Z+
     af4:	93 ff       	sbrs	r25, 3
     af6:	81 91       	ld	r24, Z+
     af8:	6f 01       	movw	r12, r30
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <vfprintf+0x3a>
     afe:	ab c1       	rjmp	.+854    	; 0xe56 <vfprintf+0x390>
     b00:	85 32       	cpi	r24, 0x25	; 37
     b02:	39 f4       	brne	.+14     	; 0xb12 <vfprintf+0x4c>
     b04:	93 fd       	sbrc	r25, 3
     b06:	85 91       	lpm	r24, Z+
     b08:	93 ff       	sbrs	r25, 3
     b0a:	81 91       	ld	r24, Z+
     b0c:	6f 01       	movw	r12, r30
     b0e:	85 32       	cpi	r24, 0x25	; 37
     b10:	29 f4       	brne	.+10     	; 0xb1c <vfprintf+0x56>
     b12:	b7 01       	movw	r22, r14
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     b1a:	e7 cf       	rjmp	.-50     	; 0xaea <vfprintf+0x24>
     b1c:	51 2c       	mov	r5, r1
     b1e:	31 2c       	mov	r3, r1
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	20 32       	cpi	r18, 0x20	; 32
     b24:	a0 f4       	brcc	.+40     	; 0xb4e <vfprintf+0x88>
     b26:	8b 32       	cpi	r24, 0x2B	; 43
     b28:	69 f0       	breq	.+26     	; 0xb44 <vfprintf+0x7e>
     b2a:	30 f4       	brcc	.+12     	; 0xb38 <vfprintf+0x72>
     b2c:	80 32       	cpi	r24, 0x20	; 32
     b2e:	59 f0       	breq	.+22     	; 0xb46 <vfprintf+0x80>
     b30:	83 32       	cpi	r24, 0x23	; 35
     b32:	69 f4       	brne	.+26     	; 0xb4e <vfprintf+0x88>
     b34:	20 61       	ori	r18, 0x10	; 16
     b36:	2c c0       	rjmp	.+88     	; 0xb90 <vfprintf+0xca>
     b38:	8d 32       	cpi	r24, 0x2D	; 45
     b3a:	39 f0       	breq	.+14     	; 0xb4a <vfprintf+0x84>
     b3c:	80 33       	cpi	r24, 0x30	; 48
     b3e:	39 f4       	brne	.+14     	; 0xb4e <vfprintf+0x88>
     b40:	21 60       	ori	r18, 0x01	; 1
     b42:	26 c0       	rjmp	.+76     	; 0xb90 <vfprintf+0xca>
     b44:	22 60       	ori	r18, 0x02	; 2
     b46:	24 60       	ori	r18, 0x04	; 4
     b48:	23 c0       	rjmp	.+70     	; 0xb90 <vfprintf+0xca>
     b4a:	28 60       	ori	r18, 0x08	; 8
     b4c:	21 c0       	rjmp	.+66     	; 0xb90 <vfprintf+0xca>
     b4e:	27 fd       	sbrc	r18, 7
     b50:	27 c0       	rjmp	.+78     	; 0xba0 <vfprintf+0xda>
     b52:	30 ed       	ldi	r19, 0xD0	; 208
     b54:	38 0f       	add	r19, r24
     b56:	3a 30       	cpi	r19, 0x0A	; 10
     b58:	78 f4       	brcc	.+30     	; 0xb78 <vfprintf+0xb2>
     b5a:	26 ff       	sbrs	r18, 6
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <vfprintf+0xa4>
     b5e:	fa e0       	ldi	r31, 0x0A	; 10
     b60:	5f 9e       	mul	r5, r31
     b62:	30 0d       	add	r19, r0
     b64:	11 24       	eor	r1, r1
     b66:	53 2e       	mov	r5, r19
     b68:	13 c0       	rjmp	.+38     	; 0xb90 <vfprintf+0xca>
     b6a:	8a e0       	ldi	r24, 0x0A	; 10
     b6c:	38 9e       	mul	r3, r24
     b6e:	30 0d       	add	r19, r0
     b70:	11 24       	eor	r1, r1
     b72:	33 2e       	mov	r3, r19
     b74:	20 62       	ori	r18, 0x20	; 32
     b76:	0c c0       	rjmp	.+24     	; 0xb90 <vfprintf+0xca>
     b78:	8e 32       	cpi	r24, 0x2E	; 46
     b7a:	21 f4       	brne	.+8      	; 0xb84 <vfprintf+0xbe>
     b7c:	26 fd       	sbrc	r18, 6
     b7e:	6b c1       	rjmp	.+726    	; 0xe56 <vfprintf+0x390>
     b80:	20 64       	ori	r18, 0x40	; 64
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <vfprintf+0xca>
     b84:	8c 36       	cpi	r24, 0x6C	; 108
     b86:	11 f4       	brne	.+4      	; 0xb8c <vfprintf+0xc6>
     b88:	20 68       	ori	r18, 0x80	; 128
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <vfprintf+0xca>
     b8c:	88 36       	cpi	r24, 0x68	; 104
     b8e:	41 f4       	brne	.+16     	; 0xba0 <vfprintf+0xda>
     b90:	f6 01       	movw	r30, r12
     b92:	93 fd       	sbrc	r25, 3
     b94:	85 91       	lpm	r24, Z+
     b96:	93 ff       	sbrs	r25, 3
     b98:	81 91       	ld	r24, Z+
     b9a:	6f 01       	movw	r12, r30
     b9c:	81 11       	cpse	r24, r1
     b9e:	c1 cf       	rjmp	.-126    	; 0xb22 <vfprintf+0x5c>
     ba0:	98 2f       	mov	r25, r24
     ba2:	9f 7d       	andi	r25, 0xDF	; 223
     ba4:	95 54       	subi	r25, 0x45	; 69
     ba6:	93 30       	cpi	r25, 0x03	; 3
     ba8:	28 f4       	brcc	.+10     	; 0xbb4 <vfprintf+0xee>
     baa:	0c 5f       	subi	r16, 0xFC	; 252
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
     bae:	ff e3       	ldi	r31, 0x3F	; 63
     bb0:	f9 83       	std	Y+1, r31	; 0x01
     bb2:	0d c0       	rjmp	.+26     	; 0xbce <vfprintf+0x108>
     bb4:	83 36       	cpi	r24, 0x63	; 99
     bb6:	31 f0       	breq	.+12     	; 0xbc4 <vfprintf+0xfe>
     bb8:	83 37       	cpi	r24, 0x73	; 115
     bba:	71 f0       	breq	.+28     	; 0xbd8 <vfprintf+0x112>
     bbc:	83 35       	cpi	r24, 0x53	; 83
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <vfprintf+0xfc>
     bc0:	5b c0       	rjmp	.+182    	; 0xc78 <vfprintf+0x1b2>
     bc2:	22 c0       	rjmp	.+68     	; 0xc08 <vfprintf+0x142>
     bc4:	f8 01       	movw	r30, r16
     bc6:	80 81       	ld	r24, Z
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	0e 5f       	subi	r16, 0xFE	; 254
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	44 24       	eor	r4, r4
     bd0:	43 94       	inc	r4
     bd2:	51 2c       	mov	r5, r1
     bd4:	54 01       	movw	r10, r8
     bd6:	15 c0       	rjmp	.+42     	; 0xc02 <vfprintf+0x13c>
     bd8:	38 01       	movw	r6, r16
     bda:	f2 e0       	ldi	r31, 0x02	; 2
     bdc:	6f 0e       	add	r6, r31
     bde:	71 1c       	adc	r7, r1
     be0:	f8 01       	movw	r30, r16
     be2:	a0 80       	ld	r10, Z
     be4:	b1 80       	ldd	r11, Z+1	; 0x01
     be6:	26 ff       	sbrs	r18, 6
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <vfprintf+0x12a>
     bea:	65 2d       	mov	r22, r5
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x12e>
     bf0:	6f ef       	ldi	r22, 0xFF	; 255
     bf2:	7f ef       	ldi	r23, 0xFF	; 255
     bf4:	c5 01       	movw	r24, r10
     bf6:	2c 87       	std	Y+12, r18	; 0x0c
     bf8:	0e 94 63 07 	call	0xec6	; 0xec6 <strnlen>
     bfc:	2c 01       	movw	r4, r24
     bfe:	83 01       	movw	r16, r6
     c00:	2c 85       	ldd	r18, Y+12	; 0x0c
     c02:	2f 77       	andi	r18, 0x7F	; 127
     c04:	22 2e       	mov	r2, r18
     c06:	17 c0       	rjmp	.+46     	; 0xc36 <vfprintf+0x170>
     c08:	38 01       	movw	r6, r16
     c0a:	f2 e0       	ldi	r31, 0x02	; 2
     c0c:	6f 0e       	add	r6, r31
     c0e:	71 1c       	adc	r7, r1
     c10:	f8 01       	movw	r30, r16
     c12:	a0 80       	ld	r10, Z
     c14:	b1 80       	ldd	r11, Z+1	; 0x01
     c16:	26 ff       	sbrs	r18, 6
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <vfprintf+0x15a>
     c1a:	65 2d       	mov	r22, r5
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x15e>
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	c5 01       	movw	r24, r10
     c26:	2c 87       	std	Y+12, r18	; 0x0c
     c28:	0e 94 51 07 	call	0xea2	; 0xea2 <strnlen_P>
     c2c:	2c 01       	movw	r4, r24
     c2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c30:	20 68       	ori	r18, 0x80	; 128
     c32:	22 2e       	mov	r2, r18
     c34:	83 01       	movw	r16, r6
     c36:	23 fc       	sbrc	r2, 3
     c38:	1b c0       	rjmp	.+54     	; 0xc70 <vfprintf+0x1aa>
     c3a:	83 2d       	mov	r24, r3
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	48 16       	cp	r4, r24
     c40:	59 06       	cpc	r5, r25
     c42:	b0 f4       	brcc	.+44     	; 0xc70 <vfprintf+0x1aa>
     c44:	b7 01       	movw	r22, r14
     c46:	80 e2       	ldi	r24, 0x20	; 32
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     c4e:	3a 94       	dec	r3
     c50:	f4 cf       	rjmp	.-24     	; 0xc3a <vfprintf+0x174>
     c52:	f5 01       	movw	r30, r10
     c54:	27 fc       	sbrc	r2, 7
     c56:	85 91       	lpm	r24, Z+
     c58:	27 fe       	sbrs	r2, 7
     c5a:	81 91       	ld	r24, Z+
     c5c:	5f 01       	movw	r10, r30
     c5e:	b7 01       	movw	r22, r14
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     c66:	31 10       	cpse	r3, r1
     c68:	3a 94       	dec	r3
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	4f 1a       	sub	r4, r31
     c6e:	51 08       	sbc	r5, r1
     c70:	41 14       	cp	r4, r1
     c72:	51 04       	cpc	r5, r1
     c74:	71 f7       	brne	.-36     	; 0xc52 <vfprintf+0x18c>
     c76:	e5 c0       	rjmp	.+458    	; 0xe42 <vfprintf+0x37c>
     c78:	84 36       	cpi	r24, 0x64	; 100
     c7a:	11 f0       	breq	.+4      	; 0xc80 <vfprintf+0x1ba>
     c7c:	89 36       	cpi	r24, 0x69	; 105
     c7e:	39 f5       	brne	.+78     	; 0xcce <vfprintf+0x208>
     c80:	f8 01       	movw	r30, r16
     c82:	27 ff       	sbrs	r18, 7
     c84:	07 c0       	rjmp	.+14     	; 0xc94 <vfprintf+0x1ce>
     c86:	60 81       	ld	r22, Z
     c88:	71 81       	ldd	r23, Z+1	; 0x01
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	0c 5f       	subi	r16, 0xFC	; 252
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	08 c0       	rjmp	.+16     	; 0xca4 <vfprintf+0x1de>
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	88 27       	eor	r24, r24
     c9a:	77 fd       	sbrc	r23, 7
     c9c:	80 95       	com	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	0e 5f       	subi	r16, 0xFE	; 254
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	2f 76       	andi	r18, 0x6F	; 111
     ca6:	b2 2e       	mov	r11, r18
     ca8:	97 ff       	sbrs	r25, 7
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <vfprintf+0x1f8>
     cac:	90 95       	com	r25
     cae:	80 95       	com	r24
     cb0:	70 95       	com	r23
     cb2:	61 95       	neg	r22
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	8f 4f       	sbci	r24, 0xFF	; 255
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	20 68       	ori	r18, 0x80	; 128
     cbc:	b2 2e       	mov	r11, r18
     cbe:	2a e0       	ldi	r18, 0x0A	; 10
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	a4 01       	movw	r20, r8
     cc4:	0e 94 a0 07 	call	0xf40	; 0xf40 <__ultoa_invert>
     cc8:	a8 2e       	mov	r10, r24
     cca:	a8 18       	sub	r10, r8
     ccc:	44 c0       	rjmp	.+136    	; 0xd56 <vfprintf+0x290>
     cce:	85 37       	cpi	r24, 0x75	; 117
     cd0:	29 f4       	brne	.+10     	; 0xcdc <vfprintf+0x216>
     cd2:	2f 7e       	andi	r18, 0xEF	; 239
     cd4:	b2 2e       	mov	r11, r18
     cd6:	2a e0       	ldi	r18, 0x0A	; 10
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	25 c0       	rjmp	.+74     	; 0xd26 <vfprintf+0x260>
     cdc:	f2 2f       	mov	r31, r18
     cde:	f9 7f       	andi	r31, 0xF9	; 249
     ce0:	bf 2e       	mov	r11, r31
     ce2:	8f 36       	cpi	r24, 0x6F	; 111
     ce4:	c1 f0       	breq	.+48     	; 0xd16 <vfprintf+0x250>
     ce6:	18 f4       	brcc	.+6      	; 0xcee <vfprintf+0x228>
     ce8:	88 35       	cpi	r24, 0x58	; 88
     cea:	79 f0       	breq	.+30     	; 0xd0a <vfprintf+0x244>
     cec:	b4 c0       	rjmp	.+360    	; 0xe56 <vfprintf+0x390>
     cee:	80 37       	cpi	r24, 0x70	; 112
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <vfprintf+0x232>
     cf2:	88 37       	cpi	r24, 0x78	; 120
     cf4:	21 f0       	breq	.+8      	; 0xcfe <vfprintf+0x238>
     cf6:	af c0       	rjmp	.+350    	; 0xe56 <vfprintf+0x390>
     cf8:	2f 2f       	mov	r18, r31
     cfa:	20 61       	ori	r18, 0x10	; 16
     cfc:	b2 2e       	mov	r11, r18
     cfe:	b4 fe       	sbrs	r11, 4
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <vfprintf+0x256>
     d02:	8b 2d       	mov	r24, r11
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	b8 2e       	mov	r11, r24
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <vfprintf+0x256>
     d0a:	24 ff       	sbrs	r18, 4
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <vfprintf+0x25c>
     d0e:	9f 2f       	mov	r25, r31
     d10:	96 60       	ori	r25, 0x06	; 6
     d12:	b9 2e       	mov	r11, r25
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0x25c>
     d16:	28 e0       	ldi	r18, 0x08	; 8
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <vfprintf+0x260>
     d1c:	20 e1       	ldi	r18, 0x10	; 16
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x260>
     d22:	20 e1       	ldi	r18, 0x10	; 16
     d24:	32 e0       	ldi	r19, 0x02	; 2
     d26:	f8 01       	movw	r30, r16
     d28:	b7 fe       	sbrs	r11, 7
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <vfprintf+0x274>
     d2c:	60 81       	ld	r22, Z
     d2e:	71 81       	ldd	r23, Z+1	; 0x01
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	0c 5f       	subi	r16, 0xFC	; 252
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x280>
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 5f       	subi	r16, 0xFE	; 254
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	a4 01       	movw	r20, r8
     d48:	0e 94 a0 07 	call	0xf40	; 0xf40 <__ultoa_invert>
     d4c:	a8 2e       	mov	r10, r24
     d4e:	a8 18       	sub	r10, r8
     d50:	fb 2d       	mov	r31, r11
     d52:	ff 77       	andi	r31, 0x7F	; 127
     d54:	bf 2e       	mov	r11, r31
     d56:	b6 fe       	sbrs	r11, 6
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <vfprintf+0x2aa>
     d5a:	2b 2d       	mov	r18, r11
     d5c:	2e 7f       	andi	r18, 0xFE	; 254
     d5e:	a5 14       	cp	r10, r5
     d60:	50 f4       	brcc	.+20     	; 0xd76 <vfprintf+0x2b0>
     d62:	b4 fe       	sbrs	r11, 4
     d64:	0a c0       	rjmp	.+20     	; 0xd7a <vfprintf+0x2b4>
     d66:	b2 fc       	sbrc	r11, 2
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <vfprintf+0x2b4>
     d6a:	2b 2d       	mov	r18, r11
     d6c:	2e 7e       	andi	r18, 0xEE	; 238
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <vfprintf+0x2b4>
     d70:	7a 2c       	mov	r7, r10
     d72:	2b 2d       	mov	r18, r11
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <vfprintf+0x2b6>
     d76:	7a 2c       	mov	r7, r10
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <vfprintf+0x2b6>
     d7a:	75 2c       	mov	r7, r5
     d7c:	24 ff       	sbrs	r18, 4
     d7e:	0d c0       	rjmp	.+26     	; 0xd9a <vfprintf+0x2d4>
     d80:	fe 01       	movw	r30, r28
     d82:	ea 0d       	add	r30, r10
     d84:	f1 1d       	adc	r31, r1
     d86:	80 81       	ld	r24, Z
     d88:	80 33       	cpi	r24, 0x30	; 48
     d8a:	11 f4       	brne	.+4      	; 0xd90 <vfprintf+0x2ca>
     d8c:	29 7e       	andi	r18, 0xE9	; 233
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <vfprintf+0x2dc>
     d90:	22 ff       	sbrs	r18, 2
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <vfprintf+0x2da>
     d94:	73 94       	inc	r7
     d96:	73 94       	inc	r7
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <vfprintf+0x2dc>
     d9a:	82 2f       	mov	r24, r18
     d9c:	86 78       	andi	r24, 0x86	; 134
     d9e:	09 f0       	breq	.+2      	; 0xda2 <vfprintf+0x2dc>
     da0:	73 94       	inc	r7
     da2:	23 fd       	sbrc	r18, 3
     da4:	13 c0       	rjmp	.+38     	; 0xdcc <vfprintf+0x306>
     da6:	20 ff       	sbrs	r18, 0
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <vfprintf+0x2f0>
     daa:	5a 2c       	mov	r5, r10
     dac:	73 14       	cp	r7, r3
     dae:	18 f4       	brcc	.+6      	; 0xdb6 <vfprintf+0x2f0>
     db0:	53 0c       	add	r5, r3
     db2:	57 18       	sub	r5, r7
     db4:	73 2c       	mov	r7, r3
     db6:	73 14       	cp	r7, r3
     db8:	68 f4       	brcc	.+26     	; 0xdd4 <vfprintf+0x30e>
     dba:	b7 01       	movw	r22, r14
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	2c 87       	std	Y+12, r18	; 0x0c
     dc2:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     dc6:	73 94       	inc	r7
     dc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dca:	f5 cf       	rjmp	.-22     	; 0xdb6 <vfprintf+0x2f0>
     dcc:	73 14       	cp	r7, r3
     dce:	10 f4       	brcc	.+4      	; 0xdd4 <vfprintf+0x30e>
     dd0:	37 18       	sub	r3, r7
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <vfprintf+0x310>
     dd4:	31 2c       	mov	r3, r1
     dd6:	24 ff       	sbrs	r18, 4
     dd8:	12 c0       	rjmp	.+36     	; 0xdfe <vfprintf+0x338>
     dda:	b7 01       	movw	r22, r14
     ddc:	80 e3       	ldi	r24, 0x30	; 48
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	2c 87       	std	Y+12, r18	; 0x0c
     de2:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     de6:	2c 85       	ldd	r18, Y+12	; 0x0c
     de8:	22 ff       	sbrs	r18, 2
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <vfprintf+0x354>
     dec:	21 ff       	sbrs	r18, 1
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <vfprintf+0x330>
     df0:	88 e5       	ldi	r24, 0x58	; 88
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <vfprintf+0x334>
     df6:	88 e7       	ldi	r24, 0x78	; 120
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	b7 01       	movw	r22, r14
     dfc:	0c c0       	rjmp	.+24     	; 0xe16 <vfprintf+0x350>
     dfe:	82 2f       	mov	r24, r18
     e00:	86 78       	andi	r24, 0x86	; 134
     e02:	59 f0       	breq	.+22     	; 0xe1a <vfprintf+0x354>
     e04:	21 fd       	sbrc	r18, 1
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x346>
     e08:	80 e2       	ldi	r24, 0x20	; 32
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <vfprintf+0x348>
     e0c:	8b e2       	ldi	r24, 0x2B	; 43
     e0e:	27 fd       	sbrc	r18, 7
     e10:	8d e2       	ldi	r24, 0x2D	; 45
     e12:	b7 01       	movw	r22, r14
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     e1a:	a5 14       	cp	r10, r5
     e1c:	38 f4       	brcc	.+14     	; 0xe2c <vfprintf+0x366>
     e1e:	b7 01       	movw	r22, r14
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     e28:	5a 94       	dec	r5
     e2a:	f7 cf       	rjmp	.-18     	; 0xe1a <vfprintf+0x354>
     e2c:	aa 94       	dec	r10
     e2e:	f4 01       	movw	r30, r8
     e30:	ea 0d       	add	r30, r10
     e32:	f1 1d       	adc	r31, r1
     e34:	80 81       	ld	r24, Z
     e36:	b7 01       	movw	r22, r14
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     e3e:	a1 10       	cpse	r10, r1
     e40:	f5 cf       	rjmp	.-22     	; 0xe2c <vfprintf+0x366>
     e42:	33 20       	and	r3, r3
     e44:	09 f4       	brne	.+2      	; 0xe48 <vfprintf+0x382>
     e46:	51 ce       	rjmp	.-862    	; 0xaea <vfprintf+0x24>
     e48:	b7 01       	movw	r22, r14
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 6e 07 	call	0xedc	; 0xedc <fputc>
     e52:	3a 94       	dec	r3
     e54:	f6 cf       	rjmp	.-20     	; 0xe42 <vfprintf+0x37c>
     e56:	f7 01       	movw	r30, r14
     e58:	86 81       	ldd	r24, Z+6	; 0x06
     e5a:	97 81       	ldd	r25, Z+7	; 0x07
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x39c>
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	9f ef       	ldi	r25, 0xFF	; 255
     e62:	2c 96       	adiw	r28, 0x0c	; 12
     e64:	e2 e1       	ldi	r30, 0x12	; 18
     e66:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__epilogue_restores__>

00000e6a <calloc>:
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	86 9f       	mul	r24, r22
     e74:	80 01       	movw	r16, r0
     e76:	87 9f       	mul	r24, r23
     e78:	10 0d       	add	r17, r0
     e7a:	96 9f       	mul	r25, r22
     e7c:	10 0d       	add	r17, r0
     e7e:	11 24       	eor	r1, r1
     e80:	c8 01       	movw	r24, r16
     e82:	0e 94 b0 03 	call	0x760	; 0x760 <malloc>
     e86:	ec 01       	movw	r28, r24
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	29 f0       	breq	.+10     	; 0xe96 <calloc+0x2c>
     e8c:	a8 01       	movw	r20, r16
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <memset>
     e96:	ce 01       	movw	r24, r28
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <strnlen_P>:
     ea2:	fc 01       	movw	r30, r24
     ea4:	05 90       	lpm	r0, Z+
     ea6:	61 50       	subi	r22, 0x01	; 1
     ea8:	70 40       	sbci	r23, 0x00	; 0
     eaa:	01 10       	cpse	r0, r1
     eac:	d8 f7       	brcc	.-10     	; 0xea4 <strnlen_P+0x2>
     eae:	80 95       	com	r24
     eb0:	90 95       	com	r25
     eb2:	8e 0f       	add	r24, r30
     eb4:	9f 1f       	adc	r25, r31
     eb6:	08 95       	ret

00000eb8 <memset>:
     eb8:	dc 01       	movw	r26, r24
     eba:	01 c0       	rjmp	.+2      	; 0xebe <memset+0x6>
     ebc:	6d 93       	st	X+, r22
     ebe:	41 50       	subi	r20, 0x01	; 1
     ec0:	50 40       	sbci	r21, 0x00	; 0
     ec2:	e0 f7       	brcc	.-8      	; 0xebc <memset+0x4>
     ec4:	08 95       	ret

00000ec6 <strnlen>:
     ec6:	fc 01       	movw	r30, r24
     ec8:	61 50       	subi	r22, 0x01	; 1
     eca:	70 40       	sbci	r23, 0x00	; 0
     ecc:	01 90       	ld	r0, Z+
     ece:	01 10       	cpse	r0, r1
     ed0:	d8 f7       	brcc	.-10     	; 0xec8 <strnlen+0x2>
     ed2:	80 95       	com	r24
     ed4:	90 95       	com	r25
     ed6:	8e 0f       	add	r24, r30
     ed8:	9f 1f       	adc	r25, r31
     eda:	08 95       	ret

00000edc <fputc>:
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	18 2f       	mov	r17, r24
     ee6:	09 2f       	mov	r16, r25
     ee8:	eb 01       	movw	r28, r22
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	81 fd       	sbrc	r24, 1
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <fputc+0x1a>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	20 c0       	rjmp	.+64     	; 0xf36 <fputc+0x5a>
     ef6:	82 ff       	sbrs	r24, 2
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <fputc+0x3e>
     efa:	4e 81       	ldd	r20, Y+6	; 0x06
     efc:	5f 81       	ldd	r21, Y+7	; 0x07
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	42 17       	cp	r20, r18
     f04:	53 07       	cpc	r21, r19
     f06:	7c f4       	brge	.+30     	; 0xf26 <fputc+0x4a>
     f08:	e8 81       	ld	r30, Y
     f0a:	f9 81       	ldd	r31, Y+1	; 0x01
     f0c:	9f 01       	movw	r18, r30
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	39 83       	std	Y+1, r19	; 0x01
     f14:	28 83       	st	Y, r18
     f16:	10 83       	st	Z, r17
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <fputc+0x4a>
     f1a:	e8 85       	ldd	r30, Y+8	; 0x08
     f1c:	f9 85       	ldd	r31, Y+9	; 0x09
     f1e:	81 2f       	mov	r24, r17
     f20:	09 95       	icall
     f22:	89 2b       	or	r24, r25
     f24:	29 f7       	brne	.-54     	; 0xef0 <fputc+0x14>
     f26:	2e 81       	ldd	r18, Y+6	; 0x06
     f28:	3f 81       	ldd	r19, Y+7	; 0x07
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	3f 83       	std	Y+7, r19	; 0x07
     f30:	2e 83       	std	Y+6, r18	; 0x06
     f32:	81 2f       	mov	r24, r17
     f34:	90 2f       	mov	r25, r16
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	08 95       	ret

00000f40 <__ultoa_invert>:
     f40:	fa 01       	movw	r30, r20
     f42:	aa 27       	eor	r26, r26
     f44:	28 30       	cpi	r18, 0x08	; 8
     f46:	51 f1       	breq	.+84     	; 0xf9c <__ultoa_invert+0x5c>
     f48:	20 31       	cpi	r18, 0x10	; 16
     f4a:	81 f1       	breq	.+96     	; 0xfac <__ultoa_invert+0x6c>
     f4c:	e8 94       	clt
     f4e:	6f 93       	push	r22
     f50:	6e 7f       	andi	r22, 0xFE	; 254
     f52:	6e 5f       	subi	r22, 0xFE	; 254
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	af 4f       	sbci	r26, 0xFF	; 255
     f5c:	b1 e0       	ldi	r27, 0x01	; 1
     f5e:	3e d0       	rcall	.+124    	; 0xfdc <__ultoa_invert+0x9c>
     f60:	b4 e0       	ldi	r27, 0x04	; 4
     f62:	3c d0       	rcall	.+120    	; 0xfdc <__ultoa_invert+0x9c>
     f64:	67 0f       	add	r22, r23
     f66:	78 1f       	adc	r23, r24
     f68:	89 1f       	adc	r24, r25
     f6a:	9a 1f       	adc	r25, r26
     f6c:	a1 1d       	adc	r26, r1
     f6e:	68 0f       	add	r22, r24
     f70:	79 1f       	adc	r23, r25
     f72:	8a 1f       	adc	r24, r26
     f74:	91 1d       	adc	r25, r1
     f76:	a1 1d       	adc	r26, r1
     f78:	6a 0f       	add	r22, r26
     f7a:	71 1d       	adc	r23, r1
     f7c:	81 1d       	adc	r24, r1
     f7e:	91 1d       	adc	r25, r1
     f80:	a1 1d       	adc	r26, r1
     f82:	20 d0       	rcall	.+64     	; 0xfc4 <__ultoa_invert+0x84>
     f84:	09 f4       	brne	.+2      	; 0xf88 <__ultoa_invert+0x48>
     f86:	68 94       	set
     f88:	3f 91       	pop	r19
     f8a:	2a e0       	ldi	r18, 0x0A	; 10
     f8c:	26 9f       	mul	r18, r22
     f8e:	11 24       	eor	r1, r1
     f90:	30 19       	sub	r19, r0
     f92:	30 5d       	subi	r19, 0xD0	; 208
     f94:	31 93       	st	Z+, r19
     f96:	de f6       	brtc	.-74     	; 0xf4e <__ultoa_invert+0xe>
     f98:	cf 01       	movw	r24, r30
     f9a:	08 95       	ret
     f9c:	46 2f       	mov	r20, r22
     f9e:	47 70       	andi	r20, 0x07	; 7
     fa0:	40 5d       	subi	r20, 0xD0	; 208
     fa2:	41 93       	st	Z+, r20
     fa4:	b3 e0       	ldi	r27, 0x03	; 3
     fa6:	0f d0       	rcall	.+30     	; 0xfc6 <__ultoa_invert+0x86>
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__ultoa_invert+0x5c>
     faa:	f6 cf       	rjmp	.-20     	; 0xf98 <__ultoa_invert+0x58>
     fac:	46 2f       	mov	r20, r22
     fae:	4f 70       	andi	r20, 0x0F	; 15
     fb0:	40 5d       	subi	r20, 0xD0	; 208
     fb2:	4a 33       	cpi	r20, 0x3A	; 58
     fb4:	18 f0       	brcs	.+6      	; 0xfbc <__ultoa_invert+0x7c>
     fb6:	49 5d       	subi	r20, 0xD9	; 217
     fb8:	31 fd       	sbrc	r19, 1
     fba:	40 52       	subi	r20, 0x20	; 32
     fbc:	41 93       	st	Z+, r20
     fbe:	02 d0       	rcall	.+4      	; 0xfc4 <__ultoa_invert+0x84>
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__ultoa_invert+0x6c>
     fc2:	ea cf       	rjmp	.-44     	; 0xf98 <__ultoa_invert+0x58>
     fc4:	b4 e0       	ldi	r27, 0x04	; 4
     fc6:	a6 95       	lsr	r26
     fc8:	97 95       	ror	r25
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	ba 95       	dec	r27
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <__ultoa_invert+0x86>
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	61 05       	cpc	r22, r1
     fd8:	71 05       	cpc	r23, r1
     fda:	08 95       	ret
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	0a 2e       	mov	r0, r26
     fe2:	06 94       	lsr	r0
     fe4:	57 95       	ror	r21
     fe6:	47 95       	ror	r20
     fe8:	37 95       	ror	r19
     fea:	27 95       	ror	r18
     fec:	ba 95       	dec	r27
     fee:	c9 f7       	brne	.-14     	; 0xfe2 <__ultoa_invert+0xa2>
     ff0:	62 0f       	add	r22, r18
     ff2:	73 1f       	adc	r23, r19
     ff4:	84 1f       	adc	r24, r20
     ff6:	95 1f       	adc	r25, r21
     ff8:	a0 1d       	adc	r26, r0
     ffa:	08 95       	ret

00000ffc <__prologue_saves__>:
     ffc:	2f 92       	push	r2
     ffe:	3f 92       	push	r3
    1000:	4f 92       	push	r4
    1002:	5f 92       	push	r5
    1004:	6f 92       	push	r6
    1006:	7f 92       	push	r7
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	ca 1b       	sub	r28, r26
    1026:	db 0b       	sbc	r29, r27
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	09 94       	ijmp

00001034 <__epilogue_restores__>:
    1034:	2a 88       	ldd	r2, Y+18	; 0x12
    1036:	39 88       	ldd	r3, Y+17	; 0x11
    1038:	48 88       	ldd	r4, Y+16	; 0x10
    103a:	5f 84       	ldd	r5, Y+15	; 0x0f
    103c:	6e 84       	ldd	r6, Y+14	; 0x0e
    103e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1040:	8c 84       	ldd	r8, Y+12	; 0x0c
    1042:	9b 84       	ldd	r9, Y+11	; 0x0b
    1044:	aa 84       	ldd	r10, Y+10	; 0x0a
    1046:	b9 84       	ldd	r11, Y+9	; 0x09
    1048:	c8 84       	ldd	r12, Y+8	; 0x08
    104a:	df 80       	ldd	r13, Y+7	; 0x07
    104c:	ee 80       	ldd	r14, Y+6	; 0x06
    104e:	fd 80       	ldd	r15, Y+5	; 0x05
    1050:	0c 81       	ldd	r16, Y+4	; 0x04
    1052:	1b 81       	ldd	r17, Y+3	; 0x03
    1054:	aa 81       	ldd	r26, Y+2	; 0x02
    1056:	b9 81       	ldd	r27, Y+1	; 0x01
    1058:	ce 0f       	add	r28, r30
    105a:	d1 1d       	adc	r29, r1
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	ed 01       	movw	r28, r26
    1068:	08 95       	ret

0000106a <_exit>:
    106a:	f8 94       	cli

0000106c <__stop_program>:
    106c:	ff cf       	rjmp	.-2      	; 0x106c <__stop_program>
