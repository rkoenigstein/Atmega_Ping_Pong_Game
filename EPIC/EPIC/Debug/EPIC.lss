
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00003d74  00003e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800342  00800342  0000404a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000404a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004a8  00000000  00000000  000040a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000089b7  00000000  00000000  0000454e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002096  00000000  00000000  0000cf05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002536  00000000  00000000  0000ef9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001174  00000000  00000000  000114d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e0c  00000000  00000000  00012648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009979  00000000  00000000  00013454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001310  00000000  00000000  0001cdcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__ctors_end>
       4:	0c 94 46 13 	jmp	0x268c	; 0x268c <__vector_1>
       8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
       c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_3>
      10:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      14:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      18:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      1c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      20:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      24:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      28:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      2c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      30:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      34:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      38:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      3c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      40:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      44:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      48:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      4c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      50:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      54:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      58:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      5c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      60:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      64:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      68:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      6c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	4d 02       	muls	r20, r29
      72:	47 02       	muls	r20, r23
      74:	3e 02       	muls	r19, r30
      76:	35 02       	muls	r19, r21
      78:	2b 02       	muls	r18, r27
      7a:	22 02       	muls	r18, r18
      7c:	12 02       	muls	r17, r18
      7e:	02 02       	muls	r16, r18
      80:	f3 01       	movw	r30, r6
      82:	e5 01       	movw	r28, r10
      84:	d9 01       	movw	r26, r18
      86:	cc 01       	movw	r24, r24
      88:	c6 01       	movw	r24, r12
      8a:	b9 01       	movw	r22, r18
      8c:	b2 01       	movw	r22, r4
      8e:	a5 01       	movw	r20, r10
      90:	9d 01       	movw	r18, r26
      92:	8c 01       	movw	r16, r24
      94:	7a 01       	movw	r14, r20
      96:	69 01       	movw	r12, r18
      98:	58 01       	movw	r10, r16
      9a:	47 01       	movw	r8, r14
      9c:	36 01       	movw	r6, r12
      9e:	25 01       	movw	r4, r10
      a0:	14 01       	movw	r2, r8
      a2:	03 01       	movw	r0, r6
      a4:	f2 00       	.word	0x00f2	; ????
      a6:	e1 00       	.word	0x00e1	; ????
      a8:	d0 00       	.word	0x00d0	; ????
      aa:	bf 00       	.word	0x00bf	; ????
      ac:	ae 00       	.word	0x00ae	; ????

000000ae <s_hello7>:
      ae:	20 20 20 20 20 20 20 20 20 20 28 3e 20 3c 29 20               (> <) 
	...

000000bf <s_hello6>:
      bf:	20 20 20 20 20 20 20 7c 5f 5f 28 4f 2e 6f 29 20            |__(O.o) 
	...

000000d0 <s_hello5>:
      d0:	20 20 20 20 20 20 20 7c 20 20 28 5c 5f 2f 29 20            |  (\_/) 
	...

000000e1 <s_hello4>:
      e1:	20 20 20 20 20 20 20 5e 20 20 20 20 20 20 20 20            ^        
	...

000000f2 <s_hello3>:
      f2:	20 60 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 20      `------------' 
	...

00000103 <s_hello2>:
     103:	20 7c 20 50 69 6e 67 20 50 6f 6e 67 21 20 7c 20      | Ping Pong! | 
	...

00000114 <s_hello1>:
     114:	20 2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 20      .------------. 
	...

00000125 <s_thumb7>:
     125:	20 20 28 5f 5f 5f 29 5f 5f 2e 7c 5f 5f 5f 5f 5f       (___)__.|_____
	...

00000136 <s_thumb6>:
     136:	20 28 5f 5f 5f 5f 29 2e 5f 5f 7c 20 20 20 20 20      (____).__|     
	...

00000147 <s_thumb5>:
     147:	28 5f 5f 5f 5f 29 7c 20 20 20 7c 20 20 20 20 20     (____)|   |     
	...

00000158 <s_thumb4>:
     158:	20 28 5f 5f 5f 5f 29 20 20 60 7c 20 20 20 20 20      (____)  `|     
	...

00000169 <s_thumb3>:
     169:	20 20 5f 5f 5f 5f 5c 20 5c 20 20 5f 5f 5f 5f 5f       ____\ \  _____
	...

0000017a <s_thumb2>:
     17a:	20 20 20 20 20 7c 20 5c 20 20 20 20 20 20 20 20          | \        
     18a:	20 00                                                .

0000018c <s_thumb1>:
     18c:	20 20 20 20 20 20 2f 7c 20 20 20 20 20 20 20 20           /|        
	...

0000019d <s_pokemon>:
     19d:	50 6f 6b 65 6d 6f 6e 00                             Pokemon.

000001a5 <s_cantina_band>:
     1a5:	43 61 6e 74 69 6e 61 20 42 61 6e 64 00              Cantina Band.

000001b2 <s_tetris>:
     1b2:	54 65 74 72 69 73 00                                Tetris.

000001b9 <s_harry_potter>:
     1b9:	48 61 72 72 79 20 50 6f 74 74 65 72 00              Harry Potter.

000001c6 <s_songs>:
     1c6:	53 6f 6e 67 73 00                                   Songs.

000001cc <s_right_slid>:
     1cc:	52 69 67 68 74 20 53 6c 69 64 65 72 00              Right Slider.

000001d9 <s_left_slid>:
     1d9:	4c 65 66 74 20 53 6c 69 64 65 72 00                 Left Slider.

000001e5 <s_calibrate_slid>:
     1e5:	43 61 6c 69 62 20 53 6c 69 64 65 72 73 00           Calib Sliders.

000001f3 <s_calibrate_joy>:
     1f3:	43 61 6c 69 62 20 4a 6f 79 73 74 69 63 6b 00        Calib Joystick.

00000202 <s_reset_highscore>:
     202:	52 65 73 65 74 20 48 69 67 68 73 63 6f 72 65 00     Reset Highscore.

00000212 <s_store_highscore>:
     212:	53 74 6f 72 65 20 48 69 67 68 73 63 6f 72 65 00     Store Highscore.

00000222 <s_settings>:
     222:	53 65 74 74 69 6e 67 73 00                          Settings.

0000022b <s_highscore>:
     22b:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

00000235 <s_pingpang>:
     235:	50 69 6e 67 50 61 6e 67 00                          PingPang.

0000023e <s_pingpong>:
     23e:	50 69 6e 67 50 6f 6e 67 00                          PingPong.

00000247 <s_games>:
     247:	47 61 6d 65 73 00                                   Games.

0000024d <s_root>:
     24d:	72 6f 6f 74 00                                      root.

00000252 <font8>:
	...
     25a:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     26a:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     27a:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     28a:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     29a:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     2aa:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     2ba:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2ca:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2da:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2ea:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2fa:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     30a:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     31a:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     32a:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     33a:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     34a:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     35a:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     36a:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     37a:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     38a:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     39a:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     3aa:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     3ba:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3ca:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3da:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3ea:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3fa:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     40a:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     41a:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     42a:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     43a:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     44a:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     45a:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     46a:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     47a:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     48a:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     49a:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     4aa:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     4ba:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4ca:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4da:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4ea:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4fa:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     50a:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     51a:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     52a:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     53a:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

0000054a <__ctors_end>:
     54a:	11 24       	eor	r1, r1
     54c:	1f be       	out	0x3f, r1	; 63
     54e:	cf ef       	ldi	r28, 0xFF	; 255
     550:	d4 e0       	ldi	r29, 0x04	; 4
     552:	de bf       	out	0x3e, r29	; 62
     554:	cd bf       	out	0x3d, r28	; 61

00000556 <__do_copy_data>:
     556:	13 e0       	ldi	r17, 0x03	; 3
     558:	a0 e0       	ldi	r26, 0x00	; 0
     55a:	b1 e0       	ldi	r27, 0x01	; 1
     55c:	e4 e7       	ldi	r30, 0x74	; 116
     55e:	fd e3       	ldi	r31, 0x3D	; 61
     560:	02 c0       	rjmp	.+4      	; 0x566 <__do_copy_data+0x10>
     562:	05 90       	lpm	r0, Z+
     564:	0d 92       	st	X+, r0
     566:	a2 34       	cpi	r26, 0x42	; 66
     568:	b1 07       	cpc	r27, r17
     56a:	d9 f7       	brne	.-10     	; 0x562 <__do_copy_data+0xc>

0000056c <__do_clear_bss>:
     56c:	23 e0       	ldi	r18, 0x03	; 3
     56e:	a2 e4       	ldi	r26, 0x42	; 66
     570:	b3 e0       	ldi	r27, 0x03	; 3
     572:	01 c0       	rjmp	.+2      	; 0x576 <.do_clear_bss_start>

00000574 <.do_clear_bss_loop>:
     574:	1d 92       	st	X+, r1

00000576 <.do_clear_bss_start>:
     576:	a1 3a       	cpi	r26, 0xA1	; 161
     578:	b2 07       	cpc	r27, r18
     57a:	e1 f7       	brne	.-8      	; 0x574 <.do_clear_bss_loop>
     57c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <main>
     580:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <_exit>

00000584 <__bad_interrupt>:
     584:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000588 <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
     588:	8b b7       	in	r24, 0x3b	; 59
     58a:	80 62       	ori	r24, 0x20	; 32
     58c:	8b bf       	out	0x3b, r24	; 59
     58e:	08 95       	ret

00000590 <ADC_read>:
}

char ADC_read(char channel)
{
	volatile int * adc_channel = (int *) 0x1400;
	adc_channel[0] = channel;
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 01 14 	sts	0x1401, r25
     596:	80 93 00 14 	sts	0x1400, r24
	char value;
	while(!flag);
     59a:	80 91 42 03 	lds	r24, 0x0342
     59e:	90 91 43 03 	lds	r25, 0x0343
     5a2:	89 2b       	or	r24, r25
     5a4:	d1 f3       	breq	.-12     	; 0x59a <ADC_read+0xa>
	value = adc_channel[20];
     5a6:	80 91 28 14 	lds	r24, 0x1428
     5aa:	90 91 29 14 	lds	r25, 0x1429
	flag = 0;
     5ae:	10 92 43 03 	sts	0x0343, r1
     5b2:	10 92 42 03 	sts	0x0342, r1
	return value;
}
     5b6:	08 95       	ret

000005b8 <__vector_3>:

//interrupt service routine to notice when data available
ISR(INT2_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
	flag = 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 43 03 	sts	0x0343, r25
     5ce:	80 93 42 03 	sts	0x0342, r24
}
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <can_init>:
volatile int msg_received_flag = 0;

void can_init(void)
{
	//initialize mcp
	mcp_init();
     5e0:	0e 94 90 08 	call	0x1120	; 0x1120 <mcp_init>

	//ensure to be in config mode
	mcp_write(MCP_CANCTRL, MODE_MASK & MODE_CONFIG);
     5e4:	60 e8       	ldi	r22, 0x80	; 128
     5e6:	8f e0       	ldi	r24, 0x0F	; 15
     5e8:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>

	//turn off filters and rollover for receive buffer 0
	mcp_write(MCP_RXB0CTRL, NO_FILTERS_AND_MASKS);
     5ec:	60 e6       	ldi	r22, 0x60	; 96
     5ee:	80 e6       	ldi	r24, 0x60	; 96
     5f0:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>

	//enable interrupt for received message
	mcp_write(MCP_CANINTE, MCP_RX0IF);
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	8b e2       	ldi	r24, 0x2B	; 43
     5f8:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>

	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages)
	mcp_write(MCP_CANCTRL, MODE_NORMAL & MODE_MASK);
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	8f e0       	ldi	r24, 0x0F	; 15
     600:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>

	//enable CAN interrupts on the MCU
	cli();
     604:	f8 94       	cli
	#ifdef ATMEGA2560
		EICRB &= ~(1 << ISC31);
		EICRB &= ~(1 << ISC30);
		EIMSK |= (1 << INT3);
	#else
		MCUCR |= (1 << ISC11);
     606:	85 b7       	in	r24, 0x35	; 53
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	85 bf       	out	0x35, r24	; 53
		GICR |= (1 << INT0);
     60c:	8b b7       	in	r24, 0x3b	; 59
     60e:	80 64       	ori	r24, 0x40	; 64
     610:	8b bf       	out	0x3b, r24	; 59
	#endif
	sei();
     612:	78 94       	sei
     614:	08 95       	ret

00000616 <can_message_send>:
}

void can_message_send(can_message can_msg)
{
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	2b 97       	sbiw	r28, 0x0b	; 11
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	e9 82       	std	Y+1, r14	; 0x01
     634:	fa 82       	std	Y+2, r15	; 0x02
     636:	0b 83       	std	Y+3, r16	; 0x03
     638:	1c 83       	std	Y+4, r17	; 0x04
     63a:	2d 83       	std	Y+5, r18	; 0x05
     63c:	3e 83       	std	Y+6, r19	; 0x06
     63e:	4f 83       	std	Y+7, r20	; 0x07
     640:	58 87       	std	Y+8, r21	; 0x08
     642:	69 87       	std	Y+9, r22	; 0x09
     644:	7a 87       	std	Y+10, r23	; 0x0a
     646:	8b 87       	std	Y+11, r24	; 0x0b
     648:	e9 80       	ldd	r14, Y+1	; 0x01
     64a:	fa 80       	ldd	r15, Y+2	; 0x02
}

bool can_transmit_complete(void)
{
	//check if transmission complete from status register
	return !(TXREQ & mcp_read(MCP_TXB0CTRL));
     64c:	80 e3       	ldi	r24, 0x30	; 48
     64e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <mcp_read>
	sei();
}

void can_message_send(can_message can_msg)
{
	if(can_transmit_complete())
     652:	83 fd       	sbrc	r24, 3
     654:	37 c0       	rjmp	.+110    	; 0x6c4 <can_message_send+0xae>
	{
		//write CAN msg ID to MCP2515
		mcp_write(MCP_TXB0SIDH, can_msg.id >> 3);
     656:	b7 01       	movw	r22, r14
     658:	76 95       	lsr	r23
     65a:	67 95       	ror	r22
     65c:	76 95       	lsr	r23
     65e:	67 95       	ror	r22
     660:	76 95       	lsr	r23
     662:	67 95       	ror	r22
     664:	81 e3       	ldi	r24, 0x31	; 49
     666:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>
		mcp_write(MCP_TXB0SIDL, can_msg.id << 5);
     66a:	6e 2d       	mov	r22, r14
     66c:	62 95       	swap	r22
     66e:	66 0f       	add	r22, r22
     670:	60 7e       	andi	r22, 0xE0	; 224
     672:	82 e3       	ldi	r24, 0x32	; 50
     674:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>

		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
     678:	60 2f       	mov	r22, r16
     67a:	6f 70       	andi	r22, 0x0F	; 15
     67c:	85 e3       	ldi	r24, 0x35	; 53
     67e:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>

		//write CAN data to MCP2515
		for(uint8_t i = 0; i < can_msg.length; i++)
     682:	00 23       	and	r16, r16
     684:	79 f0       	breq	.+30     	; 0x6a4 <can_message_send+0x8e>
     686:	7e 01       	movw	r14, r28
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	e8 0e       	add	r14, r24
     68c:	f1 1c       	adc	r15, r1
     68e:	0a 5c       	subi	r16, 0xCA	; 202
     690:	16 e3       	ldi	r17, 0x36	; 54
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
     692:	f7 01       	movw	r30, r14
     694:	61 91       	ld	r22, Z+
     696:	7f 01       	movw	r14, r30
     698:	81 2f       	mov	r24, r17
     69a:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>
     69e:	1f 5f       	subi	r17, 0xFF	; 255

		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);

		//write CAN data to MCP2515
		for(uint8_t i = 0; i < can_msg.length; i++)
     6a0:	10 13       	cpse	r17, r16
     6a2:	f7 cf       	rjmp	.-18     	; 0x692 <can_message_send+0x7c>
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);

		//send transmission request for transmitted CAN msg to MCP2515
		mcp_request_to_send(TXB0);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <mcp_request_to_send>
	else
	{
		if(can_error())
			printf("CAN transmission error \n");
	}
}
     6aa:	2b 96       	adiw	r28, 0x0b	; 11
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	08 95       	ret

bool can_error(void)
{
	//read CAN error status out of respective register
	return TXERR & mcp_read(MCP_TXB0CTRL);
     6c4:	80 e3       	ldi	r24, 0x30	; 48
     6c6:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <mcp_read>
		//send transmission request for transmitted CAN msg to MCP2515
		mcp_request_to_send(TXB0);
	}
	else
	{
		if(can_error())
     6ca:	84 ff       	sbrs	r24, 4
     6cc:	ee cf       	rjmp	.-36     	; 0x6aa <can_message_send+0x94>
			printf("CAN transmission error \n");
     6ce:	83 e1       	ldi	r24, 0x13	; 19
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
     6d6:	e9 cf       	rjmp	.-46     	; 0x6aa <can_message_send+0x94>

000006d8 <update_ball>:
	}
	
}

void update_ball(void)
{
     6d8:	60 91 8a 03 	lds	r22, 0x038A
	switch (ball.dir)
	{
		case UP_RIGHT:
		{
			if(ball.pos.x == LIM_RIGHT)
     6dc:	70 91 88 03 	lds	r23, 0x0388
			{
				ball.dir=UP_LEFT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
     6e0:	a0 91 89 03 	lds	r26, 0x0389
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     6e4:	f0 91 4c 03 	lds	r31, 0x034C
     6e8:	47 2f       	mov	r20, r23
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	80 91 4e 03 	lds	r24, 0x034E
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	8f 0f       	add	r24, r31
     6f4:	91 1d       	adc	r25, r1
     6f6:	20 91 46 03 	lds	r18, 0x0346
     6fa:	30 91 47 03 	lds	r19, 0x0347
     6fe:	7f 37       	cpi	r23, 0x7F	; 127
     700:	09 f4       	brne	.+2      	; 0x704 <update_ball+0x2c>
     702:	49 c0       	rjmp	.+146    	; 0x796 <update_ball+0xbe>
     704:	e6 2f       	mov	r30, r22
     706:	77 23       	and	r23, r23
     708:	d9 f0       	breq	.+54     	; 0x740 <update_ball+0x68>
     70a:	ab 30       	cpi	r26, 0x0B	; 11
     70c:	09 f0       	breq	.+2      	; 0x710 <update_ball+0x38>
     70e:	66 c0       	rjmp	.+204    	; 0x7dc <update_ball+0x104>
	
}

void update_ball(void)
{
	switch (ball.dir)
     710:	61 30       	cpi	r22, 0x01	; 1
     712:	09 f4       	brne	.+2      	; 0x716 <update_ball+0x3e>
     714:	4f c0       	rjmp	.+158    	; 0x7b4 <update_ball+0xdc>
     716:	61 30       	cpi	r22, 0x01	; 1
     718:	08 f4       	brcc	.+2      	; 0x71c <update_ball+0x44>
     71a:	47 c0       	rjmp	.+142    	; 0x7aa <update_ball+0xd2>
     71c:	62 30       	cpi	r22, 0x02	; 2
     71e:	09 f4       	brne	.+2      	; 0x722 <update_ball+0x4a>
     720:	bf c0       	rjmp	.+382    	; 0x8a0 <update_ball+0x1c8>
     722:	63 30       	cpi	r22, 0x03	; 3
     724:	01 f5       	brne	.+64     	; 0x766 <update_ball+0x8e>
     726:	e0 93 8a 03 	sts	0x038A, r30
     72a:	30 93 47 03 	sts	0x0347, r19
     72e:	20 93 46 03 	sts	0x0346, r18
     732:	af 5f       	subi	r26, 0xFF	; 255
				ball.dir=UP_LEFT;
				n_catched_balls++;
				update_ball();
				return;
			}
			ball.pos.x--;
     734:	71 50       	subi	r23, 0x01	; 1
     736:	70 93 88 03 	sts	0x0388, r23
			ball.pos.y++;
     73a:	a0 93 89 03 	sts	0x0389, r26
     73e:	08 95       	ret
     740:	ab 30       	cpi	r26, 0x0B	; 11
     742:	09 f0       	breq	.+2      	; 0x746 <update_ball+0x6e>
     744:	74 c0       	rjmp	.+232    	; 0x82e <update_ball+0x156>
	
}

void update_ball(void)
{
	switch (ball.dir)
     746:	61 30       	cpi	r22, 0x01	; 1
     748:	59 f0       	breq	.+22     	; 0x760 <update_ball+0x88>
     74a:	61 30       	cpi	r22, 0x01	; 1
     74c:	28 f0       	brcs	.+10     	; 0x758 <update_ball+0x80>
     74e:	62 30       	cpi	r22, 0x02	; 2
     750:	09 f4       	brne	.+2      	; 0x754 <update_ball+0x7c>
     752:	a6 c0       	rjmp	.+332    	; 0x8a0 <update_ball+0x1c8>
     754:	63 30       	cpi	r22, 0x03	; 3
     756:	39 f4       	brne	.+14     	; 0x766 <update_ball+0x8e>
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	e6 2f       	mov	r30, r22
     75c:	61 30       	cpi	r22, 0x01	; 1
     75e:	a9 f7       	brne	.-22     	; 0x74a <update_ball+0x72>
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	e6 2f       	mov	r30, r22
     764:	fb cf       	rjmp	.-10     	; 0x75c <update_ball+0x84>
     766:	60 93 8a 03 	sts	0x038A, r22
     76a:	30 93 47 03 	sts	0x0347, r19
     76e:	20 93 46 03 	sts	0x0346, r18
     772:	08 95       	ret
     774:	63 30       	cpi	r22, 0x03	; 3
     776:	b9 f7       	brne	.-18     	; 0x766 <update_ball+0x8e>
			{
				ball.dir=DOWN_RIGHT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_DOWN)
     778:	af 33       	cpi	r26, 0x3F	; 63
     77a:	09 f4       	brne	.+2      	; 0x77e <update_ball+0xa6>
     77c:	64 c0       	rjmp	.+200    	; 0x846 <update_ball+0x16e>
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     77e:	ad 33       	cpi	r26, 0x3D	; 61
     780:	91 f6       	brne	.-92     	; 0x726 <update_ball+0x4e>
     782:	7f 17       	cp	r23, r31
     784:	08 f4       	brcc	.+2      	; 0x788 <update_ball+0xb0>
     786:	77 c0       	rjmp	.+238    	; 0x876 <update_ball+0x19e>
     788:	84 17       	cp	r24, r20
     78a:	95 07       	cpc	r25, r21
     78c:	0c f4       	brge	.+2      	; 0x790 <update_ball+0xb8>
     78e:	73 c0       	rjmp	.+230    	; 0x876 <update_ball+0x19e>
			{
				ball.dir=UP_LEFT;
				n_catched_balls++;
     790:	2f 5f       	subi	r18, 0xFF	; 255
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	61 e0       	ldi	r22, 0x01	; 1
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     796:	e6 2f       	mov	r30, r22
	
}

void update_ball(void)
{
	switch (ball.dir)
     798:	61 30       	cpi	r22, 0x01	; 1
     79a:	09 f4       	brne	.+2      	; 0x79e <update_ball+0xc6>
     79c:	8e c0       	rjmp	.+284    	; 0x8ba <update_ball+0x1e2>
     79e:	08 f4       	brcc	.+2      	; 0x7a2 <update_ball+0xca>
     7a0:	68 c0       	rjmp	.+208    	; 0x872 <update_ball+0x19a>
     7a2:	62 30       	cpi	r22, 0x02	; 2
     7a4:	39 f7       	brne	.-50     	; 0x774 <update_ball+0x9c>
			{
				ball.dir=UP_RIGHT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
     7a6:	63 e0       	ldi	r22, 0x03	; 3
     7a8:	f6 cf       	rjmp	.-20     	; 0x796 <update_ball+0xbe>
	
}

void update_ball(void)
{
	switch (ball.dir)
     7aa:	62 e0       	ldi	r22, 0x02	; 2
     7ac:	e6 2f       	mov	r30, r22
     7ae:	61 30       	cpi	r22, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <update_ball+0xdc>
     7b2:	b1 cf       	rjmp	.-158    	; 0x716 <update_ball+0x3e>
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	e6 2f       	mov	r30, r22
     7b8:	fa cf       	rjmp	.-12     	; 0x7ae <update_ball+0xd6>
			{
				ball.dir=DOWN_LEFT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_DOWN)
     7ba:	af 33       	cpi	r26, 0x3F	; 63
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <update_ball+0xe8>
     7be:	43 c0       	rjmp	.+134    	; 0x846 <update_ball+0x16e>
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     7c0:	ad 33       	cpi	r26, 0x3D	; 61
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <update_ball+0xee>
     7c4:	6d c0       	rjmp	.+218    	; 0x8a0 <update_ball+0x1c8>
     7c6:	7f 17       	cp	r23, r31
     7c8:	08 f4       	brcc	.+2      	; 0x7cc <update_ball+0xf4>
     7ca:	8a c0       	rjmp	.+276    	; 0x8e0 <update_ball+0x208>
     7cc:	84 17       	cp	r24, r20
     7ce:	95 07       	cpc	r25, r21
     7d0:	0c f4       	brge	.+2      	; 0x7d4 <update_ball+0xfc>
     7d2:	86 c0       	rjmp	.+268    	; 0x8e0 <update_ball+0x208>
			{
				ball.dir=UP_RIGHT;
				n_catched_balls++;
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	e6 2f       	mov	r30, r22
	
}

void update_ball(void)
{
	switch (ball.dir)
     7dc:	61 30       	cpi	r22, 0x01	; 1
     7de:	09 f4       	brne	.+2      	; 0x7e2 <update_ball+0x10a>
     7e0:	6f c0       	rjmp	.+222    	; 0x8c0 <update_ball+0x1e8>
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <update_ball+0x10e>
     7e4:	50 c0       	rjmp	.+160    	; 0x886 <update_ball+0x1ae>
     7e6:	62 30       	cpi	r22, 0x02	; 2
     7e8:	41 f3       	breq	.-48     	; 0x7ba <update_ball+0xe2>
     7ea:	63 30       	cpi	r22, 0x03	; 3
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <update_ball+0x118>
     7ee:	bb cf       	rjmp	.-138    	; 0x766 <update_ball+0x8e>
			{
				ball.dir=DOWN_RIGHT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_DOWN)
     7f0:	af 33       	cpi	r26, 0x3F	; 63
     7f2:	49 f1       	breq	.+82     	; 0x846 <update_ball+0x16e>
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     7f4:	ad 33       	cpi	r26, 0x3D	; 61
     7f6:	09 f0       	breq	.+2      	; 0x7fa <update_ball+0x122>
     7f8:	96 cf       	rjmp	.-212    	; 0x726 <update_ball+0x4e>
     7fa:	7f 17       	cp	r23, r31
     7fc:	e0 f1       	brcs	.+120    	; 0x876 <update_ball+0x19e>
     7fe:	84 17       	cp	r24, r20
     800:	95 07       	cpc	r25, r21
     802:	cc f1       	brlt	.+114    	; 0x876 <update_ball+0x19e>
			{
				ball.dir=UP_LEFT;
				n_catched_balls++;
     804:	2f 5f       	subi	r18, 0xFF	; 255
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	e6 2f       	mov	r30, r22
     80c:	e7 cf       	rjmp	.-50     	; 0x7dc <update_ball+0x104>
			{
				ball.dir=DOWN_LEFT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_DOWN)
     80e:	af 33       	cpi	r26, 0x3F	; 63
     810:	d1 f0       	breq	.+52     	; 0x846 <update_ball+0x16e>
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     812:	ad 33       	cpi	r26, 0x3D	; 61
     814:	09 f0       	breq	.+2      	; 0x818 <update_ball+0x140>
     816:	44 c0       	rjmp	.+136    	; 0x8a0 <update_ball+0x1c8>
     818:	1f 16       	cp	r1, r31
     81a:	08 f4       	brcc	.+2      	; 0x81e <update_ball+0x146>
     81c:	61 c0       	rjmp	.+194    	; 0x8e0 <update_ball+0x208>
     81e:	84 17       	cp	r24, r20
     820:	95 07       	cpc	r25, r21
     822:	0c f4       	brge	.+2      	; 0x826 <update_ball+0x14e>
     824:	5d c0       	rjmp	.+186    	; 0x8e0 <update_ball+0x208>
			{
				ball.dir=UP_RIGHT;
				n_catched_balls++;
     826:	2f 5f       	subi	r18, 0xFF	; 255
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	e6 2f       	mov	r30, r22
	
}

void update_ball(void)
{
	switch (ball.dir)
     82e:	61 30       	cpi	r22, 0x01	; 1
     830:	09 f4       	brne	.+2      	; 0x834 <update_ball+0x15c>
     832:	53 c0       	rjmp	.+166    	; 0x8da <update_ball+0x202>
     834:	40 f1       	brcs	.+80     	; 0x886 <update_ball+0x1ae>
     836:	62 30       	cpi	r22, 0x02	; 2
     838:	51 f3       	breq	.-44     	; 0x80e <update_ball+0x136>
     83a:	63 30       	cpi	r22, 0x03	; 3
     83c:	09 f0       	breq	.+2      	; 0x840 <update_ball+0x168>
     83e:	93 cf       	rjmp	.-218    	; 0x766 <update_ball+0x8e>
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	e6 2f       	mov	r30, r22
     844:	f4 cf       	rjmp	.-24     	; 0x82e <update_ball+0x156>
				return;
			}
			if(ball.pos.y == LIM_DOWN)
			{
				ball.dir=UP_RIGHT;
				n_lives--;
     846:	80 91 06 01 	lds	r24, 0x0106
     84a:	90 91 07 01 	lds	r25, 0x0107
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	90 93 07 01 	sts	0x0107, r25
     854:	80 93 06 01 	sts	0x0106, r24
				ball.pos.x=B_X;
     858:	10 92 88 03 	sts	0x0388, r1
				ball.pos.y=B_Y;
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	80 93 89 03 	sts	0x0389, r24
				ball.dir=DOWN_RIGHT;
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	80 93 8a 03 	sts	0x038A, r24
				n_catched_balls = 0;
     868:	10 92 47 03 	sts	0x0347, r1
     86c:	10 92 46 03 	sts	0x0346, r1
				return;
     870:	08 95       	ret
	
}

void update_ball(void)
{
	switch (ball.dir)
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	90 cf       	rjmp	.-224    	; 0x796 <update_ball+0xbe>
     876:	e0 93 8a 03 	sts	0x038A, r30
     87a:	30 93 47 03 	sts	0x0347, r19
     87e:	20 93 46 03 	sts	0x0346, r18
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     882:	ae e3       	ldi	r26, 0x3E	; 62
     884:	57 cf       	rjmp	.-338    	; 0x734 <update_ball+0x5c>
     886:	60 93 8a 03 	sts	0x038A, r22
     88a:	30 93 47 03 	sts	0x0347, r19
     88e:	20 93 46 03 	sts	0x0346, r18
			{
				ball.dir=DOWN_RIGHT;
				update_ball();
				return;
			}
			ball.pos.x++;
     892:	7f 5f       	subi	r23, 0xFF	; 255
     894:	70 93 88 03 	sts	0x0388, r23
			ball.pos.y--;
     898:	a1 50       	subi	r26, 0x01	; 1
     89a:	a0 93 89 03 	sts	0x0389, r26
		} break;
     89e:	08 95       	ret
     8a0:	e0 93 8a 03 	sts	0x038A, r30
     8a4:	30 93 47 03 	sts	0x0347, r19
     8a8:	20 93 46 03 	sts	0x0346, r18
     8ac:	af 5f       	subi	r26, 0xFF	; 255
				ball.dir=UP_RIGHT;
				n_catched_balls++;
				update_ball();
				return;
			}
			ball.pos.x++;
     8ae:	7f 5f       	subi	r23, 0xFF	; 255
     8b0:	70 93 88 03 	sts	0x0388, r23
			ball.pos.y++;
     8b4:	a0 93 89 03 	sts	0x0389, r26
		}break;
     8b8:	08 95       	ret
			{
				ball.dir=UP_RIGHT;
				update_ball();
				return;
			}
			if(ball.pos.y == LIM_UP)
     8ba:	ab 30       	cpi	r26, 0x0B	; 11
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <update_ball+0x1e8>
     8be:	73 cf       	rjmp	.-282    	; 0x7a6 <update_ball+0xce>
     8c0:	e0 93 8a 03 	sts	0x038A, r30
     8c4:	30 93 47 03 	sts	0x0347, r19
     8c8:	20 93 46 03 	sts	0x0346, r18
			{
				ball.dir=DOWN_LEFT;
				update_ball();
				return;
			}
			ball.pos.x--;
     8cc:	71 50       	subi	r23, 0x01	; 1
     8ce:	70 93 88 03 	sts	0x0388, r23
			ball.pos.y--;
     8d2:	a1 50       	subi	r26, 0x01	; 1
     8d4:	a0 93 89 03 	sts	0x0389, r26
		}break;
     8d8:	08 95       	ret
	
}

void update_ball(void)
{
	switch (ball.dir)
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	e6 2f       	mov	r30, r22
     8de:	a7 cf       	rjmp	.-178    	; 0x82e <update_ball+0x156>
     8e0:	e0 93 8a 03 	sts	0x038A, r30
     8e4:	30 93 47 03 	sts	0x0347, r19
     8e8:	20 93 46 03 	sts	0x0346, r18
				ball.pos.y=B_Y;
				ball.dir=DOWN_RIGHT;
				n_catched_balls = 0;
				return;
			}
			if((ball.pos.y == Y_PLAYER) && ((ball.pos.x >= player.rect.pos.x) && (ball.pos.x <= player.rect.pos.x+player.rect.Lx)))
     8ec:	ae e3       	ldi	r26, 0x3E	; 62
     8ee:	df cf       	rjmp	.-66     	; 0x8ae <update_ball+0x1d6>

000008f0 <bounce_ball_grid>:
	}
	return 0;
}

void bounce_ball_grid (void)
{
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
{
	switch (ball.dir)
	{
		case UP_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
     906:	a0 90 88 03 	lds	r10, 0x0388
     90a:	90 90 89 03 	lds	r9, 0x0389
     90e:	c9 2d       	mov	r28, r9
     910:	d0 e0       	ldi	r29, 0x00	; 0
			{
				ball.dir=UP_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
     912:	aa 2d       	mov	r26, r10
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	10 91 8a 03 	lds	r17, 0x038A
     91a:	42 e5       	ldi	r20, 0x52	; 82
     91c:	53 e0       	ldi	r21, 0x03	; 3
     91e:	02 e0       	ldi	r16, 0x02	; 2
     920:	6e e0       	ldi	r22, 0x0E	; 14
     922:	70 e0       	ldi	r23, 0x00	; 0
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j]==RECT_EMPT)
						grid[i][j]=DESTROYED;
					if(grid[i][j]==FULL)
						grid[i][j]=RECT_EMPT;
     924:	cc 24       	eor	r12, r12
     926:	c3 94       	inc	r12
     928:	d1 2c       	mov	r13, r1
				rect.Lx=L_X;
				rect.full=grid[i][j];
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j]==RECT_EMPT)
						grid[i][j]=DESTROYED;
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	e9 2e       	mov	r14, r25
     92e:	f1 2c       	mov	r15, r1
	}
	return 0;
}

void bounce_ball_grid (void)
{
     930:	fa 01       	movw	r30, r20
     932:	80 e1       	ldi	r24, 0x10	; 16
     934:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	int j=0;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
			if(grid[i][j] != DESTROYED)
     936:	20 81       	ld	r18, Z
     938:	31 81       	ldd	r19, Z+1	; 0x01
     93a:	22 30       	cpi	r18, 0x02	; 2
     93c:	31 05       	cpc	r19, r1
     93e:	a1 f0       	breq	.+40     	; 0x968 <bounce_ball_grid+0x78>
     940:	0f 2e       	mov	r0, r31
     942:	fd ef       	ldi	r31, 0xFD	; 253
     944:	bf 2e       	mov	r11, r31
     946:	f0 2d       	mov	r31, r0
     948:	b8 0e       	add	r11, r24
			draw_rectangle_buffer(rect);
		}
}
int bounce_ball_rect (RECT rect)
{
	switch (ball.dir)
     94a:	11 30       	cpi	r17, 0x01	; 1
     94c:	09 f4       	brne	.+2      	; 0x950 <bounce_ball_grid+0x60>
     94e:	43 c0       	rjmp	.+134    	; 0x9d6 <bounce_ball_grid+0xe6>
     950:	b0 f1       	brcs	.+108    	; 0x9be <bounce_ball_grid+0xce>
     952:	12 30       	cpi	r17, 0x02	; 2
     954:	19 f1       	breq	.+70     	; 0x99c <bounce_ball_grid+0xac>
     956:	13 30       	cpi	r17, 0x03	; 3
     958:	39 f4       	brne	.+14     	; 0x968 <bounce_ball_grid+0x78>
				return 1;
			}
		}break;
		case DOWN_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     95a:	a6 17       	cp	r26, r22
     95c:	b7 07       	cpc	r27, r23
     95e:	09 f4       	brne	.+2      	; 0x962 <bounce_ball_grid+0x72>
     960:	60 c0       	rjmp	.+192    	; 0xa22 <bounce_ball_grid+0x132>
			{
				ball.dir=DOWN_RIGHT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     962:	9b 14       	cp	r9, r11
     964:	09 f4       	brne	.+2      	; 0x968 <bounce_ball_grid+0x78>
     966:	45 c0       	rjmp	.+138    	; 0x9f2 <bounce_ball_grid+0x102>
     968:	32 96       	adiw	r30, 0x02	; 2
     96a:	05 96       	adiw	r24, 0x05	; 5
	RECT rect;
	int i=0;
	int j=0;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
     96c:	8f 31       	cpi	r24, 0x1F	; 31
     96e:	91 05       	cpc	r25, r1
     970:	11 f7       	brne	.-60     	; 0x936 <bounce_ball_grid+0x46>
     972:	62 5f       	subi	r22, 0xF2	; 242
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	02 5f       	subi	r16, 0xF2	; 242
     978:	4a 5f       	subi	r20, 0xFA	; 250
     97a:	5f 4f       	sbci	r21, 0xFF	; 255
{
	RECT rect;
	int i=0;
	int j=0;
	
	for(i=0;i<N_X;i++)
     97c:	00 38       	cpi	r16, 0x80	; 128
     97e:	c1 f6       	brne	.-80     	; 0x930 <bounce_ball_grid+0x40>
     980:	10 93 8a 03 	sts	0x038A, r17
					if(grid[i][j]==FULL)
						grid[i][j]=RECT_EMPT;
				}
			}
			return;
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	08 95       	ret
				return 1;
			}
		}break;
		case DOWN_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     99c:	a0 16       	cp	r10, r16
     99e:	09 f4       	brne	.+2      	; 0x9a2 <bounce_ball_grid+0xb2>
     9a0:	53 c0       	rjmp	.+166    	; 0xa48 <bounce_ball_grid+0x158>
			{
				ball.dir=DOWN_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))//LIMIT_DOWN
     9a2:	9b 10       	cpse	r9, r11
     9a4:	e1 cf       	rjmp	.-62     	; 0x968 <bounce_ball_grid+0x78>
     9a6:	a0 16       	cp	r10, r16
     9a8:	f8 f2       	brcs	.-66     	; 0x968 <bounce_ball_grid+0x78>
     9aa:	6a 17       	cp	r22, r26
     9ac:	7b 07       	cpc	r23, r27
     9ae:	e4 f2       	brlt	.-72     	; 0x968 <bounce_ball_grid+0x78>
		} break;
		case UP_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))//LIMIT_LEFT
			{
				ball.dir=UP_RIGHT;
     9b0:	10 e0       	ldi	r17, 0x00	; 0
				rect.Ly=L_Y;
				rect.Lx=L_X;
				rect.full=grid[i][j];
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j]==RECT_EMPT)
     9b2:	21 30       	cpi	r18, 0x01	; 1
     9b4:	31 05       	cpc	r19, r1
     9b6:	41 f5       	brne	.+80     	; 0xa08 <bounce_ball_grid+0x118>
						grid[i][j]=DESTROYED;
     9b8:	f1 82       	std	Z+1, r15	; 0x01
     9ba:	e0 82       	st	Z, r14
     9bc:	d5 cf       	rjmp	.-86     	; 0x968 <bounce_ball_grid+0x78>
{
	switch (ball.dir)
	{
		case UP_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
     9be:	0a 15       	cp	r16, r10
     9c0:	c9 f1       	breq	.+114    	; 0xa34 <bounce_ball_grid+0x144>
			{
				ball.dir=UP_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
     9c2:	c8 17       	cp	r28, r24
     9c4:	d9 07       	cpc	r29, r25
     9c6:	81 f6       	brne	.-96     	; 0x968 <bounce_ball_grid+0x78>
     9c8:	a0 16       	cp	r10, r16
     9ca:	70 f2       	brcs	.-100    	; 0x968 <bounce_ball_grid+0x78>
     9cc:	6a 17       	cp	r22, r26
     9ce:	7b 07       	cpc	r23, r27
     9d0:	5c f2       	brlt	.-106    	; 0x968 <bounce_ball_grid+0x78>
			{
				ball.dir=DOWN_RIGHT;
     9d2:	12 e0       	ldi	r17, 0x02	; 2
     9d4:	16 c0       	rjmp	.+44     	; 0xa02 <bounce_ball_grid+0x112>
				return 1;
			}
		} break;
		case UP_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))//LIMIT_LEFT
     9d6:	a6 17       	cp	r26, r22
     9d8:	b7 07       	cpc	r27, r23
     9da:	e1 f0       	breq	.+56     	; 0xa14 <bounce_ball_grid+0x124>
			{
				ball.dir=UP_RIGHT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     9dc:	c8 17       	cp	r28, r24
     9de:	d9 07       	cpc	r29, r25
     9e0:	19 f6       	brne	.-122    	; 0x968 <bounce_ball_grid+0x78>
     9e2:	a0 16       	cp	r10, r16
     9e4:	08 f2       	brcs	.-126    	; 0x968 <bounce_ball_grid+0x78>
     9e6:	6a 17       	cp	r22, r26
     9e8:	7b 07       	cpc	r23, r27
     9ea:	0c f4       	brge	.+2      	; 0x9ee <bounce_ball_grid+0xfe>
     9ec:	bd cf       	rjmp	.-134    	; 0x968 <bounce_ball_grid+0x78>
			{
				ball.dir=DOWN_LEFT;
     9ee:	13 e0       	ldi	r17, 0x03	; 3
     9f0:	08 c0       	rjmp	.+16     	; 0xa02 <bounce_ball_grid+0x112>
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
			{
				ball.dir=DOWN_RIGHT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))
     9f2:	a0 16       	cp	r10, r16
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <bounce_ball_grid+0x108>
     9f6:	b8 cf       	rjmp	.-144    	; 0x968 <bounce_ball_grid+0x78>
     9f8:	6a 17       	cp	r22, r26
     9fa:	7b 07       	cpc	r23, r27
     9fc:	0c f4       	brge	.+2      	; 0xa00 <bounce_ball_grid+0x110>
     9fe:	b4 cf       	rjmp	.-152    	; 0x968 <bounce_ball_grid+0x78>
	{
		case UP_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
			{
				ball.dir=UP_LEFT;
     a00:	11 e0       	ldi	r17, 0x01	; 1
				rect.Ly=L_Y;
				rect.Lx=L_X;
				rect.full=grid[i][j];
				if(bounce_ball_rect(rect) == 1)
				{
					if(grid[i][j]==RECT_EMPT)
     a02:	21 30       	cpi	r18, 0x01	; 1
     a04:	31 05       	cpc	r19, r1
     a06:	c1 f2       	breq	.-80     	; 0x9b8 <bounce_ball_grid+0xc8>
						grid[i][j]=DESTROYED;
					if(grid[i][j]==FULL)
     a08:	23 2b       	or	r18, r19
     a0a:	09 f0       	breq	.+2      	; 0xa0e <bounce_ball_grid+0x11e>
     a0c:	ad cf       	rjmp	.-166    	; 0x968 <bounce_ball_grid+0x78>
						grid[i][j]=RECT_EMPT;
     a0e:	d1 82       	std	Z+1, r13	; 0x01
     a10:	c0 82       	st	Z, r12
     a12:	aa cf       	rjmp	.-172    	; 0x968 <bounce_ball_grid+0x78>
				return 1;
			}
		} break;
		case UP_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))//LIMIT_LEFT
     a14:	9b 14       	cp	r9, r11
     a16:	10 f3       	brcs	.-60     	; 0x9dc <bounce_ball_grid+0xec>
     a18:	8c 17       	cp	r24, r28
     a1a:	9d 07       	cpc	r25, r29
     a1c:	fc f2       	brlt	.-66     	; 0x9dc <bounce_ball_grid+0xec>
			{
				ball.dir=UP_RIGHT;
     a1e:	10 e0       	ldi	r17, 0x00	; 0
     a20:	c8 cf       	rjmp	.-112    	; 0x9b2 <bounce_ball_grid+0xc2>
				return 1;
			}
		}break;
		case DOWN_LEFT:
		{
			if((ball.pos.x == rect.pos.x + rect.Lx) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     a22:	9b 14       	cp	r9, r11
     a24:	08 f4       	brcc	.+2      	; 0xa28 <bounce_ball_grid+0x138>
     a26:	9d cf       	rjmp	.-198    	; 0x962 <bounce_ball_grid+0x72>
     a28:	8c 17       	cp	r24, r28
     a2a:	9d 07       	cpc	r25, r29
     a2c:	0c f4       	brge	.+2      	; 0xa30 <bounce_ball_grid+0x140>
     a2e:	99 cf       	rjmp	.-206    	; 0x962 <bounce_ball_grid+0x72>
				ball.dir=UP_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
			{
				ball.dir=DOWN_RIGHT;
     a30:	12 e0       	ldi	r17, 0x02	; 2
     a32:	e7 cf       	rjmp	.-50     	; 0xa02 <bounce_ball_grid+0x112>
{
	switch (ball.dir)
	{
		case UP_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly))) //LIMIT RIGHT
     a34:	9b 14       	cp	r9, r11
     a36:	18 f0       	brcs	.+6      	; 0xa3e <bounce_ball_grid+0x14e>
     a38:	8c 17       	cp	r24, r28
     a3a:	9d 07       	cpc	r25, r29
     a3c:	0c f7       	brge	.-62     	; 0xa00 <bounce_ball_grid+0x110>
			{
				ball.dir=UP_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y+rect.Ly) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx))) //LIMIT UP
     a3e:	c8 17       	cp	r28, r24
     a40:	d9 07       	cpc	r29, r25
     a42:	09 f0       	breq	.+2      	; 0xa46 <bounce_ball_grid+0x156>
     a44:	91 cf       	rjmp	.-222    	; 0x968 <bounce_ball_grid+0x78>
     a46:	c2 cf       	rjmp	.-124    	; 0x9cc <bounce_ball_grid+0xdc>
				return 1;
			}
		}break;
		case DOWN_RIGHT:
		{
			if((ball.pos.x == rect.pos.x) && ((ball.pos.y >= rect.pos.y) && (ball.pos.y <= rect.pos.y + rect.Ly)))
     a48:	9b 14       	cp	r9, r11
     a4a:	18 f0       	brcs	.+6      	; 0xa52 <bounce_ball_grid+0x162>
     a4c:	8c 17       	cp	r24, r28
     a4e:	9d 07       	cpc	r25, r29
     a50:	74 f6       	brge	.-100    	; 0x9ee <bounce_ball_grid+0xfe>
			{
				ball.dir=DOWN_LEFT;
				return 1;
			}
			if((ball.pos.y == rect.pos.y) && ((ball.pos.x >= rect.pos.x) && (ball.pos.x <= rect.pos.x + rect.Lx)))//LIMIT_DOWN
     a52:	9b 10       	cpse	r9, r11
     a54:	89 cf       	rjmp	.-238    	; 0x968 <bounce_ball_grid+0x78>
     a56:	a9 cf       	rjmp	.-174    	; 0x9aa <bounce_ball_grid+0xba>

00000a58 <ping_pong_idle>:
{
	JOY_POS pos = JOY_getPosition();
	return pos.dir;
}
void ping_pong_idle(void)
{
     a58:	2f 92       	push	r2
     a5a:	3f 92       	push	r3
     a5c:	4f 92       	push	r4
     a5e:	5f 92       	push	r5
     a60:	6f 92       	push	r6
     a62:	7f 92       	push	r7
     a64:	8f 92       	push	r8
     a66:	9f 92       	push	r9
     a68:	af 92       	push	r10
     a6a:	bf 92       	push	r11
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <ping_pong_idle+0x26>
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <ping_pong_idle+0x28>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <ping_pong_idle+0x2a>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
	int j=0;
	
	bool pause = false;
	
	//Starting conditions
	ball.pos.x=B_X;
     a86:	10 92 88 03 	sts	0x0388, r1
	ball.pos.y=B_Y;
     a8a:	8e e1       	ldi	r24, 0x1E	; 30
     a8c:	80 93 89 03 	sts	0x0389, r24
	ball.dir=DOWN_RIGHT;
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	80 93 8a 03 	sts	0x038A, r24
	
	player.rect.pos.x=15;
     a96:	8f e0       	ldi	r24, 0x0F	; 15
     a98:	80 93 4c 03 	sts	0x034C, r24
	player.rect.pos.y=Y_PLAYER;
     a9c:	8d e3       	ldi	r24, 0x3D	; 61
     a9e:	80 93 4d 03 	sts	0x034D, r24
	player.rect.Lx=DIM_PLAYER;
     aa2:	84 e1       	ldi	r24, 0x14	; 20
     aa4:	80 93 4e 03 	sts	0x034E, r24
	player.rect.Ly=1;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 4f 03 	sts	0x034F, r24
	player.rect.full=1;
     aae:	80 93 50 03 	sts	0x0350, r24
	
	//initialize grid to perfect
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
			grid[i][j]=FULL;
     ab2:	10 92 53 03 	sts	0x0353, r1
     ab6:	10 92 52 03 	sts	0x0352, r1
     aba:	10 92 55 03 	sts	0x0355, r1
     abe:	10 92 54 03 	sts	0x0354, r1
     ac2:	10 92 57 03 	sts	0x0357, r1
     ac6:	10 92 56 03 	sts	0x0356, r1
     aca:	10 92 59 03 	sts	0x0359, r1
     ace:	10 92 58 03 	sts	0x0358, r1
     ad2:	10 92 5b 03 	sts	0x035B, r1
     ad6:	10 92 5a 03 	sts	0x035A, r1
     ada:	10 92 5d 03 	sts	0x035D, r1
     ade:	10 92 5c 03 	sts	0x035C, r1
     ae2:	10 92 5f 03 	sts	0x035F, r1
     ae6:	10 92 5e 03 	sts	0x035E, r1
     aea:	10 92 61 03 	sts	0x0361, r1
     aee:	10 92 60 03 	sts	0x0360, r1
     af2:	10 92 63 03 	sts	0x0363, r1
     af6:	10 92 62 03 	sts	0x0362, r1
     afa:	10 92 65 03 	sts	0x0365, r1
     afe:	10 92 64 03 	sts	0x0364, r1
     b02:	10 92 67 03 	sts	0x0367, r1
     b06:	10 92 66 03 	sts	0x0366, r1
     b0a:	10 92 69 03 	sts	0x0369, r1
     b0e:	10 92 68 03 	sts	0x0368, r1
     b12:	10 92 6b 03 	sts	0x036B, r1
     b16:	10 92 6a 03 	sts	0x036A, r1
     b1a:	10 92 6d 03 	sts	0x036D, r1
     b1e:	10 92 6c 03 	sts	0x036C, r1
     b22:	10 92 6f 03 	sts	0x036F, r1
     b26:	10 92 6e 03 	sts	0x036E, r1
     b2a:	10 92 71 03 	sts	0x0371, r1
     b2e:	10 92 70 03 	sts	0x0370, r1
     b32:	10 92 73 03 	sts	0x0373, r1
     b36:	10 92 72 03 	sts	0x0372, r1
     b3a:	10 92 75 03 	sts	0x0375, r1
     b3e:	10 92 74 03 	sts	0x0374, r1
     b42:	10 92 77 03 	sts	0x0377, r1
     b46:	10 92 76 03 	sts	0x0376, r1
     b4a:	10 92 79 03 	sts	0x0379, r1
     b4e:	10 92 78 03 	sts	0x0378, r1
     b52:	10 92 7b 03 	sts	0x037B, r1
     b56:	10 92 7a 03 	sts	0x037A, r1
     b5a:	10 92 7d 03 	sts	0x037D, r1
     b5e:	10 92 7c 03 	sts	0x037C, r1
     b62:	10 92 7f 03 	sts	0x037F, r1
     b66:	10 92 7e 03 	sts	0x037E, r1
     b6a:	10 92 81 03 	sts	0x0381, r1
     b6e:	10 92 80 03 	sts	0x0380, r1
     b72:	10 92 83 03 	sts	0x0383, r1
     b76:	10 92 82 03 	sts	0x0382, r1
     b7a:	10 92 85 03 	sts	0x0385, r1
     b7e:	10 92 84 03 	sts	0x0384, r1
     b82:	10 92 87 03 	sts	0x0387, r1
     b86:	10 92 86 03 	sts	0x0386, r1
     b8a:	80 91 06 01 	lds	r24, 0x0106
     b8e:	90 91 07 01 	lds	r25, 0x0107
     b92:	71 2c       	mov	r7, r1
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
			
				level = n_catched_balls % DIM_PLAYER;
     b94:	74 e1       	ldi	r23, 0x14	; 20
     b96:	c7 2e       	mov	r12, r23
     b98:	d1 2c       	mov	r13, r1
void draw_heart_to_buffer(POS pos)
{
	TRI tri;
	tri.full=1;
	tri.l=9;
	tri.pos=pos;
     b9a:	e5 e0       	ldi	r30, 0x05	; 5
     b9c:	8e 2e       	mov	r8, r30
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
	
	tri.pos.x +=5;
	tri.ori=UP;
     b9e:	f3 e0       	ldi	r31, 0x03	; 3
     ba0:	9f 2e       	mov	r9, r31
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
		{
			rect.pos.x=LIM_LEFT+EMPTY_SPACE_X+i*(EMPTY_SPACE_X+L_X);
			rect.pos.y=LIM_UP+EMPTY_SPACE_Y+j*(EMPTY_SPACE_Y+L_Y);
			rect.Ly=L_Y;
     ba2:	a3 e0       	ldi	r26, 0x03	; 3
     ba4:	aa 2e       	mov	r10, r26
			rect.Lx=L_X;
     ba6:	bc e0       	ldi	r27, 0x0C	; 12
     ba8:	bb 2e       	mov	r11, r27
			grid[i][j]=FULL;

	//idle function
	while (1)
	{
		while(n_lives>=0 )
     baa:	97 fd       	sbrc	r25, 7
     bac:	22 c0       	rjmp	.+68     	; 0xbf2 <ping_pong_idle+0x19a>
		{
			clear_buffer();
     bae:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <clear_buffer>
			if(!(pause))
     bb2:	77 20       	and	r7, r7
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <ping_pong_idle+0x160>
     bb6:	45 c0       	rjmp	.+138    	; 0xc42 <ping_pong_idle+0x1ea>
				if(JOY_button(R))
					pause = true;
			}
			if(pause)
			{
				clear_buffer();
     bb8:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <clear_buffer>
				pos.page = 3;
				pos.column=2;
				//print_string_to_buffer("LEFT: resume", pos);
				pos.page++;
				//print_string_to_buffer("RIGHT: leave", pos);
				if (JOY_getPosition().dir == LEFT)
     bbc:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
     bc0:	18 2f       	mov	r17, r24
					pause = false;
				if(JOY_getPosition().dir == RIGHT)
     bc2:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	09 f4       	brne	.+2      	; 0xbcc <ping_pong_idle+0x174>
     bca:	2b c1       	rjmp	.+598    	; 0xe22 <ping_pong_idle+0x3ca>
				pos.page = 3;
				pos.column=2;
				//print_string_to_buffer("LEFT: resume", pos);
				pos.page++;
				//print_string_to_buffer("RIGHT: leave", pos);
				if (JOY_getPosition().dir == LEFT)
     bcc:	77 24       	eor	r7, r7
     bce:	73 94       	inc	r7
     bd0:	11 30       	cpi	r17, 0x01	; 1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <ping_pong_idle+0x17e>
     bd4:	43 c1       	rjmp	.+646    	; 0xe5c <ping_pong_idle+0x404>
					pause = false;
				if(JOY_getPosition().dir == RIGHT)
					return;
				print_buffer();
     bd6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <print_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bda:	ef ef       	ldi	r30, 0xFF	; 255
     bdc:	ff e2       	ldi	r31, 0x2F	; 47
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <ping_pong_idle+0x186>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <ping_pong_idle+0x18c>
     be4:	00 00       	nop
     be6:	80 91 06 01 	lds	r24, 0x0106
     bea:	90 91 07 01 	lds	r25, 0x0107
			grid[i][j]=FULL;

	//idle function
	while (1)
	{
		while(n_lives>=0 )
     bee:	97 ff       	sbrs	r25, 7
     bf0:	de cf       	rjmp	.-68     	; 0xbae <ping_pong_idle+0x156>
			//printf("%d,-%d;",player.rect.pos.x, player.rect.pos.y);
		}
		position pos;
		pos.column=30;
		pos.page=3;
		clear_buffer();
     bf2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <clear_buffer>
		//print_string_to_buffer("GAME OVER!", pos);
		print_buffer();
     bf6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <print_buffer>
     bfa:	ff ef       	ldi	r31, 0xFF	; 255
     bfc:	2f ef       	ldi	r18, 0xFF	; 255
     bfe:	8d e1       	ldi	r24, 0x1D	; 29
     c00:	f1 50       	subi	r31, 0x01	; 1
     c02:	20 40       	sbci	r18, 0x00	; 0
     c04:	80 40       	sbci	r24, 0x00	; 0
     c06:	e1 f7       	brne	.-8      	; 0xc00 <ping_pong_idle+0x1a8>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <ping_pong_idle+0x1b2>
     c0a:	00 00       	nop
		_delay_ms(2000);
		
		clear_buffer();
     c0c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <clear_buffer>
		pos.page = 3;
		pos.column = 2;
		//print_string_to_buffer("LEFT: restart", pos);
		pos.page++;
		//print_string_to_buffer("RIGHT: leave", pos);
		print_buffer();
     c10:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <print_buffer>
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <ping_pong_idle+0x1c8>
			if (JOY_getPosition().dir == LEFT)
			{
				n_lives=3;
				break;
			}
			if(JOY_getPosition().dir == RIGHT)
     c16:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	09 f4       	brne	.+2      	; 0xc20 <ping_pong_idle+0x1c8>
     c1e:	01 c1       	rjmp	.+514    	; 0xe22 <ping_pong_idle+0x3ca>
     c20:	ef ef       	ldi	r30, 0xFF	; 255
     c22:	ff e2       	ldi	r31, 0x2F	; 47
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <ping_pong_idle+0x1cc>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <ping_pong_idle+0x1d2>
     c2a:	00 00       	nop
		print_buffer();
		
		while(1)
		{
			_delay_ms(10);
			if (JOY_getPosition().dir == LEFT)
     c2c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	89 f7       	brne	.-30     	; 0xc16 <ping_pong_idle+0x1be>
			{
				n_lives=3;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	90 93 07 01 	sts	0x0107, r25
     c3c:	80 93 06 01 	sts	0x0106, r24
     c40:	b4 cf       	rjmp	.-152    	; 0xbaa <ping_pong_idle+0x152>
			return;
}

int get_direction(void)
{
	JOY_POS pos = JOY_getPosition();
     c42:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
		while(n_lives>=0 )
		{
			clear_buffer();
			if(!(pause))
			{
				player.dir=get_direction();
     c46:	80 93 51 03 	sts	0x0351, r24
			
				if(DIM_PLAYER > level)
     c4a:	80 91 44 03 	lds	r24, 0x0344
     c4e:	90 91 45 03 	lds	r25, 0x0345
     c52:	84 31       	cpi	r24, 0x14	; 20
     c54:	91 05       	cpc	r25, r1
     c56:	0c f0       	brlt	.+2      	; 0xc5a <ping_pong_idle+0x202>
     c58:	fd c0       	rjmp	.+506    	; 0xe54 <ping_pong_idle+0x3fc>
				player.rect.Lx = DIM_PLAYER - level;
     c5a:	94 e1       	ldi	r25, 0x14	; 20
     c5c:	98 1b       	sub	r25, r24
     c5e:	90 93 4e 03 	sts	0x034E, r25
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
			
				level = n_catched_balls % DIM_PLAYER;
     c62:	80 91 46 03 	lds	r24, 0x0346
     c66:	90 91 47 03 	lds	r25, 0x0347
     c6a:	b6 01       	movw	r22, r12
     c6c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__divmodhi4>
     c70:	90 93 45 03 	sts	0x0345, r25
     c74:	80 93 44 03 	sts	0x0344, r24
			
				draw_lives_buffer(n_lives);
     c78:	40 90 06 01 	lds	r4, 0x0106
     c7c:	50 90 07 01 	lds	r5, 0x0107
{
	POS pos;
	pos.x=N-10;
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     c80:	14 14       	cp	r1, r4
     c82:	15 04       	cpc	r1, r5
     c84:	44 f5       	brge	.+80     	; 0xcd6 <ping_pong_idle+0x27e>
     c86:	16 e7       	ldi	r17, 0x76	; 118
     c88:	e1 2c       	mov	r14, r1
     c8a:	f1 2c       	mov	r15, r1


void draw_heart_to_buffer(POS pos)
{
	TRI tri;
	tri.full=1;
     c8c:	22 24       	eor	r2, r2
     c8e:	23 94       	inc	r2
	tri.l=9;
	tri.pos=pos;
	tri.ori=DOWN;
     c90:	64 e0       	ldi	r22, 0x04	; 4
     c92:	36 2e       	mov	r3, r22


void draw_heart_to_buffer(POS pos)
{
	TRI tri;
	tri.full=1;
     c94:	2c 82       	std	Y+4, r2	; 0x04
	tri.l=9;
	tri.pos=pos;
     c96:	8a 82       	std	Y+2, r8	; 0x02
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
     c98:	41 2f       	mov	r20, r17
     c9a:	55 e0       	ldi	r21, 0x05	; 5
     c9c:	69 e0       	ldi	r22, 0x09	; 9
     c9e:	71 e0       	ldi	r23, 0x01	; 1
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <draw_triangle_buffer>
	
	tri.pos.x +=5;
	tri.ori=UP;
     ca6:	9d 82       	std	Y+5, r9	; 0x05
	tri.l=4;
     ca8:	3b 82       	std	Y+3, r3	; 0x03
     caa:	45 e0       	ldi	r20, 0x05	; 5
     cac:	41 0f       	add	r20, r17
	
	draw_triangle_buffer(tri);
     cae:	5a 81       	ldd	r21, Y+2	; 0x02
     cb0:	64 e0       	ldi	r22, 0x04	; 4
     cb2:	7c 81       	ldd	r23, Y+4	; 0x04
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <draw_triangle_buffer>
	
	tri.pos.x -=5;
	
	draw_triangle_buffer(tri);
     cba:	41 2f       	mov	r20, r17
     cbc:	5a 81       	ldd	r21, Y+2	; 0x02
     cbe:	6b 81       	ldd	r22, Y+3	; 0x03
     cc0:	7c 81       	ldd	r23, Y+4	; 0x04
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <draw_triangle_buffer>
{
	POS pos;
	pos.x=N-10;
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	e2 1a       	sub	r14, r18
     ccc:	f2 0a       	sbc	r15, r18
     cce:	1b 50       	subi	r17, 0x0B	; 11
     cd0:	e4 14       	cp	r14, r4
     cd2:	f5 04       	cpc	r15, r5
     cd4:	f9 f6       	brne	.-66     	; 0xc94 <ping_pong_idle+0x23c>
}

void draw_borders_buffer (void)
{
	RECT border;
	border.pos.x = LIM_LEFT;
     cd6:	19 82       	std	Y+1, r1	; 0x01
	border.pos.y = LIM_UP;
     cd8:	8b e0       	ldi	r24, 0x0B	; 11
     cda:	8a 83       	std	Y+2, r24	; 0x02
	border.Lx = LIM_RIGHT-LIM_LEFT;
	border.Ly = 1;
	border.full = FULL;
     cdc:	1d 82       	std	Y+5, r1	; 0x05
	draw_rectangle_buffer(border);
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	5b e0       	ldi	r21, 0x0B	; 11
     ce2:	6f e7       	ldi	r22, 0x7F	; 127
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
	border.Lx = 1;
	border.Ly = LIM_DOWN-LIM_UP;
	draw_rectangle_buffer(border);
     cec:	49 81       	ldd	r20, Y+1	; 0x01
     cee:	5a 81       	ldd	r21, Y+2	; 0x02
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	74 e3       	ldi	r23, 0x34	; 52
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
	border.pos.y = LIM_DOWN;
	border.Lx = LIM_RIGHT-LIM_LEFT;
	border.Ly = 1;
	draw_rectangle_buffer(border);
     cfa:	49 81       	ldd	r20, Y+1	; 0x01
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	6f e7       	ldi	r22, 0x7F	; 127
     d00:	71 e0       	ldi	r23, 0x01	; 1
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
	border.pos.x = LIM_RIGHT;
	border.pos.y = LIM_UP;
	border.Ly = LIM_DOWN-LIM_UP+1;
	border.Lx = 1;
	draw_rectangle_buffer(border);
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	5b e0       	ldi	r21, 0x0B	; 11
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	75 e3       	ldi	r23, 0x35	; 53
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
			
				level = n_catched_balls % DIM_PLAYER;
			
				draw_lives_buffer(n_lives);
				draw_borders_buffer();
				draw_rectangle_buffer(player.rect);
     d16:	40 91 4c 03 	lds	r20, 0x034C
     d1a:	50 91 4d 03 	lds	r21, 0x034D
     d1e:	60 91 4e 03 	lds	r22, 0x034E
     d22:	70 91 4f 03 	lds	r23, 0x034F
     d26:	80 91 50 03 	lds	r24, 0x0350
     d2a:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
				draw_lives_buffer(n_lives);
     d2e:	e0 90 06 01 	lds	r14, 0x0106
     d32:	f0 90 07 01 	lds	r15, 0x0107
{
	POS pos;
	pos.x=N-10;
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     d36:	1e 14       	cp	r1, r14
     d38:	1f 04       	cpc	r1, r15
     d3a:	4c f5       	brge	.+82     	; 0xd8e <ping_pong_idle+0x336>
     d3c:	26 e7       	ldi	r18, 0x76	; 118
     d3e:	62 2e       	mov	r6, r18
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	10 e0       	ldi	r17, 0x00	; 0


void draw_heart_to_buffer(POS pos)
{
	TRI tri;
	tri.full=1;
     d44:	22 24       	eor	r2, r2
     d46:	23 94       	inc	r2
	tri.l=9;
	tri.pos=pos;
	tri.ori=DOWN;
     d48:	34 e0       	ldi	r19, 0x04	; 4
     d4a:	33 2e       	mov	r3, r19


void draw_heart_to_buffer(POS pos)
{
	TRI tri;
	tri.full=1;
     d4c:	2c 82       	std	Y+4, r2	; 0x04
	tri.l=9;
	tri.pos=pos;
     d4e:	8a 82       	std	Y+2, r8	; 0x02
	tri.ori=DOWN;
	
	draw_triangle_buffer(tri);
     d50:	46 2d       	mov	r20, r6
     d52:	55 e0       	ldi	r21, 0x05	; 5
     d54:	69 e0       	ldi	r22, 0x09	; 9
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <draw_triangle_buffer>
	
	tri.pos.x +=5;
	tri.ori=UP;
     d5e:	9d 82       	std	Y+5, r9	; 0x05
	tri.l=4;
     d60:	3b 82       	std	Y+3, r3	; 0x03
     d62:	45 e0       	ldi	r20, 0x05	; 5
     d64:	46 0d       	add	r20, r6
	
	draw_triangle_buffer(tri);
     d66:	5a 81       	ldd	r21, Y+2	; 0x02
     d68:	64 e0       	ldi	r22, 0x04	; 4
     d6a:	7c 81       	ldd	r23, Y+4	; 0x04
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <draw_triangle_buffer>
	
	tri.pos.x -=5;
	
	draw_triangle_buffer(tri);
     d72:	46 2d       	mov	r20, r6
     d74:	5a 81       	ldd	r21, Y+2	; 0x02
     d76:	6b 81       	ldd	r22, Y+3	; 0x03
     d78:	7c 81       	ldd	r23, Y+4	; 0x04
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <draw_triangle_buffer>
{
	POS pos;
	pos.x=N-10;
	pos.y=5;
	int i=0;
	for(i=0;i<n_lives;i++)
     d80:	0f 5f       	subi	r16, 0xFF	; 255
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	85 ef       	ldi	r24, 0xF5	; 245
     d86:	68 0e       	add	r6, r24
     d88:	0e 15       	cp	r16, r14
     d8a:	1f 05       	cpc	r17, r15
     d8c:	f9 f6       	brne	.-66     	; 0xd4c <ping_pong_idle+0x2f4>
     d8e:	42 e5       	ldi	r20, 0x52	; 82
     d90:	e4 2e       	mov	r14, r20
     d92:	43 e0       	ldi	r20, 0x03	; 3
     d94:	f4 2e       	mov	r15, r20
     d96:	52 e0       	ldi	r21, 0x02	; 2
     d98:	65 2e       	mov	r6, r21
     d9a:	87 01       	movw	r16, r14
     d9c:	9d e0       	ldi	r25, 0x0D	; 13
	RECT rect;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
		{
			rect.pos.x=LIM_LEFT+EMPTY_SPACE_X+i*(EMPTY_SPACE_X+L_X);
     d9e:	69 82       	std	Y+1, r6	; 0x01
			rect.pos.y=LIM_UP+EMPTY_SPACE_Y+j*(EMPTY_SPACE_Y+L_Y);
     da0:	9a 83       	std	Y+2, r25	; 0x02
			rect.Ly=L_Y;
     da2:	ac 82       	std	Y+4, r10	; 0x04
			rect.Lx=L_X;
     da4:	bb 82       	std	Y+3, r11	; 0x03
			rect.full=grid[i][j];
     da6:	f8 01       	movw	r30, r16
     da8:	80 81       	ld	r24, Z
     daa:	0e 5f       	subi	r16, 0xFE	; 254
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	8d 83       	std	Y+5, r24	; 0x05
			draw_rectangle_buffer(rect);
     db0:	46 2d       	mov	r20, r6
     db2:	59 2f       	mov	r21, r25
     db4:	6c e0       	ldi	r22, 0x0C	; 12
     db6:	73 e0       	ldi	r23, 0x03	; 3
     db8:	9e 83       	std	Y+6, r25	; 0x06
     dba:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	9b 5f       	subi	r25, 0xFB	; 251
	int j=0;
	
	RECT rect;
	
	for(i=0;i<N_X;i++)
		for(j=0;j<N_Y;j++)
     dc2:	9c 31       	cpi	r25, 0x1C	; 28
     dc4:	61 f7       	brne	.-40     	; 0xd9e <ping_pong_idle+0x346>
     dc6:	f6 e0       	ldi	r31, 0x06	; 6
     dc8:	ef 0e       	add	r14, r31
     dca:	f1 1c       	adc	r15, r1
     dcc:	2e e0       	ldi	r18, 0x0E	; 14
     dce:	62 0e       	add	r6, r18
	int i=0;
	int j=0;
	
	RECT rect;
	
	for(i=0;i<N_X;i++)
     dd0:	80 e8       	ldi	r24, 0x80	; 128
     dd2:	68 12       	cpse	r6, r24
     dd4:	e2 cf       	rjmp	.-60     	; 0xd9a <ping_pong_idle+0x342>
				draw_lives_buffer(n_lives);
				draw_borders_buffer();
				draw_rectangle_buffer(player.rect);
				draw_lives_buffer(n_lives);
				draw_grid_buffer();
				draw_one_bit_buffer(ball.pos);
     dd6:	80 91 88 03 	lds	r24, 0x0388
     dda:	90 91 89 03 	lds	r25, 0x0389
     dde:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <draw_one_bit_buffer>
			
				bounce_ball_grid();
     de2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <bounce_ball_grid>
				update_ball();
     de6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <update_ball>
}

void update_player(void)
{
	// Get player direction form CAN (JOYSTICK)
	switch (player.dir)
     dea:	80 91 51 03 	lds	r24, 0x0351
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	b9 f1       	breq	.+110    	; 0xe60 <ping_pong_idle+0x408>
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	69 f4       	brne	.+26     	; 0xe10 <ping_pong_idle+0x3b8>
	{
		case RIGHT:
		{
			if(player.rect.pos.x+player.rect.Lx >= LIM_RIGHT)
     df6:	20 91 4c 03 	lds	r18, 0x034C
     dfa:	80 91 4e 03 	lds	r24, 0x034E
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	82 0f       	add	r24, r18
     e02:	91 1d       	adc	r25, r1
     e04:	8f 37       	cpi	r24, 0x7F	; 127
     e06:	91 05       	cpc	r25, r1
     e08:	1c f4       	brge	.+6      	; 0xe10 <ping_pong_idle+0x3b8>
				return;
			player.rect.pos.x += 2;
     e0a:	2e 5f       	subi	r18, 0xFE	; 254
     e0c:	20 93 4c 03 	sts	0x034C, r18
				draw_one_bit_buffer(ball.pos);
			
				bounce_ball_grid();
				update_ball();
				update_player();
				print_buffer();
     e10:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <print_buffer>
				if(JOY_button(R))
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 c5 13 	call	0x278a	; 0x278a <JOY_button>
     e1c:	81 11       	cpse	r24, r1
     e1e:	cc ce       	rjmp	.-616    	; 0xbb8 <ping_pong_idle+0x160>
     e20:	dc ce       	rjmp	.-584    	; 0xbda <ping_pong_idle+0x182>
			if(JOY_getPosition().dir == RIGHT)
				return;
		}

	}
}
     e22:	26 96       	adiw	r28, 0x06	; 6
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	bf 90       	pop	r11
     e40:	af 90       	pop	r10
     e42:	9f 90       	pop	r9
     e44:	8f 90       	pop	r8
     e46:	7f 90       	pop	r7
     e48:	6f 90       	pop	r6
     e4a:	5f 90       	pop	r5
     e4c:	4f 90       	pop	r4
     e4e:	3f 90       	pop	r3
     e50:	2f 90       	pop	r2
     e52:	08 95       	ret
				player.dir=get_direction();
			
				if(DIM_PLAYER > level)
				player.rect.Lx = DIM_PLAYER - level;
				if(DIM_PLAYER <= level)
				player.rect.Lx = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 93 4e 03 	sts	0x034E, r24
     e5a:	03 cf       	rjmp	.-506    	; 0xc62 <ping_pong_idle+0x20a>
				pos.page = 3;
				pos.column=2;
				//print_string_to_buffer("LEFT: resume", pos);
				pos.page++;
				//print_string_to_buffer("RIGHT: leave", pos);
				if (JOY_getPosition().dir == LEFT)
     e5c:	71 2c       	mov	r7, r1
     e5e:	bb ce       	rjmp	.-650    	; 0xbd6 <ping_pong_idle+0x17e>
				return;
			player.rect.pos.x += 2;
		}break;
		case LEFT:
		{
			if(player.rect.pos.x <= LIM_LEFT+1)
     e60:	80 91 4c 03 	lds	r24, 0x034C
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	a0 f2       	brcs	.-88     	; 0xe10 <ping_pong_idle+0x3b8>
				return;
			player.rect.pos.x -= 2;
     e68:	82 50       	subi	r24, 0x02	; 2
     e6a:	80 93 4c 03 	sts	0x034C, r24
				draw_one_bit_buffer(ball.pos);
			
				bounce_ball_grid();
				update_ball();
				update_player();
				print_buffer();
     e6e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <print_buffer>
				if(JOY_button(R))
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 c5 13 	call	0x278a	; 0x278a <JOY_button>
     e7a:	81 11       	cpse	r24, r1
     e7c:	9d ce       	rjmp	.-710    	; 0xbb8 <ping_pong_idle+0x160>
     e7e:	ad ce       	rjmp	.-678    	; 0xbda <ping_pong_idle+0x182>

00000e80 <data_fit>:
	}

}

uint8_t data_fit(uint8_t data[MAX_DATA], uint8_t L, uint8_t n_iter, uint8_t lim, uint8_t n_elim)
{
     e80:	4f 92       	push	r4
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	c9 2e       	mov	r12, r25
     ea6:	16 2f       	mov	r17, r22
     ea8:	a2 2e       	mov	r10, r18
				i = L;
			}
	avar = average(data_dist[0], L);
	dim = 1;
	return avar;
}
     eaa:	8d b6       	in	r8, 0x3d	; 61
     eac:	9e b6       	in	r9, 0x3e	; 62

}

uint8_t data_fit(uint8_t data[MAX_DATA], uint8_t L, uint8_t n_iter, uint8_t lim, uint8_t n_elim)
{
	uint8_t data_dist[L][2];
     eae:	66 2e       	mov	r6, r22
     eb0:	71 2c       	mov	r7, r1
     eb2:	93 01       	movw	r18, r6
     eb4:	22 0f       	add	r18, r18
     eb6:	33 1f       	adc	r19, r19
     eb8:	6d b7       	in	r22, 0x3d	; 61
     eba:	7e b7       	in	r23, 0x3e	; 62
     ebc:	62 1b       	sub	r22, r18
     ebe:	73 0b       	sbc	r23, r19
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	7e bf       	out	0x3e, r23	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	6d bf       	out	0x3d, r22	; 61
     eca:	2d b7       	in	r18, 0x3d	; 61
     ecc:	3e b7       	in	r19, 0x3e	; 62
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, j = 0;
	dim = 1;
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	90 93 08 01 	sts	0x0108, r25
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     ed8:	11 23       	and	r17, r17
     eda:	09 f4       	brne	.+2      	; 0xede <data_fit+0x5e>
     edc:	1d c1       	rjmp	.+570    	; 0x1118 <data_fit+0x298>
     ede:	d8 2e       	mov	r13, r24
     ee0:	a8 2f       	mov	r26, r24
     ee2:	bc 2d       	mov	r27, r12

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < L; i++)
		sum += data[dim * i];
     ee8:	5d 91       	ld	r21, X+
     eea:	85 0f       	add	r24, r21
     eec:	91 1d       	adc	r25, r1
     eee:	5a 2f       	mov	r21, r26
     ef0:	5d 19       	sub	r21, r13
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     ef2:	51 17       	cp	r21, r17
     ef4:	c8 f3       	brcs	.-14     	; 0xee8 <data_fit+0x68>
		sum += data[dim * i];
	return sum / L;
     ef6:	b3 01       	movw	r22, r6
     ef8:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     efc:	77 27       	eor	r23, r23
     efe:	d9 01       	movw	r26, r18
     f00:	ed 2d       	mov	r30, r13
     f02:	fc 2d       	mov	r31, r12
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <data_fit+0x96>
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	8c 93       	st	X, r24
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	8e 2f       	mov	r24, r30
     f10:	8d 19       	sub	r24, r13
{
	uint8_t data_dist[L][2];
	uint8_t i = 0, j = 0;
	dim = 1;
	uint8_t avar=average(data, L);
	for(i = 0; i < L; i++)
     f12:	81 17       	cp	r24, r17
     f14:	58 f4       	brcc	.+22     	; 0xf2c <data_fit+0xac>
	{
		data_dist[i][0] = data[i];
     f16:	81 91       	ld	r24, Z+
     f18:	8c 93       	st	X, r24
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	86 1b       	sub	r24, r22
     f1e:	97 0b       	sbc	r25, r23
     f20:	97 ff       	sbrs	r25, 7
     f22:	f1 cf       	rjmp	.-30     	; 0xf06 <data_fit+0x86>
     f24:	91 95       	neg	r25
     f26:	81 95       	neg	r24
     f28:	91 09       	sbc	r25, r1
     f2a:	ed cf       	rjmp	.-38     	; 0xf06 <data_fit+0x86>
	for(i = 0; i < L; i++)
	{
		data_dist[i][0] = data[i];
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	80 93 08 01 	sts	0x0108, r24
     f32:	c9 01       	movw	r24, r18
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	b9 01       	movw	r22, r18
void order_data_distance(uint8_t data_dist[MAX_DATA][2], uint8_t L)
{
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
     f38:	d1 2c       	mov	r13, r1
	{
		for(uint8_t j = i + 1; j < L; j++)
     f3a:	d3 94       	inc	r13
     f3c:	d1 16       	cp	r13, r17
     f3e:	09 f1       	breq	.+66     	; 0xf82 <data_fit+0x102>
     f40:	5d 2d       	mov	r21, r13
		{
			if (data_dist[i][1] > data_dist[j][1])
     f42:	dc 01       	movw	r26, r24
     f44:	fc 90       	ld	r15, X
     f46:	a5 2f       	mov	r26, r21
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	aa 0f       	add	r26, r26
     f4c:	bb 1f       	adc	r27, r27
     f4e:	a2 0f       	add	r26, r18
     f50:	b3 1f       	adc	r27, r19
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	ec 90       	ld	r14, X
     f56:	11 97       	sbiw	r26, 0x01	; 1
     f58:	ef 14       	cp	r14, r15
     f5a:	50 f4       	brcc	.+20     	; 0xf70 <data_fit+0xf0>
			{
				temp_1 =  data_dist[i][1];
				data_dist[i][1] = data_dist[j][1];
     f5c:	fc 01       	movw	r30, r24
     f5e:	e0 82       	st	Z, r14
				data_dist[j][1] = temp_1;
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	fc 92       	st	X, r15
     f64:	11 97       	sbiw	r26, 0x01	; 1
				temp_2 =  data_dist[i][0];
     f66:	fb 01       	movw	r30, r22
     f68:	f0 80       	ld	r15, Z
				data_dist[i][0] = data_dist[j][0];
     f6a:	ec 90       	ld	r14, X
     f6c:	e0 82       	st	Z, r14
				data_dist[j][0] = temp_2;
     f6e:	fc 92       	st	X, r15
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
	{
		for(uint8_t j = i + 1; j < L; j++)
     f70:	5f 5f       	subi	r21, 0xFF	; 255
     f72:	51 13       	cpse	r21, r17
     f74:	e6 cf       	rjmp	.-52     	; 0xf42 <data_fit+0xc2>
     f76:	02 96       	adiw	r24, 0x02	; 2
     f78:	6e 5f       	subi	r22, 0xFE	; 254
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	d3 94       	inc	r13
     f7e:	d1 12       	cpse	r13, r17
     f80:	df cf       	rjmp	.-66     	; 0xf40 <data_fit+0xc0>
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
     f82:	44 23       	and	r20, r20
     f84:	09 f4       	brne	.+2      	; 0xf88 <data_fit+0x108>
     f86:	71 c0       	rjmp	.+226    	; 0x106a <data_fit+0x1ea>
     f88:	c0 2e       	mov	r12, r16
     f8a:	d1 2c       	mov	r13, r1
     f8c:	b1 2c       	mov	r11, r1
     f8e:	79 01       	movw	r14, r18
     f90:	ff ef       	ldi	r31, 0xFF	; 255
     f92:	ef 1a       	sub	r14, r31
     f94:	ff 0a       	sbc	r15, r31
	{
		if(L - i <= 2)
     f96:	c3 01       	movw	r24, r6
     f98:	8b 19       	sub	r24, r11
     f9a:	91 09       	sbc	r25, r1
     f9c:	03 97       	sbiw	r24, 0x03	; 3
     f9e:	0c f4       	brge	.+2      	; 0xfa2 <data_fit+0x122>
     fa0:	b4 2e       	mov	r11, r20
			i = n_iter;
		if(data_dist[L - 1][1] < lim)
     fa2:	d3 01       	movw	r26, r6
     fa4:	11 97       	sbiw	r26, 0x01	; 1
     fa6:	aa 0f       	add	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	a2 0f       	add	r26, r18
     fac:	b3 1f       	adc	r27, r19
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	8c 91       	ld	r24, X
     fb2:	8a 15       	cp	r24, r10
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <data_fit+0x138>
     fb6:	b4 2e       	mov	r11, r20
			i = n_iter;
		if(L - n_elim >= 2)
     fb8:	f3 01       	movw	r30, r6
     fba:	ec 19       	sub	r30, r12
     fbc:	fd 09       	sbc	r31, r13
     fbe:	32 97       	sbiw	r30, 0x02	; 2
     fc0:	0c f0       	brlt	.+2      	; 0xfc4 <data_fit+0x144>
			L -= n_elim;
     fc2:	10 1b       	sub	r17, r16
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     fc4:	11 23       	and	r17, r17
     fc6:	09 f4       	brne	.+2      	; 0xfca <data_fit+0x14a>
     fc8:	4a c0       	rjmp	.+148    	; 0x105e <data_fit+0x1de>
     fca:	f9 01       	movw	r30, r18

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < L; i++)
     fd0:	50 e0       	ldi	r21, 0x00	; 0
		sum += data[dim * i];
     fd2:	60 81       	ld	r22, Z
     fd4:	86 0f       	add	r24, r22
     fd6:	91 1d       	adc	r25, r1
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
     fd8:	5f 5f       	subi	r21, 0xFF	; 255
     fda:	32 96       	adiw	r30, 0x02	; 2
     fdc:	51 13       	cpse	r21, r17
     fde:	f9 cf       	rjmp	.-14     	; 0xfd2 <data_fit+0x152>
		sum += data[dim * i];
	return sum / L;
     fe0:	61 2e       	mov	r6, r17
     fe2:	71 2c       	mov	r7, r1
     fe4:	b3 01       	movw	r22, r6
     fe6:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     fea:	77 27       	eor	r23, r23
     fec:	f9 01       	movw	r30, r18
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <data_fit+0x17c>
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
     ff2:	81 83       	std	Z+1, r24	; 0x01
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
     ff4:	5f 5f       	subi	r21, 0xFF	; 255
     ff6:	32 96       	adiw	r30, 0x02	; 2
     ff8:	51 17       	cp	r21, r17
     ffa:	71 f0       	breq	.+28     	; 0x1018 <data_fit+0x198>
	return sum / L;
}

uint8_t distance(uint8_t data, uint8_t average)
{
	uint8_t d = abs(data-average);
     ffc:	80 81       	ld	r24, Z
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	86 1b       	sub	r24, r22
    1002:	97 0b       	sbc	r25, r23
    1004:	97 ff       	sbrs	r25, 7
    1006:	f5 cf       	rjmp	.-22     	; 0xff2 <data_fit+0x172>
    1008:	91 95       	neg	r25
    100a:	81 95       	neg	r24
    100c:	91 09       	sbc	r25, r1
    100e:	81 83       	std	Z+1, r24	; 0x01
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
    1010:	5f 5f       	subi	r21, 0xFF	; 255
    1012:	32 96       	adiw	r30, 0x02	; 2
    1014:	51 13       	cpse	r21, r17
    1016:	f2 cf       	rjmp	.-28     	; 0xffc <data_fit+0x17c>
    1018:	27 01       	movw	r4, r14
    101a:	c9 01       	movw	r24, r18
    101c:	71 2c       	mov	r7, r1
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
	{
		for(uint8_t j = i + 1; j < L; j++)
    101e:	73 94       	inc	r7
    1020:	71 16       	cp	r7, r17
    1022:	e9 f0       	breq	.+58     	; 0x105e <data_fit+0x1de>
    1024:	57 2d       	mov	r21, r7
		{
			if (data_dist[i][1] > data_dist[j][1])
    1026:	d2 01       	movw	r26, r4
    1028:	6c 91       	ld	r22, X
    102a:	e5 2f       	mov	r30, r21
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	e2 0f       	add	r30, r18
    1034:	f3 1f       	adc	r31, r19
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	76 17       	cp	r23, r22
    103a:	38 f4       	brcc	.+14     	; 0x104a <data_fit+0x1ca>
			{
				temp_1 =  data_dist[i][1];
				data_dist[i][1] = data_dist[j][1];
    103c:	7c 93       	st	X, r23
				data_dist[j][1] = temp_1;
    103e:	61 83       	std	Z+1, r22	; 0x01
				temp_2 =  data_dist[i][0];
    1040:	dc 01       	movw	r26, r24
    1042:	6c 91       	ld	r22, X
				data_dist[i][0] = data_dist[j][0];
    1044:	70 81       	ld	r23, Z
    1046:	7c 93       	st	X, r23
				data_dist[j][0] = temp_2;
    1048:	60 83       	st	Z, r22
	uint8_t temp_1 = 0;
	uint8_t temp_2 = 0;
	
	for(uint8_t i = 0; i < L; i++)
	{
		for(uint8_t j = i + 1; j < L; j++)
    104a:	5f 5f       	subi	r21, 0xFF	; 255
    104c:	51 13       	cpse	r21, r17
    104e:	eb cf       	rjmp	.-42     	; 0x1026 <data_fit+0x1a6>
    1050:	52 e0       	ldi	r21, 0x02	; 2
    1052:	45 0e       	add	r4, r21
    1054:	51 1c       	adc	r5, r1
    1056:	02 96       	adiw	r24, 0x02	; 2
    1058:	73 94       	inc	r7
    105a:	71 12       	cpse	r7, r17
    105c:	e3 cf       	rjmp	.-58     	; 0x1024 <data_fit+0x1a4>
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
    105e:	b3 94       	inc	r11
    1060:	b4 16       	cp	r11, r20
    1062:	18 f4       	brcc	.+6      	; 0x106a <data_fit+0x1ea>
    1064:	61 2e       	mov	r6, r17
    1066:	71 2c       	mov	r7, r1
    1068:	96 cf       	rjmp	.-212    	; 0xf96 <data_fit+0x116>
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
	}

	if(data_dist[0][1] >= lim)
    106a:	f9 01       	movw	r30, r18
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	9a 15       	cp	r25, r10
    1070:	70 f1       	brcs	.+92     	; 0x10ce <data_fit+0x24e>
		L -= n_elim;
    1072:	10 1b       	sub	r17, r16
    1074:	61 2e       	mov	r6, r17
    1076:	71 2c       	mov	r7, r1
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
    1078:	11 23       	and	r17, r17
    107a:	09 f4       	brne	.+2      	; 0x107e <data_fit+0x1fe>
    107c:	4a c0       	rjmp	.+148    	; 0x1112 <data_fit+0x292>
    107e:	d9 01       	movw	r26, r18

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < L; i++)
    1084:	20 e0       	ldi	r18, 0x00	; 0
		sum += data[dim * i];
    1086:	3c 91       	ld	r19, X
    1088:	83 0f       	add	r24, r19
    108a:	91 1d       	adc	r25, r1
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	12 96       	adiw	r26, 0x02	; 2
    1090:	21 13       	cpse	r18, r17
    1092:	f9 cf       	rjmp	.-14     	; 0x1086 <data_fit+0x206>
			{
				L = i - 1;
				i = L;
			}
	avar = average(data_dist[0], L);
	dim = 1;
    1094:	21 e0       	ldi	r18, 0x01	; 1
    1096:	20 93 08 01 	sts	0x0108, r18
uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
		sum += data[dim * i];
	return sum / L;
    109a:	b3 01       	movw	r22, r6
    109c:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    10a0:	86 2f       	mov	r24, r22
				i = L;
			}
	avar = average(data_dist[0], L);
	dim = 1;
	return avar;
}
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	9e be       	out	0x3e, r9	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	8d be       	out	0x3d, r8	; 61
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	5f 90       	pop	r5
    10ca:	4f 90       	pop	r4
    10cc:	08 95       	ret
		order_data_distance(data_dist, L);
	}

	if(data_dist[0][1] >= lim)
		L -= n_elim;
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
    10ce:	61 2e       	mov	r6, r17
    10d0:	71 2c       	mov	r7, r1
    10d2:	d3 01       	movw	r26, r6
    10d4:	11 97       	sbiw	r26, 0x01	; 1
    10d6:	aa 0f       	add	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	a2 0f       	add	r26, r18
    10dc:	b3 1f       	adc	r27, r19
    10de:	11 96       	adiw	r26, 0x01	; 1
    10e0:	8c 91       	ld	r24, X
    10e2:	a8 16       	cp	r10, r24
    10e4:	48 f6       	brcc	.-110    	; 0x1078 <data_fit+0x1f8>
		for(i = 0; i < L; i++)
    10e6:	11 23       	and	r17, r17
    10e8:	a1 f0       	breq	.+40     	; 0x1112 <data_fit+0x292>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <data_fit+0x27c>
    10ee:	e8 2f       	mov	r30, r24
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	e2 0f       	add	r30, r18
    10f8:	f3 1f       	adc	r31, r19
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
			if(data_dist[i][1] > lim)
    10fc:	a9 16       	cp	r10, r25
    10fe:	10 f4       	brcc	.+4      	; 0x1104 <data_fit+0x284>
			{
				L = i - 1;
    1100:	81 50       	subi	r24, 0x01	; 1
				i = L;
    1102:	18 2f       	mov	r17, r24
	}

	if(data_dist[0][1] >= lim)
		L -= n_elim;
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
		for(i = 0; i < L; i++)
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	81 17       	cp	r24, r17
    1108:	90 f3       	brcs	.-28     	; 0x10ee <data_fit+0x26e>
    110a:	61 2e       	mov	r6, r17
    110c:	71 2c       	mov	r7, r1
uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
	for(uint8_t i = 0; i < L; i++)
    110e:	11 11       	cpse	r17, r1
    1110:	b6 cf       	rjmp	.-148    	; 0x107e <data_fit+0x1fe>

uint8_t dim = 1;

uint8_t average(uint8_t data[MAX_DATA], uint8_t L)
{
	uint16_t sum = 0;
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	be cf       	rjmp	.-132    	; 0x1094 <data_fit+0x214>
	for(i = 0; i < L; i++)
	{
		data_dist[i][0] = data[i];
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	80 93 08 01 	sts	0x0108, r24
    111e:	31 cf       	rjmp	.-414    	; 0xf82 <data_fit+0x102>

00001120 <mcp_init>:
		printf("MCP2515 is NOT in configuration mode after reset!\n");
	}
}

void mcp_init(void)
{
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	spi_init();
    112a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <spi_init>
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    112e:	c4 98       	cbi	0x18, 4	; 24

void mcp_reset(void)
{
	selectSlave();

	spi_MasterTransmit(RESET);
    1130:	80 ec       	ldi	r24, 0xC0	; 192
    1132:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    1136:	c4 9a       	sbi	0x18, 4	; 24
    1138:	8c ec       	ldi	r24, 0xCC	; 204
    113a:	94 e0       	ldi	r25, 0x04	; 4
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	f1 f7       	brne	.-4      	; 0x113c <mcp_init+0x1c>
    1140:	00 c0       	rjmp	.+0      	; 0x1142 <mcp_init+0x22>
    1142:	00 00       	nop
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    1144:	c4 98       	cbi	0x18, 4	; 24

uint8_t mcp_read(uint8_t address)
{
	selectSlave();
	
	spi_MasterTransmit(READ);
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
	
	spi_MasterTransmit(address);
    114c:	8e e0       	ldi	r24, 0x0E	; 14
    114e:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>

	uint8_t received_char = spi_SlaveReceive();
    1152:	0e 94 0b 0a 	call	0x1416	; 0x1416 <spi_SlaveReceive>
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    1156:	c4 9a       	sbi	0x18, 4	; 24

	_delay_ms(1);

	//Self-test
	volatile uint8_t canstat;
	canstat = mcp_read(MCP_CANSTAT);
    1158:	89 83       	std	Y+1, r24	; 0x01
	if ((canstat & MODE_MASK) != MODE_CONFIG) {
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 7e       	andi	r24, 0xE0	; 224
    115e:	80 38       	cpi	r24, 0x80	; 128
    1160:	21 f0       	breq	.+8      	; 0x116a <mcp_init+0x4a>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    1162:	86 ee       	ldi	r24, 0xE6	; 230
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>

void mcp_init(void)
{
	spi_init();
	mcp_reset();
}
    116a:	0f 90       	pop	r0
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <mcp_write>:

void mcp_write(uint8_t address, uint8_t data)
{
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	1f 92       	push	r1
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	18 2f       	mov	r17, r24
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    1180:	c4 98       	cbi	0x18, 4	; 24

void mcp_write(uint8_t address, uint8_t data)
{
	selectSlave();

	spi_MasterTransmit(WRITE);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	69 83       	std	Y+1, r22	; 0x01
    1186:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
	spi_MasterTransmit(address);
    118a:	81 2f       	mov	r24, r17
    118c:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
	spi_MasterTransmit(data);
    1190:	69 81       	ldd	r22, Y+1	; 0x01
    1192:	86 2f       	mov	r24, r22
    1194:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    1198:	c4 9a       	sbi	0x18, 4	; 24
	spi_MasterTransmit(WRITE);
	spi_MasterTransmit(address);
	spi_MasterTransmit(data);

	deselectSlave();
}
    119a:	0f 90       	pop	r0
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	08 95       	ret

000011a4 <mcp_read>:

uint8_t mcp_read(uint8_t address)
{
    11a4:	cf 93       	push	r28
    11a6:	c8 2f       	mov	r28, r24
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    11a8:	c4 98       	cbi	0x18, 4	; 24

uint8_t mcp_read(uint8_t address)
{
	selectSlave();
	
	spi_MasterTransmit(READ);
    11aa:	83 e0       	ldi	r24, 0x03	; 3
    11ac:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
	
	spi_MasterTransmit(address);
    11b0:	8c 2f       	mov	r24, r28
    11b2:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>

	uint8_t received_char = spi_SlaveReceive();
    11b6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <spi_SlaveReceive>
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    11ba:	c4 9a       	sbi	0x18, 4	; 24
	uint8_t received_char = spi_SlaveReceive();

	deselectSlave();

	return received_char;
}
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <mcp_request_to_send>:
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
    11c0:	c4 98       	cbi	0x18, 4	; 24

void mcp_request_to_send (uint8_t out_buffer)
{
	selectSlave();

	spi_MasterTransmit(RTS | out_buffer);
    11c2:	80 68       	ori	r24, 0x80	; 128
    11c4:	0e 94 07 0a 	call	0x140e	; 0x140e <spi_MasterTransmit>
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
    11c8:	c4 9a       	sbi	0x18, 4	; 24
    11ca:	08 95       	ret

000011cc <playPingPong>:

JOY_POS joy_pos, old_joy_pos;
SLID slid_pos, old_slid_pos;

void playPingPong(void)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	2b 97       	sbiw	r28, 0x0b	; 11
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    11e0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <clear_buffer>
	position pos;
	pos.page = 3;
	pos.column = 2;
	print_string_to_buffer("PINGPONG", pos);
    11e4:	63 e0       	ldi	r22, 0x03	; 3
    11e6:	72 e0       	ldi	r23, 0x02	; 2
    11e8:	88 e1       	ldi	r24, 0x18	; 24
    11ea:	92 e0       	ldi	r25, 0x02	; 2
    11ec:	0e 94 94 15 	call	0x2b28	; 0x2b28 <print_string_to_buffer>
	print_buffer();	
    11f0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <print_buffer>
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	6c 01       	movw	r12, r24
	can_message_send(button_msg);
}

void sendJoyPos(void)
{
	can_message joy_msg = { .id = JOY, .length = 3, .data = { joy_pos.x, joy_pos.y, joy_pos.dir } };
    11fa:	8b e0       	ldi	r24, 0x0B	; 11
    11fc:	98 2e       	mov	r9, r24
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	59 2e       	mov	r5, r25
	}
}

void sendSliderPos(void)
{
	can_message slid_msg = { .id = SLIDERS, .length = 2, .data = {slid_pos.r, slid_pos.l}};
    1202:	88 24       	eor	r8, r8
    1204:	83 94       	inc	r8
    1206:	61 2c       	mov	r6, r1
    1208:	22 e0       	ldi	r18, 0x02	; 2
    120a:	72 2e       	mov	r7, r18
	if(JOY_button(L))
	data_b[0] = L;

	if(counter == 0)
	{
		can_message button_msg = { .id = BUTTONS, .length = 1, .data[0] = data_b[0] };
    120c:	32 e0       	ldi	r19, 0x02	; 2
    120e:	43 2e       	mov	r4, r19
    1210:	21 2c       	mov	r2, r1
    1212:	33 24       	eor	r3, r3
    1214:	33 94       	inc	r3
		can_message_send(button_msg);
		counter = 10;
    1216:	4a e0       	ldi	r20, 0x0A	; 10
    1218:	a4 2e       	mov	r10, r20
    121a:	b1 2c       	mov	r11, r1
    121c:	cd c0       	rjmp	.+410    	; 0x13b8 <playPingPong+0x1ec>
	while(1)
	{
		joy_pos = JOY_getPosition();
		slid_pos = SLID_getPosition();
		
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
    121e:	20 91 93 03 	lds	r18, 0x0393
    1222:	62 2f       	mov	r22, r18
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	e0 91 8e 03 	lds	r30, 0x038E
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	df 01       	movw	r26, r30
    122e:	1a 96       	adiw	r26, 0x0a	; 10
    1230:	a6 17       	cp	r26, r22
    1232:	b7 07       	cpc	r27, r23
    1234:	4c f0       	brlt	.+18     	; 0x1248 <playPingPong+0x7c>
    1236:	4a 50       	subi	r20, 0x0A	; 10
    1238:	51 09       	sbc	r21, r1
    123a:	84 17       	cp	r24, r20
    123c:	95 07       	cpc	r25, r21
    123e:	24 f0       	brlt	.+8      	; 0x1248 <playPingPong+0x7c>
    1240:	3a 97       	sbiw	r30, 0x0a	; 10
    1242:	6e 17       	cp	r22, r30
    1244:	7f 07       	cpc	r23, r31
    1246:	cc f4       	brge	.+50     	; 0x127a <playPingPong+0xae>
	can_message_send(button_msg);
}

void sendJoyPos(void)
{
	can_message joy_msg = { .id = JOY, .length = 3, .data = { joy_pos.x, joy_pos.y, joy_pos.dir } };
    1248:	f6 01       	movw	r30, r12
    124a:	89 2d       	mov	r24, r9
    124c:	11 92       	st	Z+, r1
    124e:	8a 95       	dec	r24
    1250:	e9 f7       	brne	.-6      	; 0x124c <playPingPong+0x80>
    1252:	5b 82       	std	Y+3, r5	; 0x03
    1254:	1c 83       	std	Y+4, r17	; 0x04
    1256:	2d 83       	std	Y+5, r18	; 0x05
    1258:	30 91 94 03 	lds	r19, 0x0394
    125c:	3e 83       	std	Y+6, r19	; 0x06
	can_message_send(joy_msg);
    125e:	e9 80       	ldd	r14, Y+1	; 0x01
    1260:	fa 80       	ldd	r15, Y+2	; 0x02
    1262:	03 e0       	ldi	r16, 0x03	; 3
    1264:	4f 81       	ldd	r20, Y+7	; 0x07
    1266:	58 85       	ldd	r21, Y+8	; 0x08
    1268:	69 85       	ldd	r22, Y+9	; 0x09
    126a:	7a 85       	ldd	r23, Y+10	; 0x0a
    126c:	8b 85       	ldd	r24, Y+11	; 0x0b
    126e:	0e 94 0b 03 	call	0x616	; 0x616 <can_message_send>
		slid_pos = SLID_getPosition();
		
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
		{
			sendJoyPos();
			printf("CAN Joy sent\n");
    1272:	81 e2       	ldi	r24, 0x21	; 33
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    127a:	ef ef       	ldi	r30, 0xFF	; 255
    127c:	ff e2       	ldi	r31, 0x2F	; 47
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <playPingPong+0xb2>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <playPingPong+0xb8>
    1284:	00 00       	nop
		}
		
		_delay_ms(10);
		
		if(slid_pos.r > old_slid_pos.r + 10 || slid_pos.l > old_slid_pos.l + 10 || slid_pos.r < old_slid_pos.r - 10 || slid_pos.l < old_slid_pos.l - 10)
    1286:	10 91 91 03 	lds	r17, 0x0391
    128a:	81 2f       	mov	r24, r17
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	40 91 8c 03 	lds	r20, 0x038C
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	9a 01       	movw	r18, r20
    1296:	26 5f       	subi	r18, 0xF6	; 246
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	0c f4       	brge	.+2      	; 0x12a2 <playPingPong+0xd6>
    12a0:	aa c0       	rjmp	.+340    	; 0x13f6 <playPingPong+0x22a>
    12a2:	20 91 90 03 	lds	r18, 0x0390
    12a6:	62 2f       	mov	r22, r18
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	e0 91 8b 03 	lds	r30, 0x038B
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	df 01       	movw	r26, r30
    12b2:	1a 96       	adiw	r26, 0x0a	; 10
    12b4:	a6 17       	cp	r26, r22
    12b6:	b7 07       	cpc	r27, r23
    12b8:	4c f0       	brlt	.+18     	; 0x12cc <playPingPong+0x100>
    12ba:	4a 50       	subi	r20, 0x0A	; 10
    12bc:	51 09       	sbc	r21, r1
    12be:	84 17       	cp	r24, r20
    12c0:	95 07       	cpc	r25, r21
    12c2:	24 f0       	brlt	.+8      	; 0x12cc <playPingPong+0x100>
    12c4:	3a 97       	sbiw	r30, 0x0a	; 10
    12c6:	6e 17       	cp	r22, r30
    12c8:	7f 07       	cpc	r23, r31
    12ca:	cc f4       	brge	.+50     	; 0x12fe <playPingPong+0x132>
	}
}

void sendSliderPos(void)
{
	can_message slid_msg = { .id = SLIDERS, .length = 2, .data = {slid_pos.r, slid_pos.l}};
    12cc:	f6 01       	movw	r30, r12
    12ce:	89 2d       	mov	r24, r9
    12d0:	11 92       	st	Z+, r1
    12d2:	8a 95       	dec	r24
    12d4:	e9 f7       	brne	.-6      	; 0x12d0 <playPingPong+0x104>
    12d6:	e8 2c       	mov	r14, r8
    12d8:	89 82       	std	Y+1, r8	; 0x01
    12da:	6a 82       	std	Y+2, r6	; 0x02
    12dc:	7b 82       	std	Y+3, r7	; 0x03
    12de:	1c 83       	std	Y+4, r17	; 0x04
    12e0:	2d 83       	std	Y+5, r18	; 0x05
	can_message_send(slid_msg);
    12e2:	f6 2c       	mov	r15, r6
    12e4:	02 e0       	ldi	r16, 0x02	; 2
    12e6:	3e 81       	ldd	r19, Y+6	; 0x06
    12e8:	4f 81       	ldd	r20, Y+7	; 0x07
    12ea:	58 85       	ldd	r21, Y+8	; 0x08
    12ec:	69 85       	ldd	r22, Y+9	; 0x09
    12ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f2:	0e 94 0b 03 	call	0x616	; 0x616 <can_message_send>
		if(slid_pos.r > old_slid_pos.r + 10 || slid_pos.l > old_slid_pos.l + 10 || slid_pos.r < old_slid_pos.r - 10 || slid_pos.l < old_slid_pos.l - 10)
		{
			//printf("old l: %d, old r: %d, new l: %d, new r: %d\n", old_slid_pos.l, old_slid_pos.r, slid_pos.l,slid_pos.r);
			sendSliderPos();
			//printf("slid r: %d slid l: %d \n", slid_pos.l, slid_pos.r);
			printf("Can SLid sent\n");
    12f6:	8e e2       	ldi	r24, 0x2E	; 46
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    12fe:	ef ef       	ldi	r30, 0xFF	; 255
    1300:	ff e2       	ldi	r31, 0x2F	; 47
    1302:	31 97       	sbiw	r30, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <playPingPong+0x136>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <playPingPong+0x13c>
    1308:	00 00       	nop
void sendButton(void)
{
	static uint16_t counter = 1;
	uint8_t data_b[8] = { R, 0, 0, 0, 0, 0, 0, 0 };

	if(!JOY_button(R) && !JOY_button(L))
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 c5 13 	call	0x278a	; 0x278a <JOY_button>
    1312:	81 11       	cpse	r24, r1
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <playPingPong+0x156>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 c5 13 	call	0x278a	; 0x278a <JOY_button>
    131e:	88 23       	and	r24, r24
    1320:	89 f1       	breq	.+98     	; 0x1384 <playPingPong+0x1b8>
	return;

	counter --;
    1322:	80 91 09 01 	lds	r24, 0x0109
    1326:	90 91 0a 01 	lds	r25, 0x010A
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	90 93 0a 01 	sts	0x010A, r25
    1330:	80 93 09 01 	sts	0x0109, r24

	if(JOY_button(L))
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 c5 13 	call	0x278a	; 0x278a <JOY_button>
	data_b[0] = L;

	if(counter == 0)
    133c:	20 91 09 01 	lds	r18, 0x0109
    1340:	30 91 0a 01 	lds	r19, 0x010A
    1344:	23 2b       	or	r18, r19
    1346:	f1 f4       	brne	.+60     	; 0x1384 <playPingPong+0x1b8>
	{
		can_message button_msg = { .id = BUTTONS, .length = 1, .data[0] = data_b[0] };
    1348:	f6 01       	movw	r30, r12
    134a:	99 2d       	mov	r25, r9
    134c:	11 92       	st	Z+, r1
    134e:	9a 95       	dec	r25
    1350:	e9 f7       	brne	.-6      	; 0x134c <playPingPong+0x180>
    1352:	e4 2c       	mov	r14, r4
    1354:	49 82       	std	Y+1, r4	; 0x01
    1356:	2a 82       	std	Y+2, r2	; 0x02
    1358:	3b 82       	std	Y+3, r3	; 0x03
    135a:	8c 83       	std	Y+4, r24	; 0x04
		can_message_send(button_msg);
    135c:	f2 2c       	mov	r15, r2
    135e:	01 e0       	ldi	r16, 0x01	; 1
    1360:	18 2f       	mov	r17, r24
    1362:	2d 81       	ldd	r18, Y+5	; 0x05
    1364:	3e 81       	ldd	r19, Y+6	; 0x06
    1366:	4f 81       	ldd	r20, Y+7	; 0x07
    1368:	58 85       	ldd	r21, Y+8	; 0x08
    136a:	69 85       	ldd	r22, Y+9	; 0x09
    136c:	7a 85       	ldd	r23, Y+10	; 0x0a
    136e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1370:	0e 94 0b 03 	call	0x616	; 0x616 <can_message_send>
		counter = 10;
    1374:	b0 92 0a 01 	sts	0x010A, r11
    1378:	a0 92 09 01 	sts	0x0109, r10
		printf("CAN Button sent\n");
    137c:	8c e3       	ldi	r24, 0x3C	; 60
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1384:	ef ef       	ldi	r30, 0xFF	; 255
    1386:	ff e2       	ldi	r31, 0x2F	; 47
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <playPingPong+0x1bc>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <playPingPong+0x1c2>
    138e:	00 00       	nop
		
		sendButton();
		
		_delay_ms(10);
		
		old_joy_pos = joy_pos;
    1390:	80 91 92 03 	lds	r24, 0x0392
    1394:	90 91 93 03 	lds	r25, 0x0393
    1398:	a0 91 94 03 	lds	r26, 0x0394
    139c:	80 93 8d 03 	sts	0x038D, r24
    13a0:	90 93 8e 03 	sts	0x038E, r25
    13a4:	a0 93 8f 03 	sts	0x038F, r26
		old_slid_pos = slid_pos;	
    13a8:	80 91 90 03 	lds	r24, 0x0390
    13ac:	90 91 91 03 	lds	r25, 0x0391
    13b0:	90 93 8c 03 	sts	0x038C, r25
    13b4:	80 93 8b 03 	sts	0x038B, r24
	print_string_to_buffer("PINGPONG", pos);
	print_buffer();	

	while(1)
	{
		joy_pos = JOY_getPosition();
    13b8:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
    13bc:	60 93 92 03 	sts	0x0392, r22
    13c0:	70 93 93 03 	sts	0x0393, r23
    13c4:	80 93 94 03 	sts	0x0394, r24
		slid_pos = SLID_getPosition();
    13c8:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <SLID_getPosition>
    13cc:	90 93 91 03 	sts	0x0391, r25
    13d0:	80 93 90 03 	sts	0x0390, r24
		
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
    13d4:	10 91 92 03 	lds	r17, 0x0392
    13d8:	81 2f       	mov	r24, r17
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	40 91 8d 03 	lds	r20, 0x038D
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	9a 01       	movw	r18, r20
    13e4:	26 5f       	subi	r18, 0xF6	; 246
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <playPingPong+0x224>
    13ee:	17 cf       	rjmp	.-466    	; 0x121e <playPingPong+0x52>
    13f0:	20 91 93 03 	lds	r18, 0x0393
    13f4:	29 cf       	rjmp	.-430    	; 0x1248 <playPingPong+0x7c>
    13f6:	20 91 90 03 	lds	r18, 0x0390
    13fa:	68 cf       	rjmp	.-304    	; 0x12cc <playPingPong+0x100>

000013fc <spi_init>:
	SPCR = (1 << SPE);
}

void spi_Masterinit(void)
{
	DDRB = 0xFF;
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	87 bb       	out	0x17, r24	; 23

	//set MOSI, SCK and SS output, all others input
	DDR_SPI |= (1 << DD_SS) | (1 << DD_MOSI) | (1 << DD_SCK);
    1400:	87 b3       	in	r24, 0x17	; 23
    1402:	80 6b       	ori	r24, 0xB0	; 176
    1404:	87 bb       	out	0x17, r24	; 23

	//enable SPI, Master, set clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1406:	8d b1       	in	r24, 0x0d	; 13
    1408:	81 65       	ori	r24, 0x51	; 81
    140a:	8d b9       	out	0x0d, r24	; 13
    140c:	08 95       	ret

0000140e <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	//start transmission
	SPDR = cData;
    140e:	8f b9       	out	0x0f, r24	; 15

	//wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
    1410:	77 9b       	sbis	0x0e, 7	; 14
    1412:	fe cf       	rjmp	.-4      	; 0x1410 <spi_MasterTransmit+0x2>
}
    1414:	08 95       	ret

00001416 <spi_SlaveReceive>:

char spi_SlaveReceive(void)
{
	//send dummy data
	SPDR = 0xFF;
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	8f b9       	out	0x0f, r24	; 15

	//wait for reception complete
	while(!(SPSR & (1 << SPIF)));
    141a:	77 9b       	sbis	0x0e, 7	; 14
    141c:	fe cf       	rjmp	.-4      	; 0x141a <spi_SlaveReceive+0x4>

	//return data register
	return SPDR;
    141e:	8f b1       	in	r24, 0x0f	; 15
}
    1420:	08 95       	ret

00001422 <draw_rectangle_buffer>:
    bit_page = abs(rect.Ly - (start_calc(rect.pos)));
    return bit_page;
}

void draw_rectangle_buffer(RECT rect)
{
    1422:	2f 92       	push	r2
    1424:	3f 92       	push	r3
    1426:	4f 92       	push	r4
    1428:	5f 92       	push	r5
    142a:	6f 92       	push	r6
    142c:	7f 92       	push	r7
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	af 92       	push	r10
    1434:	bf 92       	push	r11
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	2b 97       	sbiw	r28, 0x0b	; 11
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	84 2e       	mov	r8, r20
    1458:	49 83       	std	Y+1, r20	; 0x01
    145a:	65 2e       	mov	r6, r21
    145c:	5a 83       	std	Y+2, r21	; 0x02
    145e:	6b 83       	std	Y+3, r22	; 0x03
    1460:	7c 83       	std	Y+4, r23	; 0x04
    1462:	8d 83       	std	Y+5, r24	; 0x05
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    1464:	91 2c       	mov	r9, r1
    1466:	a4 01       	movw	r20, r8
    1468:	46 0f       	add	r20, r22
    146a:	51 1d       	adc	r21, r1
    146c:	59 87       	std	Y+9, r21	; 0x09
    146e:	48 87       	std	Y+8, r20	; 0x08
    1470:	84 16       	cp	r8, r20
    1472:	95 06       	cpc	r9, r21
    1474:	0c f0       	brlt	.+2      	; 0x1478 <draw_rectangle_buffer+0x56>
    1476:	69 c0       	rjmp	.+210    	; 0x154a <draw_rectangle_buffer+0x128>
    1478:	71 2c       	mov	r7, r1
    147a:	63 01       	movw	r12, r6
    147c:	c7 0e       	add	r12, r23
    147e:	d1 1c       	adc	r13, r1
    1480:	74 01       	movw	r14, r8
				draw_one_bit_buffer(current);
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    1482:	1a 01       	movw	r2, r20
    1484:	51 e0       	ldi	r21, 0x01	; 1
    1486:	25 1a       	sub	r2, r21
    1488:	31 08       	sbc	r3, r1
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
    148a:	44 24       	eor	r4, r4
    148c:	43 94       	inc	r4
    148e:	51 2c       	mov	r5, r1
				draw_one_bit_buffer(current);
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    1490:	b6 01       	movw	r22, r12
    1492:	61 50       	subi	r22, 0x01	; 1
    1494:	71 09       	sbc	r23, r1
    1496:	7f 83       	std	Y+7, r23	; 0x07
    1498:	6e 83       	std	Y+6, r22	; 0x06
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    149a:	6c 14       	cp	r6, r12
    149c:	7d 04       	cpc	r7, r13
    149e:	0c f0       	brlt	.+2      	; 0x14a2 <draw_rectangle_buffer+0x80>
    14a0:	4b c0       	rjmp	.+150    	; 0x1538 <draw_rectangle_buffer+0x116>
    14a2:	2d 81       	ldd	r18, Y+5	; 0x05
    14a4:	3e 2d       	mov	r19, r14
				draw_one_bit_buffer(current);
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    14a6:	83 01       	movw	r16, r6
{
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
    14a8:	57 01       	movw	r10, r14
    14aa:	bb 24       	eor	r11, r11
    14ac:	10 c0       	rjmp	.+32     	; 0x14ce <draw_rectangle_buffer+0xac>
    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
      {
		current.x = i;
		current.y = j;
		switch(rect.full)
    14ae:	21 30       	cpi	r18, 0x01	; 1
    14b0:	f8 f0       	brcs	.+62     	; 0x14f0 <draw_rectangle_buffer+0xce>
    14b2:	23 30       	cpi	r18, 0x03	; 3
    14b4:	39 f4       	brne	.+14     	; 0x14c4 <draw_rectangle_buffer+0xa2>
				draw_one_bit_buffer(current);
				break;
			}
			case(TRI_EMPT):
			{
				if(((i == rect.pos.x) && (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) && (j == rect.Ly + rect.pos.y - 1)))
    14b6:	e8 14       	cp	r14, r8
    14b8:	f9 04       	cpc	r15, r9
    14ba:	09 f4       	brne	.+2      	; 0x14be <draw_rectangle_buffer+0x9c>
    14bc:	76 c0       	rjmp	.+236    	; 0x15aa <draw_rectangle_buffer+0x188>
    14be:	2e 14       	cp	r2, r14
    14c0:	3f 04       	cpc	r3, r15
    14c2:	89 f0       	breq	.+34     	; 0x14e6 <draw_rectangle_buffer+0xc4>
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    14c4:	0f 5f       	subi	r16, 0xFF	; 255
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	0c 15       	cp	r16, r12
    14ca:	1d 05       	cpc	r17, r13
    14cc:	ac f5       	brge	.+106    	; 0x1538 <draw_rectangle_buffer+0x116>
      {
		current.x = i;
		current.y = j;
    14ce:	40 2f       	mov	r20, r16
		switch(rect.full)
    14d0:	21 30       	cpi	r18, 0x01	; 1
    14d2:	69 f7       	brne	.-38     	; 0x14ae <draw_rectangle_buffer+0x8c>
				draw_one_bit_buffer(current);
				break;
			}
			case(RECT_EMPT):
			{
				if(((i == rect.pos.x) || (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) || (j == rect.Ly + rect.pos.y - 1)))
    14d4:	e8 14       	cp	r14, r8
    14d6:	f9 04       	cpc	r15, r9
    14d8:	59 f0       	breq	.+22     	; 0x14f0 <draw_rectangle_buffer+0xce>
    14da:	60 16       	cp	r6, r16
    14dc:	71 06       	cpc	r7, r17
    14de:	41 f0       	breq	.+16     	; 0x14f0 <draw_rectangle_buffer+0xce>
    14e0:	2e 14       	cp	r2, r14
    14e2:	3f 04       	cpc	r3, r15
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <draw_rectangle_buffer+0xce>
				draw_one_bit_buffer(current);
				break;
			}
			case(TRI_EMPT):
			{
				if(((i == rect.pos.x) && (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) && (j == rect.Ly + rect.pos.y - 1)))
    14e6:	6e 81       	ldd	r22, Y+6	; 0x06
    14e8:	7f 81       	ldd	r23, Y+7	; 0x07
    14ea:	60 17       	cp	r22, r16
    14ec:	71 07       	cpc	r23, r17
    14ee:	51 f7       	brne	.-44     	; 0x14c4 <draw_rectangle_buffer+0xa2>

void draw_one_bit_buffer(POS bit)
{
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
    14f0:	40 34       	cpi	r20, 0x40	; 64
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <draw_rectangle_buffer+0xd4>
    14f4:	43 c0       	rjmp	.+134    	; 0x157c <draw_rectangle_buffer+0x15a>
    14f6:	37 fd       	sbrc	r19, 7
    14f8:	41 c0       	rjmp	.+130    	; 0x157c <draw_rectangle_buffer+0x15a>
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    14fa:	84 2f       	mov	r24, r20
    14fc:	86 95       	lsr	r24
    14fe:	86 95       	lsr	r24
    1500:	86 95       	lsr	r24
    1502:	b5 01       	movw	r22, r10
    1504:	a0 e8       	ldi	r26, 0x80	; 128
    1506:	8a 9f       	mul	r24, r26
    1508:	60 0d       	add	r22, r0
    150a:	71 1d       	adc	r23, r1
    150c:	11 24       	eor	r1, r1
    150e:	e0 91 0b 01 	lds	r30, 0x010B
    1512:	f0 91 0c 01 	lds	r31, 0x010C
    1516:	e6 0f       	add	r30, r22
    1518:	f7 1f       	adc	r31, r23
    151a:	80 81       	ld	r24, Z
}

/* calculates the position the char column in memory */
int start_calc(POS rect)
{
    return rect.y % 8;
    151c:	47 70       	andi	r20, 0x07	; 7
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
    151e:	b2 01       	movw	r22, r4
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <draw_rectangle_buffer+0x104>
    1522:	66 0f       	add	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	4a 95       	dec	r20
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <draw_rectangle_buffer+0x100>
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    152a:	86 2b       	or	r24, r22
    152c:	80 83       	st	Z, r24
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
      for(j = rect.pos.y; j < rect.Ly + rect.pos.y; j++)
    152e:	0f 5f       	subi	r16, 0xFF	; 255
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	0c 15       	cp	r16, r12
    1534:	1d 05       	cpc	r17, r13
    1536:	5c f2       	brlt	.-106    	; 0x14ce <draw_rectangle_buffer+0xac>
{
    int i = 0;
    int j = 0;
    POS current;

    for(i = rect.pos.x; i < rect.Lx + rect.pos.x; i++)
    1538:	7f ef       	ldi	r23, 0xFF	; 255
    153a:	e7 1a       	sub	r14, r23
    153c:	f7 0a       	sbc	r15, r23
    153e:	48 85       	ldd	r20, Y+8	; 0x08
    1540:	59 85       	ldd	r21, Y+9	; 0x09
    1542:	e4 16       	cp	r14, r20
    1544:	f5 06       	cpc	r15, r21
    1546:	0c f4       	brge	.+2      	; 0x154a <draw_rectangle_buffer+0x128>
    1548:	a8 cf       	rjmp	.-176    	; 0x149a <draw_rectangle_buffer+0x78>
				draw_one_bit_buffer(current);
				break;
			}
			}
      }
}
    154a:	2b 96       	adiw	r28, 0x0b	; 11
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	bf 90       	pop	r11
    1568:	af 90       	pop	r10
    156a:	9f 90       	pop	r9
    156c:	8f 90       	pop	r8
    156e:	7f 90       	pop	r7
    1570:	6f 90       	pop	r6
    1572:	5f 90       	pop	r5
    1574:	4f 90       	pop	r4
    1576:	3f 90       	pop	r3
    1578:	2f 90       	pop	r2
    157a:	08 95       	ret
{
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
    157c:	c8 01       	movw	r24, r16
    157e:	99 27       	eor	r25, r25
    1580:	9f 93       	push	r25
    1582:	8f 93       	push	r24
    1584:	bf 92       	push	r11
    1586:	af 92       	push	r10
    1588:	ac e4       	ldi	r26, 0x4C	; 76
    158a:	b2 e0       	ldi	r27, 0x02	; 2
    158c:	bf 93       	push	r27
    158e:	af 93       	push	r26
    1590:	2a 87       	std	Y+10, r18	; 0x0a
    1592:	3b 87       	std	Y+11, r19	; 0x0b
    1594:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    15a8:	8d cf       	rjmp	.-230    	; 0x14c4 <draw_rectangle_buffer+0xa2>
				draw_one_bit_buffer(current);
				break;
			}
			case(TRI_EMPT):
			{
				if(((i == rect.pos.x) && (j == rect.pos.y)) || ((i == rect.Lx + rect.pos.x - 1) && (j == rect.Ly + rect.pos.y - 1)))
    15aa:	60 16       	cp	r6, r16
    15ac:	71 06       	cpc	r7, r17
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <draw_rectangle_buffer+0x190>
    15b0:	86 cf       	rjmp	.-244    	; 0x14be <draw_rectangle_buffer+0x9c>
    15b2:	9e cf       	rjmp	.-196    	; 0x14f0 <draw_rectangle_buffer+0xce>

000015b4 <draw_one_bit_buffer>:
			}
      }
}

void draw_one_bit_buffer(POS bit)
{
    15b4:	29 2f       	mov	r18, r25
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
    15b6:	90 34       	cpi	r25, 0x40	; 64
    15b8:	f0 f4       	brcc	.+60     	; 0x15f6 <draw_one_bit_buffer+0x42>
    15ba:	87 fd       	sbrc	r24, 7
    15bc:	1c c0       	rjmp	.+56     	; 0x15f6 <draw_one_bit_buffer+0x42>
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    15be:	39 2f       	mov	r19, r25
    15c0:	36 95       	lsr	r19
    15c2:	36 95       	lsr	r19
    15c4:	36 95       	lsr	r19
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	34 9f       	mul	r19, r20
    15cc:	80 0d       	add	r24, r0
    15ce:	91 1d       	adc	r25, r1
    15d0:	11 24       	eor	r1, r1
    15d2:	e0 91 0b 01 	lds	r30, 0x010B
    15d6:	f0 91 0c 01 	lds	r31, 0x010C
    15da:	e8 0f       	add	r30, r24
    15dc:	f9 1f       	adc	r31, r25
    15de:	30 81       	ld	r19, Z
}

/* calculates the position the char column in memory */
int start_calc(POS rect)
{
    return rect.y % 8;
    15e0:	27 70       	andi	r18, 0x07	; 7
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
		return;
	}
    start = start_calc(bit);
    res |= (1 << start);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <draw_one_bit_buffer+0x38>
    15ea:	88 0f       	add	r24, r24
    15ec:	0a 94       	dec	r0
    15ee:	ea f7       	brpl	.-6      	; 0x15ea <draw_one_bit_buffer+0x36>
	  display_buffer[(int) bit.y / 8 * N + bit.x] |= res;
    15f0:	38 2b       	or	r19, r24
    15f2:	30 83       	st	Z, r19
    15f4:	08 95       	ret
{
    uint8_t res = 0;
    uint8_t start = 0;
	if(bit.y > 63 || bit.y < 0 || bit.x > 127 || bit.x < 0)
	{
		printf("POINT X=%d and y=%d OUTSIDE SCREEN\n", bit.x, bit.y);
    15f6:	1f 92       	push	r1
    15f8:	2f 93       	push	r18
    15fa:	1f 92       	push	r1
    15fc:	8f 93       	push	r24
    15fe:	8c e4       	ldi	r24, 0x4C	; 76
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	9f 93       	push	r25
    1604:	8f 93       	push	r24
    1606:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
		return;
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	08 95       	ret

00001618 <draw_triangle_buffer>:
  		current = circ.pos;
  	} while(flag > 4);
}

void draw_triangle_buffer(TRI tri)
{
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	2a 97       	sbiw	r28, 0x0a	; 10
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    RECT rect;
	int i=0;
    rect.pos.x = tri.pos.x;
    1634:	f4 2e       	mov	r15, r20
    rect.pos.y = tri.pos.y;
    1636:	e5 2e       	mov	r14, r21
    rect.full = tri.full;
    1638:	7d 83       	std	Y+5, r23	; 0x05
    switch (tri.ori)
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	09 f4       	brne	.+2      	; 0x1640 <draw_triangle_buffer+0x28>
    163e:	47 c0       	rjmp	.+142    	; 0x16ce <draw_triangle_buffer+0xb6>
    1640:	98 f1       	brcs	.+102    	; 0x16a8 <draw_triangle_buffer+0x90>
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	01 f1       	breq	.+64     	; 0x1686 <draw_triangle_buffer+0x6e>
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	89 f4       	brne	.+34     	; 0x166c <draw_triangle_buffer+0x54>
        }
        case DOWN:
        {
            rect.Ly = 1;
            rect.Lx = tri.l;
			i = rect.Lx;
    164a:	06 2f       	mov	r16, r22
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	e4 1a       	sub	r14, r20
    1650:	5e 2d       	mov	r21, r14
    1652:	5f 0d       	add	r21, r15
            do
            {
                draw_rectangle_buffer(rect);
    1654:	4f 2d       	mov	r20, r15
    1656:	60 2f       	mov	r22, r16
    1658:	71 e0       	ldi	r23, 0x01	; 1
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
                rect.Lx -= 2;
				i -= 2;
    1660:	02 50       	subi	r16, 0x02	; 2
    1662:	11 09       	sbc	r17, r1
    1664:	f3 94       	inc	r15
                rect.pos.y++;
                rect.pos.x++;
            }
            while(i > 0);
    1666:	10 16       	cp	r1, r16
    1668:	11 06       	cpc	r1, r17
    166a:	94 f3       	brlt	.-28     	; 0x1650 <draw_triangle_buffer+0x38>
        default:
        {
            break;
        }
    }
}
    166c:	2a 96       	adiw	r28, 0x0a	; 10
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	08 95       	ret
        }
        case UP:
        {
            rect.Ly = 1;
            rect.Lx = tri.l;
            i = rect.Lx;
    1686:	06 2f       	mov	r16, r22
    1688:	10 e0       	ldi	r17, 0x00	; 0
			do
            {
                draw_rectangle_buffer(rect);
    168a:	4f 2d       	mov	r20, r15
    168c:	5e 2d       	mov	r21, r14
    168e:	60 2f       	mov	r22, r16
    1690:	71 e0       	ldi	r23, 0x01	; 1
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
                rect.Lx -= 2;
				i -= 2;
    1698:	02 50       	subi	r16, 0x02	; 2
    169a:	11 09       	sbc	r17, r1
    169c:	ea 94       	dec	r14
    169e:	f3 94       	inc	r15
                rect.pos.y--;
                rect.pos.x++;
            }
            while(i > 0);
    16a0:	10 16       	cp	r1, r16
    16a2:	11 06       	cpc	r1, r17
    16a4:	94 f3       	brlt	.-28     	; 0x168a <draw_triangle_buffer+0x72>
    16a6:	e2 cf       	rjmp	.-60     	; 0x166c <draw_triangle_buffer+0x54>
    RECT rect;
	int i=0;
    rect.pos.x = tri.pos.x;
    rect.pos.y = tri.pos.y;
    rect.full = tri.full;
    switch (tri.ori)
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	01 f7       	brne	.-64     	; 0x166c <draw_triangle_buffer+0x54>
        }
        case LEFT:
        {
            rect.Lx = 1;
            rect.Ly = tri.l;
            i = rect.Ly;
    16ac:	06 2f       	mov	r16, r22
    16ae:	10 e0       	ldi	r17, 0x00	; 0
			do
            {
                draw_rectangle_buffer(rect);
    16b0:	4f 2d       	mov	r20, r15
    16b2:	5e 2d       	mov	r21, r14
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	70 2f       	mov	r23, r16
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
                rect.Ly -= 2;
				i -= 2;
    16be:	02 50       	subi	r16, 0x02	; 2
    16c0:	11 09       	sbc	r17, r1
    16c2:	e3 94       	inc	r14
    16c4:	fa 94       	dec	r15
                rect.pos.y++;
                rect.pos.x--;
            }
            while(i > 0);
    16c6:	10 16       	cp	r1, r16
    16c8:	11 06       	cpc	r1, r17
    16ca:	94 f3       	brlt	.-28     	; 0x16b0 <draw_triangle_buffer+0x98>
    16cc:	cf cf       	rjmp	.-98     	; 0x166c <draw_triangle_buffer+0x54>
    {
        case RIGHT:
        {
            rect.Lx = 1;
            rect.Ly = tri.l;
			i = rect.Ly;
    16ce:	06 2f       	mov	r16, r22
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	e4 1a       	sub	r14, r20
    16d4:	5e 2d       	mov	r21, r14
    16d6:	5f 0d       	add	r21, r15
            do
            {
                draw_rectangle_buffer(rect);
    16d8:	4f 2d       	mov	r20, r15
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	70 2f       	mov	r23, r16
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	0e 94 11 0a 	call	0x1422	; 0x1422 <draw_rectangle_buffer>
                rect.Ly -= 2;
				i -= 2;
    16e4:	02 50       	subi	r16, 0x02	; 2
    16e6:	11 09       	sbc	r17, r1
    16e8:	f3 94       	inc	r15
                rect.pos.y++;
                rect.pos.x++;
            }
            while(i > 0);
    16ea:	10 16       	cp	r1, r16
    16ec:	11 06       	cpc	r1, r17
    16ee:	94 f3       	brlt	.-28     	; 0x16d4 <draw_triangle_buffer+0xbc>
    16f0:	bd cf       	rjmp	.-134    	; 0x166c <draw_triangle_buffer+0x54>

000016f2 <assignParents>:
	_mnode->m_content.operation = operation;
	return _mnode;
}

static void assignParents(MenuNode* node)
{
    16f2:	2f 92       	push	r2
    16f4:	3f 92       	push	r3
    16f6:	4f 92       	push	r4
    16f8:	5f 92       	push	r5
    16fa:	6f 92       	push	r6
    16fc:	7f 92       	push	r7
    16fe:	8f 92       	push	r8
    1700:	9f 92       	push	r9
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	2b 97       	sbiw	r28, 0x0b	; 11
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
	if(node)
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	09 f4       	brne	.+2      	; 0x1730 <assignParents+0x3e>
    172e:	b9 c1       	rjmp	.+882    	; 0x1aa2 <assignParents+0x3b0>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1730:	dc 01       	movw	r26, r24
    1732:	17 96       	adiw	r26, 0x07	; 7
    1734:	2c 91       	ld	r18, X
    1736:	22 23       	and	r18, r18
    1738:	09 f4       	brne	.+2      	; 0x173c <assignParents+0x4a>
    173a:	5b c1       	rjmp	.+694    	; 0x19f2 <assignParents+0x300>
    173c:	1f 82       	std	Y+7, r1	; 0x07
    173e:	3f 81       	ldd	r19, Y+7	; 0x07
		{
			node->m_submenus[i]->m_parent = node;
    1740:	83 2f       	mov	r24, r19
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	ad 81       	ldd	r26, Y+5	; 0x05
    174a:	be 81       	ldd	r27, Y+6	; 0x06
    174c:	15 96       	adiw	r26, 0x05	; 5
    174e:	4d 91       	ld	r20, X+
    1750:	5c 91       	ld	r21, X
    1752:	16 97       	sbiw	r26, 0x06	; 6
    1754:	48 0f       	add	r20, r24
    1756:	59 1f       	adc	r21, r25
    1758:	fa 01       	movw	r30, r20
    175a:	a0 81       	ld	r26, Z
    175c:	b1 81       	ldd	r27, Z+1	; 0x01
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	14 96       	adiw	r26, 0x04	; 4
    1764:	9c 93       	st	X, r25
    1766:	8e 93       	st	-X, r24
    1768:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    176a:	a0 81       	ld	r26, Z
    176c:	b1 81       	ldd	r27, Z+1	; 0x01
    176e:	ba 83       	std	Y+2, r27	; 0x02
    1770:	a9 83       	std	Y+1, r26	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    1772:	10 97       	sbiw	r26, 0x00	; 0
    1774:	09 f4       	brne	.+2      	; 0x1778 <assignParents+0x86>
    1776:	8d c1       	rjmp	.+794    	; 0x1a92 <assignParents+0x3a0>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1778:	17 96       	adiw	r26, 0x07	; 7
    177a:	8c 91       	ld	r24, X
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <assignParents+0x90>
    1780:	32 c1       	rjmp	.+612    	; 0x19e6 <assignParents+0x2f4>
    1782:	28 2f       	mov	r18, r24
    1784:	18 86       	std	Y+8, r1	; 0x08
    1786:	38 85       	ldd	r19, Y+8	; 0x08
		{
			node->m_submenus[i]->m_parent = node;
    1788:	83 2f       	mov	r24, r19
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	a9 81       	ldd	r26, Y+1	; 0x01
    1792:	ba 81       	ldd	r27, Y+2	; 0x02
    1794:	15 96       	adiw	r26, 0x05	; 5
    1796:	4d 91       	ld	r20, X+
    1798:	5c 91       	ld	r21, X
    179a:	16 97       	sbiw	r26, 0x06	; 6
    179c:	48 0f       	add	r20, r24
    179e:	59 1f       	adc	r21, r25
    17a0:	fa 01       	movw	r30, r20
    17a2:	a0 81       	ld	r26, Z
    17a4:	b1 81       	ldd	r27, Z+1	; 0x01
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	14 96       	adiw	r26, 0x04	; 4
    17ac:	9c 93       	st	X, r25
    17ae:	8e 93       	st	-X, r24
    17b0:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    17b2:	a0 81       	ld	r26, Z
    17b4:	b1 81       	ldd	r27, Z+1	; 0x01
    17b6:	bc 83       	std	Y+4, r27	; 0x04
    17b8:	ab 83       	std	Y+3, r26	; 0x03
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    17ba:	10 97       	sbiw	r26, 0x00	; 0
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <assignParents+0xce>
    17be:	60 c1       	rjmp	.+704    	; 0x1a80 <assignParents+0x38e>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    17c0:	17 96       	adiw	r26, 0x07	; 7
    17c2:	8c 91       	ld	r24, X
    17c4:	88 23       	and	r24, r24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <assignParents+0xd8>
    17c8:	04 c1       	rjmp	.+520    	; 0x19d2 <assignParents+0x2e0>
    17ca:	28 2f       	mov	r18, r24
    17cc:	91 2c       	mov	r9, r1
    17ce:	29 2c       	mov	r2, r9
		{
			node->m_submenus[i]->m_parent = node;
    17d0:	82 2d       	mov	r24, r2
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	eb 81       	ldd	r30, Y+3	; 0x03
    17da:	fc 81       	ldd	r31, Y+4	; 0x04
    17dc:	45 81       	ldd	r20, Z+5	; 0x05
    17de:	56 81       	ldd	r21, Z+6	; 0x06
    17e0:	48 0f       	add	r20, r24
    17e2:	59 1f       	adc	r21, r25
    17e4:	fa 01       	movw	r30, r20
    17e6:	a0 81       	ld	r26, Z
    17e8:	b1 81       	ldd	r27, Z+1	; 0x01
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	14 96       	adiw	r26, 0x04	; 4
    17f0:	9c 93       	st	X, r25
    17f2:	8e 93       	st	-X, r24
    17f4:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    17f6:	e0 80       	ld	r14, Z
    17f8:	f1 80       	ldd	r15, Z+1	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    17fa:	e1 14       	cp	r14, r1
    17fc:	f1 04       	cpc	r15, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <assignParents+0x110>
    1800:	37 c1       	rjmp	.+622    	; 0x1a70 <assignParents+0x37e>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1802:	d7 01       	movw	r26, r14
    1804:	17 96       	adiw	r26, 0x07	; 7
    1806:	8c 91       	ld	r24, X
    1808:	88 23       	and	r24, r24
    180a:	09 f4       	brne	.+2      	; 0x180e <assignParents+0x11c>
    180c:	da c0       	rjmp	.+436    	; 0x19c2 <assignParents+0x2d0>
    180e:	28 2f       	mov	r18, r24
    1810:	91 2c       	mov	r9, r1
    1812:	29 86       	std	Y+9, r2	; 0x09
    1814:	39 2c       	mov	r3, r9
		{
			node->m_submenus[i]->m_parent = node;
    1816:	83 2d       	mov	r24, r3
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	d7 01       	movw	r26, r14
    1820:	15 96       	adiw	r26, 0x05	; 5
    1822:	ed 91       	ld	r30, X+
    1824:	fc 91       	ld	r31, X
    1826:	16 97       	sbiw	r26, 0x06	; 6
    1828:	e8 0f       	add	r30, r24
    182a:	f9 1f       	adc	r31, r25
    182c:	a0 81       	ld	r26, Z
    182e:	b1 81       	ldd	r27, Z+1	; 0x01
    1830:	14 96       	adiw	r26, 0x04	; 4
    1832:	fc 92       	st	X, r15
    1834:	ee 92       	st	-X, r14
    1836:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    1838:	a0 80       	ld	r10, Z
    183a:	b1 80       	ldd	r11, Z+1	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    183c:	a1 14       	cp	r10, r1
    183e:	b1 04       	cpc	r11, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <assignParents+0x152>
    1842:	0e c1       	rjmp	.+540    	; 0x1a60 <assignParents+0x36e>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1844:	f5 01       	movw	r30, r10
    1846:	87 81       	ldd	r24, Z+7	; 0x07
    1848:	88 23       	and	r24, r24
    184a:	09 f4       	brne	.+2      	; 0x184e <assignParents+0x15c>
    184c:	b2 c0       	rjmp	.+356    	; 0x19b2 <assignParents+0x2c0>
    184e:	28 2f       	mov	r18, r24
    1850:	51 2c       	mov	r5, r1
		{
			node->m_submenus[i]->m_parent = node;
    1852:	85 2d       	mov	r24, r5
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	d5 01       	movw	r26, r10
    185c:	15 96       	adiw	r26, 0x05	; 5
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	16 97       	sbiw	r26, 0x06	; 6
    1864:	e8 0f       	add	r30, r24
    1866:	f9 1f       	adc	r31, r25
    1868:	a0 81       	ld	r26, Z
    186a:	b1 81       	ldd	r27, Z+1	; 0x01
    186c:	14 96       	adiw	r26, 0x04	; 4
    186e:	bc 92       	st	X, r11
    1870:	ae 92       	st	-X, r10
    1872:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    1874:	80 80       	ld	r8, Z
    1876:	91 80       	ldd	r9, Z+1	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    1878:	81 14       	cp	r8, r1
    187a:	91 04       	cpc	r9, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <assignParents+0x18e>
    187e:	e9 c0       	rjmp	.+466    	; 0x1a52 <assignParents+0x360>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1880:	f4 01       	movw	r30, r8
    1882:	87 81       	ldd	r24, Z+7	; 0x07
    1884:	88 23       	and	r24, r24
    1886:	09 f4       	brne	.+2      	; 0x188a <assignParents+0x198>
    1888:	8d c0       	rjmp	.+282    	; 0x19a4 <assignParents+0x2b2>
    188a:	28 2f       	mov	r18, r24
    188c:	41 2c       	mov	r4, r1
		{
			node->m_submenus[i]->m_parent = node;
    188e:	84 2d       	mov	r24, r4
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	d4 01       	movw	r26, r8
    1898:	15 96       	adiw	r26, 0x05	; 5
    189a:	ed 91       	ld	r30, X+
    189c:	fc 91       	ld	r31, X
    189e:	16 97       	sbiw	r26, 0x06	; 6
    18a0:	e8 0f       	add	r30, r24
    18a2:	f9 1f       	adc	r31, r25
    18a4:	a0 81       	ld	r26, Z
    18a6:	b1 81       	ldd	r27, Z+1	; 0x01
    18a8:	14 96       	adiw	r26, 0x04	; 4
    18aa:	9c 92       	st	X, r9
    18ac:	8e 92       	st	-X, r8
    18ae:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    18b0:	c0 80       	ld	r12, Z
    18b2:	d1 80       	ldd	r13, Z+1	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    18b4:	c1 14       	cp	r12, r1
    18b6:	d1 04       	cpc	r13, r1
    18b8:	09 f4       	brne	.+2      	; 0x18bc <assignParents+0x1ca>
    18ba:	c3 c0       	rjmp	.+390    	; 0x1a42 <assignParents+0x350>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    18bc:	f6 01       	movw	r30, r12
    18be:	37 81       	ldd	r19, Z+7	; 0x07
    18c0:	33 23       	and	r19, r19
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <assignParents+0x1d4>
    18c4:	69 c0       	rjmp	.+210    	; 0x1998 <assignParents+0x2a6>
    18c6:	61 2c       	mov	r6, r1
		{
			node->m_submenus[i]->m_parent = node;
    18c8:	86 2d       	mov	r24, r6
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	d6 01       	movw	r26, r12
    18d2:	15 96       	adiw	r26, 0x05	; 5
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	16 97       	sbiw	r26, 0x06	; 6
    18da:	e8 0f       	add	r30, r24
    18dc:	f9 1f       	adc	r31, r25
    18de:	a0 81       	ld	r26, Z
    18e0:	b1 81       	ldd	r27, Z+1	; 0x01
    18e2:	14 96       	adiw	r26, 0x04	; 4
    18e4:	dc 92       	st	X, r13
    18e6:	ce 92       	st	-X, r12
    18e8:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    18ea:	00 81       	ld	r16, Z
    18ec:	11 81       	ldd	r17, Z+1	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    18ee:	01 15       	cp	r16, r1
    18f0:	11 05       	cpc	r17, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <assignParents+0x204>
    18f4:	9f c0       	rjmp	.+318    	; 0x1a34 <assignParents+0x342>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    18f6:	f8 01       	movw	r30, r16
    18f8:	27 81       	ldd	r18, Z+7	; 0x07
    18fa:	22 23       	and	r18, r18
    18fc:	09 f4       	brne	.+2      	; 0x1900 <assignParents+0x20e>
    18fe:	45 c0       	rjmp	.+138    	; 0x198a <assignParents+0x298>
    1900:	71 2c       	mov	r7, r1
		{
			node->m_submenus[i]->m_parent = node;
    1902:	87 2d       	mov	r24, r7
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	d8 01       	movw	r26, r16
    190c:	15 96       	adiw	r26, 0x05	; 5
    190e:	ed 91       	ld	r30, X+
    1910:	fc 91       	ld	r31, X
    1912:	16 97       	sbiw	r26, 0x06	; 6
    1914:	e8 0f       	add	r30, r24
    1916:	f9 1f       	adc	r31, r25
    1918:	a0 81       	ld	r26, Z
    191a:	b1 81       	ldd	r27, Z+1	; 0x01
    191c:	14 96       	adiw	r26, 0x04	; 4
    191e:	1c 93       	st	X, r17
    1920:	0e 93       	st	-X, r16
    1922:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    1924:	40 81       	ld	r20, Z
    1926:	51 81       	ldd	r21, Z+1	; 0x01
	return _mnode;
}

static void assignParents(MenuNode* node)
{
	if(node)
    1928:	41 15       	cp	r20, r1
    192a:	51 05       	cpc	r21, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <assignParents+0x23e>
    192e:	7a c0       	rjmp	.+244    	; 0x1a24 <assignParents+0x332>
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    1930:	fa 01       	movw	r30, r20
    1932:	87 81       	ldd	r24, Z+7	; 0x07
    1934:	88 23       	and	r24, r24
    1936:	19 f1       	breq	.+70     	; 0x197e <assignParents+0x28c>
    1938:	21 2c       	mov	r2, r1
    193a:	9a 01       	movw	r18, r20
		{
			node->m_submenus[i]->m_parent = node;
    193c:	82 2d       	mov	r24, r2
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	d9 01       	movw	r26, r18
    1946:	15 96       	adiw	r26, 0x05	; 5
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	16 97       	sbiw	r26, 0x06	; 6
    194e:	e8 0f       	add	r30, r24
    1950:	f9 1f       	adc	r31, r25
    1952:	a0 81       	ld	r26, Z
    1954:	b1 81       	ldd	r27, Z+1	; 0x01
    1956:	14 96       	adiw	r26, 0x04	; 4
    1958:	3c 93       	st	X, r19
    195a:	2e 93       	st	-X, r18
    195c:	13 97       	sbiw	r26, 0x03	; 3
			assignParents(node->m_submenus[i]);
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	2a 87       	std	Y+10, r18	; 0x0a
    1964:	3b 87       	std	Y+11, r19	; 0x0b
    1966:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <assignParents>

static void assignParents(MenuNode* node)
{
	if(node)
	{
		for(uint8_t i = 0; i < node->m_num_submenus; i++)
    196a:	23 94       	inc	r2
    196c:	2a 85       	ldd	r18, Y+10	; 0x0a
    196e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1970:	f9 01       	movw	r30, r18
    1972:	87 81       	ldd	r24, Z+7	; 0x07
    1974:	28 16       	cp	r2, r24
    1976:	10 f3       	brcs	.-60     	; 0x193c <assignParents+0x24a>
    1978:	d8 01       	movw	r26, r16
    197a:	17 96       	adiw	r26, 0x07	; 7
    197c:	2c 91       	ld	r18, X
    197e:	73 94       	inc	r7
    1980:	72 16       	cp	r7, r18
    1982:	08 f4       	brcc	.+2      	; 0x1986 <assignParents+0x294>
    1984:	be cf       	rjmp	.-132    	; 0x1902 <assignParents+0x210>
    1986:	f6 01       	movw	r30, r12
    1988:	37 81       	ldd	r19, Z+7	; 0x07
    198a:	63 94       	inc	r6
    198c:	63 16       	cp	r6, r19
    198e:	08 f4       	brcc	.+2      	; 0x1992 <assignParents+0x2a0>
    1990:	9b cf       	rjmp	.-202    	; 0x18c8 <assignParents+0x1d6>
    1992:	d4 01       	movw	r26, r8
    1994:	17 96       	adiw	r26, 0x07	; 7
    1996:	2c 91       	ld	r18, X
    1998:	43 94       	inc	r4
    199a:	42 16       	cp	r4, r18
    199c:	08 f4       	brcc	.+2      	; 0x19a0 <assignParents+0x2ae>
    199e:	77 cf       	rjmp	.-274    	; 0x188e <assignParents+0x19c>
    19a0:	f5 01       	movw	r30, r10
    19a2:	27 81       	ldd	r18, Z+7	; 0x07
    19a4:	53 94       	inc	r5
    19a6:	52 16       	cp	r5, r18
    19a8:	08 f4       	brcc	.+2      	; 0x19ac <assignParents+0x2ba>
    19aa:	53 cf       	rjmp	.-346    	; 0x1852 <assignParents+0x160>
    19ac:	d7 01       	movw	r26, r14
    19ae:	17 96       	adiw	r26, 0x07	; 7
    19b0:	2c 91       	ld	r18, X
    19b2:	33 94       	inc	r3
    19b4:	32 16       	cp	r3, r18
    19b6:	08 f4       	brcc	.+2      	; 0x19ba <assignParents+0x2c8>
    19b8:	2e cf       	rjmp	.-420    	; 0x1816 <assignParents+0x124>
    19ba:	29 84       	ldd	r2, Y+9	; 0x09
    19bc:	eb 81       	ldd	r30, Y+3	; 0x03
    19be:	fc 81       	ldd	r31, Y+4	; 0x04
    19c0:	27 81       	ldd	r18, Z+7	; 0x07
    19c2:	23 94       	inc	r2
    19c4:	22 16       	cp	r2, r18
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <assignParents+0x2d8>
    19c8:	03 cf       	rjmp	.-506    	; 0x17d0 <assignParents+0xde>
    19ca:	a9 81       	ldd	r26, Y+1	; 0x01
    19cc:	ba 81       	ldd	r27, Y+2	; 0x02
    19ce:	17 96       	adiw	r26, 0x07	; 7
    19d0:	2c 91       	ld	r18, X
    19d2:	38 85       	ldd	r19, Y+8	; 0x08
    19d4:	3f 5f       	subi	r19, 0xFF	; 255
    19d6:	38 87       	std	Y+8, r19	; 0x08
    19d8:	32 17       	cp	r19, r18
    19da:	08 f4       	brcc	.+2      	; 0x19de <assignParents+0x2ec>
    19dc:	d5 ce       	rjmp	.-598    	; 0x1788 <assignParents+0x96>
    19de:	ad 81       	ldd	r26, Y+5	; 0x05
    19e0:	be 81       	ldd	r27, Y+6	; 0x06
    19e2:	17 96       	adiw	r26, 0x07	; 7
    19e4:	2c 91       	ld	r18, X
    19e6:	3f 81       	ldd	r19, Y+7	; 0x07
    19e8:	3f 5f       	subi	r19, 0xFF	; 255
    19ea:	3f 83       	std	Y+7, r19	; 0x07
    19ec:	32 17       	cp	r19, r18
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <assignParents+0x300>
    19f0:	a7 ce       	rjmp	.-690    	; 0x1740 <assignParents+0x4e>
			assignParents(node->m_submenus[i]);
		}
	}
	if(!node)
		printf("NULL node\n");
}
    19f2:	2b 96       	adiw	r28, 0x0b	; 11
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	bf 90       	pop	r11
    1a10:	af 90       	pop	r10
    1a12:	9f 90       	pop	r9
    1a14:	8f 90       	pop	r8
    1a16:	7f 90       	pop	r7
    1a18:	6f 90       	pop	r6
    1a1a:	5f 90       	pop	r5
    1a1c:	4f 90       	pop	r4
    1a1e:	3f 90       	pop	r3
    1a20:	2f 90       	pop	r2
    1a22:	08 95       	ret
			node->m_submenus[i]->m_parent = node;
			assignParents(node->m_submenus[i]);
		}
	}
	if(!node)
		printf("NULL node\n");
    1a24:	80 e7       	ldi	r24, 0x70	; 112
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a2c:	d8 01       	movw	r26, r16
    1a2e:	17 96       	adiw	r26, 0x07	; 7
    1a30:	2c 91       	ld	r18, X
    1a32:	a5 cf       	rjmp	.-182    	; 0x197e <assignParents+0x28c>
    1a34:	80 e7       	ldi	r24, 0x70	; 112
    1a36:	92 e0       	ldi	r25, 0x02	; 2
    1a38:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	37 81       	ldd	r19, Z+7	; 0x07
    1a40:	a4 cf       	rjmp	.-184    	; 0x198a <assignParents+0x298>
    1a42:	80 e7       	ldi	r24, 0x70	; 112
    1a44:	92 e0       	ldi	r25, 0x02	; 2
    1a46:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a4a:	d4 01       	movw	r26, r8
    1a4c:	17 96       	adiw	r26, 0x07	; 7
    1a4e:	2c 91       	ld	r18, X
    1a50:	a3 cf       	rjmp	.-186    	; 0x1998 <assignParents+0x2a6>
    1a52:	80 e7       	ldi	r24, 0x70	; 112
    1a54:	92 e0       	ldi	r25, 0x02	; 2
    1a56:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a5a:	f5 01       	movw	r30, r10
    1a5c:	27 81       	ldd	r18, Z+7	; 0x07
    1a5e:	a2 cf       	rjmp	.-188    	; 0x19a4 <assignParents+0x2b2>
    1a60:	80 e7       	ldi	r24, 0x70	; 112
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a68:	d7 01       	movw	r26, r14
    1a6a:	17 96       	adiw	r26, 0x07	; 7
    1a6c:	2c 91       	ld	r18, X
    1a6e:	a1 cf       	rjmp	.-190    	; 0x19b2 <assignParents+0x2c0>
    1a70:	80 e7       	ldi	r24, 0x70	; 112
    1a72:	92 e0       	ldi	r25, 0x02	; 2
    1a74:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a78:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7c:	27 81       	ldd	r18, Z+7	; 0x07
    1a7e:	a1 cf       	rjmp	.-190    	; 0x19c2 <assignParents+0x2d0>
    1a80:	80 e7       	ldi	r24, 0x70	; 112
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a88:	a9 81       	ldd	r26, Y+1	; 0x01
    1a8a:	ba 81       	ldd	r27, Y+2	; 0x02
    1a8c:	17 96       	adiw	r26, 0x07	; 7
    1a8e:	2c 91       	ld	r18, X
    1a90:	a0 cf       	rjmp	.-192    	; 0x19d2 <assignParents+0x2e0>
    1a92:	80 e7       	ldi	r24, 0x70	; 112
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    1a9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a9e:	27 81       	ldd	r18, Z+7	; 0x07
    1aa0:	a2 cf       	rjmp	.-188    	; 0x19e6 <assignParents+0x2f4>
    1aa2:	80 e7       	ldi	r24, 0x70	; 112
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
}
    1aa6:	2b 96       	adiw	r28, 0x0b	; 11
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	af 90       	pop	r10
    1ac6:	9f 90       	pop	r9
    1ac8:	8f 90       	pop	r8
    1aca:	7f 90       	pop	r7
    1acc:	6f 90       	pop	r6
    1ace:	5f 90       	pop	r5
    1ad0:	4f 90       	pop	r4
    1ad2:	3f 90       	pop	r3
    1ad4:	2f 90       	pop	r2
			node->m_submenus[i]->m_parent = node;
			assignParents(node->m_submenus[i]);
		}
	}
	if(!node)
		printf("NULL node\n");
    1ad6:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <puts>

00001ada <createMenu>:
	return _menu;
}


void createMenu(void)
{
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1ae4:	88 e0       	ldi	r24, 0x08	; 8
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1aec:	ec 01       	movw	r28, r24
	if(!_mnode)
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <createMenu+0x1a>
    1af2:	8a c3       	rjmp	.+1812   	; 0x2208 <createMenu+0x72e>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1af4:	88 e0       	ldi	r24, 0x08	; 8
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <createMenu+0x2c>
    1b04:	68 c2       	rjmp	.+1232   	; 0x1fd6 <createMenu+0x4fc>
    1b06:	8c 01       	movw	r16, r24
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1b08:	84 e0       	ldi	r24, 0x04	; 4
    1b0a:	8f 83       	std	Y+7, r24	; 0x07
	_mnode->m_content.title_id = title_id;
    1b0c:	18 82       	st	Y, r1
	_mnode->m_content.operation = operation;
    1b0e:	1a 82       	std	Y+2, r1	; 0x02
    1b10:	19 82       	std	Y+1, r1	; 0x01
}


void createMenu(void)
{
	_menu = createMenuNode(0, NULL, 4);
    1b12:	d0 93 49 03 	sts	0x0349, r29
    1b16:	c0 93 48 03 	sts	0x0348, r28

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1b1a:	88 e0       	ldi	r24, 0x08	; 8
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1b22:	ec 01       	movw	r28, r24
	if(!_mnode)
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <createMenu+0x50>
    1b28:	23 c4       	rjmp	.+2118   	; 0x2370 <createMenu+0x896>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1b36:	89 2b       	or	r24, r25
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <createMenu+0x62>
    1b3a:	5c c2       	rjmp	.+1208   	; 0x1ff4 <createMenu+0x51a>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1b3c:	32 e0       	ldi	r19, 0x02	; 2
    1b3e:	f3 2e       	mov	r15, r19
    1b40:	ff 82       	std	Y+7, r15	; 0x07
	_mnode->m_content.title_id = title_id;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1b46:	1a 82       	std	Y+2, r1	; 0x02
    1b48:	19 82       	std	Y+1, r1	; 0x01


void createMenu(void)
{
	_menu = createMenuNode(0, NULL, 4);
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	d1 83       	std	Z+1, r29	; 0x01
    1b4e:	c0 83       	st	Z, r28
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
    1b50:	e0 91 48 03 	lds	r30, 0x0348
    1b54:	f0 91 49 03 	lds	r31, 0x0349
    1b58:	05 80       	ldd	r0, Z+5	; 0x05
    1b5a:	f6 81       	ldd	r31, Z+6	; 0x06
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	01 90       	ld	r0, Z+
    1b60:	f0 81       	ld	r31, Z
    1b62:	e0 2d       	mov	r30, r0
    1b64:	05 81       	ldd	r16, Z+5	; 0x05
    1b66:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1b68:	88 e0       	ldi	r24, 0x08	; 8
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1b70:	ec 01       	movw	r28, r24
	if(!_mnode)
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <createMenu+0x9e>
    1b76:	c5 c3       	rjmp	.+1930   	; 0x2302 <createMenu+0x828>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1b84:	89 2b       	or	r24, r25
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <createMenu+0xb0>
    1b88:	43 c2       	rjmp	.+1158   	; 0x2010 <createMenu+0x536>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1b8a:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1b90:	8c e2       	ldi	r24, 0x2C	; 44
    1b92:	95 e0       	ldi	r25, 0x05	; 5
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01

void createMenu(void)
{
	_menu = createMenuNode(0, NULL, 4);
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
    1b98:	f8 01       	movw	r30, r16
    1b9a:	d1 83       	std	Z+1, r29	; 0x01
    1b9c:	c0 83       	st	Z, r28
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
    1b9e:	e0 91 48 03 	lds	r30, 0x0348
    1ba2:	f0 91 49 03 	lds	r31, 0x0349
    1ba6:	05 80       	ldd	r0, Z+5	; 0x05
    1ba8:	f6 81       	ldd	r31, Z+6	; 0x06
    1baa:	e0 2d       	mov	r30, r0
    1bac:	01 90       	ld	r0, Z+
    1bae:	f0 81       	ld	r31, Z
    1bb0:	e0 2d       	mov	r30, r0
    1bb2:	05 81       	ldd	r16, Z+5	; 0x05
    1bb4:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1bb6:	88 e0       	ldi	r24, 0x08	; 8
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1bbe:	ec 01       	movw	r28, r24
	if(!_mnode)
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <createMenu+0xec>
    1bc4:	ab c3       	rjmp	.+1878   	; 0x231c <createMenu+0x842>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1bd2:	89 2b       	or	r24, r25
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <createMenu+0xfe>
    1bd6:	2a c2       	rjmp	.+1108   	; 0x202c <createMenu+0x552>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1bd8:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1bde:	86 ee       	ldi	r24, 0xE6	; 230
    1be0:	98 e0       	ldi	r25, 0x08	; 8
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
void createMenu(void)
{
	_menu = createMenuNode(0, NULL, 4);
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
    1be6:	f8 01       	movw	r30, r16
    1be8:	d3 83       	std	Z+3, r29	; 0x03
    1bea:	c2 83       	std	Z+2, r28	; 0x02
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
    1bec:	e0 91 48 03 	lds	r30, 0x0348
    1bf0:	f0 91 49 03 	lds	r31, 0x0349
    1bf4:	05 81       	ldd	r16, Z+5	; 0x05
    1bf6:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1bf8:	88 e0       	ldi	r24, 0x08	; 8
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1c00:	ec 01       	movw	r28, r24
	if(!_mnode)
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <createMenu+0x12e>
    1c06:	98 c3       	rjmp	.+1840   	; 0x2338 <createMenu+0x85e>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1c14:	89 2b       	or	r24, r25
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <createMenu+0x140>
    1c18:	17 c2       	rjmp	.+1070   	; 0x2048 <createMenu+0x56e>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1c1a:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1c20:	83 e4       	ldi	r24, 0x43	; 67
    1c22:	93 e1       	ldi	r25, 0x13	; 19
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
{
	_menu = createMenuNode(0, NULL, 4);
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
    1c28:	f8 01       	movw	r30, r16
    1c2a:	d3 83       	std	Z+3, r29	; 0x03
    1c2c:	c2 83       	std	Z+2, r28	; 0x02
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
    1c2e:	e0 91 48 03 	lds	r30, 0x0348
    1c32:	f0 91 49 03 	lds	r31, 0x0349
    1c36:	05 81       	ldd	r16, Z+5	; 0x05
    1c38:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1c3a:	88 e0       	ldi	r24, 0x08	; 8
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1c42:	ec 01       	movw	r28, r24
	if(!_mnode)
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <createMenu+0x170>
    1c48:	85 c3       	rjmp	.+1802   	; 0x2354 <createMenu+0x87a>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1c4a:	88 e0       	ldi	r24, 0x08	; 8
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1c56:	89 2b       	or	r24, r25
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <createMenu+0x182>
    1c5a:	04 c2       	rjmp	.+1032   	; 0x2064 <createMenu+0x58a>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1c5c:	84 e0       	ldi	r24, 0x04	; 4
    1c5e:	8f 83       	std	Y+7, r24	; 0x07
	_mnode->m_content.title_id = title_id;
    1c60:	85 e0       	ldi	r24, 0x05	; 5
    1c62:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1c64:	1a 82       	std	Y+2, r1	; 0x02
    1c66:	19 82       	std	Y+1, r1	; 0x01
	_menu = createMenuNode(0, NULL, 4);
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
    1c68:	f8 01       	movw	r30, r16
    1c6a:	d5 83       	std	Z+5, r29	; 0x05
    1c6c:	c4 83       	std	Z+4, r28	; 0x04
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
    1c6e:	e0 91 48 03 	lds	r30, 0x0348
    1c72:	f0 91 49 03 	lds	r31, 0x0349
    1c76:	05 80       	ldd	r0, Z+5	; 0x05
    1c78:	f6 81       	ldd	r31, Z+6	; 0x06
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	04 80       	ldd	r0, Z+4	; 0x04
    1c7e:	f5 81       	ldd	r31, Z+5	; 0x05
    1c80:	e0 2d       	mov	r30, r0
    1c82:	05 81       	ldd	r16, Z+5	; 0x05
    1c84:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1c86:	88 e0       	ldi	r24, 0x08	; 8
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1c8e:	ec 01       	movw	r28, r24
	if(!_mnode)
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <createMenu+0x1bc>
    1c94:	fe c2       	rjmp	.+1532   	; 0x2292 <createMenu+0x7b8>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1ca2:	89 2b       	or	r24, r25
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <createMenu+0x1ce>
    1ca6:	ec c1       	rjmp	.+984    	; 0x2080 <createMenu+0x5a6>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1ca8:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1caa:	86 e0       	ldi	r24, 0x06	; 6
    1cac:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1cae:	85 e4       	ldi	r24, 0x45	; 69
    1cb0:	93 e1       	ldi	r25, 0x13	; 19
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	_menu->m_submenus[0] = createMenuNode(1, NULL, 2);
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	d1 83       	std	Z+1, r29	; 0x01
    1cba:	c0 83       	st	Z, r28
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
    1cbc:	e0 91 48 03 	lds	r30, 0x0348
    1cc0:	f0 91 49 03 	lds	r31, 0x0349
    1cc4:	05 80       	ldd	r0, Z+5	; 0x05
    1cc6:	f6 81       	ldd	r31, Z+6	; 0x06
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	04 80       	ldd	r0, Z+4	; 0x04
    1ccc:	f5 81       	ldd	r31, Z+5	; 0x05
    1cce:	e0 2d       	mov	r30, r0
    1cd0:	05 81       	ldd	r16, Z+5	; 0x05
    1cd2:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1cd4:	88 e0       	ldi	r24, 0x08	; 8
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1cdc:	ec 01       	movw	r28, r24
	if(!_mnode)
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <createMenu+0x20a>
    1ce2:	e5 c2       	rjmp	.+1482   	; 0x22ae <createMenu+0x7d4>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1cf0:	89 2b       	or	r24, r25
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <createMenu+0x21c>
    1cf4:	d3 c1       	rjmp	.+934    	; 0x209c <createMenu+0x5c2>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1cf6:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1cf8:	87 e0       	ldi	r24, 0x07	; 7
    1cfa:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1cfc:	84 e4       	ldi	r24, 0x44	; 68
    1cfe:	93 e1       	ldi	r25, 0x13	; 19
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
	_menu->m_submenus[0]->m_submenus[0] = createMenuNode(2, &ping_pong_idle, 0);
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
    1d04:	f8 01       	movw	r30, r16
    1d06:	d3 83       	std	Z+3, r29	; 0x03
    1d08:	c2 83       	std	Z+2, r28	; 0x02
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
    1d0a:	e0 91 48 03 	lds	r30, 0x0348
    1d0e:	f0 91 49 03 	lds	r31, 0x0349
    1d12:	05 80       	ldd	r0, Z+5	; 0x05
    1d14:	f6 81       	ldd	r31, Z+6	; 0x06
    1d16:	e0 2d       	mov	r30, r0
    1d18:	04 80       	ldd	r0, Z+4	; 0x04
    1d1a:	f5 81       	ldd	r31, Z+5	; 0x05
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	05 81       	ldd	r16, Z+5	; 0x05
    1d20:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1d22:	88 e0       	ldi	r24, 0x08	; 8
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1d2a:	ec 01       	movw	r28, r24
	if(!_mnode)
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <createMenu+0x258>
    1d30:	cc c2       	rjmp	.+1432   	; 0x22ca <createMenu+0x7f0>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1d3e:	89 2b       	or	r24, r25
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <createMenu+0x26a>
    1d42:	ba c1       	rjmp	.+884    	; 0x20b8 <createMenu+0x5de>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1d44:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1d46:	88 e0       	ldi	r24, 0x08	; 8
    1d48:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1d4a:	86 ed       	ldi	r24, 0xD6	; 214
    1d4c:	93 e1       	ldi	r25, 0x13	; 19
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
	_menu->m_submenus[0]->m_submenus[1] = createMenuNode(3, &playPingPong, 0);
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
    1d52:	f8 01       	movw	r30, r16
    1d54:	d5 83       	std	Z+5, r29	; 0x05
    1d56:	c4 83       	std	Z+4, r28	; 0x04
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(9, NULL, 2);
    1d58:	e0 91 48 03 	lds	r30, 0x0348
    1d5c:	f0 91 49 03 	lds	r31, 0x0349
    1d60:	05 80       	ldd	r0, Z+5	; 0x05
    1d62:	f6 81       	ldd	r31, Z+6	; 0x06
    1d64:	e0 2d       	mov	r30, r0
    1d66:	04 80       	ldd	r0, Z+4	; 0x04
    1d68:	f5 81       	ldd	r31, Z+5	; 0x05
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	05 81       	ldd	r16, Z+5	; 0x05
    1d6e:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1d70:	88 e0       	ldi	r24, 0x08	; 8
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1d78:	ec 01       	movw	r28, r24
	if(!_mnode)
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <createMenu+0x2a6>
    1d7e:	b3 c2       	rjmp	.+1382   	; 0x22e6 <createMenu+0x80c>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1d8c:	89 2b       	or	r24, r25
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <createMenu+0x2b8>
    1d90:	a1 c1       	rjmp	.+834    	; 0x20d4 <createMenu+0x5fa>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	8f 83       	std	Y+7, r24	; 0x07
	_mnode->m_content.title_id = title_id;
    1d96:	89 e0       	ldi	r24, 0x09	; 9
    1d98:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1d9a:	1a 82       	std	Y+2, r1	; 0x02
    1d9c:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[1] = createMenuNode(4, &showHighscore, 0);
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(9, NULL, 2);
    1d9e:	f8 01       	movw	r30, r16
    1da0:	d7 83       	std	Z+7, r29	; 0x07
    1da2:	c6 83       	std	Z+6, r28	; 0x06
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[0] = createMenuNode(10, NULL, 0);
    1da4:	e0 91 48 03 	lds	r30, 0x0348
    1da8:	f0 91 49 03 	lds	r31, 0x0349
    1dac:	05 80       	ldd	r0, Z+5	; 0x05
    1dae:	f6 81       	ldd	r31, Z+6	; 0x06
    1db0:	e0 2d       	mov	r30, r0
    1db2:	04 80       	ldd	r0, Z+4	; 0x04
    1db4:	f5 81       	ldd	r31, Z+5	; 0x05
    1db6:	e0 2d       	mov	r30, r0
    1db8:	05 80       	ldd	r0, Z+5	; 0x05
    1dba:	f6 81       	ldd	r31, Z+6	; 0x06
    1dbc:	e0 2d       	mov	r30, r0
    1dbe:	06 80       	ldd	r0, Z+6	; 0x06
    1dc0:	f7 81       	ldd	r31, Z+7	; 0x07
    1dc2:	e0 2d       	mov	r30, r0
    1dc4:	05 81       	ldd	r16, Z+5	; 0x05
    1dc6:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1dc8:	88 e0       	ldi	r24, 0x08	; 8
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1dd0:	ec 01       	movw	r28, r24
	if(!_mnode)
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <createMenu+0x2fe>
    1dd6:	25 c2       	rjmp	.+1098   	; 0x2222 <createMenu+0x748>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1de4:	89 2b       	or	r24, r25
    1de6:	09 f4       	brne	.+2      	; 0x1dea <createMenu+0x310>
    1de8:	83 c1       	rjmp	.+774    	; 0x20f0 <createMenu+0x616>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1dea:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1dec:	8a e0       	ldi	r24, 0x0A	; 10
    1dee:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1df0:	1a 82       	std	Y+2, r1	; 0x02
    1df2:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[2] = createMenuNode(5, NULL, 4);
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(9, NULL, 2);
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[0] = createMenuNode(10, NULL, 0);
    1df4:	f8 01       	movw	r30, r16
    1df6:	d1 83       	std	Z+1, r29	; 0x01
    1df8:	c0 83       	st	Z, r28
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[1] = createMenuNode(11, NULL, 0);
    1dfa:	e0 91 48 03 	lds	r30, 0x0348
    1dfe:	f0 91 49 03 	lds	r31, 0x0349
    1e02:	05 80       	ldd	r0, Z+5	; 0x05
    1e04:	f6 81       	ldd	r31, Z+6	; 0x06
    1e06:	e0 2d       	mov	r30, r0
    1e08:	04 80       	ldd	r0, Z+4	; 0x04
    1e0a:	f5 81       	ldd	r31, Z+5	; 0x05
    1e0c:	e0 2d       	mov	r30, r0
    1e0e:	05 80       	ldd	r0, Z+5	; 0x05
    1e10:	f6 81       	ldd	r31, Z+6	; 0x06
    1e12:	e0 2d       	mov	r30, r0
    1e14:	06 80       	ldd	r0, Z+6	; 0x06
    1e16:	f7 81       	ldd	r31, Z+7	; 0x07
    1e18:	e0 2d       	mov	r30, r0
    1e1a:	05 81       	ldd	r16, Z+5	; 0x05
    1e1c:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1e1e:	88 e0       	ldi	r24, 0x08	; 8
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1e26:	ec 01       	movw	r28, r24
	if(!_mnode)
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <createMenu+0x354>
    1e2c:	08 c2       	rjmp	.+1040   	; 0x223e <createMenu+0x764>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1e3a:	89 2b       	or	r24, r25
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <createMenu+0x366>
    1e3e:	66 c1       	rjmp	.+716    	; 0x210c <createMenu+0x632>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1e40:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1e42:	8b e0       	ldi	r24, 0x0B	; 11
    1e44:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1e46:	1a 82       	std	Y+2, r1	; 0x02
    1e48:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[2]->m_submenus[0] = createMenuNode(6, &storeHighscore, 0);
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(9, NULL, 2);
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[0] = createMenuNode(10, NULL, 0);
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[1] = createMenuNode(11, NULL, 0);
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	d3 83       	std	Z+3, r29	; 0x03
    1e4e:	c2 83       	std	Z+2, r28	; 0x02
	_menu->m_submenus[3] = createMenuNode(12, NULL, 4);
    1e50:	e0 91 48 03 	lds	r30, 0x0348
    1e54:	f0 91 49 03 	lds	r31, 0x0349
    1e58:	05 81       	ldd	r16, Z+5	; 0x05
    1e5a:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1e5c:	88 e0       	ldi	r24, 0x08	; 8
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1e64:	ec 01       	movw	r28, r24
	if(!_mnode)
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <createMenu+0x392>
    1e6a:	f7 c1       	rjmp	.+1006   	; 0x225a <createMenu+0x780>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1e78:	89 2b       	or	r24, r25
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <createMenu+0x3a4>
    1e7c:	55 c1       	rjmp	.+682    	; 0x2128 <createMenu+0x64e>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	8f 83       	std	Y+7, r24	; 0x07
	_mnode->m_content.title_id = title_id;
    1e82:	8c e0       	ldi	r24, 0x0C	; 12
    1e84:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1e86:	1a 82       	std	Y+2, r1	; 0x02
    1e88:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[2]->m_submenus[1] = createMenuNode(7, &resetHighscore, 0);
	_menu->m_submenus[2]->m_submenus[2] = createMenuNode(8, &calibrateJoystick, 0);
	_menu->m_submenus[2]->m_submenus[3] = createMenuNode(9, NULL, 2);
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[0] = createMenuNode(10, NULL, 0);
	_menu->m_submenus[2]->m_submenus[3]->m_submenus[1] = createMenuNode(11, NULL, 0);
	_menu->m_submenus[3] = createMenuNode(12, NULL, 4);
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	d7 83       	std	Z+7, r29	; 0x07
    1e8e:	c6 83       	std	Z+6, r28	; 0x06
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode("Harry Potter", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode("Tetris", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode("Cantina Band", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode("Pokemon", &play_song, 0);
	*/
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
    1e90:	e0 91 48 03 	lds	r30, 0x0348
    1e94:	f0 91 49 03 	lds	r31, 0x0349
    1e98:	05 80       	ldd	r0, Z+5	; 0x05
    1e9a:	f6 81       	ldd	r31, Z+6	; 0x06
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	06 80       	ldd	r0, Z+6	; 0x06
    1ea0:	f7 81       	ldd	r31, Z+7	; 0x07
    1ea2:	e0 2d       	mov	r30, r0
    1ea4:	05 81       	ldd	r16, Z+5	; 0x05
    1ea6:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1ea8:	88 e0       	ldi	r24, 0x08	; 8
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1eb0:	ec 01       	movw	r28, r24
	if(!_mnode)
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <createMenu+0x3de>
    1eb6:	df c1       	rjmp	.+958    	; 0x2276 <createMenu+0x79c>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1ec4:	89 2b       	or	r24, r25
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <createMenu+0x3f0>
    1ec8:	3d c1       	rjmp	.+634    	; 0x2144 <createMenu+0x66a>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1eca:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1ecc:	8d e0       	ldi	r24, 0x0D	; 13
    1ece:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode("Harry Potter", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode("Tetris", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode("Cantina Band", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode("Pokemon", &play_song, 0);
	*/
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	d1 83       	std	Z+1, r29	; 0x01
    1ed8:	c0 83       	st	Z, r28
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode(14, NULL, 0);
    1eda:	e0 91 48 03 	lds	r30, 0x0348
    1ede:	f0 91 49 03 	lds	r31, 0x0349
    1ee2:	05 80       	ldd	r0, Z+5	; 0x05
    1ee4:	f6 81       	ldd	r31, Z+6	; 0x06
    1ee6:	e0 2d       	mov	r30, r0
    1ee8:	06 80       	ldd	r0, Z+6	; 0x06
    1eea:	f7 81       	ldd	r31, Z+7	; 0x07
    1eec:	e0 2d       	mov	r30, r0
    1eee:	05 81       	ldd	r16, Z+5	; 0x05
    1ef0:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1ef2:	88 e0       	ldi	r24, 0x08	; 8
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1efa:	ec 01       	movw	r28, r24
	if(!_mnode)
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <createMenu+0x428>
    1f00:	59 c1       	rjmp	.+690    	; 0x21b4 <createMenu+0x6da>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1f0e:	89 2b       	or	r24, r25
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <createMenu+0x43a>
    1f12:	26 c1       	rjmp	.+588    	; 0x2160 <createMenu+0x686>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1f14:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1f16:	8e e0       	ldi	r24, 0x0E	; 14
    1f18:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1f1a:	1a 82       	std	Y+2, r1	; 0x02
    1f1c:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode("Tetris", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode("Cantina Band", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode("Pokemon", &play_song, 0);
	*/
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode(14, NULL, 0);
    1f1e:	f8 01       	movw	r30, r16
    1f20:	d3 83       	std	Z+3, r29	; 0x03
    1f22:	c2 83       	std	Z+2, r28	; 0x02
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode(15, NULL, 0);
    1f24:	e0 91 48 03 	lds	r30, 0x0348
    1f28:	f0 91 49 03 	lds	r31, 0x0349
    1f2c:	05 80       	ldd	r0, Z+5	; 0x05
    1f2e:	f6 81       	ldd	r31, Z+6	; 0x06
    1f30:	e0 2d       	mov	r30, r0
    1f32:	06 80       	ldd	r0, Z+6	; 0x06
    1f34:	f7 81       	ldd	r31, Z+7	; 0x07
    1f36:	e0 2d       	mov	r30, r0
    1f38:	05 81       	ldd	r16, Z+5	; 0x05
    1f3a:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1f3c:	88 e0       	ldi	r24, 0x08	; 8
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1f44:	ec 01       	movw	r28, r24
	if(!_mnode)
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <createMenu+0x472>
    1f4a:	42 c1       	rjmp	.+644    	; 0x21d0 <createMenu+0x6f6>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1f58:	89 2b       	or	r24, r25
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <createMenu+0x484>
    1f5c:	0f c1       	rjmp	.+542    	; 0x217c <createMenu+0x6a2>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1f5e:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1f60:	8f e0       	ldi	r24, 0x0F	; 15
    1f62:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1f64:	1a 82       	std	Y+2, r1	; 0x02
    1f66:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode("Cantina Band", &play_song, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode("Pokemon", &play_song, 0);
	*/
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode(14, NULL, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode(15, NULL, 0);
    1f68:	f8 01       	movw	r30, r16
    1f6a:	d5 83       	std	Z+5, r29	; 0x05
    1f6c:	c4 83       	std	Z+4, r28	; 0x04
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode(16, NULL, 0);
    1f6e:	e0 91 48 03 	lds	r30, 0x0348
    1f72:	f0 91 49 03 	lds	r31, 0x0349
    1f76:	05 80       	ldd	r0, Z+5	; 0x05
    1f78:	f6 81       	ldd	r31, Z+6	; 0x06
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	06 80       	ldd	r0, Z+6	; 0x06
    1f7e:	f7 81       	ldd	r31, Z+7	; 0x07
    1f80:	e0 2d       	mov	r30, r0
    1f82:	05 81       	ldd	r16, Z+5	; 0x05
    1f84:	16 81       	ldd	r17, Z+6	; 0x06

static MenuNode* _menu;

MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
    1f86:	88 e0       	ldi	r24, 0x08	; 8
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1f8e:	ec 01       	movw	r28, r24
	if(!_mnode)
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <createMenu+0x4bc>
    1f94:	2b c1       	rjmp	.+598    	; 0x21ec <createMenu+0x712>
	{
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
	if(!(_mnode->m_submenus))
    1fa2:	89 2b       	or	r24, r25
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <createMenu+0x4ce>
    1fa6:	f8 c0       	rjmp	.+496    	; 0x2198 <createMenu+0x6be>
	{
		printf("NO memory for submenu of menu %d\n", title_id);
	}
	_mnode->m_num_submenus = num_of_submenus;
    1fa8:	1f 82       	std	Y+7, r1	; 0x07
	_mnode->m_content.title_id = title_id;
    1faa:	80 e1       	ldi	r24, 0x10	; 16
    1fac:	88 83       	st	Y, r24
	_mnode->m_content.operation = operation;
    1fae:	1a 82       	std	Y+2, r1	; 0x02
    1fb0:	19 82       	std	Y+1, r1	; 0x01
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode("Pokemon", &play_song, 0);
	*/
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode(14, NULL, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode(15, NULL, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode(16, NULL, 0);
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	d7 83       	std	Z+7, r29	; 0x07
    1fb6:	c6 83       	std	Z+6, r28	; 0x06
	assignParents(_menu);
    1fb8:	80 91 48 03 	lds	r24, 0x0348
    1fbc:	90 91 49 03 	lds	r25, 0x0349
    1fc0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <assignParents>
	printf("PARENTS ASSIGNED\n");
    1fc4:	83 eb       	ldi	r24, 0xB3	; 179
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
}
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
	_menu->m_submenus[3]->m_submenus[0] = createMenuNode(13, NULL, 0);
	_menu->m_submenus[3]->m_submenus[1] = createMenuNode(14, NULL, 0);
	_menu->m_submenus[3]->m_submenus[2] = createMenuNode(15, NULL, 0);
	_menu->m_submenus[3]->m_submenus[3] = createMenuNode(16, NULL, 0);
	assignParents(_menu);
	printf("PARENTS ASSIGNED\n");
    1fd2:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <puts>
		printf("NO memory for menu %d\n", title_id);
	}
	_mnode->m_submenus = malloc(num_of_submenus*sizeof(MenuNode*));
	if(!(_mnode->m_submenus))
	{
		printf("NO memory for submenu of menu %d\n", title_id);
    1fd6:	1f 92       	push	r1
    1fd8:	1f 92       	push	r1
    1fda:	81 e9       	ldi	r24, 0x91	; 145
    1fdc:	92 e0       	ldi	r25, 0x02	; 2
    1fde:	9f 93       	push	r25
    1fe0:	8f 93       	push	r24
    1fe2:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    1fe6:	0d 81       	ldd	r16, Y+5	; 0x05
    1fe8:	1e 81       	ldd	r17, Y+6	; 0x06
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	8a cd       	rjmp	.-1260   	; 0x1b08 <createMenu+0x2e>
    1ff4:	1f 92       	push	r1
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	8f 93       	push	r24
    1ffa:	81 e9       	ldi	r24, 0x91	; 145
    1ffc:	92 e0       	ldi	r25, 0x02	; 2
    1ffe:	9f 93       	push	r25
    2000:	8f 93       	push	r24
    2002:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	96 cd       	rjmp	.-1236   	; 0x1b3c <createMenu+0x62>
    2010:	1f 92       	push	r1
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	8f 93       	push	r24
    2016:	81 e9       	ldi	r24, 0x91	; 145
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	9f 93       	push	r25
    201c:	8f 93       	push	r24
    201e:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	af cd       	rjmp	.-1186   	; 0x1b8a <createMenu+0xb0>
    202c:	1f 92       	push	r1
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	8f 93       	push	r24
    2032:	81 e9       	ldi	r24, 0x91	; 145
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	c8 cd       	rjmp	.-1136   	; 0x1bd8 <createMenu+0xfe>
    2048:	1f 92       	push	r1
    204a:	84 e0       	ldi	r24, 0x04	; 4
    204c:	8f 93       	push	r24
    204e:	81 e9       	ldi	r24, 0x91	; 145
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	9f 93       	push	r25
    2054:	8f 93       	push	r24
    2056:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	db cd       	rjmp	.-1098   	; 0x1c1a <createMenu+0x140>
    2064:	1f 92       	push	r1
    2066:	85 e0       	ldi	r24, 0x05	; 5
    2068:	8f 93       	push	r24
    206a:	81 e9       	ldi	r24, 0x91	; 145
    206c:	92 e0       	ldi	r25, 0x02	; 2
    206e:	9f 93       	push	r25
    2070:	8f 93       	push	r24
    2072:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	ee cd       	rjmp	.-1060   	; 0x1c5c <createMenu+0x182>
    2080:	1f 92       	push	r1
    2082:	86 e0       	ldi	r24, 0x06	; 6
    2084:	8f 93       	push	r24
    2086:	81 e9       	ldi	r24, 0x91	; 145
    2088:	92 e0       	ldi	r25, 0x02	; 2
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	06 ce       	rjmp	.-1012   	; 0x1ca8 <createMenu+0x1ce>
    209c:	1f 92       	push	r1
    209e:	87 e0       	ldi	r24, 0x07	; 7
    20a0:	8f 93       	push	r24
    20a2:	81 e9       	ldi	r24, 0x91	; 145
    20a4:	92 e0       	ldi	r25, 0x02	; 2
    20a6:	9f 93       	push	r25
    20a8:	8f 93       	push	r24
    20aa:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	1f ce       	rjmp	.-962    	; 0x1cf6 <createMenu+0x21c>
    20b8:	1f 92       	push	r1
    20ba:	88 e0       	ldi	r24, 0x08	; 8
    20bc:	8f 93       	push	r24
    20be:	81 e9       	ldi	r24, 0x91	; 145
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	9f 93       	push	r25
    20c4:	8f 93       	push	r24
    20c6:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	38 ce       	rjmp	.-912    	; 0x1d44 <createMenu+0x26a>
    20d4:	1f 92       	push	r1
    20d6:	89 e0       	ldi	r24, 0x09	; 9
    20d8:	8f 93       	push	r24
    20da:	81 e9       	ldi	r24, 0x91	; 145
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	9f 93       	push	r25
    20e0:	8f 93       	push	r24
    20e2:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	51 ce       	rjmp	.-862    	; 0x1d92 <createMenu+0x2b8>
    20f0:	1f 92       	push	r1
    20f2:	8a e0       	ldi	r24, 0x0A	; 10
    20f4:	8f 93       	push	r24
    20f6:	81 e9       	ldi	r24, 0x91	; 145
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	9f 93       	push	r25
    20fc:	8f 93       	push	r24
    20fe:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	6f ce       	rjmp	.-802    	; 0x1dea <createMenu+0x310>
    210c:	1f 92       	push	r1
    210e:	8b e0       	ldi	r24, 0x0B	; 11
    2110:	8f 93       	push	r24
    2112:	81 e9       	ldi	r24, 0x91	; 145
    2114:	92 e0       	ldi	r25, 0x02	; 2
    2116:	9f 93       	push	r25
    2118:	8f 93       	push	r24
    211a:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	8c ce       	rjmp	.-744    	; 0x1e40 <createMenu+0x366>
    2128:	1f 92       	push	r1
    212a:	8c e0       	ldi	r24, 0x0C	; 12
    212c:	8f 93       	push	r24
    212e:	81 e9       	ldi	r24, 0x91	; 145
    2130:	92 e0       	ldi	r25, 0x02	; 2
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	9d ce       	rjmp	.-710    	; 0x1e7e <createMenu+0x3a4>
    2144:	1f 92       	push	r1
    2146:	8d e0       	ldi	r24, 0x0D	; 13
    2148:	8f 93       	push	r24
    214a:	81 e9       	ldi	r24, 0x91	; 145
    214c:	92 e0       	ldi	r25, 0x02	; 2
    214e:	9f 93       	push	r25
    2150:	8f 93       	push	r24
    2152:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	b5 ce       	rjmp	.-662    	; 0x1eca <createMenu+0x3f0>
    2160:	1f 92       	push	r1
    2162:	8e e0       	ldi	r24, 0x0E	; 14
    2164:	8f 93       	push	r24
    2166:	81 e9       	ldi	r24, 0x91	; 145
    2168:	92 e0       	ldi	r25, 0x02	; 2
    216a:	9f 93       	push	r25
    216c:	8f 93       	push	r24
    216e:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cc ce       	rjmp	.-616    	; 0x1f14 <createMenu+0x43a>
    217c:	1f 92       	push	r1
    217e:	8f e0       	ldi	r24, 0x0F	; 15
    2180:	8f 93       	push	r24
    2182:	81 e9       	ldi	r24, 0x91	; 145
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	e3 ce       	rjmp	.-570    	; 0x1f5e <createMenu+0x484>
    2198:	1f 92       	push	r1
    219a:	80 e1       	ldi	r24, 0x10	; 16
    219c:	8f 93       	push	r24
    219e:	81 e9       	ldi	r24, 0x91	; 145
    21a0:	92 e0       	ldi	r25, 0x02	; 2
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	fa ce       	rjmp	.-524    	; 0x1fa8 <createMenu+0x4ce>
MenuNode* createMenuNode(uint8_t title_id, void (*operation)(void), uint8_t num_of_submenus)
{
	MenuNode* _mnode = malloc(sizeof(MenuNode));
	if(!_mnode)
	{
		printf("NO memory for menu %d\n", title_id);
    21b4:	1f 92       	push	r1
    21b6:	8e e0       	ldi	r24, 0x0E	; 14
    21b8:	8f 93       	push	r24
    21ba:	8a e7       	ldi	r24, 0x7A	; 122
    21bc:	92 e0       	ldi	r25, 0x02	; 2
    21be:	9f 93       	push	r25
    21c0:	8f 93       	push	r24
    21c2:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	99 ce       	rjmp	.-718    	; 0x1f02 <createMenu+0x428>
    21d0:	1f 92       	push	r1
    21d2:	8f e0       	ldi	r24, 0x0F	; 15
    21d4:	8f 93       	push	r24
    21d6:	8a e7       	ldi	r24, 0x7A	; 122
    21d8:	92 e0       	ldi	r25, 0x02	; 2
    21da:	9f 93       	push	r25
    21dc:	8f 93       	push	r24
    21de:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	b0 ce       	rjmp	.-672    	; 0x1f4c <createMenu+0x472>
    21ec:	1f 92       	push	r1
    21ee:	80 e1       	ldi	r24, 0x10	; 16
    21f0:	8f 93       	push	r24
    21f2:	8a e7       	ldi	r24, 0x7A	; 122
    21f4:	92 e0       	ldi	r25, 0x02	; 2
    21f6:	9f 93       	push	r25
    21f8:	8f 93       	push	r24
    21fa:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	c7 ce       	rjmp	.-626    	; 0x1f96 <createMenu+0x4bc>
    2208:	1f 92       	push	r1
    220a:	1f 92       	push	r1
    220c:	8a e7       	ldi	r24, 0x7A	; 122
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	9f 93       	push	r25
    2212:	8f 93       	push	r24
    2214:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	69 cc       	rjmp	.-1838   	; 0x1af4 <createMenu+0x1a>
    2222:	1f 92       	push	r1
    2224:	8a e0       	ldi	r24, 0x0A	; 10
    2226:	8f 93       	push	r24
    2228:	8a e7       	ldi	r24, 0x7A	; 122
    222a:	92 e0       	ldi	r25, 0x02	; 2
    222c:	9f 93       	push	r25
    222e:	8f 93       	push	r24
    2230:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cd cd       	rjmp	.-1126   	; 0x1dd8 <createMenu+0x2fe>
    223e:	1f 92       	push	r1
    2240:	8b e0       	ldi	r24, 0x0B	; 11
    2242:	8f 93       	push	r24
    2244:	8a e7       	ldi	r24, 0x7A	; 122
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	9f 93       	push	r25
    224a:	8f 93       	push	r24
    224c:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	ea cd       	rjmp	.-1068   	; 0x1e2e <createMenu+0x354>
    225a:	1f 92       	push	r1
    225c:	8c e0       	ldi	r24, 0x0C	; 12
    225e:	8f 93       	push	r24
    2260:	8a e7       	ldi	r24, 0x7A	; 122
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	9f 93       	push	r25
    2266:	8f 93       	push	r24
    2268:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	fb cd       	rjmp	.-1034   	; 0x1e6c <createMenu+0x392>
    2276:	1f 92       	push	r1
    2278:	8d e0       	ldi	r24, 0x0D	; 13
    227a:	8f 93       	push	r24
    227c:	8a e7       	ldi	r24, 0x7A	; 122
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	9f 93       	push	r25
    2282:	8f 93       	push	r24
    2284:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	13 ce       	rjmp	.-986    	; 0x1eb8 <createMenu+0x3de>
    2292:	1f 92       	push	r1
    2294:	86 e0       	ldi	r24, 0x06	; 6
    2296:	8f 93       	push	r24
    2298:	8a e7       	ldi	r24, 0x7A	; 122
    229a:	92 e0       	ldi	r25, 0x02	; 2
    229c:	9f 93       	push	r25
    229e:	8f 93       	push	r24
    22a0:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	f4 cc       	rjmp	.-1560   	; 0x1c96 <createMenu+0x1bc>
    22ae:	1f 92       	push	r1
    22b0:	87 e0       	ldi	r24, 0x07	; 7
    22b2:	8f 93       	push	r24
    22b4:	8a e7       	ldi	r24, 0x7A	; 122
    22b6:	92 e0       	ldi	r25, 0x02	; 2
    22b8:	9f 93       	push	r25
    22ba:	8f 93       	push	r24
    22bc:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0d cd       	rjmp	.-1510   	; 0x1ce4 <createMenu+0x20a>
    22ca:	1f 92       	push	r1
    22cc:	88 e0       	ldi	r24, 0x08	; 8
    22ce:	8f 93       	push	r24
    22d0:	8a e7       	ldi	r24, 0x7A	; 122
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	9f 93       	push	r25
    22d6:	8f 93       	push	r24
    22d8:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	26 cd       	rjmp	.-1460   	; 0x1d32 <createMenu+0x258>
    22e6:	1f 92       	push	r1
    22e8:	89 e0       	ldi	r24, 0x09	; 9
    22ea:	8f 93       	push	r24
    22ec:	8a e7       	ldi	r24, 0x7A	; 122
    22ee:	92 e0       	ldi	r25, 0x02	; 2
    22f0:	9f 93       	push	r25
    22f2:	8f 93       	push	r24
    22f4:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	3f cd       	rjmp	.-1410   	; 0x1d80 <createMenu+0x2a6>
    2302:	1f 92       	push	r1
    2304:	ff 92       	push	r15
    2306:	8a e7       	ldi	r24, 0x7A	; 122
    2308:	92 e0       	ldi	r25, 0x02	; 2
    230a:	9f 93       	push	r25
    230c:	8f 93       	push	r24
    230e:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	2e cc       	rjmp	.-1956   	; 0x1b78 <createMenu+0x9e>
    231c:	1f 92       	push	r1
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	8f 93       	push	r24
    2322:	8a e7       	ldi	r24, 0x7A	; 122
    2324:	92 e0       	ldi	r25, 0x02	; 2
    2326:	9f 93       	push	r25
    2328:	8f 93       	push	r24
    232a:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	47 cc       	rjmp	.-1906   	; 0x1bc6 <createMenu+0xec>
    2338:	1f 92       	push	r1
    233a:	84 e0       	ldi	r24, 0x04	; 4
    233c:	8f 93       	push	r24
    233e:	8a e7       	ldi	r24, 0x7A	; 122
    2340:	92 e0       	ldi	r25, 0x02	; 2
    2342:	9f 93       	push	r25
    2344:	8f 93       	push	r24
    2346:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	5a cc       	rjmp	.-1868   	; 0x1c08 <createMenu+0x12e>
    2354:	1f 92       	push	r1
    2356:	85 e0       	ldi	r24, 0x05	; 5
    2358:	8f 93       	push	r24
    235a:	8a e7       	ldi	r24, 0x7A	; 122
    235c:	92 e0       	ldi	r25, 0x02	; 2
    235e:	9f 93       	push	r25
    2360:	8f 93       	push	r24
    2362:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	6d cc       	rjmp	.-1830   	; 0x1c4a <createMenu+0x170>
    2370:	1f 92       	push	r1
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	8f 93       	push	r24
    2376:	8a e7       	ldi	r24, 0x7A	; 122
    2378:	92 e0       	ldi	r25, 0x02	; 2
    237a:	9f 93       	push	r25
    237c:	8f 93       	push	r24
    237e:	0e 94 a5 1b 	call	0x374a	; 0x374a <printf>
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf cb       	rjmp	.-2146   	; 0x1b2a <createMenu+0x50>

0000238c <getMenuRoot>:
		printf("NULL node\n");
}

MenuNode* getMenuRoot(void)
{
	if(_menu == NULL)
    238c:	20 91 48 03 	lds	r18, 0x0348
    2390:	30 91 49 03 	lds	r19, 0x0349
    2394:	21 15       	cp	r18, r1
    2396:	31 05       	cpc	r19, r1
    2398:	11 f0       	breq	.+4      	; 0x239e <getMenuRoot+0x12>
    239a:	c9 01       	movw	r24, r18
	{
		createMenu();
	}
	return _menu;
}
    239c:	08 95       	ret

MenuNode* getMenuRoot(void)
{
	if(_menu == NULL)
	{
		createMenu();
    239e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <createMenu>
    23a2:	80 91 48 03 	lds	r24, 0x0348
    23a6:	90 91 49 03 	lds	r25, 0x0349
    23aa:	08 95       	ret

000023ac <getNextEntry>:
	assignParents(_menu);
	printf("PARENTS ASSIGNED\n");
}

MenuNode* getNextEntry(MenuNode* node)
{
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	dc 01       	movw	r26, r24
	if(node->m_parent)
    23b2:	13 96       	adiw	r26, 0x03	; 3
    23b4:	ed 91       	ld	r30, X+
    23b6:	fc 91       	ld	r31, X
    23b8:	14 97       	sbiw	r26, 0x04	; 4
    23ba:	30 97       	sbiw	r30, 0x00	; 0
    23bc:	01 f1       	breq	.+64     	; 0x23fe <getNextEntry+0x52>
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
    23be:	67 81       	ldd	r22, Z+7	; 0x07
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	61 50       	subi	r22, 0x01	; 1
    23c4:	71 09       	sbc	r23, r1
    23c6:	16 16       	cp	r1, r22
    23c8:	17 06       	cpc	r1, r23
    23ca:	cc f4       	brge	.+50     	; 0x23fe <getNextEntry+0x52>
			if(node->m_parent->m_submenus[i] == node)
    23cc:	c5 81       	ldd	r28, Z+5	; 0x05
    23ce:	d6 81       	ldd	r29, Z+6	; 0x06
    23d0:	88 81       	ld	r24, Y
    23d2:	99 81       	ldd	r25, Y+1	; 0x01
    23d4:	8a 17       	cp	r24, r26
    23d6:	9b 07       	cpc	r25, r27
    23d8:	09 f1       	breq	.+66     	; 0x241c <getNextEntry+0x70>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	0a c0       	rjmp	.+20     	; 0x23f2 <getNextEntry+0x46>
    23de:	f9 01       	movw	r30, r18
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ec 0f       	add	r30, r28
    23e6:	fd 1f       	adc	r31, r29
    23e8:	40 81       	ld	r20, Z
    23ea:	51 81       	ldd	r21, Z+1	; 0x01
    23ec:	4a 17       	cp	r20, r26
    23ee:	5b 07       	cpc	r21, r27
    23f0:	51 f0       	breq	.+20     	; 0x2406 <getNextEntry+0x5a>
}

MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	26 17       	cp	r18, r22
    23fa:	37 07       	cpc	r19, r23
    23fc:	84 f3       	brlt	.-32     	; 0x23de <getNextEntry+0x32>
    23fe:	cd 01       	movw	r24, r26
			if(node->m_parent->m_submenus[i] == node)
	  		return node->m_parent->m_submenus[i+1];
	return node;
}
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret
    2406:	2f 5f       	subi	r18, 0xFF	; 255
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
			if(node->m_parent->m_submenus[i] == node)
	  		return node->m_parent->m_submenus[i+1];
    240e:	c2 0f       	add	r28, r18
    2410:	d3 1f       	adc	r29, r19
    2412:	88 81       	ld	r24, Y
    2414:	99 81       	ldd	r25, Y+1	; 0x01
	return node;
}
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	08 95       	ret

MenuNode* getNextEntry(MenuNode* node)
{
	if(node->m_parent)
    for(uint8_t i = 0; i < node->m_parent->m_num_submenus-1; i++)
			if(node->m_parent->m_submenus[i] == node)
    241c:	22 e0       	ldi	r18, 0x02	; 2
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	f6 cf       	rjmp	.-20     	; 0x240e <getNextEntry+0x62>

00002422 <getPreviousEntry>:
	  		return node->m_parent->m_submenus[i+1];
	return node;
}

MenuNode* getPreviousEntry(MenuNode* node)
{
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	dc 01       	movw	r26, r24
	if(node->m_parent)
    242a:	13 96       	adiw	r26, 0x03	; 3
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	14 97       	sbiw	r26, 0x04	; 4
    2432:	30 97       	sbiw	r30, 0x00	; 0
    2434:	d1 f0       	breq	.+52     	; 0x246a <getPreviousEntry+0x48>
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
    2436:	17 81       	ldd	r17, Z+7	; 0x07
    2438:	12 30       	cpi	r17, 0x02	; 2
    243a:	b8 f0       	brcs	.+46     	; 0x246a <getPreviousEntry+0x48>
			if(node->m_parent->m_submenus[i] == node)
    243c:	c5 81       	ldd	r28, Z+5	; 0x05
    243e:	d6 81       	ldd	r29, Z+6	; 0x06
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	8a 17       	cp	r24, r26
    2446:	9b 07       	cpc	r25, r27
    2448:	09 f1       	breq	.+66     	; 0x248c <getPreviousEntry+0x6a>
    244a:	fe 01       	movw	r30, r28
    244c:	34 96       	adiw	r30, 0x04	; 4
    244e:	22 e0       	ldi	r18, 0x02	; 2
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	09 c0       	rjmp	.+18     	; 0x2466 <getPreviousEntry+0x44>
    2454:	41 91       	ld	r20, Z+
    2456:	51 91       	ld	r21, Z+
    2458:	b9 01       	movw	r22, r18
    245a:	6f 5f       	subi	r22, 0xFF	; 255
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	4a 17       	cp	r20, r26
    2460:	5b 07       	cpc	r21, r27
    2462:	41 f0       	breq	.+16     	; 0x2474 <getPreviousEntry+0x52>
    2464:	9b 01       	movw	r18, r22
}

MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
    2466:	21 17       	cp	r18, r17
    2468:	a8 f3       	brcs	.-22     	; 0x2454 <getPreviousEntry+0x32>
    246a:	cd 01       	movw	r24, r26
			if(node->m_parent->m_submenus[i] == node)
				return node->m_parent->m_submenus[i-1];
	return node;
}
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	08 95       	ret
    2474:	21 50       	subi	r18, 0x01	; 1
    2476:	30 48       	sbci	r19, 0x80	; 128
    2478:	22 0f       	add	r18, r18
    247a:	33 1f       	adc	r19, r19
MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
			if(node->m_parent->m_submenus[i] == node)
				return node->m_parent->m_submenus[i-1];
    247c:	c2 0f       	add	r28, r18
    247e:	d3 1f       	adc	r29, r19
    2480:	88 81       	ld	r24, Y
    2482:	99 81       	ldd	r25, Y+1	; 0x01
	return node;
}
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	08 95       	ret

MenuNode* getPreviousEntry(MenuNode* node)
{
	if(node->m_parent)
		for(uint8_t i = 1; i < node->m_parent->m_num_submenus; i++)
			if(node->m_parent->m_submenus[i] == node)
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	f5 cf       	rjmp	.-22     	; 0x247c <getPreviousEntry+0x5a>

00002492 <menuLevelDown>:
				return node->m_parent->m_submenus[i-1];
	return node;
}

MenuNode* menuLevelDown(MenuNode* const node, uint8_t index_of_submenu)
{
    2492:	fc 01       	movw	r30, r24
	if(0 <= index_of_submenu && index_of_submenu <= node->m_num_submenus)
    2494:	87 81       	ldd	r24, Z+7	; 0x07
    2496:	86 17       	cp	r24, r22
    2498:	58 f0       	brcs	.+22     	; 0x24b0 <menuLevelDown+0x1e>
		return node->m_submenus[index_of_submenu];
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	66 0f       	add	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	05 80       	ldd	r0, Z+5	; 0x05
    24a2:	f6 81       	ldd	r31, Z+6	; 0x06
    24a4:	e0 2d       	mov	r30, r0
    24a6:	e6 0f       	add	r30, r22
    24a8:	f7 1f       	adc	r31, r23
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	08 95       	ret
	return node;
    24b0:	cf 01       	movw	r24, r30
}
    24b2:	08 95       	ret

000024b4 <menuLevelUp>:

MenuNode* menuLevelUp(MenuNode* const node)
{
    24b4:	fc 01       	movw	r30, r24
	if(node->m_parent)
    24b6:	83 81       	ldd	r24, Z+3	; 0x03
    24b8:	94 81       	ldd	r25, Z+4	; 0x04
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <menuLevelUp+0xc>
		return node->m_parent;
	return node;
}
    24be:	08 95       	ret

MenuNode* menuLevelUp(MenuNode* const node)
{
	if(node->m_parent)
		return node->m_parent;
	return node;
    24c0:	cf 01       	movw	r24, r30
}
    24c2:	08 95       	ret

000024c4 <main_init>:

uint8_t highscore[7] = { 0, 0, 0, 0, 0, 0, 0 };

void main_init(void)
{
	uart_init();
    24c4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <uart_init>
	sram_init();
    24c8:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <sram_init>
	adc_init();
    24cc:	0e 94 c4 02 	call	0x588	; 0x588 <adc_init>
	USB_init();
    24d0:	0e 94 c1 13 	call	0x2782	; 0x2782 <USB_init>
	can_init();
    24d4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <can_init>
	sei();
    24d8:	78 94       	sei
	oled_init();
    24da:	0e 94 be 14 	call	0x297c	; 0x297c <oled_init>
	menu_main = getMenuRoot();
    24de:	0e 94 c6 11 	call	0x238c	; 0x238c <getMenuRoot>
    24e2:	90 93 96 03 	sts	0x0396, r25
    24e6:	80 93 95 03 	sts	0x0395, r24
	printf("INIT DONE\n");
    24ea:	84 ec       	ldi	r24, 0xC4	; 196
    24ec:	92 e0       	ldi	r25, 0x02	; 2
    24ee:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <puts>

000024f2 <main>:
}

int main(void)
{
	main_init();
    24f2:	0e 94 62 12 	call	0x24c4	; 0x24c4 <main_init>
	
	//say hello to the guy in front of the display
	sayHello();
    24f6:	0e 94 72 18 	call	0x30e4	; 0x30e4 <sayHello>
    24fa:	39 c0       	rjmp	.+114    	; 0x256e <main+0x7c>
		joy_pos = JOY_getPosition();
		//printf("joy pos: %d, %d, %d \n", joy_pos.dir, joy_pos.x, joy_pos.y);
		
		_delay_ms(10);

		switch(joy_pos.dir)
    24fc:	83 30       	cpi	r24, 0x03	; 3
    24fe:	09 f4       	brne	.+2      	; 0x2502 <main+0x10>
    2500:	99 c0       	rjmp	.+306    	; 0x2634 <main+0x142>
    2502:	84 30       	cpi	r24, 0x04	; 4
    2504:	09 f0       	breq	.+2      	; 0x2508 <main+0x16>
    2506:	75 c0       	rjmp	.+234    	; 0x25f2 <main+0x100>
				}
				break;
			}
			case DOWN:
			{
				current_selection = current_selection == menu_main->m_num_submenus-1 ? 0 : current_selection+1;
    2508:	40 91 4a 03 	lds	r20, 0x034A
    250c:	e0 91 95 03 	lds	r30, 0x0395
    2510:	f0 91 96 03 	lds	r31, 0x0396
    2514:	24 2f       	mov	r18, r20
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	87 81       	ldd	r24, Z+7	; 0x07
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	28 17       	cp	r18, r24
    2520:	39 07       	cpc	r19, r25
    2522:	09 f4       	brne	.+2      	; 0x2526 <main+0x34>
    2524:	ac c0       	rjmp	.+344    	; 0x267e <main+0x18c>
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	24 0f       	add	r18, r20
    252a:	82 2f       	mov	r24, r18
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	20 93 4a 03 	sts	0x034A, r18
				getNextEntry(menu_main->m_submenus[current_selection]);
    2536:	05 80       	ldd	r0, Z+5	; 0x05
    2538:	f6 81       	ldd	r31, Z+6	; 0x06
    253a:	e0 2d       	mov	r30, r0
    253c:	e8 0f       	add	r30, r24
    253e:	f9 1f       	adc	r31, r25
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	0e 94 d6 11 	call	0x23ac	; 0x23ac <getNextEntry>
    2548:	80 91 95 03 	lds	r24, 0x0395
    254c:	90 91 96 03 	lds	r25, 0x0396
			}
			default:
				break;
		}

		printMenu(menu_main);
    2550:	0e 94 f5 16 	call	0x2dea	; 0x2dea <printMenu>
		print_selection(current_selection);
    2554:	80 91 4a 03 	lds	r24, 0x034A
    2558:	0e 94 65 16 	call	0x2cca	; 0x2cca <print_selection>
    255c:	bf ef       	ldi	r27, 0xFF	; 255
    255e:	ef e7       	ldi	r30, 0x7F	; 127
    2560:	f4 e0       	ldi	r31, 0x04	; 4
    2562:	b1 50       	subi	r27, 0x01	; 1
    2564:	e0 40       	sbci	r30, 0x00	; 0
    2566:	f0 40       	sbci	r31, 0x00	; 0
    2568:	e1 f7       	brne	.-8      	; 0x2562 <main+0x70>
    256a:	00 c0       	rjmp	.+0      	; 0x256c <main+0x7a>
    256c:	00 00       	nop
	

	while(1)
	{

		joy_pos = JOY_getPosition();
    256e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <JOY_getPosition>
    2572:	60 93 92 03 	sts	0x0392, r22
    2576:	70 93 93 03 	sts	0x0393, r23
    257a:	80 93 94 03 	sts	0x0394, r24
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	9f e2       	ldi	r25, 0x2F	; 47
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <main+0x90>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <main+0x96>
    2588:	00 00       	nop
		//printf("joy pos: %d, %d, %d \n", joy_pos.dir, joy_pos.x, joy_pos.y);
		
		_delay_ms(10);

		switch(joy_pos.dir)
    258a:	80 91 94 03 	lds	r24, 0x0394
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	a9 f1       	breq	.+106    	; 0x25fc <main+0x10a>
    2592:	08 f0       	brcs	.+2      	; 0x2596 <main+0xa4>
    2594:	b3 cf       	rjmp	.-154    	; 0x24fc <main+0xa>
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	61 f5       	brne	.+88     	; 0x25f2 <main+0x100>
				getNextEntry(menu_main->m_submenus[current_selection]);
				break;
			}
			case LEFT:
			{
				if(menu_main->m_parent)
    259a:	e0 91 95 03 	lds	r30, 0x0395
    259e:	f0 91 96 03 	lds	r31, 0x0396
    25a2:	83 81       	ldd	r24, Z+3	; 0x03
    25a4:	94 81       	ldd	r25, Z+4	; 0x04
    25a6:	89 2b       	or	r24, r25
    25a8:	09 f4       	brne	.+2      	; 0x25ac <main+0xba>
    25aa:	67 c0       	rjmp	.+206    	; 0x267a <main+0x188>
				{
					menu_main = menuLevelUp(menu_main);
    25ac:	cf 01       	movw	r24, r30
    25ae:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <menuLevelUp>
    25b2:	80 93 95 03 	sts	0x0395, r24
    25b6:	90 93 96 03 	sts	0x0396, r25
					current_selection = 0;
    25ba:	10 92 4a 03 	sts	0x034A, r1
    25be:	c8 cf       	rjmp	.-112    	; 0x2550 <main+0x5e>
					menu_main = menuLevelDown(menu_main, current_selection);
					current_selection = 0;
				}
				else
				{
					if(menuLevelDown(menu_main, current_selection)->m_content.operation)
    25c0:	80 91 95 03 	lds	r24, 0x0395
    25c4:	90 91 96 03 	lds	r25, 0x0396
    25c8:	0e 94 49 12 	call	0x2492	; 0x2492 <menuLevelDown>
    25cc:	fc 01       	movw	r30, r24
    25ce:	81 81       	ldd	r24, Z+1	; 0x01
    25d0:	92 81       	ldd	r25, Z+2	; 0x02
    25d2:	89 2b       	or	r24, r25
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <main+0x100>
						menuLevelDown(menu_main, current_selection)->m_content.operation();
    25d6:	60 91 4a 03 	lds	r22, 0x034A
    25da:	80 91 95 03 	lds	r24, 0x0395
    25de:	90 91 96 03 	lds	r25, 0x0396
    25e2:	0e 94 49 12 	call	0x2492	; 0x2492 <menuLevelDown>
    25e6:	dc 01       	movw	r26, r24
    25e8:	11 96       	adiw	r26, 0x01	; 1
    25ea:	ed 91       	ld	r30, X+
    25ec:	fc 91       	ld	r31, X
    25ee:	12 97       	sbiw	r26, 0x02	; 2
    25f0:	09 95       	icall
    25f2:	80 91 95 03 	lds	r24, 0x0395
    25f6:	90 91 96 03 	lds	r25, 0x0396
    25fa:	aa cf       	rjmp	.-172    	; 0x2550 <main+0x5e>
				getPreviousEntry(menu_main->m_submenus[current_selection]);
				break;
			}
			case RIGHT:
			{
				if(menuLevelDown(menu_main, current_selection)->m_num_submenus > 0)
    25fc:	60 91 4a 03 	lds	r22, 0x034A
    2600:	80 91 95 03 	lds	r24, 0x0395
    2604:	90 91 96 03 	lds	r25, 0x0396
    2608:	0e 94 49 12 	call	0x2492	; 0x2492 <menuLevelDown>
    260c:	dc 01       	movw	r26, r24
    260e:	17 96       	adiw	r26, 0x07	; 7
    2610:	8c 91       	ld	r24, X
				{
					menu_main = menuLevelDown(menu_main, current_selection);
    2612:	60 91 4a 03 	lds	r22, 0x034A
				getPreviousEntry(menu_main->m_submenus[current_selection]);
				break;
			}
			case RIGHT:
			{
				if(menuLevelDown(menu_main, current_selection)->m_num_submenus > 0)
    2616:	88 23       	and	r24, r24
    2618:	99 f2       	breq	.-90     	; 0x25c0 <main+0xce>
				{
					menu_main = menuLevelDown(menu_main, current_selection);
    261a:	80 91 95 03 	lds	r24, 0x0395
    261e:	90 91 96 03 	lds	r25, 0x0396
    2622:	0e 94 49 12 	call	0x2492	; 0x2492 <menuLevelDown>
    2626:	80 93 95 03 	sts	0x0395, r24
    262a:	90 93 96 03 	sts	0x0396, r25
					current_selection = 0;
    262e:	10 92 4a 03 	sts	0x034A, r1
    2632:	8e cf       	rjmp	.-228    	; 0x2550 <main+0x5e>

		switch(joy_pos.dir)
		{
			case UP:
			{
				current_selection = current_selection == 0 ? menu_main->m_num_submenus-1 : current_selection-1;
    2634:	80 91 4a 03 	lds	r24, 0x034A
    2638:	81 11       	cpse	r24, r1
    263a:	19 c0       	rjmp	.+50     	; 0x266e <main+0x17c>
    263c:	e0 91 95 03 	lds	r30, 0x0395
    2640:	f0 91 96 03 	lds	r31, 0x0396
    2644:	87 81       	ldd	r24, Z+7	; 0x07
    2646:	81 50       	subi	r24, 0x01	; 1
    2648:	80 93 4a 03 	sts	0x034A, r24
				getPreviousEntry(menu_main->m_submenus[current_selection]);
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	05 80       	ldd	r0, Z+5	; 0x05
    2654:	f6 81       	ldd	r31, Z+6	; 0x06
    2656:	e0 2d       	mov	r30, r0
    2658:	e8 0f       	add	r30, r24
    265a:	f9 1f       	adc	r31, r25
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	0e 94 11 12 	call	0x2422	; 0x2422 <getPreviousEntry>
    2664:	80 91 95 03 	lds	r24, 0x0395
    2668:	90 91 96 03 	lds	r25, 0x0396
				break;
    266c:	71 cf       	rjmp	.-286    	; 0x2550 <main+0x5e>

		switch(joy_pos.dir)
		{
			case UP:
			{
				current_selection = current_selection == 0 ? menu_main->m_num_submenus-1 : current_selection-1;
    266e:	81 50       	subi	r24, 0x01	; 1
    2670:	e0 91 95 03 	lds	r30, 0x0395
    2674:	f0 91 96 03 	lds	r31, 0x0396
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <main+0x156>
    267a:	cf 01       	movw	r24, r30
    267c:	69 cf       	rjmp	.-302    	; 0x2550 <main+0x5e>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
				}
				break;
			}
			case DOWN:
			{
				current_selection = current_selection == menu_main->m_num_submenus-1 ? 0 : current_selection+1;
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	56 cf       	rjmp	.-340    	; 0x2532 <main+0x40>

00002686 <showHighscore>:
{
	send_song_CAN(TETRIS);
}*/

void showHighscore(void)
{
    2686:	08 95       	ret

00002688 <resetHighscore>:
	}
	print_buffer();*/
}

void resetHighscore(void)
{
    2688:	08 95       	ret

0000268a <storeHighscore>:
	/*for(int i = 0; i < 8; i++)
		highscore[i] = 0;*/
}

void storeHighscore(void)
{
    268a:	08 95       	ret

0000268c <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
    268c:	1f 92       	push	r1
    268e:	0f 92       	push	r0
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	0f 92       	push	r0
    2694:	11 24       	eor	r1, r1
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	2f 93       	push	r18
    26a6:	3f 93       	push	r19
    26a8:	4f 93       	push	r20
    26aa:	5f 93       	push	r21
    26ac:	6f 93       	push	r22
    26ae:	7f 93       	push	r23
    26b0:	8f 93       	push	r24
    26b2:	9f 93       	push	r25
    26b4:	af 93       	push	r26
    26b6:	bf 93       	push	r27
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	2b 97       	sbiw	r28, 0x0b	; 11
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	cd bf       	out	0x3d, r28	; 61
	//clear interrupt bits for rx buffer 0
	mcp_write(MCP_CANINTF, MCP_RX0IF & 0x00);
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	8c e2       	ldi	r24, 0x2C	; 44
    26ce:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>
	
	//handle CAN message
	can_message can_msg;
	
	//read upper 8 bit of id
	can_msg.id = mcp_read(MCP_RXB0SIDH) << 3;
    26d2:	81 e6       	ldi	r24, 0x61	; 97
    26d4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <mcp_read>
    26d8:	e8 2e       	mov	r14, r24
	
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 5;
    26da:	82 e6       	ldi	r24, 0x62	; 98
    26dc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <mcp_read>
	
	//handle CAN message
	can_message can_msg;
	
	//read upper 8 bit of id
	can_msg.id = mcp_read(MCP_RXB0SIDH) << 3;
    26e0:	f1 2c       	mov	r15, r1
    26e2:	ee 0c       	add	r14, r14
    26e4:	ff 1c       	adc	r15, r15
    26e6:	ee 0c       	add	r14, r14
    26e8:	ff 1c       	adc	r15, r15
    26ea:	ee 0c       	add	r14, r14
    26ec:	ff 1c       	adc	r15, r15
	
	//read lower 8 bit of id
	can_msg.id |= mcp_read(MCP_RXB0SIDL) >> 5;
    26ee:	82 95       	swap	r24
    26f0:	86 95       	lsr	r24
    26f2:	87 70       	andi	r24, 0x07	; 7
    26f4:	e8 2a       	or	r14, r24
	
	//read length of CAN data
	can_msg.length = mcp_read(MCP_RXB0DLC);
    26f6:	85 e6       	ldi	r24, 0x65	; 101
    26f8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <mcp_read>
    26fc:	b8 2e       	mov	r11, r24
	
	//read CAN data
	for(uint8_t i = 0; i < can_msg.length; i++)
    26fe:	88 23       	and	r24, r24
    2700:	89 f0       	breq	.+34     	; 0x2724 <__vector_1+0x98>
    2702:	8e 01       	movw	r16, r28
    2704:	0c 5f       	subi	r16, 0xFC	; 252
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	56 e6       	ldi	r21, 0x66	; 102
    270a:	c5 2e       	mov	r12, r21
    270c:	c8 0e       	add	r12, r24
    270e:	66 e6       	ldi	r22, 0x66	; 102
    2710:	d6 2e       	mov	r13, r22
	can_msg.data[i] = mcp_read(MCP_RXB0D0+i);
    2712:	8d 2d       	mov	r24, r13
    2714:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <mcp_read>
    2718:	f8 01       	movw	r30, r16
    271a:	81 93       	st	Z+, r24
    271c:	8f 01       	movw	r16, r30
    271e:	d3 94       	inc	r13
	
	//read length of CAN data
	can_msg.length = mcp_read(MCP_RXB0DLC);
	
	//read CAN data
	for(uint8_t i = 0; i < can_msg.length; i++)
    2720:	dc 10       	cpse	r13, r12
    2722:	f7 cf       	rjmp	.-18     	; 0x2712 <__vector_1+0x86>
	can_msg.data[i] = mcp_read(MCP_RXB0D0+i);
	
	//allow new message to be received into the buffer
	mcp_write(MCP_CANINTF, MCP_RX0IF & 0x00);
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	8c e2       	ldi	r24, 0x2C	; 44
    2728:	0e 94 b9 08 	call	0x1172	; 0x1172 <mcp_write>
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
	while(!JOY_button(0));
	highscore_activated = !highscore_activated;*/
}
void handleCANmessage(can_message can_msg)
{
	switch(can_msg.id)
    272e:	95 e0       	ldi	r25, 0x05	; 5
    2730:	e9 16       	cp	r14, r25
    2732:	f1 04       	cpc	r15, r1
    2734:	19 f4       	brne	.+6      	; 0x273c <__vector_1+0xb0>
	{
		case(SCORE):
		{
			if(can_msg.length != 1)
    2736:	f1 e0       	ldi	r31, 0x01	; 1
    2738:	bf 16       	cp	r11, r31
    273a:	01 f1       	breq	.+64     	; 0x277c <__vector_1+0xf0>
	//allow new message to be received into the buffer
	mcp_write(MCP_CANINTF, MCP_RX0IF & 0x00);
	

	handleCANmessage(can_msg);
    273c:	2b 96       	adiw	r28, 0x0b	; 11
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	ff 91       	pop	r31
    274e:	ef 91       	pop	r30
    2750:	bf 91       	pop	r27
    2752:	af 91       	pop	r26
    2754:	9f 91       	pop	r25
    2756:	8f 91       	pop	r24
    2758:	7f 91       	pop	r23
    275a:	6f 91       	pop	r22
    275c:	5f 91       	pop	r21
    275e:	4f 91       	pop	r20
    2760:	3f 91       	pop	r19
    2762:	2f 91       	pop	r18
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
    2770:	bf 90       	pop	r11
    2772:	0f 90       	pop	r0
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	0f 90       	pop	r0
    2778:	1f 90       	pop	r1
    277a:	18 95       	reti
			if(can_msg.length != 1)
			{
				//printf("WRONG length of CAN message for SCORE\n");
				return;
			}
			score = can_msg.data[0];
    277c:	80 93 4b 03 	sts	0x034B, r24
    2780:	dd cf       	rjmp	.-70     	; 0x273c <__vector_1+0xb0>

00002782 <USB_init>:
uint8_t margin = 15;

void USB_init()
{
	//set PIN 0 and 1 of port B as inputs for buttons
	DDRB &= ~(1 << PB0) & ~(1 << PB1);
    2782:	87 b3       	in	r24, 0x17	; 23
    2784:	8c 7f       	andi	r24, 0xFC	; 252
    2786:	87 bb       	out	0x17, r24	; 23
    2788:	08 95       	ret

0000278a <JOY_button>:
}

bool JOY_button(int button)
{
	return PINB & (1 << button);
    278a:	96 b3       	in	r25, 0x16	; 22
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <JOY_button+0xc>
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	8a 95       	dec	r24
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <JOY_button+0x8>
    279a:	89 2f       	mov	r24, r25
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	28 23       	and	r18, r24
    27a0:	39 23       	and	r19, r25
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	23 2b       	or	r18, r19
    27a6:	09 f4       	brne	.+2      	; 0x27aa <JOY_button+0x20>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
}
    27aa:	08 95       	ret

000027ac <calibrateJoystick>:
	print_thumb();
	_delay_ms(1000);*/
}

void calibrateJoystick(void)
{
    27ac:	08 95       	ret

000027ae <JOY_getPosition>:
	print_thumb();
	_delay_ms(2000);*/
}

JOY_POS JOY_getPosition(void)
{
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	2f 97       	sbiw	r28, 0x0f	; 15
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	7e 01       	movw	r14, r28
    27ce:	80 e1       	ldi	r24, 0x10	; 16
    27d0:	e8 0e       	add	r14, r24
    27d2:	f1 1c       	adc	r15, r1
    27d4:	8e 01       	movw	r16, r28
    27d6:	0f 5f       	subi	r16, 0xFF	; 255
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t i = 0;
	JOY_POS real;
	
	for(i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_H);
    27da:	84 e0       	ldi	r24, 0x04	; 4
    27dc:	0e 94 c8 02 	call	0x590	; 0x590 <ADC_read>
    27e0:	f8 01       	movw	r30, r16
    27e2:	81 93       	st	Z+, r24
    27e4:	8f 01       	movw	r16, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27e6:	f0 e1       	ldi	r31, 0x10	; 16
    27e8:	fa 95       	dec	r31
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <JOY_getPosition+0x3a>
    27ec:	00 c0       	rjmp	.+0      	; 0x27ee <JOY_getPosition+0x40>
{
	uint8_t x[15];
	uint8_t i = 0;
	JOY_POS real;
	
	for(i = 0; i < 15; i++)
    27ee:	0e 15       	cp	r16, r14
    27f0:	1f 05       	cpc	r17, r15
    27f2:	99 f7       	brne	.-26     	; 0x27da <JOY_getPosition+0x2c>
	{
		x[i] = ADC_read(JOY_H);
		_delay_us(10);
	}
	real.x = data_fit(x, 15, 2, 2, 4);
    27f4:	04 e0       	ldi	r16, 0x04	; 4
    27f6:	22 e0       	ldi	r18, 0x02	; 2
    27f8:	42 e0       	ldi	r20, 0x02	; 2
    27fa:	6f e0       	ldi	r22, 0x0F	; 15
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	0e 94 40 07 	call	0xe80	; 0xe80 <data_fit>
    2804:	d8 2e       	mov	r13, r24
    2806:	8e 01       	movw	r16, r28
    2808:	0f 5f       	subi	r16, 0xFF	; 255
    280a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_V);
    280c:	85 e0       	ldi	r24, 0x05	; 5
    280e:	0e 94 c8 02 	call	0x590	; 0x590 <ADC_read>
    2812:	f8 01       	movw	r30, r16
    2814:	81 93       	st	Z+, r24
    2816:	8f 01       	movw	r16, r30
    2818:	f0 e1       	ldi	r31, 0x10	; 16
    281a:	fa 95       	dec	r31
    281c:	f1 f7       	brne	.-4      	; 0x281a <JOY_getPosition+0x6c>
    281e:	00 c0       	rjmp	.+0      	; 0x2820 <JOY_getPosition+0x72>
		x[i] = ADC_read(JOY_H);
		_delay_us(10);
	}
	real.x = data_fit(x, 15, 2, 2, 4);
	
	for(i = 0; i < 15; i++)
    2820:	0e 15       	cp	r16, r14
    2822:	1f 05       	cpc	r17, r15
    2824:	99 f7       	brne	.-26     	; 0x280c <JOY_getPosition+0x5e>
	{
		x[i] = ADC_read(JOY_V);
		_delay_us(10);
	}
	real.y = data_fit(x, 15, 2, 2, 4);
    2826:	04 e0       	ldi	r16, 0x04	; 4
    2828:	22 e0       	ldi	r18, 0x02	; 2
    282a:	42 e0       	ldi	r20, 0x02	; 2
    282c:	6f e0       	ldi	r22, 0x0F	; 15
    282e:	ce 01       	movw	r24, r28
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	0e 94 40 07 	call	0xe80	; 0xe80 <data_fit>
    2836:	78 2f       	mov	r23, r24
	
	if(real.y >= -real.x + 255 && real.y >= real.x)
    2838:	e8 2f       	mov	r30, r24
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	4d 2d       	mov	r20, r13
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	2f ef       	ldi	r18, 0xFF	; 255
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	24 1b       	sub	r18, r20
    2846:	35 0b       	sbc	r19, r21
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
    2848:	e2 17       	cp	r30, r18
    284a:	f3 07       	cpc	r31, r19
    284c:	e4 f0       	brlt	.+56     	; 0x2886 <JOY_getPosition+0xd8>
    284e:	8d 15       	cp	r24, r13
    2850:	a8 f5       	brcc	.+106    	; 0x28bc <JOY_getPosition+0x10e>
	{
		real.dir = RIGHT;
    2852:	82 e0       	ldi	r24, 0x02	; 2
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
			break;
		}
		case RIGHT:
		{
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
    2854:	90 91 0e 01 	lds	r25, 0x010E
    2858:	20 91 0d 01 	lds	r18, 0x010D
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	29 0f       	add	r18, r25
    2860:	31 1d       	adc	r19, r1
    2862:	24 17       	cp	r18, r20
    2864:	35 07       	cpc	r19, r21
    2866:	e4 f4       	brge	.+56     	; 0x28a0 <JOY_getPosition+0xf2>
			break;
		}
	}

	return real;
}
    2868:	6d 2d       	mov	r22, r13
    286a:	2f 96       	adiw	r28, 0x0f	; 15
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	ff 90       	pop	r15
    2880:	ef 90       	pop	r14
    2882:	df 90       	pop	r13
    2884:	08 95       	ret
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
	{
		real.dir = RIGHT;
	}
	if(real.y < -real.x + 255 && real.y >= real.x)
    2886:	8d 15       	cp	r24, r13
    2888:	68 f0       	brcs	.+26     	; 0x28a4 <JOY_getPosition+0xf6>
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
			break;
		}
		case LEFT:
		{
			real.dir = real.x < mid_point.x - margin ? real.dir : NEUTRAL;
    288a:	20 91 0e 01 	lds	r18, 0x010E
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	80 91 0d 01 	lds	r24, 0x010D
    2894:	28 1b       	sub	r18, r24
    2896:	31 09       	sbc	r19, r1
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	42 17       	cp	r20, r18
    289c:	53 07       	cpc	r21, r19
    289e:	24 f3       	brlt	.-56     	; 0x2868 <JOY_getPosition+0xba>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	e2 cf       	rjmp	.-60     	; 0x2868 <JOY_getPosition+0xba>
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
			break;
		}
		case DOWN:
		{
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
    28a4:	20 91 0f 01 	lds	r18, 0x010F
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	80 91 0d 01 	lds	r24, 0x010D
    28ae:	28 1b       	sub	r18, r24
    28b0:	31 09       	sbc	r19, r1
    28b2:	e2 17       	cp	r30, r18
    28b4:	f3 07       	cpc	r31, r19
    28b6:	a4 f7       	brge	.-24     	; 0x28a0 <JOY_getPosition+0xf2>
    28b8:	84 e0       	ldi	r24, 0x04	; 4
    28ba:	d6 cf       	rjmp	.-84     	; 0x2868 <JOY_getPosition+0xba>
	
	if(real.y >= -real.x + 255 && real.y >= real.x)
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
    28bc:	83 e0       	ldi	r24, 0x03	; 3

	switch(real.dir)
	{
		case UP:
		{
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
    28be:	90 91 0f 01 	lds	r25, 0x010F
    28c2:	20 91 0d 01 	lds	r18, 0x010D
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	29 0f       	add	r18, r25
    28ca:	31 1d       	adc	r19, r1
    28cc:	2e 17       	cp	r18, r30
    28ce:	3f 07       	cpc	r19, r31
    28d0:	5c f2       	brlt	.-106    	; 0x2868 <JOY_getPosition+0xba>
    28d2:	e6 cf       	rjmp	.-52     	; 0x28a0 <JOY_getPosition+0xf2>

000028d4 <SLID_getPosition>:

	return real;
}

SLID SLID_getPosition(void)
{
    28d4:	df 92       	push	r13
    28d6:	ef 92       	push	r14
    28d8:	ff 92       	push	r15
    28da:	0f 93       	push	r16
    28dc:	1f 93       	push	r17
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	2f 97       	sbiw	r28, 0x0f	; 15
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	7e 01       	movw	r14, r28
    28f4:	80 e1       	ldi	r24, 0x10	; 16
    28f6:	e8 0e       	add	r14, r24
    28f8:	f1 1c       	adc	r15, r1
    28fa:	8e 01       	movw	r16, r28
    28fc:	0f 5f       	subi	r16, 0xFF	; 255
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t value[15];
	SLID slid;
	uint8_t i=0;
	for (i = 0; i < 15; i++)
	{
		value[i] = ADC_read(SL_L);
    2900:	87 e0       	ldi	r24, 0x07	; 7
    2902:	0e 94 c8 02 	call	0x590	; 0x590 <ADC_read>
    2906:	f8 01       	movw	r30, r16
    2908:	81 93       	st	Z+, r24
    290a:	8f 01       	movw	r16, r30
    290c:	f0 e1       	ldi	r31, 0x10	; 16
    290e:	fa 95       	dec	r31
    2910:	f1 f7       	brne	.-4      	; 0x290e <SLID_getPosition+0x3a>
    2912:	00 c0       	rjmp	.+0      	; 0x2914 <SLID_getPosition+0x40>
SLID SLID_getPosition(void)
{
	uint8_t value[15];
	SLID slid;
	uint8_t i=0;
	for (i = 0; i < 15; i++)
    2914:	0e 15       	cp	r16, r14
    2916:	1f 05       	cpc	r17, r15
    2918:	99 f7       	brne	.-26     	; 0x2900 <SLID_getPosition+0x2c>
	{
		value[i] = ADC_read(SL_L);
		_delay_us(10);
	}
	slid.l = data_fit(value, 15, 2, 2, 4);
    291a:	04 e0       	ldi	r16, 0x04	; 4
    291c:	22 e0       	ldi	r18, 0x02	; 2
    291e:	42 e0       	ldi	r20, 0x02	; 2
    2920:	6f e0       	ldi	r22, 0x0F	; 15
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 40 07 	call	0xe80	; 0xe80 <data_fit>
    292a:	d8 2e       	mov	r13, r24
    292c:	8e 01       	movw	r16, r28
    292e:	0f 5f       	subi	r16, 0xFF	; 255
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
	for (i = 0; i < 15; i++)
	{
		value[i] = ADC_read(SL_R);
    2932:	86 e0       	ldi	r24, 0x06	; 6
    2934:	0e 94 c8 02 	call	0x590	; 0x590 <ADC_read>
    2938:	f8 01       	movw	r30, r16
    293a:	81 93       	st	Z+, r24
    293c:	8f 01       	movw	r16, r30
    293e:	f0 e1       	ldi	r31, 0x10	; 16
    2940:	fa 95       	dec	r31
    2942:	f1 f7       	brne	.-4      	; 0x2940 <SLID_getPosition+0x6c>
    2944:	00 c0       	rjmp	.+0      	; 0x2946 <SLID_getPosition+0x72>
	{
		value[i] = ADC_read(SL_L);
		_delay_us(10);
	}
	slid.l = data_fit(value, 15, 2, 2, 4);
	for (i = 0; i < 15; i++)
    2946:	0e 15       	cp	r16, r14
    2948:	1f 05       	cpc	r17, r15
    294a:	99 f7       	brne	.-26     	; 0x2932 <SLID_getPosition+0x5e>
	{
		value[i] = ADC_read(SL_R);
		_delay_us(10);
	}
	slid.r = data_fit(value, 15, 2, 2, 4);
    294c:	04 e0       	ldi	r16, 0x04	; 4
    294e:	22 e0       	ldi	r18, 0x02	; 2
    2950:	42 e0       	ldi	r20, 0x02	; 2
    2952:	6f e0       	ldi	r22, 0x0F	; 15
    2954:	ce 01       	movw	r24, r28
    2956:	01 96       	adiw	r24, 0x01	; 1
    2958:	0e 94 40 07 	call	0xe80	; 0xe80 <data_fit>
    295c:	98 2f       	mov	r25, r24
	//printf("left %d, right %d \n", value.l, value.r);
	return slid;
}
    295e:	8d 2d       	mov	r24, r13
    2960:	2f 96       	adiw	r28, 0x0f	; 15
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	df 90       	pop	r13
    297a:	08 95       	ret

0000297c <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    297c:	8e ea       	ldi	r24, 0xAE	; 174
    297e:	80 93 01 10 	sts	0x1001, r24
    2982:	81 ea       	ldi	r24, 0xA1	; 161
    2984:	80 93 01 10 	sts	0x1001, r24
    2988:	8a ed       	ldi	r24, 0xDA	; 218
    298a:	80 93 01 10 	sts	0x1001, r24
    298e:	82 e1       	ldi	r24, 0x12	; 18
    2990:	80 93 01 10 	sts	0x1001, r24
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	80 93 01 10 	sts	0x1001, r24
    299a:	88 ea       	ldi	r24, 0xA8	; 168
    299c:	80 93 01 10 	sts	0x1001, r24
    29a0:	8f e3       	ldi	r24, 0x3F	; 63
    29a2:	80 93 01 10 	sts	0x1001, r24
    29a6:	85 ed       	ldi	r24, 0xD5	; 213
    29a8:	80 93 01 10 	sts	0x1001, r24
    29ac:	80 e8       	ldi	r24, 0x80	; 128
    29ae:	80 93 01 10 	sts	0x1001, r24
    29b2:	81 e8       	ldi	r24, 0x81	; 129
    29b4:	80 93 01 10 	sts	0x1001, r24
    29b8:	80 e5       	ldi	r24, 0x50	; 80
    29ba:	80 93 01 10 	sts	0x1001, r24
    29be:	89 ed       	ldi	r24, 0xD9	; 217
    29c0:	80 93 01 10 	sts	0x1001, r24
    29c4:	81 e2       	ldi	r24, 0x21	; 33
    29c6:	80 93 01 10 	sts	0x1001, r24
    29ca:	80 e2       	ldi	r24, 0x20	; 32
    29cc:	80 93 01 10 	sts	0x1001, r24
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	80 93 01 10 	sts	0x1001, r24
    29d6:	8b ed       	ldi	r24, 0xDB	; 219
    29d8:	80 93 01 10 	sts	0x1001, r24
    29dc:	80 e3       	ldi	r24, 0x30	; 48
    29de:	80 93 01 10 	sts	0x1001, r24
    29e2:	8d ea       	ldi	r24, 0xAD	; 173
    29e4:	80 93 01 10 	sts	0x1001, r24
    29e8:	10 92 01 10 	sts	0x1001, r1
    29ec:	84 ea       	ldi	r24, 0xA4	; 164
    29ee:	80 93 01 10 	sts	0x1001, r24
    29f2:	86 ea       	ldi	r24, 0xA6	; 166
    29f4:	80 93 01 10 	sts	0x1001, r24
    29f8:	8f ea       	ldi	r24, 0xAF	; 175
    29fa:	80 93 01 10 	sts	0x1001, r24
    29fe:	83 ed       	ldi	r24, 0xD3	; 211
    2a00:	80 93 01 10 	sts	0x1001, r24
    2a04:	10 92 01 10 	sts	0x1001, r1
    2a08:	80 e4       	ldi	r24, 0x40	; 64
    2a0a:	80 93 01 10 	sts	0x1001, r24
    2a0e:	80 eb       	ldi	r24, 0xB0	; 176
    2a10:	80 93 01 10 	sts	0x1001, r24
    2a14:	10 92 01 10 	sts	0x1001, r1
    2a18:	80 e1       	ldi	r24, 0x10	; 16
    2a1a:	80 93 01 10 	sts	0x1001, r24
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
#include <stdbool.h>

volatile uint8_t* oled_buffer = (uint8_t *) 0x1800;

void oled_init()
{
    2a22:	80 e8       	ldi	r24, 0x80	; 128
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	40 58       	subi	r20, 0x80	; 128
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	9a 01       	movw	r18, r20
    2a2c:	28 1b       	sub	r18, r24
    2a2e:	39 0b       	sbc	r19, r25
void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
		{
			oled_buffer[i * N + j] = 0x00;
    2a30:	e0 91 11 01 	lds	r30, 0x0111
    2a34:	f0 91 12 01 	lds	r31, 0x0112
    2a38:	e2 0f       	add	r30, r18
    2a3a:	f3 1f       	adc	r31, r19
    2a3c:	10 82       	st	Z, r1
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	99 f7       	brne	.-26     	; 0x2a2a <oled_init+0xae>
	*oled = data;
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
    2a44:	41 15       	cp	r20, r1
    2a46:	84 e0       	ldi	r24, 0x04	; 4
    2a48:	58 07       	cpc	r21, r24
    2a4a:	59 f7       	brne	.-42     	; 0x2a22 <oled_init+0xa6>
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2a4c:	80 eb       	ldi	r24, 0xB0	; 176
    2a4e:	80 93 01 10 	sts	0x1001, r24
    2a52:	10 92 01 10 	sts	0x1001, r1
    2a56:	80 e1       	ldi	r24, 0x10	; 16
    2a58:	80 93 01 10 	sts	0x1001, r24
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2a60:	60 e0       	ldi	r22, 0x00	; 0
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2a62:	70 e1       	ldi	r23, 0x10	; 16
    2a64:	80 e8       	ldi	r24, 0x80	; 128
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	40 58       	subi	r20, 0x80	; 128
    2a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6c:	9a 01       	movw	r18, r20
    2a6e:	28 1b       	sub	r18, r24
    2a70:	39 0b       	sbc	r19, r25
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    2a72:	e0 91 11 01 	lds	r30, 0x0111
    2a76:	f0 91 12 01 	lds	r31, 0x0112
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	20 81       	ld	r18, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    2a80:	20 93 01 12 	sts	0x1201, r18
    2a84:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	89 f7       	brne	.-30     	; 0x2a6c <oled_init+0xf0>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    2a8a:	6f 5f       	subi	r22, 0xFF	; 255
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    2a8c:	86 2f       	mov	r24, r22
    2a8e:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2a90:	80 93 01 10 	sts	0x1001, r24
    2a94:	10 92 01 10 	sts	0x1001, r1
    2a98:	70 93 01 10 	sts	0x1001, r23
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2a9c:	68 30       	cpi	r22, 0x08	; 8
    2a9e:	11 f7       	brne	.-60     	; 0x2a64 <oled_init+0xe8>
    2aa0:	08 95       	ret

00002aa2 <print_buffer>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2aa2:	80 eb       	ldi	r24, 0xB0	; 176
    2aa4:	80 93 01 10 	sts	0x1001, r24
    2aa8:	10 92 01 10 	sts	0x1001, r1
    2aac:	80 e1       	ldi	r24, 0x10	; 16
    2aae:	80 93 01 10 	sts	0x1001, r24
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2ab8:	70 e1       	ldi	r23, 0x10	; 16
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
    2aba:	80 e8       	ldi	r24, 0x80	; 128
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	40 58       	subi	r20, 0x80	; 128
    2ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac2:	9a 01       	movw	r18, r20
    2ac4:	28 1b       	sub	r18, r24
    2ac6:	39 0b       	sbc	r19, r25
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    2ac8:	e0 91 11 01 	lds	r30, 0x0111
    2acc:	f0 91 12 01 	lds	r31, 0x0112
    2ad0:	e2 0f       	add	r30, r18
    2ad2:	f3 1f       	adc	r31, r19
    2ad4:	20 81       	ld	r18, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    2ad6:	20 93 01 12 	sts	0x1201, r18
    2ada:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	89 f7       	brne	.-30     	; 0x2ac2 <print_buffer+0x20>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    2ae0:	6f 5f       	subi	r22, 0xFF	; 255
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    2ae2:	86 2f       	mov	r24, r22
    2ae4:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2ae6:	80 93 01 10 	sts	0x1001, r24
    2aea:	10 92 01 10 	sts	0x1001, r1
    2aee:	70 93 01 10 	sts	0x1001, r23
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2af2:	68 30       	cpi	r22, 0x08	; 8
    2af4:	11 f7       	brne	.-60     	; 0x2aba <print_buffer+0x18>
    2af6:	08 95       	ret

00002af8 <clear_buffer>:
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
}

void clear_buffer(void)
{
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	80 e8       	ldi	r24, 0x80	; 128
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	40 58       	subi	r20, 0x80	; 128
    2b02:	5f 4f       	sbci	r21, 0xFF	; 255
    2b04:	9a 01       	movw	r18, r20
    2b06:	28 1b       	sub	r18, r24
    2b08:	39 0b       	sbc	r19, r25
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
		{
			oled_buffer[i * N + j] = 0x00;
    2b0a:	e0 91 11 01 	lds	r30, 0x0111
    2b0e:	f0 91 12 01 	lds	r31, 0x0112
    2b12:	e2 0f       	add	r30, r18
    2b14:	f3 1f       	adc	r31, r19
    2b16:	10 82       	st	Z, r1
    2b18:	01 97       	sbiw	r24, 0x01	; 1
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	99 f7       	brne	.-26     	; 0x2b04 <clear_buffer+0xc>
	*oled = data;
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
    2b1e:	41 15       	cp	r20, r1
    2b20:	84 e0       	ldi	r24, 0x04	; 4
    2b22:	58 07       	cpc	r21, r24
    2b24:	59 f7       	brne	.-42     	; 0x2afc <clear_buffer+0x4>
    2b26:	08 95       	ret

00002b28 <print_string_to_buffer>:
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    2b30:	dc 01       	movw	r26, r24
    2b32:	ec 91       	ld	r30, X
    2b34:	ee 23       	and	r30, r30
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <print_string_to_buffer+0x12>
    2b38:	c3 c0       	rjmp	.+390    	; 0x2cc0 <print_string_to_buffer+0x198>
    2b3a:	b0 e8       	ldi	r27, 0x80	; 128
    2b3c:	6b 9f       	mul	r22, r27
    2b3e:	90 01       	movw	r18, r0
    2b40:	11 24       	eor	r1, r1
    2b42:	dc 01       	movw	r26, r24
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
    2b44:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2b46:	89 01       	movw	r16, r18
    2b48:	07 0f       	add	r16, r23
    2b4a:	11 1d       	adc	r17, r1
    2b4c:	c0 91 11 01 	lds	r28, 0x0111
    2b50:	d0 91 12 01 	lds	r29, 0x0112
    2b54:	c0 0f       	add	r28, r16
    2b56:	d1 1f       	adc	r29, r17
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	ee 0f       	add	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	ee 0f       	add	r30, r30
    2b60:	ff 1f       	adc	r31, r31
    2b62:	ee 0f       	add	r30, r30
    2b64:	ff 1f       	adc	r31, r31
    2b66:	ee 5a       	subi	r30, 0xAE	; 174
    2b68:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6a:	e4 91       	lpm	r30, Z
    2b6c:	e8 83       	st	Y, r30
			col++;
    2b6e:	51 e0       	ldi	r21, 0x01	; 1
    2b70:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2b72:	f9 01       	movw	r30, r18
    2b74:	e5 0f       	add	r30, r21
    2b76:	f1 1d       	adc	r31, r1
    2b78:	c0 91 11 01 	lds	r28, 0x0111
    2b7c:	d0 91 12 01 	lds	r29, 0x0112
    2b80:	ce 0f       	add	r28, r30
    2b82:	df 1f       	adc	r29, r31
    2b84:	ec 91       	ld	r30, X
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	ee 0f       	add	r30, r30
    2b8a:	ff 1f       	adc	r31, r31
    2b8c:	ee 0f       	add	r30, r30
    2b8e:	ff 1f       	adc	r31, r31
    2b90:	ee 0f       	add	r30, r30
    2b92:	ff 1f       	adc	r31, r31
    2b94:	ed 5a       	subi	r30, 0xAD	; 173
    2b96:	fe 4f       	sbci	r31, 0xFE	; 254
    2b98:	e4 91       	lpm	r30, Z
    2b9a:	e8 83       	st	Y, r30
			col++;
    2b9c:	52 e0       	ldi	r21, 0x02	; 2
    2b9e:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	e5 0f       	add	r30, r21
    2ba4:	f1 1d       	adc	r31, r1
    2ba6:	c0 91 11 01 	lds	r28, 0x0111
    2baa:	d0 91 12 01 	lds	r29, 0x0112
    2bae:	ce 0f       	add	r28, r30
    2bb0:	df 1f       	adc	r29, r31
    2bb2:	ec 91       	ld	r30, X
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	ec 5a       	subi	r30, 0xAC	; 172
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	e4 91       	lpm	r30, Z
    2bc8:	e8 83       	st	Y, r30
			col++;
    2bca:	53 e0       	ldi	r21, 0x03	; 3
    2bcc:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2bce:	f9 01       	movw	r30, r18
    2bd0:	e5 0f       	add	r30, r21
    2bd2:	f1 1d       	adc	r31, r1
    2bd4:	c0 91 11 01 	lds	r28, 0x0111
    2bd8:	d0 91 12 01 	lds	r29, 0x0112
    2bdc:	ce 0f       	add	r28, r30
    2bde:	df 1f       	adc	r29, r31
    2be0:	ec 91       	ld	r30, X
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	ee 0f       	add	r30, r30
    2be6:	ff 1f       	adc	r31, r31
    2be8:	ee 0f       	add	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	eb 5a       	subi	r30, 0xAB	; 171
    2bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf4:	e4 91       	lpm	r30, Z
    2bf6:	e8 83       	st	Y, r30
			col++;
    2bf8:	54 e0       	ldi	r21, 0x04	; 4
    2bfa:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	e5 0f       	add	r30, r21
    2c00:	f1 1d       	adc	r31, r1
    2c02:	c0 91 11 01 	lds	r28, 0x0111
    2c06:	d0 91 12 01 	lds	r29, 0x0112
    2c0a:	ce 0f       	add	r28, r30
    2c0c:	df 1f       	adc	r29, r31
    2c0e:	ec 91       	ld	r30, X
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	ee 0f       	add	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	ee 0f       	add	r30, r30
    2c18:	ff 1f       	adc	r31, r31
    2c1a:	ee 0f       	add	r30, r30
    2c1c:	ff 1f       	adc	r31, r31
    2c1e:	ea 5a       	subi	r30, 0xAA	; 170
    2c20:	fe 4f       	sbci	r31, 0xFE	; 254
    2c22:	e4 91       	lpm	r30, Z
    2c24:	e8 83       	st	Y, r30
			col++;
    2c26:	55 e0       	ldi	r21, 0x05	; 5
    2c28:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	e5 0f       	add	r30, r21
    2c2e:	f1 1d       	adc	r31, r1
    2c30:	c0 91 11 01 	lds	r28, 0x0111
    2c34:	d0 91 12 01 	lds	r29, 0x0112
    2c38:	ce 0f       	add	r28, r30
    2c3a:	df 1f       	adc	r29, r31
    2c3c:	ec 91       	ld	r30, X
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	ee 0f       	add	r30, r30
    2c42:	ff 1f       	adc	r31, r31
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	ee 0f       	add	r30, r30
    2c4a:	ff 1f       	adc	r31, r31
    2c4c:	e9 5a       	subi	r30, 0xA9	; 169
    2c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c50:	e4 91       	lpm	r30, Z
    2c52:	e8 83       	st	Y, r30
			col++;
    2c54:	56 e0       	ldi	r21, 0x06	; 6
    2c56:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2c58:	f9 01       	movw	r30, r18
    2c5a:	e5 0f       	add	r30, r21
    2c5c:	f1 1d       	adc	r31, r1
    2c5e:	c0 91 11 01 	lds	r28, 0x0111
    2c62:	d0 91 12 01 	lds	r29, 0x0112
    2c66:	ce 0f       	add	r28, r30
    2c68:	df 1f       	adc	r29, r31
    2c6a:	ec 91       	ld	r30, X
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	e8 5a       	subi	r30, 0xA8	; 168
    2c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7e:	e4 91       	lpm	r30, Z
    2c80:	e8 83       	st	Y, r30
			col++;
    2c82:	57 e0       	ldi	r21, 0x07	; 7
    2c84:	57 0f       	add	r21, r23
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2c86:	f9 01       	movw	r30, r18
    2c88:	e5 0f       	add	r30, r21
    2c8a:	f1 1d       	adc	r31, r1
    2c8c:	c0 91 11 01 	lds	r28, 0x0111
    2c90:	d0 91 12 01 	lds	r29, 0x0112
    2c94:	ce 0f       	add	r28, r30
    2c96:	df 1f       	adc	r29, r31
    2c98:	ec 91       	ld	r30, X
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	ee 0f       	add	r30, r30
    2c9e:	ff 1f       	adc	r31, r31
    2ca0:	ee 0f       	add	r30, r30
    2ca2:	ff 1f       	adc	r31, r31
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	e7 5a       	subi	r30, 0xA7	; 167
    2caa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cac:	e4 91       	lpm	r30, Z
    2cae:	e8 83       	st	Y, r30
			col++;
    2cb0:	78 5f       	subi	r23, 0xF8	; 248
		}
		i++;
    2cb2:	4f 5f       	subi	r20, 0xFF	; 255
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	a4 0f       	add	r26, r20
    2cb8:	b1 1d       	adc	r27, r1
    2cba:	ec 91       	ld	r30, X
    2cbc:	e1 11       	cpse	r30, r1
    2cbe:	43 cf       	rjmp	.-378    	; 0x2b46 <print_string_to_buffer+0x1e>
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
			col++;
		}
		i++;
	}
}
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	08 95       	ret

00002cca <print_selection>:
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2cca:	20 e8       	ldi	r18, 0x80	; 128
    2ccc:	82 9f       	mul	r24, r18
    2cce:	c0 01       	movw	r24, r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	9c 01       	movw	r18, r24
    2cd4:	28 58       	subi	r18, 0x88	; 136
    2cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd8:	a0 91 11 01 	lds	r26, 0x0111
    2cdc:	b0 91 12 01 	lds	r27, 0x0112
    2ce0:	a2 0f       	add	r26, r18
    2ce2:	b3 1f       	adc	r27, r19
    2ce4:	e2 e3       	ldi	r30, 0x32	; 50
    2ce6:	f3 e0       	ldi	r31, 0x03	; 3
    2ce8:	e4 91       	lpm	r30, Z
    2cea:	ec 93       	st	X, r30
    2cec:	2f 5f       	subi	r18, 0xFF	; 255
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	a0 91 11 01 	lds	r26, 0x0111
    2cf4:	b0 91 12 01 	lds	r27, 0x0112
    2cf8:	a2 0f       	add	r26, r18
    2cfa:	b3 1f       	adc	r27, r19
    2cfc:	e3 e3       	ldi	r30, 0x33	; 51
    2cfe:	f3 e0       	ldi	r31, 0x03	; 3
    2d00:	e4 91       	lpm	r30, Z
    2d02:	ec 93       	st	X, r30
    2d04:	2f 5f       	subi	r18, 0xFF	; 255
    2d06:	3f 4f       	sbci	r19, 0xFF	; 255
    2d08:	a0 91 11 01 	lds	r26, 0x0111
    2d0c:	b0 91 12 01 	lds	r27, 0x0112
    2d10:	a2 0f       	add	r26, r18
    2d12:	b3 1f       	adc	r27, r19
    2d14:	e4 e3       	ldi	r30, 0x34	; 52
    2d16:	f3 e0       	ldi	r31, 0x03	; 3
    2d18:	e4 91       	lpm	r30, Z
    2d1a:	ec 93       	st	X, r30
    2d1c:	2f 5f       	subi	r18, 0xFF	; 255
    2d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d20:	a0 91 11 01 	lds	r26, 0x0111
    2d24:	b0 91 12 01 	lds	r27, 0x0112
    2d28:	a2 0f       	add	r26, r18
    2d2a:	b3 1f       	adc	r27, r19
    2d2c:	e5 e3       	ldi	r30, 0x35	; 53
    2d2e:	f3 e0       	ldi	r31, 0x03	; 3
    2d30:	e4 91       	lpm	r30, Z
    2d32:	ec 93       	st	X, r30
    2d34:	2f 5f       	subi	r18, 0xFF	; 255
    2d36:	3f 4f       	sbci	r19, 0xFF	; 255
    2d38:	a0 91 11 01 	lds	r26, 0x0111
    2d3c:	b0 91 12 01 	lds	r27, 0x0112
    2d40:	a2 0f       	add	r26, r18
    2d42:	b3 1f       	adc	r27, r19
    2d44:	e6 e3       	ldi	r30, 0x36	; 54
    2d46:	f3 e0       	ldi	r31, 0x03	; 3
    2d48:	e4 91       	lpm	r30, Z
    2d4a:	ec 93       	st	X, r30
    2d4c:	2f 5f       	subi	r18, 0xFF	; 255
    2d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d50:	a0 91 11 01 	lds	r26, 0x0111
    2d54:	b0 91 12 01 	lds	r27, 0x0112
    2d58:	a2 0f       	add	r26, r18
    2d5a:	b3 1f       	adc	r27, r19
    2d5c:	e7 e3       	ldi	r30, 0x37	; 55
    2d5e:	f3 e0       	ldi	r31, 0x03	; 3
    2d60:	e4 91       	lpm	r30, Z
    2d62:	ec 93       	st	X, r30
    2d64:	2f 5f       	subi	r18, 0xFF	; 255
    2d66:	3f 4f       	sbci	r19, 0xFF	; 255
    2d68:	a0 91 11 01 	lds	r26, 0x0111
    2d6c:	b0 91 12 01 	lds	r27, 0x0112
    2d70:	a2 0f       	add	r26, r18
    2d72:	b3 1f       	adc	r27, r19
    2d74:	e8 e3       	ldi	r30, 0x38	; 56
    2d76:	f3 e0       	ldi	r31, 0x03	; 3
    2d78:	e4 91       	lpm	r30, Z
    2d7a:	ec 93       	st	X, r30
    2d7c:	81 58       	subi	r24, 0x81	; 129
    2d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d80:	a0 91 11 01 	lds	r26, 0x0111
    2d84:	b0 91 12 01 	lds	r27, 0x0112
    2d88:	a8 0f       	add	r26, r24
    2d8a:	b9 1f       	adc	r27, r25
    2d8c:	e9 e3       	ldi	r30, 0x39	; 57
    2d8e:	f3 e0       	ldi	r31, 0x03	; 3
    2d90:	e4 91       	lpm	r30, Z
    2d92:	ec 93       	st	X, r30
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2d94:	80 eb       	ldi	r24, 0xB0	; 176
    2d96:	80 93 01 10 	sts	0x1001, r24
    2d9a:	10 92 01 10 	sts	0x1001, r1
    2d9e:	80 e1       	ldi	r24, 0x10	; 16
    2da0:	80 93 01 10 	sts	0x1001, r24
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	50 e0       	ldi	r21, 0x00	; 0
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2da8:	60 e0       	ldi	r22, 0x00	; 0
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2daa:	70 e1       	ldi	r23, 0x10	; 16
		i++;
	}
}

void print_selection(uint8_t page)
{
    2dac:	80 e8       	ldi	r24, 0x80	; 128
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	40 58       	subi	r20, 0x80	; 128
    2db2:	5f 4f       	sbci	r21, 0xFF	; 255
    2db4:	9a 01       	movw	r18, r20
    2db6:	28 1b       	sub	r18, r24
    2db8:	39 0b       	sbc	r19, r25
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    2dba:	e0 91 11 01 	lds	r30, 0x0111
    2dbe:	f0 91 12 01 	lds	r31, 0x0112
    2dc2:	e2 0f       	add	r30, r18
    2dc4:	f3 1f       	adc	r31, r19
    2dc6:	20 81       	ld	r18, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    2dc8:	20 93 01 12 	sts	0x1201, r18
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	89 f7       	brne	.-30     	; 0x2db4 <print_selection+0xea>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    2dd2:	6f 5f       	subi	r22, 0xFF	; 255
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    2dd4:	86 2f       	mov	r24, r22
    2dd6:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    2dd8:	80 93 01 10 	sts	0x1001, r24
    2ddc:	10 92 01 10 	sts	0x1001, r1
    2de0:	70 93 01 10 	sts	0x1001, r23
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    2de4:	68 30       	cpi	r22, 0x08	; 8
    2de6:	11 f7       	brne	.-60     	; 0x2dac <print_selection+0xe2>
    2de8:	08 95       	ret

00002dea <printMenu>:
	}
	print_buffer();
}

void printMenu(MenuNode* menu_entries)
{
    2dea:	ef 92       	push	r14
    2dec:	ff 92       	push	r15
    2dee:	0f 93       	push	r16
    2df0:	1f 93       	push	r17
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	60 97       	sbiw	r28, 0x10	; 16
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	8c 01       	movw	r16, r24
    2e08:	40 e0       	ldi	r20, 0x00	; 0
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	80 e8       	ldi	r24, 0x80	; 128
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	40 58       	subi	r20, 0x80	; 128
    2e12:	5f 4f       	sbci	r21, 0xFF	; 255
    2e14:	9a 01       	movw	r18, r20
    2e16:	28 1b       	sub	r18, r24
    2e18:	39 0b       	sbc	r19, r25
void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
		{
			oled_buffer[i * N + j] = 0x00;
    2e1a:	e0 91 11 01 	lds	r30, 0x0111
    2e1e:	f0 91 12 01 	lds	r31, 0x0112
    2e22:	e2 0f       	add	r30, r18
    2e24:	f3 1f       	adc	r31, r19
    2e26:	10 82       	st	Z, r1
    2e28:	01 97       	sbiw	r24, 0x01	; 1
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	99 f7       	brne	.-26     	; 0x2e14 <printMenu+0x2a>
	*oled = data;
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
    2e2e:	41 15       	cp	r20, r1
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	58 07       	cpc	r21, r24
    2e34:	59 f7       	brne	.-42     	; 0x2e0c <printMenu+0x22>
void printMenu(MenuNode* menu_entries)
{
	char string[MAX_STRING_LENGTH];
	
	clear_buffer();
	if(menu_entries)
    2e36:	01 15       	cp	r16, r1
    2e38:	11 05       	cpc	r17, r1
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <printMenu+0x54>
    2e3c:	4e c1       	rjmp	.+668    	; 0x30da <printMenu+0x2f0>
	{
		for(int i = 0; i < menu_entries->m_num_submenus; i++)
    2e3e:	d8 01       	movw	r26, r16
    2e40:	17 96       	adiw	r26, 0x07	; 7
    2e42:	8c 91       	ld	r24, X
    2e44:	88 23       	and	r24, r24
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <printMenu+0x60>
    2e48:	0c c1       	rjmp	.+536    	; 0x3062 <printMenu+0x278>
    2e4a:	e1 2c       	mov	r14, r1
    2e4c:	f1 2c       	mov	r15, r1
		{
			if(menu_entries->m_submenus)
    2e4e:	f8 01       	movw	r30, r16
    2e50:	85 81       	ldd	r24, Z+5	; 0x05
    2e52:	96 81       	ldd	r25, Z+6	; 0x06
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <printMenu+0x70>
    2e58:	3b c1       	rjmp	.+630    	; 0x30d0 <printMenu+0x2e6>
			{
				//TODO check if num submenus < 8
				position pos = { .page = i, .column = 2 }; //printf(menu_entries->m_submenus[i]->m_content.title); printf("\n");
				for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
					string[i] = 0;
    2e5a:	19 82       	std	Y+1, r1	; 0x01
    2e5c:	1a 82       	std	Y+2, r1	; 0x02
    2e5e:	1b 82       	std	Y+3, r1	; 0x03
    2e60:	1c 82       	std	Y+4, r1	; 0x04
    2e62:	1d 82       	std	Y+5, r1	; 0x05
    2e64:	1e 82       	std	Y+6, r1	; 0x06
    2e66:	1f 82       	std	Y+7, r1	; 0x07
    2e68:	18 86       	std	Y+8, r1	; 0x08
    2e6a:	19 86       	std	Y+9, r1	; 0x09
    2e6c:	1a 86       	std	Y+10, r1	; 0x0a
    2e6e:	1b 86       	std	Y+11, r1	; 0x0b
    2e70:	1c 86       	std	Y+12, r1	; 0x0c
    2e72:	1d 86       	std	Y+13, r1	; 0x0d
    2e74:	1e 86       	std	Y+14, r1	; 0x0e
    2e76:	1f 86       	std	Y+15, r1	; 0x0f
    2e78:	18 8a       	std	Y+16, r1	; 0x10
				getStringFromMem(string, menu_entries->m_submenus[i]->m_content.title_id);
    2e7a:	f7 01       	movw	r30, r14
    2e7c:	ee 0f       	add	r30, r30
    2e7e:	ff 1f       	adc	r31, r31
    2e80:	e8 0f       	add	r30, r24
    2e82:	f9 1f       	adc	r31, r25
    2e84:	01 90       	ld	r0, Z+
    2e86:	f0 81       	ld	r31, Z
    2e88:	e0 2d       	mov	r30, r0
#include <avr/pgmspace.h>
#include <stdio.h>

void getStringFromMem(char string[MAX_STRING_LENGTH], uint8_t id)
{
	strcpy_P(string, (PGM_P)pgm_read_word(&(string_table[id])));
    2e8a:	e0 81       	ld	r30, Z
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	ee 0f       	add	r30, r30
    2e90:	ff 1f       	adc	r31, r31
    2e92:	e0 59       	subi	r30, 0x90	; 144
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	65 91       	lpm	r22, Z+
    2e98:	74 91       	lpm	r23, Z
    2e9a:	ce 01       	movw	r24, r28
    2e9c:	01 96       	adiw	r24, 0x01	; 1
    2e9e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <strcpy_P>
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    2ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea4:	ee 23       	and	r30, r30
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <printMenu+0xc0>
    2ea8:	d2 c0       	rjmp	.+420    	; 0x304e <printMenu+0x264>
    2eaa:	97 01       	movw	r18, r14
    2eac:	36 95       	lsr	r19
    2eae:	32 2f       	mov	r19, r18
    2eb0:	22 27       	eor	r18, r18
    2eb2:	37 95       	ror	r19
    2eb4:	27 95       	ror	r18

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;

	uint8_t col = pos.column;
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
    2eb8:	90 e0       	ldi	r25, 0x00	; 0

	uint8_t col = pos.column;

	while (word[i] != '\0')
    2eba:	de 01       	movw	r26, r28
    2ebc:	11 96       	adiw	r26, 0x01	; 1
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2ebe:	b9 01       	movw	r22, r18
    2ec0:	68 0f       	add	r22, r24
    2ec2:	71 1d       	adc	r23, r1
    2ec4:	40 91 11 01 	lds	r20, 0x0111
    2ec8:	50 91 12 01 	lds	r21, 0x0112
    2ecc:	46 0f       	add	r20, r22
    2ece:	57 1f       	adc	r21, r23
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	ee 0f       	add	r30, r30
    2ed4:	ff 1f       	adc	r31, r31
    2ed6:	ee 0f       	add	r30, r30
    2ed8:	ff 1f       	adc	r31, r31
    2eda:	ee 0f       	add	r30, r30
    2edc:	ff 1f       	adc	r31, r31
    2ede:	ee 5a       	subi	r30, 0xAE	; 174
    2ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee2:	64 91       	lpm	r22, Z
    2ee4:	fa 01       	movw	r30, r20
    2ee6:	60 83       	st	Z, r22
			col++;
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2eec:	b9 01       	movw	r22, r18
    2eee:	64 0f       	add	r22, r20
    2ef0:	71 1d       	adc	r23, r1
    2ef2:	40 91 11 01 	lds	r20, 0x0111
    2ef6:	50 91 12 01 	lds	r21, 0x0112
    2efa:	46 0f       	add	r20, r22
    2efc:	57 1f       	adc	r21, r23
    2efe:	ec 91       	ld	r30, X
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	ee 0f       	add	r30, r30
    2f04:	ff 1f       	adc	r31, r31
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	ee 0f       	add	r30, r30
    2f0c:	ff 1f       	adc	r31, r31
    2f0e:	ed 5a       	subi	r30, 0xAD	; 173
    2f10:	fe 4f       	sbci	r31, 0xFE	; 254
    2f12:	64 91       	lpm	r22, Z
    2f14:	fa 01       	movw	r30, r20
    2f16:	60 83       	st	Z, r22
			col++;
    2f18:	42 e0       	ldi	r20, 0x02	; 2
    2f1a:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2f1c:	b9 01       	movw	r22, r18
    2f1e:	64 0f       	add	r22, r20
    2f20:	71 1d       	adc	r23, r1
    2f22:	40 91 11 01 	lds	r20, 0x0111
    2f26:	50 91 12 01 	lds	r21, 0x0112
    2f2a:	46 0f       	add	r20, r22
    2f2c:	57 1f       	adc	r21, r23
    2f2e:	ec 91       	ld	r30, X
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	ee 0f       	add	r30, r30
    2f34:	ff 1f       	adc	r31, r31
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	ee 0f       	add	r30, r30
    2f3c:	ff 1f       	adc	r31, r31
    2f3e:	ec 5a       	subi	r30, 0xAC	; 172
    2f40:	fe 4f       	sbci	r31, 0xFE	; 254
    2f42:	64 91       	lpm	r22, Z
    2f44:	fa 01       	movw	r30, r20
    2f46:	60 83       	st	Z, r22
			col++;
    2f48:	43 e0       	ldi	r20, 0x03	; 3
    2f4a:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2f4c:	b9 01       	movw	r22, r18
    2f4e:	64 0f       	add	r22, r20
    2f50:	71 1d       	adc	r23, r1
    2f52:	40 91 11 01 	lds	r20, 0x0111
    2f56:	50 91 12 01 	lds	r21, 0x0112
    2f5a:	46 0f       	add	r20, r22
    2f5c:	57 1f       	adc	r21, r23
    2f5e:	ec 91       	ld	r30, X
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	ee 0f       	add	r30, r30
    2f64:	ff 1f       	adc	r31, r31
    2f66:	ee 0f       	add	r30, r30
    2f68:	ff 1f       	adc	r31, r31
    2f6a:	ee 0f       	add	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	eb 5a       	subi	r30, 0xAB	; 171
    2f70:	fe 4f       	sbci	r31, 0xFE	; 254
    2f72:	64 91       	lpm	r22, Z
    2f74:	fa 01       	movw	r30, r20
    2f76:	60 83       	st	Z, r22
			col++;
    2f78:	44 e0       	ldi	r20, 0x04	; 4
    2f7a:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2f7c:	b9 01       	movw	r22, r18
    2f7e:	64 0f       	add	r22, r20
    2f80:	71 1d       	adc	r23, r1
    2f82:	40 91 11 01 	lds	r20, 0x0111
    2f86:	50 91 12 01 	lds	r21, 0x0112
    2f8a:	46 0f       	add	r20, r22
    2f8c:	57 1f       	adc	r21, r23
    2f8e:	ec 91       	ld	r30, X
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	ee 0f       	add	r30, r30
    2f94:	ff 1f       	adc	r31, r31
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	ee 0f       	add	r30, r30
    2f9c:	ff 1f       	adc	r31, r31
    2f9e:	ea 5a       	subi	r30, 0xAA	; 170
    2fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa2:	64 91       	lpm	r22, Z
    2fa4:	fa 01       	movw	r30, r20
    2fa6:	60 83       	st	Z, r22
			col++;
    2fa8:	45 e0       	ldi	r20, 0x05	; 5
    2faa:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2fac:	b9 01       	movw	r22, r18
    2fae:	64 0f       	add	r22, r20
    2fb0:	71 1d       	adc	r23, r1
    2fb2:	40 91 11 01 	lds	r20, 0x0111
    2fb6:	50 91 12 01 	lds	r21, 0x0112
    2fba:	46 0f       	add	r20, r22
    2fbc:	57 1f       	adc	r21, r23
    2fbe:	ec 91       	ld	r30, X
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	ee 0f       	add	r30, r30
    2fc4:	ff 1f       	adc	r31, r31
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	ee 0f       	add	r30, r30
    2fcc:	ff 1f       	adc	r31, r31
    2fce:	e9 5a       	subi	r30, 0xA9	; 169
    2fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd2:	64 91       	lpm	r22, Z
    2fd4:	fa 01       	movw	r30, r20
    2fd6:	60 83       	st	Z, r22
			col++;
    2fd8:	46 e0       	ldi	r20, 0x06	; 6
    2fda:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    2fdc:	b9 01       	movw	r22, r18
    2fde:	64 0f       	add	r22, r20
    2fe0:	71 1d       	adc	r23, r1
    2fe2:	40 91 11 01 	lds	r20, 0x0111
    2fe6:	50 91 12 01 	lds	r21, 0x0112
    2fea:	46 0f       	add	r20, r22
    2fec:	57 1f       	adc	r21, r23
    2fee:	ec 91       	ld	r30, X
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	ee 0f       	add	r30, r30
    2ffc:	ff 1f       	adc	r31, r31
    2ffe:	e8 5a       	subi	r30, 0xA8	; 168
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	64 91       	lpm	r22, Z
    3004:	fa 01       	movw	r30, r20
    3006:	60 83       	st	Z, r22
			col++;
    3008:	47 e0       	ldi	r20, 0x07	; 7
    300a:	48 0f       	add	r20, r24
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    300c:	b9 01       	movw	r22, r18
    300e:	64 0f       	add	r22, r20
    3010:	71 1d       	adc	r23, r1
    3012:	40 91 11 01 	lds	r20, 0x0111
    3016:	50 91 12 01 	lds	r21, 0x0112
    301a:	46 0f       	add	r20, r22
    301c:	57 1f       	adc	r21, r23
    301e:	ec 91       	ld	r30, X
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	ee 0f       	add	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31
    302a:	ee 0f       	add	r30, r30
    302c:	ff 1f       	adc	r31, r31
    302e:	e7 5a       	subi	r30, 0xA7	; 167
    3030:	fe 4f       	sbci	r31, 0xFE	; 254
    3032:	e4 91       	lpm	r30, Z
    3034:	da 01       	movw	r26, r20
    3036:	ec 93       	st	X, r30
			col++;
    3038:	88 5f       	subi	r24, 0xF8	; 248
		}
		i++;
    303a:	9f 5f       	subi	r25, 0xFF	; 255
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    303c:	a1 e0       	ldi	r26, 0x01	; 1
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	ac 0f       	add	r26, r28
    3042:	bd 1f       	adc	r27, r29
    3044:	a9 0f       	add	r26, r25
    3046:	b1 1d       	adc	r27, r1
    3048:	ec 91       	ld	r30, X
    304a:	e1 11       	cpse	r30, r1
    304c:	38 cf       	rjmp	.-400    	; 0x2ebe <printMenu+0xd4>
	char string[MAX_STRING_LENGTH];
	
	clear_buffer();
	if(menu_entries)
	{
		for(int i = 0; i < menu_entries->m_num_submenus; i++)
    304e:	bf ef       	ldi	r27, 0xFF	; 255
    3050:	eb 1a       	sub	r14, r27
    3052:	fb 0a       	sbc	r15, r27
    3054:	f8 01       	movw	r30, r16
    3056:	87 81       	ldd	r24, Z+7	; 0x07
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	e8 16       	cp	r14, r24
    305c:	f9 06       	cpc	r15, r25
    305e:	0c f4       	brge	.+2      	; 0x3062 <printMenu+0x278>
    3060:	f6 ce       	rjmp	.-532    	; 0x2e4e <printMenu+0x64>
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    3062:	80 eb       	ldi	r24, 0xB0	; 176
    3064:	80 93 01 10 	sts	0x1001, r24
    3068:	10 92 01 10 	sts	0x1001, r1
    306c:	80 e1       	ldi	r24, 0x10	; 16
    306e:	80 93 01 10 	sts	0x1001, r24
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    3076:	60 e0       	ldi	r22, 0x00	; 0
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    3078:	70 e1       	ldi	r23, 0x10	; 16
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    307a:	80 e8       	ldi	r24, 0x80	; 128
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	40 58       	subi	r20, 0x80	; 128
    3080:	5f 4f       	sbci	r21, 0xFF	; 255
    3082:	9a 01       	movw	r18, r20
    3084:	28 1b       	sub	r18, r24
    3086:	39 0b       	sbc	r19, r25
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    3088:	e0 91 11 01 	lds	r30, 0x0111
    308c:	f0 91 12 01 	lds	r31, 0x0112
    3090:	e2 0f       	add	r30, r18
    3092:	f3 1f       	adc	r31, r19
    3094:	20 81       	ld	r18, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    3096:	20 93 01 12 	sts	0x1201, r18
    309a:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	89 f7       	brne	.-30     	; 0x3082 <printMenu+0x298>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    30a0:	6f 5f       	subi	r22, 0xFF	; 255
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    30a2:	86 2f       	mov	r24, r22
    30a4:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    30a6:	80 93 01 10 	sts	0x1001, r24
    30aa:	10 92 01 10 	sts	0x1001, r1
    30ae:	70 93 01 10 	sts	0x1001, r23
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    30b2:	68 30       	cpi	r22, 0x08	; 8
    30b4:	11 f7       	brne	.-60     	; 0x307a <printMenu+0x290>
	}
	else
	{
		printf("empty menu pointer detected\n");
	}
}
    30b6:	60 96       	adiw	r28, 0x10	; 16
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	1f 91       	pop	r17
    30c8:	0f 91       	pop	r16
    30ca:	ff 90       	pop	r15
    30cc:	ef 90       	pop	r14
    30ce:	08 95       	ret
					string[i] = 0;
				getStringFromMem(string, menu_entries->m_submenus[i]->m_content.title_id);
				print_string_to_buffer(string, pos);
			}
			else
				printf("NULL submenu\n");
    30d0:	85 e1       	ldi	r24, 0x15	; 21
    30d2:	93 e0       	ldi	r25, 0x03	; 3
    30d4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    30d8:	ba cf       	rjmp	.-140    	; 0x304e <printMenu+0x264>
		}
		print_buffer();
	}
	else
	{
		printf("empty menu pointer detected\n");
    30da:	82 e2       	ldi	r24, 0x22	; 34
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	0e 94 b9 1b 	call	0x3772	; 0x3772 <puts>
    30e2:	e9 cf       	rjmp	.-46     	; 0x30b6 <printMenu+0x2cc>

000030e4 <sayHello>:
	}
}

void sayHello(void)
{
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	60 97       	sbiw	r28, 0x10	; 16
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	40 e0       	ldi	r20, 0x00	; 0
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	80 e8       	ldi	r24, 0x80	; 128
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	40 58       	subi	r20, 0x80	; 128
    310a:	5f 4f       	sbci	r21, 0xFF	; 255
    310c:	9a 01       	movw	r18, r20
    310e:	28 1b       	sub	r18, r24
    3110:	39 0b       	sbc	r19, r25
void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
		{
			oled_buffer[i * N + j] = 0x00;
    3112:	e0 91 11 01 	lds	r30, 0x0111
    3116:	f0 91 12 01 	lds	r31, 0x0112
    311a:	e2 0f       	add	r30, r18
    311c:	f3 1f       	adc	r31, r19
    311e:	10 82       	st	Z, r1
    3120:	01 97       	sbiw	r24, 0x01	; 1
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
		for(uint8_t j= 0; j < N; j++)
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	99 f7       	brne	.-26     	; 0x310c <sayHello+0x28>
	*oled = data;
}

void clear_buffer(void)
{
	for(uint8_t i = 0; i < M; i++)
    3126:	41 15       	cp	r20, r1
    3128:	24 e0       	ldi	r18, 0x04	; 4
    312a:	52 07       	cpc	r21, r18
    312c:	59 f7       	brne	.-42     	; 0x3104 <sayHello+0x20>
    312e:	e0 ea       	ldi	r30, 0xA0	; 160
    3130:	ee 2e       	mov	r14, r30
    3132:	e0 e0       	ldi	r30, 0x00	; 0
    3134:	fe 2e       	mov	r15, r30
void sayHello(void)
{
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
    3136:	00 e0       	ldi	r16, 0x00	; 0
    3138:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (uint8_t i = 0; i < MAX_STRING_LENGTH; i++)
			string[i] = 0;
    313a:	19 82       	std	Y+1, r1	; 0x01
    313c:	1a 82       	std	Y+2, r1	; 0x02
    313e:	1b 82       	std	Y+3, r1	; 0x03
    3140:	1c 82       	std	Y+4, r1	; 0x04
    3142:	1d 82       	std	Y+5, r1	; 0x05
    3144:	1e 82       	std	Y+6, r1	; 0x06
    3146:	1f 82       	std	Y+7, r1	; 0x07
    3148:	18 86       	std	Y+8, r1	; 0x08
    314a:	19 86       	std	Y+9, r1	; 0x09
    314c:	1a 86       	std	Y+10, r1	; 0x0a
    314e:	1b 86       	std	Y+11, r1	; 0x0b
    3150:	1c 86       	std	Y+12, r1	; 0x0c
    3152:	1d 86       	std	Y+13, r1	; 0x0d
    3154:	1e 86       	std	Y+14, r1	; 0x0e
    3156:	1f 86       	std	Y+15, r1	; 0x0f
    3158:	18 8a       	std	Y+16, r1	; 0x10
    315a:	f7 01       	movw	r30, r14
    315c:	65 91       	lpm	r22, Z+
    315e:	74 91       	lpm	r23, Z
    3160:	ce 01       	movw	r24, r28
    3162:	01 96       	adiw	r24, 0x01	; 1
    3164:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <strcpy_P>
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    3168:	e9 81       	ldd	r30, Y+1	; 0x01
    316a:	ee 23       	and	r30, r30
    316c:	09 f4       	brne	.+2      	; 0x3170 <sayHello+0x8c>
    316e:	d2 c0       	rjmp	.+420    	; 0x3314 <sayHello+0x230>
    3170:	c8 01       	movw	r24, r16
    3172:	96 95       	lsr	r25
    3174:	98 2f       	mov	r25, r24
    3176:	88 27       	eor	r24, r24
    3178:	97 95       	ror	r25
    317a:	87 95       	ror	r24
    317c:	20 e0       	ldi	r18, 0x00	; 0
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
    317e:	30 e0       	ldi	r19, 0x00	; 0

	uint8_t col = pos.column;

	while (word[i] != '\0')
    3180:	de 01       	movw	r26, r28
    3182:	11 96       	adiw	r26, 0x01	; 1
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    3184:	bc 01       	movw	r22, r24
    3186:	62 0f       	add	r22, r18
    3188:	71 1d       	adc	r23, r1
    318a:	40 91 11 01 	lds	r20, 0x0111
    318e:	50 91 12 01 	lds	r21, 0x0112
    3192:	46 0f       	add	r20, r22
    3194:	57 1f       	adc	r21, r23
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	ee 0f       	add	r30, r30
    319a:	ff 1f       	adc	r31, r31
    319c:	ee 0f       	add	r30, r30
    319e:	ff 1f       	adc	r31, r31
    31a0:	ee 0f       	add	r30, r30
    31a2:	ff 1f       	adc	r31, r31
    31a4:	ee 5a       	subi	r30, 0xAE	; 174
    31a6:	fe 4f       	sbci	r31, 0xFE	; 254
    31a8:	64 91       	lpm	r22, Z
    31aa:	fa 01       	movw	r30, r20
    31ac:	60 83       	st	Z, r22
			col++;
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    31b2:	bc 01       	movw	r22, r24
    31b4:	64 0f       	add	r22, r20
    31b6:	71 1d       	adc	r23, r1
    31b8:	40 91 11 01 	lds	r20, 0x0111
    31bc:	50 91 12 01 	lds	r21, 0x0112
    31c0:	46 0f       	add	r20, r22
    31c2:	57 1f       	adc	r21, r23
    31c4:	ec 91       	ld	r30, X
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	ee 0f       	add	r30, r30
    31ca:	ff 1f       	adc	r31, r31
    31cc:	ee 0f       	add	r30, r30
    31ce:	ff 1f       	adc	r31, r31
    31d0:	ee 0f       	add	r30, r30
    31d2:	ff 1f       	adc	r31, r31
    31d4:	ed 5a       	subi	r30, 0xAD	; 173
    31d6:	fe 4f       	sbci	r31, 0xFE	; 254
    31d8:	64 91       	lpm	r22, Z
    31da:	fa 01       	movw	r30, r20
    31dc:	60 83       	st	Z, r22
			col++;
    31de:	42 e0       	ldi	r20, 0x02	; 2
    31e0:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    31e2:	bc 01       	movw	r22, r24
    31e4:	64 0f       	add	r22, r20
    31e6:	71 1d       	adc	r23, r1
    31e8:	40 91 11 01 	lds	r20, 0x0111
    31ec:	50 91 12 01 	lds	r21, 0x0112
    31f0:	46 0f       	add	r20, r22
    31f2:	57 1f       	adc	r21, r23
    31f4:	ec 91       	ld	r30, X
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	ee 0f       	add	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	ec 5a       	subi	r30, 0xAC	; 172
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	64 91       	lpm	r22, Z
    320a:	fa 01       	movw	r30, r20
    320c:	60 83       	st	Z, r22
			col++;
    320e:	43 e0       	ldi	r20, 0x03	; 3
    3210:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    3212:	bc 01       	movw	r22, r24
    3214:	64 0f       	add	r22, r20
    3216:	71 1d       	adc	r23, r1
    3218:	40 91 11 01 	lds	r20, 0x0111
    321c:	50 91 12 01 	lds	r21, 0x0112
    3220:	46 0f       	add	r20, r22
    3222:	57 1f       	adc	r21, r23
    3224:	ec 91       	ld	r30, X
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	ee 0f       	add	r30, r30
    322a:	ff 1f       	adc	r31, r31
    322c:	ee 0f       	add	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	ee 0f       	add	r30, r30
    3232:	ff 1f       	adc	r31, r31
    3234:	eb 5a       	subi	r30, 0xAB	; 171
    3236:	fe 4f       	sbci	r31, 0xFE	; 254
    3238:	64 91       	lpm	r22, Z
    323a:	fa 01       	movw	r30, r20
    323c:	60 83       	st	Z, r22
			col++;
    323e:	44 e0       	ldi	r20, 0x04	; 4
    3240:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    3242:	bc 01       	movw	r22, r24
    3244:	64 0f       	add	r22, r20
    3246:	71 1d       	adc	r23, r1
    3248:	40 91 11 01 	lds	r20, 0x0111
    324c:	50 91 12 01 	lds	r21, 0x0112
    3250:	46 0f       	add	r20, r22
    3252:	57 1f       	adc	r21, r23
    3254:	ec 91       	ld	r30, X
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	ee 0f       	add	r30, r30
    325a:	ff 1f       	adc	r31, r31
    325c:	ee 0f       	add	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	ee 0f       	add	r30, r30
    3262:	ff 1f       	adc	r31, r31
    3264:	ea 5a       	subi	r30, 0xAA	; 170
    3266:	fe 4f       	sbci	r31, 0xFE	; 254
    3268:	64 91       	lpm	r22, Z
    326a:	fa 01       	movw	r30, r20
    326c:	60 83       	st	Z, r22
			col++;
    326e:	45 e0       	ldi	r20, 0x05	; 5
    3270:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    3272:	bc 01       	movw	r22, r24
    3274:	64 0f       	add	r22, r20
    3276:	71 1d       	adc	r23, r1
    3278:	40 91 11 01 	lds	r20, 0x0111
    327c:	50 91 12 01 	lds	r21, 0x0112
    3280:	46 0f       	add	r20, r22
    3282:	57 1f       	adc	r21, r23
    3284:	ec 91       	ld	r30, X
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	ee 0f       	add	r30, r30
    328a:	ff 1f       	adc	r31, r31
    328c:	ee 0f       	add	r30, r30
    328e:	ff 1f       	adc	r31, r31
    3290:	ee 0f       	add	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	e9 5a       	subi	r30, 0xA9	; 169
    3296:	fe 4f       	sbci	r31, 0xFE	; 254
    3298:	64 91       	lpm	r22, Z
    329a:	fa 01       	movw	r30, r20
    329c:	60 83       	st	Z, r22
			col++;
    329e:	46 e0       	ldi	r20, 0x06	; 6
    32a0:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    32a2:	bc 01       	movw	r22, r24
    32a4:	64 0f       	add	r22, r20
    32a6:	71 1d       	adc	r23, r1
    32a8:	40 91 11 01 	lds	r20, 0x0111
    32ac:	50 91 12 01 	lds	r21, 0x0112
    32b0:	46 0f       	add	r20, r22
    32b2:	57 1f       	adc	r21, r23
    32b4:	ec 91       	ld	r30, X
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	ee 0f       	add	r30, r30
    32ba:	ff 1f       	adc	r31, r31
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	e8 5a       	subi	r30, 0xA8	; 168
    32c6:	fe 4f       	sbci	r31, 0xFE	; 254
    32c8:	64 91       	lpm	r22, Z
    32ca:	fa 01       	movw	r30, r20
    32cc:	60 83       	st	Z, r22
			col++;
    32ce:	47 e0       	ldi	r20, 0x07	; 7
    32d0:	42 0f       	add	r20, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    32d2:	bc 01       	movw	r22, r24
    32d4:	64 0f       	add	r22, r20
    32d6:	71 1d       	adc	r23, r1
    32d8:	40 91 11 01 	lds	r20, 0x0111
    32dc:	50 91 12 01 	lds	r21, 0x0112
    32e0:	46 0f       	add	r20, r22
    32e2:	57 1f       	adc	r21, r23
    32e4:	ec 91       	ld	r30, X
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	ee 0f       	add	r30, r30
    32ea:	ff 1f       	adc	r31, r31
    32ec:	ee 0f       	add	r30, r30
    32ee:	ff 1f       	adc	r31, r31
    32f0:	ee 0f       	add	r30, r30
    32f2:	ff 1f       	adc	r31, r31
    32f4:	e7 5a       	subi	r30, 0xA7	; 167
    32f6:	fe 4f       	sbci	r31, 0xFE	; 254
    32f8:	e4 91       	lpm	r30, Z
    32fa:	da 01       	movw	r26, r20
    32fc:	ec 93       	st	X, r30
			col++;
		}
		i++;
    32fe:	3f 5f       	subi	r19, 0xFF	; 255
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    3300:	a1 e0       	ldi	r26, 0x01	; 1
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	ac 0f       	add	r26, r28
    3306:	bd 1f       	adc	r27, r29
    3308:	a3 0f       	add	r26, r19
    330a:	b1 1d       	adc	r27, r1
    330c:	ec 91       	ld	r30, X
    330e:	28 5f       	subi	r18, 0xF8	; 248
    3310:	e1 11       	cpse	r30, r1
    3312:	38 cf       	rjmp	.-400    	; 0x3184 <sayHello+0xa0>
void sayHello(void)
{
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
    3314:	0f 5f       	subi	r16, 0xFF	; 255
    3316:	1f 4f       	sbci	r17, 0xFF	; 255
    3318:	b2 e0       	ldi	r27, 0x02	; 2
    331a:	eb 0e       	add	r14, r27
    331c:	f1 1c       	adc	r15, r1
    331e:	07 30       	cpi	r16, 0x07	; 7
    3320:	11 05       	cpc	r17, r1
    3322:	09 f0       	breq	.+2      	; 0x3326 <sayHello+0x242>
    3324:	0a cf       	rjmp	.-492    	; 0x313a <sayHello+0x56>
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    3326:	80 eb       	ldi	r24, 0xB0	; 176
    3328:	80 93 01 10 	sts	0x1001, r24
    332c:	10 92 01 10 	sts	0x1001, r1
    3330:	80 e1       	ldi	r24, 0x10	; 16
    3332:	80 93 01 10 	sts	0x1001, r24
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	50 e0       	ldi	r21, 0x00	; 0
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    333a:	60 e0       	ldi	r22, 0x00	; 0
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    333c:	70 e1       	ldi	r23, 0x10	; 16
void sayHello(void)
{
	clear_buffer();
	char string[MAX_STRING_LENGTH];
	position pos = { .page = 0, .column = 0 };
	for(int i = 0; i < 7; i++)
    333e:	80 e8       	ldi	r24, 0x80	; 128
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	40 58       	subi	r20, 0x80	; 128
    3344:	5f 4f       	sbci	r21, 0xFF	; 255
    3346:	9a 01       	movw	r18, r20
    3348:	28 1b       	sub	r18, r24
    334a:	39 0b       	sbc	r19, r25
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * N + j]);
    334c:	e0 91 11 01 	lds	r30, 0x0111
    3350:	f0 91 12 01 	lds	r31, 0x0112
    3354:	e2 0f       	add	r30, r18
    3356:	f3 1f       	adc	r31, r19
    3358:	20 81       	ld	r18, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = (uint8_t *) 0x1201;
	*oled = data;
    335a:	20 93 01 12 	sts	0x1201, r18
    335e:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	89 f7       	brne	.-30     	; 0x3346 <sayHello+0x262>
		{
			oled_print(oled_buffer[i * N + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0x00);
    3364:	6f 5f       	subi	r22, 0xFF	; 255
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
    3366:	86 2f       	mov	r24, r22
    3368:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = (uint8_t *) 0x1001;
	*_command = command;
    336a:	80 93 01 10 	sts	0x1001, r24
    336e:	10 92 01 10 	sts	0x1001, r1
    3372:	70 93 01 10 	sts	0x1001, r23
}

void print_buffer(void)
{
	oled_set_page(0x0);
	for(uint8_t i = 0; i < M; i++)
    3376:	68 30       	cpi	r22, 0x08	; 8
    3378:	11 f7       	brne	.-60     	; 0x333e <sayHello+0x25a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    337a:	ef ef       	ldi	r30, 0xFF	; 255
    337c:	ff ef       	ldi	r31, 0xFF	; 255
    337e:	2d e1       	ldi	r18, 0x1D	; 29
    3380:	e1 50       	subi	r30, 0x01	; 1
    3382:	f0 40       	sbci	r31, 0x00	; 0
    3384:	20 40       	sbci	r18, 0x00	; 0
    3386:	e1 f7       	brne	.-8      	; 0x3380 <sayHello+0x29c>
    3388:	00 c0       	rjmp	.+0      	; 0x338a <sayHello+0x2a6>
    338a:	00 00       	nop
		print_string_to_buffer(string, pos);
		pos.page++;
	}
	print_buffer();
	_delay_ms(2000);
}
    338c:	60 96       	adiw	r28, 0x10	; 16
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	08 95       	ret

000033a6 <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1 << SRE);
    33a6:	85 b7       	in	r24, 0x35	; 53
    33a8:	80 68       	ori	r24, 0x80	; 128
    33aa:	85 bf       	out	0x35, r24	; 53

	//realesing  JTAG pins from memory mapping
	SFIOR |= (1 << XMM2);
    33ac:	80 b7       	in	r24, 0x30	; 48
    33ae:	80 62       	ori	r24, 0x20	; 32
    33b0:	80 bf       	out	0x30, r24	; 48
	SFIOR &= (0 << XMM1);
    33b2:	80 b7       	in	r24, 0x30	; 48
    33b4:	10 be       	out	0x30, r1	; 48
	SFIOR &= (0 << XMM0);
    33b6:	80 b7       	in	r24, 0x30	; 48
    33b8:	10 be       	out	0x30, r1	; 48
    33ba:	08 95       	ret

000033bc <uart_putc>:
}

int uart_putc(uint8_t c)
{
	//wait while register is free
	while (!(UCSR0A & (1 << UDRE0)));
    33bc:	5d 9b       	sbis	0x0b, 5	; 11
    33be:	fe cf       	rjmp	.-4      	; 0x33bc <uart_putc>

	//put character to USART data register
	UDR0 = c;
    33c0:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	08 95       	ret

000033c8 <uart_getc>:

int uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1 << RXC0)));
    33c8:	5f 9b       	sbis	0x0b, 7	; 11
    33ca:	fe cf       	rjmp	.-4      	; 0x33c8 <uart_getc>

	//get value from USART data register
	return UDR0;
    33cc:	8c b1       	in	r24, 0x0c	; 12
}
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	08 95       	ret

000033d2 <uart_init>:

void uart_init(void)
{
	uint8_t ubrr = MYUBRR;
	//set baudrate to 9600
	UBRR0H = (uint8_t) (ubrr >> 8);
    33d2:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (uint8_t) ubrr;
    33d4:	8f e1       	ldi	r24, 0x1F	; 31
    33d6:	89 b9       	out	0x09, r24	; 9

	//enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
    33d8:	8a b1       	in	r24, 0x0a	; 10
    33da:	88 61       	ori	r24, 0x18	; 24
    33dc:	8a b9       	out	0x0a, r24	; 10

	//set UCSRC as accessed register, set number of character size to 8
	#ifdef ATMEGA2560
		UCSR0C |= (3 << UCSZ00);
	#else
		UCSR0C |= (1 << URSEL0) | (3 << UCSZ00);
    33de:	80 b5       	in	r24, 0x20	; 32
    33e0:	86 68       	ori	r24, 0x86	; 134
    33e2:	80 bd       	out	0x20, r24	; 32
	#endif

	//set number of stop bits to 1
	UCSR0C &= ~(1 << USBS0);
    33e4:	80 b5       	in	r24, 0x20	; 32
    33e6:	87 7f       	andi	r24, 0xF7	; 247
    33e8:	80 bd       	out	0x20, r24	; 32
	//set connection to asynchronous
	#ifdef ATMEGA2560
		UCSR0C &= ~(1 << UMSEL00);
		UCSR0C &= ~(1 << UMSEL01);
	#else
		UCSR0C &= ~(1 << UMSEL0);
    33ea:	80 b5       	in	r24, 0x20	; 32
    33ec:	8f 7b       	andi	r24, 0xBF	; 191
    33ee:	80 bd       	out	0x20, r24	; 32
	#endif

	//disable parity mode
	UCSR0C &= ~(1 << UPM00);
    33f0:	80 b5       	in	r24, 0x20	; 32
    33f2:	8f 7e       	andi	r24, 0xEF	; 239
    33f4:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= ~(1 << UPM10);
    33f6:	80 b5       	in	r24, 0x20	; 32
    33f8:	8f 7e       	andi	r24, 0xEF	; 239
    33fa:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_putc, uart_getc);
    33fc:	64 ee       	ldi	r22, 0xE4	; 228
    33fe:	79 e1       	ldi	r23, 0x19	; 25
    3400:	8e ed       	ldi	r24, 0xDE	; 222
    3402:	99 e1       	ldi	r25, 0x19	; 25
    3404:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <fdevopen>

00003408 <__udivmodhi4>:
    3408:	aa 1b       	sub	r26, r26
    340a:	bb 1b       	sub	r27, r27
    340c:	51 e1       	ldi	r21, 0x11	; 17
    340e:	07 c0       	rjmp	.+14     	; 0x341e <__udivmodhi4_ep>

00003410 <__udivmodhi4_loop>:
    3410:	aa 1f       	adc	r26, r26
    3412:	bb 1f       	adc	r27, r27
    3414:	a6 17       	cp	r26, r22
    3416:	b7 07       	cpc	r27, r23
    3418:	10 f0       	brcs	.+4      	; 0x341e <__udivmodhi4_ep>
    341a:	a6 1b       	sub	r26, r22
    341c:	b7 0b       	sbc	r27, r23

0000341e <__udivmodhi4_ep>:
    341e:	88 1f       	adc	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	5a 95       	dec	r21
    3424:	a9 f7       	brne	.-22     	; 0x3410 <__udivmodhi4_loop>
    3426:	80 95       	com	r24
    3428:	90 95       	com	r25
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	08 95       	ret

00003430 <__divmodhi4>:
    3430:	97 fb       	bst	r25, 7
    3432:	07 2e       	mov	r0, r23
    3434:	16 f4       	brtc	.+4      	; 0x343a <__divmodhi4+0xa>
    3436:	00 94       	com	r0
    3438:	07 d0       	rcall	.+14     	; 0x3448 <__divmodhi4_neg1>
    343a:	77 fd       	sbrc	r23, 7
    343c:	09 d0       	rcall	.+18     	; 0x3450 <__divmodhi4_neg2>
    343e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    3442:	07 fc       	sbrc	r0, 7
    3444:	05 d0       	rcall	.+10     	; 0x3450 <__divmodhi4_neg2>
    3446:	3e f4       	brtc	.+14     	; 0x3456 <__divmodhi4_exit>

00003448 <__divmodhi4_neg1>:
    3448:	90 95       	com	r25
    344a:	81 95       	neg	r24
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	08 95       	ret

00003450 <__divmodhi4_neg2>:
    3450:	70 95       	com	r23
    3452:	61 95       	neg	r22
    3454:	7f 4f       	sbci	r23, 0xFF	; 255

00003456 <__divmodhi4_exit>:
    3456:	08 95       	ret

00003458 <malloc>:
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	82 30       	cpi	r24, 0x02	; 2
    345e:	91 05       	cpc	r25, r1
    3460:	10 f4       	brcc	.+4      	; 0x3466 <malloc+0xe>
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	e0 91 99 03 	lds	r30, 0x0399
    346a:	f0 91 9a 03 	lds	r31, 0x039A
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	a0 e0       	ldi	r26, 0x00	; 0
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	30 97       	sbiw	r30, 0x00	; 0
    3478:	39 f1       	breq	.+78     	; 0x34c8 <malloc+0x70>
    347a:	40 81       	ld	r20, Z
    347c:	51 81       	ldd	r21, Z+1	; 0x01
    347e:	48 17       	cp	r20, r24
    3480:	59 07       	cpc	r21, r25
    3482:	b8 f0       	brcs	.+46     	; 0x34b2 <malloc+0x5a>
    3484:	48 17       	cp	r20, r24
    3486:	59 07       	cpc	r21, r25
    3488:	71 f4       	brne	.+28     	; 0x34a6 <malloc+0x4e>
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	93 81       	ldd	r25, Z+3	; 0x03
    348e:	10 97       	sbiw	r26, 0x00	; 0
    3490:	29 f0       	breq	.+10     	; 0x349c <malloc+0x44>
    3492:	13 96       	adiw	r26, 0x03	; 3
    3494:	9c 93       	st	X, r25
    3496:	8e 93       	st	-X, r24
    3498:	12 97       	sbiw	r26, 0x02	; 2
    349a:	2c c0       	rjmp	.+88     	; 0x34f4 <malloc+0x9c>
    349c:	90 93 9a 03 	sts	0x039A, r25
    34a0:	80 93 99 03 	sts	0x0399, r24
    34a4:	27 c0       	rjmp	.+78     	; 0x34f4 <malloc+0x9c>
    34a6:	21 15       	cp	r18, r1
    34a8:	31 05       	cpc	r19, r1
    34aa:	31 f0       	breq	.+12     	; 0x34b8 <malloc+0x60>
    34ac:	42 17       	cp	r20, r18
    34ae:	53 07       	cpc	r21, r19
    34b0:	18 f0       	brcs	.+6      	; 0x34b8 <malloc+0x60>
    34b2:	a9 01       	movw	r20, r18
    34b4:	db 01       	movw	r26, r22
    34b6:	01 c0       	rjmp	.+2      	; 0x34ba <malloc+0x62>
    34b8:	ef 01       	movw	r28, r30
    34ba:	9a 01       	movw	r18, r20
    34bc:	bd 01       	movw	r22, r26
    34be:	df 01       	movw	r26, r30
    34c0:	02 80       	ldd	r0, Z+2	; 0x02
    34c2:	f3 81       	ldd	r31, Z+3	; 0x03
    34c4:	e0 2d       	mov	r30, r0
    34c6:	d7 cf       	rjmp	.-82     	; 0x3476 <malloc+0x1e>
    34c8:	21 15       	cp	r18, r1
    34ca:	31 05       	cpc	r19, r1
    34cc:	f9 f0       	breq	.+62     	; 0x350c <malloc+0xb4>
    34ce:	28 1b       	sub	r18, r24
    34d0:	39 0b       	sbc	r19, r25
    34d2:	24 30       	cpi	r18, 0x04	; 4
    34d4:	31 05       	cpc	r19, r1
    34d6:	80 f4       	brcc	.+32     	; 0x34f8 <malloc+0xa0>
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	61 15       	cp	r22, r1
    34de:	71 05       	cpc	r23, r1
    34e0:	21 f0       	breq	.+8      	; 0x34ea <malloc+0x92>
    34e2:	fb 01       	movw	r30, r22
    34e4:	93 83       	std	Z+3, r25	; 0x03
    34e6:	82 83       	std	Z+2, r24	; 0x02
    34e8:	04 c0       	rjmp	.+8      	; 0x34f2 <malloc+0x9a>
    34ea:	90 93 9a 03 	sts	0x039A, r25
    34ee:	80 93 99 03 	sts	0x0399, r24
    34f2:	fe 01       	movw	r30, r28
    34f4:	32 96       	adiw	r30, 0x02	; 2
    34f6:	44 c0       	rjmp	.+136    	; 0x3580 <malloc+0x128>
    34f8:	fe 01       	movw	r30, r28
    34fa:	e2 0f       	add	r30, r18
    34fc:	f3 1f       	adc	r31, r19
    34fe:	81 93       	st	Z+, r24
    3500:	91 93       	st	Z+, r25
    3502:	22 50       	subi	r18, 0x02	; 2
    3504:	31 09       	sbc	r19, r1
    3506:	39 83       	std	Y+1, r19	; 0x01
    3508:	28 83       	st	Y, r18
    350a:	3a c0       	rjmp	.+116    	; 0x3580 <malloc+0x128>
    350c:	20 91 97 03 	lds	r18, 0x0397
    3510:	30 91 98 03 	lds	r19, 0x0398
    3514:	23 2b       	or	r18, r19
    3516:	41 f4       	brne	.+16     	; 0x3528 <malloc+0xd0>
    3518:	20 91 02 01 	lds	r18, 0x0102
    351c:	30 91 03 01 	lds	r19, 0x0103
    3520:	30 93 98 03 	sts	0x0398, r19
    3524:	20 93 97 03 	sts	0x0397, r18
    3528:	20 91 00 01 	lds	r18, 0x0100
    352c:	30 91 01 01 	lds	r19, 0x0101
    3530:	21 15       	cp	r18, r1
    3532:	31 05       	cpc	r19, r1
    3534:	41 f4       	brne	.+16     	; 0x3546 <malloc+0xee>
    3536:	2d b7       	in	r18, 0x3d	; 61
    3538:	3e b7       	in	r19, 0x3e	; 62
    353a:	40 91 04 01 	lds	r20, 0x0104
    353e:	50 91 05 01 	lds	r21, 0x0105
    3542:	24 1b       	sub	r18, r20
    3544:	35 0b       	sbc	r19, r21
    3546:	e0 91 97 03 	lds	r30, 0x0397
    354a:	f0 91 98 03 	lds	r31, 0x0398
    354e:	e2 17       	cp	r30, r18
    3550:	f3 07       	cpc	r31, r19
    3552:	a0 f4       	brcc	.+40     	; 0x357c <malloc+0x124>
    3554:	2e 1b       	sub	r18, r30
    3556:	3f 0b       	sbc	r19, r31
    3558:	28 17       	cp	r18, r24
    355a:	39 07       	cpc	r19, r25
    355c:	78 f0       	brcs	.+30     	; 0x357c <malloc+0x124>
    355e:	ac 01       	movw	r20, r24
    3560:	4e 5f       	subi	r20, 0xFE	; 254
    3562:	5f 4f       	sbci	r21, 0xFF	; 255
    3564:	24 17       	cp	r18, r20
    3566:	35 07       	cpc	r19, r21
    3568:	48 f0       	brcs	.+18     	; 0x357c <malloc+0x124>
    356a:	4e 0f       	add	r20, r30
    356c:	5f 1f       	adc	r21, r31
    356e:	50 93 98 03 	sts	0x0398, r21
    3572:	40 93 97 03 	sts	0x0397, r20
    3576:	81 93       	st	Z+, r24
    3578:	91 93       	st	Z+, r25
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <malloc+0x128>
    357c:	e0 e0       	ldi	r30, 0x00	; 0
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	cf 01       	movw	r24, r30
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	08 95       	ret

00003588 <free>:
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	09 f4       	brne	.+2      	; 0x3592 <free+0xa>
    3590:	87 c0       	rjmp	.+270    	; 0x36a0 <free+0x118>
    3592:	fc 01       	movw	r30, r24
    3594:	32 97       	sbiw	r30, 0x02	; 2
    3596:	13 82       	std	Z+3, r1	; 0x03
    3598:	12 82       	std	Z+2, r1	; 0x02
    359a:	c0 91 99 03 	lds	r28, 0x0399
    359e:	d0 91 9a 03 	lds	r29, 0x039A
    35a2:	20 97       	sbiw	r28, 0x00	; 0
    35a4:	81 f4       	brne	.+32     	; 0x35c6 <free+0x3e>
    35a6:	20 81       	ld	r18, Z
    35a8:	31 81       	ldd	r19, Z+1	; 0x01
    35aa:	28 0f       	add	r18, r24
    35ac:	39 1f       	adc	r19, r25
    35ae:	80 91 97 03 	lds	r24, 0x0397
    35b2:	90 91 98 03 	lds	r25, 0x0398
    35b6:	82 17       	cp	r24, r18
    35b8:	93 07       	cpc	r25, r19
    35ba:	79 f5       	brne	.+94     	; 0x361a <free+0x92>
    35bc:	f0 93 98 03 	sts	0x0398, r31
    35c0:	e0 93 97 03 	sts	0x0397, r30
    35c4:	6d c0       	rjmp	.+218    	; 0x36a0 <free+0x118>
    35c6:	de 01       	movw	r26, r28
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	ae 17       	cp	r26, r30
    35ce:	bf 07       	cpc	r27, r31
    35d0:	50 f4       	brcc	.+20     	; 0x35e6 <free+0x5e>
    35d2:	12 96       	adiw	r26, 0x02	; 2
    35d4:	4d 91       	ld	r20, X+
    35d6:	5c 91       	ld	r21, X
    35d8:	13 97       	sbiw	r26, 0x03	; 3
    35da:	9d 01       	movw	r18, r26
    35dc:	41 15       	cp	r20, r1
    35de:	51 05       	cpc	r21, r1
    35e0:	09 f1       	breq	.+66     	; 0x3624 <free+0x9c>
    35e2:	da 01       	movw	r26, r20
    35e4:	f3 cf       	rjmp	.-26     	; 0x35cc <free+0x44>
    35e6:	b3 83       	std	Z+3, r27	; 0x03
    35e8:	a2 83       	std	Z+2, r26	; 0x02
    35ea:	40 81       	ld	r20, Z
    35ec:	51 81       	ldd	r21, Z+1	; 0x01
    35ee:	84 0f       	add	r24, r20
    35f0:	95 1f       	adc	r25, r21
    35f2:	8a 17       	cp	r24, r26
    35f4:	9b 07       	cpc	r25, r27
    35f6:	71 f4       	brne	.+28     	; 0x3614 <free+0x8c>
    35f8:	8d 91       	ld	r24, X+
    35fa:	9c 91       	ld	r25, X
    35fc:	11 97       	sbiw	r26, 0x01	; 1
    35fe:	84 0f       	add	r24, r20
    3600:	95 1f       	adc	r25, r21
    3602:	02 96       	adiw	r24, 0x02	; 2
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
    3608:	12 96       	adiw	r26, 0x02	; 2
    360a:	8d 91       	ld	r24, X+
    360c:	9c 91       	ld	r25, X
    360e:	13 97       	sbiw	r26, 0x03	; 3
    3610:	93 83       	std	Z+3, r25	; 0x03
    3612:	82 83       	std	Z+2, r24	; 0x02
    3614:	21 15       	cp	r18, r1
    3616:	31 05       	cpc	r19, r1
    3618:	29 f4       	brne	.+10     	; 0x3624 <free+0x9c>
    361a:	f0 93 9a 03 	sts	0x039A, r31
    361e:	e0 93 99 03 	sts	0x0399, r30
    3622:	3e c0       	rjmp	.+124    	; 0x36a0 <free+0x118>
    3624:	d9 01       	movw	r26, r18
    3626:	13 96       	adiw	r26, 0x03	; 3
    3628:	fc 93       	st	X, r31
    362a:	ee 93       	st	-X, r30
    362c:	12 97       	sbiw	r26, 0x02	; 2
    362e:	4d 91       	ld	r20, X+
    3630:	5d 91       	ld	r21, X+
    3632:	a4 0f       	add	r26, r20
    3634:	b5 1f       	adc	r27, r21
    3636:	ea 17       	cp	r30, r26
    3638:	fb 07       	cpc	r31, r27
    363a:	79 f4       	brne	.+30     	; 0x365a <free+0xd2>
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	84 0f       	add	r24, r20
    3642:	95 1f       	adc	r25, r21
    3644:	02 96       	adiw	r24, 0x02	; 2
    3646:	d9 01       	movw	r26, r18
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	9c 93       	st	X, r25
    364c:	8e 93       	st	-X, r24
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	13 96       	adiw	r26, 0x03	; 3
    3654:	9c 93       	st	X, r25
    3656:	8e 93       	st	-X, r24
    3658:	12 97       	sbiw	r26, 0x02	; 2
    365a:	e0 e0       	ldi	r30, 0x00	; 0
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	8a 81       	ldd	r24, Y+2	; 0x02
    3660:	9b 81       	ldd	r25, Y+3	; 0x03
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	19 f0       	breq	.+6      	; 0x366c <free+0xe4>
    3666:	fe 01       	movw	r30, r28
    3668:	ec 01       	movw	r28, r24
    366a:	f9 cf       	rjmp	.-14     	; 0x365e <free+0xd6>
    366c:	ce 01       	movw	r24, r28
    366e:	02 96       	adiw	r24, 0x02	; 2
    3670:	28 81       	ld	r18, Y
    3672:	39 81       	ldd	r19, Y+1	; 0x01
    3674:	82 0f       	add	r24, r18
    3676:	93 1f       	adc	r25, r19
    3678:	20 91 97 03 	lds	r18, 0x0397
    367c:	30 91 98 03 	lds	r19, 0x0398
    3680:	28 17       	cp	r18, r24
    3682:	39 07       	cpc	r19, r25
    3684:	69 f4       	brne	.+26     	; 0x36a0 <free+0x118>
    3686:	30 97       	sbiw	r30, 0x00	; 0
    3688:	29 f4       	brne	.+10     	; 0x3694 <free+0x10c>
    368a:	10 92 9a 03 	sts	0x039A, r1
    368e:	10 92 99 03 	sts	0x0399, r1
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <free+0x110>
    3694:	13 82       	std	Z+3, r1	; 0x03
    3696:	12 82       	std	Z+2, r1	; 0x02
    3698:	d0 93 98 03 	sts	0x0398, r29
    369c:	c0 93 97 03 	sts	0x0397, r28
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	08 95       	ret

000036a6 <strcpy_P>:
    36a6:	fb 01       	movw	r30, r22
    36a8:	dc 01       	movw	r26, r24
    36aa:	05 90       	lpm	r0, Z+
    36ac:	0d 92       	st	X+, r0
    36ae:	00 20       	and	r0, r0
    36b0:	e1 f7       	brne	.-8      	; 0x36aa <strcpy_P+0x4>
    36b2:	08 95       	ret

000036b4 <fdevopen>:
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	ec 01       	movw	r28, r24
    36be:	8b 01       	movw	r16, r22
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	31 f4       	brne	.+12     	; 0x36d0 <fdevopen+0x1c>
    36c4:	61 15       	cp	r22, r1
    36c6:	71 05       	cpc	r23, r1
    36c8:	19 f4       	brne	.+6      	; 0x36d0 <fdevopen+0x1c>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	38 c0       	rjmp	.+112    	; 0x3740 <fdevopen+0x8c>
    36d0:	6e e0       	ldi	r22, 0x0E	; 14
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <calloc>
    36dc:	fc 01       	movw	r30, r24
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	a1 f3       	breq	.-24     	; 0x36ca <fdevopen+0x16>
    36e2:	80 e8       	ldi	r24, 0x80	; 128
    36e4:	83 83       	std	Z+3, r24	; 0x03
    36e6:	01 15       	cp	r16, r1
    36e8:	11 05       	cpc	r17, r1
    36ea:	71 f0       	breq	.+28     	; 0x3708 <fdevopen+0x54>
    36ec:	13 87       	std	Z+11, r17	; 0x0b
    36ee:	02 87       	std	Z+10, r16	; 0x0a
    36f0:	81 e8       	ldi	r24, 0x81	; 129
    36f2:	83 83       	std	Z+3, r24	; 0x03
    36f4:	80 91 9b 03 	lds	r24, 0x039B
    36f8:	90 91 9c 03 	lds	r25, 0x039C
    36fc:	89 2b       	or	r24, r25
    36fe:	21 f4       	brne	.+8      	; 0x3708 <fdevopen+0x54>
    3700:	f0 93 9c 03 	sts	0x039C, r31
    3704:	e0 93 9b 03 	sts	0x039B, r30
    3708:	20 97       	sbiw	r28, 0x00	; 0
    370a:	c9 f0       	breq	.+50     	; 0x373e <fdevopen+0x8a>
    370c:	d1 87       	std	Z+9, r29	; 0x09
    370e:	c0 87       	std	Z+8, r28	; 0x08
    3710:	83 81       	ldd	r24, Z+3	; 0x03
    3712:	82 60       	ori	r24, 0x02	; 2
    3714:	83 83       	std	Z+3, r24	; 0x03
    3716:	80 91 9d 03 	lds	r24, 0x039D
    371a:	90 91 9e 03 	lds	r25, 0x039E
    371e:	89 2b       	or	r24, r25
    3720:	71 f4       	brne	.+28     	; 0x373e <fdevopen+0x8a>
    3722:	f0 93 9e 03 	sts	0x039E, r31
    3726:	e0 93 9d 03 	sts	0x039D, r30
    372a:	80 91 9f 03 	lds	r24, 0x039F
    372e:	90 91 a0 03 	lds	r25, 0x03A0
    3732:	89 2b       	or	r24, r25
    3734:	21 f4       	brne	.+8      	; 0x373e <fdevopen+0x8a>
    3736:	f0 93 a0 03 	sts	0x03A0, r31
    373a:	e0 93 9f 03 	sts	0x039F, r30
    373e:	cf 01       	movw	r24, r30
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	08 95       	ret

0000374a <printf>:
    374a:	a0 e0       	ldi	r26, 0x00	; 0
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	eb ea       	ldi	r30, 0xAB	; 171
    3750:	fb e1       	ldi	r31, 0x1B	; 27
    3752:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__prologue_saves__+0x20>
    3756:	fe 01       	movw	r30, r28
    3758:	35 96       	adiw	r30, 0x05	; 5
    375a:	61 91       	ld	r22, Z+
    375c:	71 91       	ld	r23, Z+
    375e:	af 01       	movw	r20, r30
    3760:	80 91 9d 03 	lds	r24, 0x039D
    3764:	90 91 9e 03 	lds	r25, 0x039E
    3768:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <vfprintf>
    376c:	e2 e0       	ldi	r30, 0x02	; 2
    376e:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__epilogue_restores__+0x20>

00003772 <puts>:
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	e0 91 9d 03 	lds	r30, 0x039D
    377e:	f0 91 9e 03 	lds	r31, 0x039E
    3782:	23 81       	ldd	r18, Z+3	; 0x03
    3784:	21 ff       	sbrs	r18, 1
    3786:	1b c0       	rjmp	.+54     	; 0x37be <puts+0x4c>
    3788:	ec 01       	movw	r28, r24
    378a:	00 e0       	ldi	r16, 0x00	; 0
    378c:	10 e0       	ldi	r17, 0x00	; 0
    378e:	89 91       	ld	r24, Y+
    3790:	60 91 9d 03 	lds	r22, 0x039D
    3794:	70 91 9e 03 	lds	r23, 0x039E
    3798:	db 01       	movw	r26, r22
    379a:	18 96       	adiw	r26, 0x08	; 8
    379c:	ed 91       	ld	r30, X+
    379e:	fc 91       	ld	r31, X
    37a0:	19 97       	sbiw	r26, 0x09	; 9
    37a2:	88 23       	and	r24, r24
    37a4:	31 f0       	breq	.+12     	; 0x37b2 <puts+0x40>
    37a6:	09 95       	icall
    37a8:	89 2b       	or	r24, r25
    37aa:	89 f3       	breq	.-30     	; 0x378e <puts+0x1c>
    37ac:	0f ef       	ldi	r16, 0xFF	; 255
    37ae:	1f ef       	ldi	r17, 0xFF	; 255
    37b0:	ee cf       	rjmp	.-36     	; 0x378e <puts+0x1c>
    37b2:	8a e0       	ldi	r24, 0x0A	; 10
    37b4:	09 95       	icall
    37b6:	89 2b       	or	r24, r25
    37b8:	11 f4       	brne	.+4      	; 0x37be <puts+0x4c>
    37ba:	c8 01       	movw	r24, r16
    37bc:	02 c0       	rjmp	.+4      	; 0x37c2 <puts+0x50>
    37be:	8f ef       	ldi	r24, 0xFF	; 255
    37c0:	9f ef       	ldi	r25, 0xFF	; 255
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	08 95       	ret

000037cc <vfprintf>:
    37cc:	ac e0       	ldi	r26, 0x0C	; 12
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	ec ee       	ldi	r30, 0xEC	; 236
    37d2:	fb e1       	ldi	r31, 0x1B	; 27
    37d4:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__prologue_saves__>
    37d8:	7c 01       	movw	r14, r24
    37da:	6b 01       	movw	r12, r22
    37dc:	8a 01       	movw	r16, r20
    37de:	fc 01       	movw	r30, r24
    37e0:	17 82       	std	Z+7, r1	; 0x07
    37e2:	16 82       	std	Z+6, r1	; 0x06
    37e4:	83 81       	ldd	r24, Z+3	; 0x03
    37e6:	81 ff       	sbrs	r24, 1
    37e8:	bd c1       	rjmp	.+890    	; 0x3b64 <vfprintf+0x398>
    37ea:	ce 01       	movw	r24, r28
    37ec:	01 96       	adiw	r24, 0x01	; 1
    37ee:	4c 01       	movw	r8, r24
    37f0:	f7 01       	movw	r30, r14
    37f2:	93 81       	ldd	r25, Z+3	; 0x03
    37f4:	f6 01       	movw	r30, r12
    37f6:	93 fd       	sbrc	r25, 3
    37f8:	85 91       	lpm	r24, Z+
    37fa:	93 ff       	sbrs	r25, 3
    37fc:	81 91       	ld	r24, Z+
    37fe:	6f 01       	movw	r12, r30
    3800:	88 23       	and	r24, r24
    3802:	09 f4       	brne	.+2      	; 0x3806 <vfprintf+0x3a>
    3804:	ab c1       	rjmp	.+854    	; 0x3b5c <vfprintf+0x390>
    3806:	85 32       	cpi	r24, 0x25	; 37
    3808:	39 f4       	brne	.+14     	; 0x3818 <vfprintf+0x4c>
    380a:	93 fd       	sbrc	r25, 3
    380c:	85 91       	lpm	r24, Z+
    380e:	93 ff       	sbrs	r25, 3
    3810:	81 91       	ld	r24, Z+
    3812:	6f 01       	movw	r12, r30
    3814:	85 32       	cpi	r24, 0x25	; 37
    3816:	29 f4       	brne	.+10     	; 0x3822 <vfprintf+0x56>
    3818:	b7 01       	movw	r22, r14
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3820:	e7 cf       	rjmp	.-50     	; 0x37f0 <vfprintf+0x24>
    3822:	51 2c       	mov	r5, r1
    3824:	31 2c       	mov	r3, r1
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	20 32       	cpi	r18, 0x20	; 32
    382a:	a0 f4       	brcc	.+40     	; 0x3854 <vfprintf+0x88>
    382c:	8b 32       	cpi	r24, 0x2B	; 43
    382e:	69 f0       	breq	.+26     	; 0x384a <vfprintf+0x7e>
    3830:	30 f4       	brcc	.+12     	; 0x383e <vfprintf+0x72>
    3832:	80 32       	cpi	r24, 0x20	; 32
    3834:	59 f0       	breq	.+22     	; 0x384c <vfprintf+0x80>
    3836:	83 32       	cpi	r24, 0x23	; 35
    3838:	69 f4       	brne	.+26     	; 0x3854 <vfprintf+0x88>
    383a:	20 61       	ori	r18, 0x10	; 16
    383c:	2c c0       	rjmp	.+88     	; 0x3896 <vfprintf+0xca>
    383e:	8d 32       	cpi	r24, 0x2D	; 45
    3840:	39 f0       	breq	.+14     	; 0x3850 <vfprintf+0x84>
    3842:	80 33       	cpi	r24, 0x30	; 48
    3844:	39 f4       	brne	.+14     	; 0x3854 <vfprintf+0x88>
    3846:	21 60       	ori	r18, 0x01	; 1
    3848:	26 c0       	rjmp	.+76     	; 0x3896 <vfprintf+0xca>
    384a:	22 60       	ori	r18, 0x02	; 2
    384c:	24 60       	ori	r18, 0x04	; 4
    384e:	23 c0       	rjmp	.+70     	; 0x3896 <vfprintf+0xca>
    3850:	28 60       	ori	r18, 0x08	; 8
    3852:	21 c0       	rjmp	.+66     	; 0x3896 <vfprintf+0xca>
    3854:	27 fd       	sbrc	r18, 7
    3856:	27 c0       	rjmp	.+78     	; 0x38a6 <vfprintf+0xda>
    3858:	30 ed       	ldi	r19, 0xD0	; 208
    385a:	38 0f       	add	r19, r24
    385c:	3a 30       	cpi	r19, 0x0A	; 10
    385e:	78 f4       	brcc	.+30     	; 0x387e <vfprintf+0xb2>
    3860:	26 ff       	sbrs	r18, 6
    3862:	06 c0       	rjmp	.+12     	; 0x3870 <vfprintf+0xa4>
    3864:	fa e0       	ldi	r31, 0x0A	; 10
    3866:	5f 9e       	mul	r5, r31
    3868:	30 0d       	add	r19, r0
    386a:	11 24       	eor	r1, r1
    386c:	53 2e       	mov	r5, r19
    386e:	13 c0       	rjmp	.+38     	; 0x3896 <vfprintf+0xca>
    3870:	8a e0       	ldi	r24, 0x0A	; 10
    3872:	38 9e       	mul	r3, r24
    3874:	30 0d       	add	r19, r0
    3876:	11 24       	eor	r1, r1
    3878:	33 2e       	mov	r3, r19
    387a:	20 62       	ori	r18, 0x20	; 32
    387c:	0c c0       	rjmp	.+24     	; 0x3896 <vfprintf+0xca>
    387e:	8e 32       	cpi	r24, 0x2E	; 46
    3880:	21 f4       	brne	.+8      	; 0x388a <vfprintf+0xbe>
    3882:	26 fd       	sbrc	r18, 6
    3884:	6b c1       	rjmp	.+726    	; 0x3b5c <vfprintf+0x390>
    3886:	20 64       	ori	r18, 0x40	; 64
    3888:	06 c0       	rjmp	.+12     	; 0x3896 <vfprintf+0xca>
    388a:	8c 36       	cpi	r24, 0x6C	; 108
    388c:	11 f4       	brne	.+4      	; 0x3892 <vfprintf+0xc6>
    388e:	20 68       	ori	r18, 0x80	; 128
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <vfprintf+0xca>
    3892:	88 36       	cpi	r24, 0x68	; 104
    3894:	41 f4       	brne	.+16     	; 0x38a6 <vfprintf+0xda>
    3896:	f6 01       	movw	r30, r12
    3898:	93 fd       	sbrc	r25, 3
    389a:	85 91       	lpm	r24, Z+
    389c:	93 ff       	sbrs	r25, 3
    389e:	81 91       	ld	r24, Z+
    38a0:	6f 01       	movw	r12, r30
    38a2:	81 11       	cpse	r24, r1
    38a4:	c1 cf       	rjmp	.-126    	; 0x3828 <vfprintf+0x5c>
    38a6:	98 2f       	mov	r25, r24
    38a8:	9f 7d       	andi	r25, 0xDF	; 223
    38aa:	95 54       	subi	r25, 0x45	; 69
    38ac:	93 30       	cpi	r25, 0x03	; 3
    38ae:	28 f4       	brcc	.+10     	; 0x38ba <vfprintf+0xee>
    38b0:	0c 5f       	subi	r16, 0xFC	; 252
    38b2:	1f 4f       	sbci	r17, 0xFF	; 255
    38b4:	ff e3       	ldi	r31, 0x3F	; 63
    38b6:	f9 83       	std	Y+1, r31	; 0x01
    38b8:	0d c0       	rjmp	.+26     	; 0x38d4 <vfprintf+0x108>
    38ba:	83 36       	cpi	r24, 0x63	; 99
    38bc:	31 f0       	breq	.+12     	; 0x38ca <vfprintf+0xfe>
    38be:	83 37       	cpi	r24, 0x73	; 115
    38c0:	71 f0       	breq	.+28     	; 0x38de <vfprintf+0x112>
    38c2:	83 35       	cpi	r24, 0x53	; 83
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <vfprintf+0xfc>
    38c6:	5b c0       	rjmp	.+182    	; 0x397e <vfprintf+0x1b2>
    38c8:	22 c0       	rjmp	.+68     	; 0x390e <vfprintf+0x142>
    38ca:	f8 01       	movw	r30, r16
    38cc:	80 81       	ld	r24, Z
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	0e 5f       	subi	r16, 0xFE	; 254
    38d2:	1f 4f       	sbci	r17, 0xFF	; 255
    38d4:	44 24       	eor	r4, r4
    38d6:	43 94       	inc	r4
    38d8:	51 2c       	mov	r5, r1
    38da:	54 01       	movw	r10, r8
    38dc:	15 c0       	rjmp	.+42     	; 0x3908 <vfprintf+0x13c>
    38de:	38 01       	movw	r6, r16
    38e0:	f2 e0       	ldi	r31, 0x02	; 2
    38e2:	6f 0e       	add	r6, r31
    38e4:	71 1c       	adc	r7, r1
    38e6:	f8 01       	movw	r30, r16
    38e8:	a0 80       	ld	r10, Z
    38ea:	b1 80       	ldd	r11, Z+1	; 0x01
    38ec:	26 ff       	sbrs	r18, 6
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <vfprintf+0x12a>
    38f0:	65 2d       	mov	r22, r5
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <vfprintf+0x12e>
    38f6:	6f ef       	ldi	r22, 0xFF	; 255
    38f8:	7f ef       	ldi	r23, 0xFF	; 255
    38fa:	c5 01       	movw	r24, r10
    38fc:	2c 87       	std	Y+12, r18	; 0x0c
    38fe:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <strnlen>
    3902:	2c 01       	movw	r4, r24
    3904:	83 01       	movw	r16, r6
    3906:	2c 85       	ldd	r18, Y+12	; 0x0c
    3908:	2f 77       	andi	r18, 0x7F	; 127
    390a:	22 2e       	mov	r2, r18
    390c:	17 c0       	rjmp	.+46     	; 0x393c <vfprintf+0x170>
    390e:	38 01       	movw	r6, r16
    3910:	f2 e0       	ldi	r31, 0x02	; 2
    3912:	6f 0e       	add	r6, r31
    3914:	71 1c       	adc	r7, r1
    3916:	f8 01       	movw	r30, r16
    3918:	a0 80       	ld	r10, Z
    391a:	b1 80       	ldd	r11, Z+1	; 0x01
    391c:	26 ff       	sbrs	r18, 6
    391e:	03 c0       	rjmp	.+6      	; 0x3926 <vfprintf+0x15a>
    3920:	65 2d       	mov	r22, r5
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	02 c0       	rjmp	.+4      	; 0x392a <vfprintf+0x15e>
    3926:	6f ef       	ldi	r22, 0xFF	; 255
    3928:	7f ef       	ldi	r23, 0xFF	; 255
    392a:	c5 01       	movw	r24, r10
    392c:	2c 87       	std	Y+12, r18	; 0x0c
    392e:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <strnlen_P>
    3932:	2c 01       	movw	r4, r24
    3934:	2c 85       	ldd	r18, Y+12	; 0x0c
    3936:	20 68       	ori	r18, 0x80	; 128
    3938:	22 2e       	mov	r2, r18
    393a:	83 01       	movw	r16, r6
    393c:	23 fc       	sbrc	r2, 3
    393e:	1b c0       	rjmp	.+54     	; 0x3976 <vfprintf+0x1aa>
    3940:	83 2d       	mov	r24, r3
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	48 16       	cp	r4, r24
    3946:	59 06       	cpc	r5, r25
    3948:	b0 f4       	brcc	.+44     	; 0x3976 <vfprintf+0x1aa>
    394a:	b7 01       	movw	r22, r14
    394c:	80 e2       	ldi	r24, 0x20	; 32
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3954:	3a 94       	dec	r3
    3956:	f4 cf       	rjmp	.-24     	; 0x3940 <vfprintf+0x174>
    3958:	f5 01       	movw	r30, r10
    395a:	27 fc       	sbrc	r2, 7
    395c:	85 91       	lpm	r24, Z+
    395e:	27 fe       	sbrs	r2, 7
    3960:	81 91       	ld	r24, Z+
    3962:	5f 01       	movw	r10, r30
    3964:	b7 01       	movw	r22, r14
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    396c:	31 10       	cpse	r3, r1
    396e:	3a 94       	dec	r3
    3970:	f1 e0       	ldi	r31, 0x01	; 1
    3972:	4f 1a       	sub	r4, r31
    3974:	51 08       	sbc	r5, r1
    3976:	41 14       	cp	r4, r1
    3978:	51 04       	cpc	r5, r1
    397a:	71 f7       	brne	.-36     	; 0x3958 <vfprintf+0x18c>
    397c:	e5 c0       	rjmp	.+458    	; 0x3b48 <vfprintf+0x37c>
    397e:	84 36       	cpi	r24, 0x64	; 100
    3980:	11 f0       	breq	.+4      	; 0x3986 <vfprintf+0x1ba>
    3982:	89 36       	cpi	r24, 0x69	; 105
    3984:	39 f5       	brne	.+78     	; 0x39d4 <vfprintf+0x208>
    3986:	f8 01       	movw	r30, r16
    3988:	27 ff       	sbrs	r18, 7
    398a:	07 c0       	rjmp	.+14     	; 0x399a <vfprintf+0x1ce>
    398c:	60 81       	ld	r22, Z
    398e:	71 81       	ldd	r23, Z+1	; 0x01
    3990:	82 81       	ldd	r24, Z+2	; 0x02
    3992:	93 81       	ldd	r25, Z+3	; 0x03
    3994:	0c 5f       	subi	r16, 0xFC	; 252
    3996:	1f 4f       	sbci	r17, 0xFF	; 255
    3998:	08 c0       	rjmp	.+16     	; 0x39aa <vfprintf+0x1de>
    399a:	60 81       	ld	r22, Z
    399c:	71 81       	ldd	r23, Z+1	; 0x01
    399e:	88 27       	eor	r24, r24
    39a0:	77 fd       	sbrc	r23, 7
    39a2:	80 95       	com	r24
    39a4:	98 2f       	mov	r25, r24
    39a6:	0e 5f       	subi	r16, 0xFE	; 254
    39a8:	1f 4f       	sbci	r17, 0xFF	; 255
    39aa:	2f 76       	andi	r18, 0x6F	; 111
    39ac:	b2 2e       	mov	r11, r18
    39ae:	97 ff       	sbrs	r25, 7
    39b0:	09 c0       	rjmp	.+18     	; 0x39c4 <vfprintf+0x1f8>
    39b2:	90 95       	com	r25
    39b4:	80 95       	com	r24
    39b6:	70 95       	com	r23
    39b8:	61 95       	neg	r22
    39ba:	7f 4f       	sbci	r23, 0xFF	; 255
    39bc:	8f 4f       	sbci	r24, 0xFF	; 255
    39be:	9f 4f       	sbci	r25, 0xFF	; 255
    39c0:	20 68       	ori	r18, 0x80	; 128
    39c2:	b2 2e       	mov	r11, r18
    39c4:	2a e0       	ldi	r18, 0x0A	; 10
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	a4 01       	movw	r20, r8
    39ca:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__ultoa_invert>
    39ce:	a8 2e       	mov	r10, r24
    39d0:	a8 18       	sub	r10, r8
    39d2:	44 c0       	rjmp	.+136    	; 0x3a5c <vfprintf+0x290>
    39d4:	85 37       	cpi	r24, 0x75	; 117
    39d6:	29 f4       	brne	.+10     	; 0x39e2 <vfprintf+0x216>
    39d8:	2f 7e       	andi	r18, 0xEF	; 239
    39da:	b2 2e       	mov	r11, r18
    39dc:	2a e0       	ldi	r18, 0x0A	; 10
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	25 c0       	rjmp	.+74     	; 0x3a2c <vfprintf+0x260>
    39e2:	f2 2f       	mov	r31, r18
    39e4:	f9 7f       	andi	r31, 0xF9	; 249
    39e6:	bf 2e       	mov	r11, r31
    39e8:	8f 36       	cpi	r24, 0x6F	; 111
    39ea:	c1 f0       	breq	.+48     	; 0x3a1c <vfprintf+0x250>
    39ec:	18 f4       	brcc	.+6      	; 0x39f4 <vfprintf+0x228>
    39ee:	88 35       	cpi	r24, 0x58	; 88
    39f0:	79 f0       	breq	.+30     	; 0x3a10 <vfprintf+0x244>
    39f2:	b4 c0       	rjmp	.+360    	; 0x3b5c <vfprintf+0x390>
    39f4:	80 37       	cpi	r24, 0x70	; 112
    39f6:	19 f0       	breq	.+6      	; 0x39fe <vfprintf+0x232>
    39f8:	88 37       	cpi	r24, 0x78	; 120
    39fa:	21 f0       	breq	.+8      	; 0x3a04 <vfprintf+0x238>
    39fc:	af c0       	rjmp	.+350    	; 0x3b5c <vfprintf+0x390>
    39fe:	2f 2f       	mov	r18, r31
    3a00:	20 61       	ori	r18, 0x10	; 16
    3a02:	b2 2e       	mov	r11, r18
    3a04:	b4 fe       	sbrs	r11, 4
    3a06:	0d c0       	rjmp	.+26     	; 0x3a22 <vfprintf+0x256>
    3a08:	8b 2d       	mov	r24, r11
    3a0a:	84 60       	ori	r24, 0x04	; 4
    3a0c:	b8 2e       	mov	r11, r24
    3a0e:	09 c0       	rjmp	.+18     	; 0x3a22 <vfprintf+0x256>
    3a10:	24 ff       	sbrs	r18, 4
    3a12:	0a c0       	rjmp	.+20     	; 0x3a28 <vfprintf+0x25c>
    3a14:	9f 2f       	mov	r25, r31
    3a16:	96 60       	ori	r25, 0x06	; 6
    3a18:	b9 2e       	mov	r11, r25
    3a1a:	06 c0       	rjmp	.+12     	; 0x3a28 <vfprintf+0x25c>
    3a1c:	28 e0       	ldi	r18, 0x08	; 8
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	05 c0       	rjmp	.+10     	; 0x3a2c <vfprintf+0x260>
    3a22:	20 e1       	ldi	r18, 0x10	; 16
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	02 c0       	rjmp	.+4      	; 0x3a2c <vfprintf+0x260>
    3a28:	20 e1       	ldi	r18, 0x10	; 16
    3a2a:	32 e0       	ldi	r19, 0x02	; 2
    3a2c:	f8 01       	movw	r30, r16
    3a2e:	b7 fe       	sbrs	r11, 7
    3a30:	07 c0       	rjmp	.+14     	; 0x3a40 <vfprintf+0x274>
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	0c 5f       	subi	r16, 0xFC	; 252
    3a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3e:	06 c0       	rjmp	.+12     	; 0x3a4c <vfprintf+0x280>
    3a40:	60 81       	ld	r22, Z
    3a42:	71 81       	ldd	r23, Z+1	; 0x01
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 5f       	subi	r16, 0xFE	; 254
    3a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4c:	a4 01       	movw	r20, r8
    3a4e:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__ultoa_invert>
    3a52:	a8 2e       	mov	r10, r24
    3a54:	a8 18       	sub	r10, r8
    3a56:	fb 2d       	mov	r31, r11
    3a58:	ff 77       	andi	r31, 0x7F	; 127
    3a5a:	bf 2e       	mov	r11, r31
    3a5c:	b6 fe       	sbrs	r11, 6
    3a5e:	0b c0       	rjmp	.+22     	; 0x3a76 <vfprintf+0x2aa>
    3a60:	2b 2d       	mov	r18, r11
    3a62:	2e 7f       	andi	r18, 0xFE	; 254
    3a64:	a5 14       	cp	r10, r5
    3a66:	50 f4       	brcc	.+20     	; 0x3a7c <vfprintf+0x2b0>
    3a68:	b4 fe       	sbrs	r11, 4
    3a6a:	0a c0       	rjmp	.+20     	; 0x3a80 <vfprintf+0x2b4>
    3a6c:	b2 fc       	sbrc	r11, 2
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <vfprintf+0x2b4>
    3a70:	2b 2d       	mov	r18, r11
    3a72:	2e 7e       	andi	r18, 0xEE	; 238
    3a74:	05 c0       	rjmp	.+10     	; 0x3a80 <vfprintf+0x2b4>
    3a76:	7a 2c       	mov	r7, r10
    3a78:	2b 2d       	mov	r18, r11
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <vfprintf+0x2b6>
    3a7c:	7a 2c       	mov	r7, r10
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <vfprintf+0x2b6>
    3a80:	75 2c       	mov	r7, r5
    3a82:	24 ff       	sbrs	r18, 4
    3a84:	0d c0       	rjmp	.+26     	; 0x3aa0 <vfprintf+0x2d4>
    3a86:	fe 01       	movw	r30, r28
    3a88:	ea 0d       	add	r30, r10
    3a8a:	f1 1d       	adc	r31, r1
    3a8c:	80 81       	ld	r24, Z
    3a8e:	80 33       	cpi	r24, 0x30	; 48
    3a90:	11 f4       	brne	.+4      	; 0x3a96 <vfprintf+0x2ca>
    3a92:	29 7e       	andi	r18, 0xE9	; 233
    3a94:	09 c0       	rjmp	.+18     	; 0x3aa8 <vfprintf+0x2dc>
    3a96:	22 ff       	sbrs	r18, 2
    3a98:	06 c0       	rjmp	.+12     	; 0x3aa6 <vfprintf+0x2da>
    3a9a:	73 94       	inc	r7
    3a9c:	73 94       	inc	r7
    3a9e:	04 c0       	rjmp	.+8      	; 0x3aa8 <vfprintf+0x2dc>
    3aa0:	82 2f       	mov	r24, r18
    3aa2:	86 78       	andi	r24, 0x86	; 134
    3aa4:	09 f0       	breq	.+2      	; 0x3aa8 <vfprintf+0x2dc>
    3aa6:	73 94       	inc	r7
    3aa8:	23 fd       	sbrc	r18, 3
    3aaa:	13 c0       	rjmp	.+38     	; 0x3ad2 <vfprintf+0x306>
    3aac:	20 ff       	sbrs	r18, 0
    3aae:	06 c0       	rjmp	.+12     	; 0x3abc <vfprintf+0x2f0>
    3ab0:	5a 2c       	mov	r5, r10
    3ab2:	73 14       	cp	r7, r3
    3ab4:	18 f4       	brcc	.+6      	; 0x3abc <vfprintf+0x2f0>
    3ab6:	53 0c       	add	r5, r3
    3ab8:	57 18       	sub	r5, r7
    3aba:	73 2c       	mov	r7, r3
    3abc:	73 14       	cp	r7, r3
    3abe:	68 f4       	brcc	.+26     	; 0x3ada <vfprintf+0x30e>
    3ac0:	b7 01       	movw	r22, r14
    3ac2:	80 e2       	ldi	r24, 0x20	; 32
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	2c 87       	std	Y+12, r18	; 0x0c
    3ac8:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3acc:	73 94       	inc	r7
    3ace:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ad0:	f5 cf       	rjmp	.-22     	; 0x3abc <vfprintf+0x2f0>
    3ad2:	73 14       	cp	r7, r3
    3ad4:	10 f4       	brcc	.+4      	; 0x3ada <vfprintf+0x30e>
    3ad6:	37 18       	sub	r3, r7
    3ad8:	01 c0       	rjmp	.+2      	; 0x3adc <vfprintf+0x310>
    3ada:	31 2c       	mov	r3, r1
    3adc:	24 ff       	sbrs	r18, 4
    3ade:	12 c0       	rjmp	.+36     	; 0x3b04 <vfprintf+0x338>
    3ae0:	b7 01       	movw	r22, r14
    3ae2:	80 e3       	ldi	r24, 0x30	; 48
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	2c 87       	std	Y+12, r18	; 0x0c
    3ae8:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3aec:	2c 85       	ldd	r18, Y+12	; 0x0c
    3aee:	22 ff       	sbrs	r18, 2
    3af0:	17 c0       	rjmp	.+46     	; 0x3b20 <vfprintf+0x354>
    3af2:	21 ff       	sbrs	r18, 1
    3af4:	03 c0       	rjmp	.+6      	; 0x3afc <vfprintf+0x330>
    3af6:	88 e5       	ldi	r24, 0x58	; 88
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <vfprintf+0x334>
    3afc:	88 e7       	ldi	r24, 0x78	; 120
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	b7 01       	movw	r22, r14
    3b02:	0c c0       	rjmp	.+24     	; 0x3b1c <vfprintf+0x350>
    3b04:	82 2f       	mov	r24, r18
    3b06:	86 78       	andi	r24, 0x86	; 134
    3b08:	59 f0       	breq	.+22     	; 0x3b20 <vfprintf+0x354>
    3b0a:	21 fd       	sbrc	r18, 1
    3b0c:	02 c0       	rjmp	.+4      	; 0x3b12 <vfprintf+0x346>
    3b0e:	80 e2       	ldi	r24, 0x20	; 32
    3b10:	01 c0       	rjmp	.+2      	; 0x3b14 <vfprintf+0x348>
    3b12:	8b e2       	ldi	r24, 0x2B	; 43
    3b14:	27 fd       	sbrc	r18, 7
    3b16:	8d e2       	ldi	r24, 0x2D	; 45
    3b18:	b7 01       	movw	r22, r14
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3b20:	a5 14       	cp	r10, r5
    3b22:	38 f4       	brcc	.+14     	; 0x3b32 <vfprintf+0x366>
    3b24:	b7 01       	movw	r22, r14
    3b26:	80 e3       	ldi	r24, 0x30	; 48
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3b2e:	5a 94       	dec	r5
    3b30:	f7 cf       	rjmp	.-18     	; 0x3b20 <vfprintf+0x354>
    3b32:	aa 94       	dec	r10
    3b34:	f4 01       	movw	r30, r8
    3b36:	ea 0d       	add	r30, r10
    3b38:	f1 1d       	adc	r31, r1
    3b3a:	80 81       	ld	r24, Z
    3b3c:	b7 01       	movw	r22, r14
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3b44:	a1 10       	cpse	r10, r1
    3b46:	f5 cf       	rjmp	.-22     	; 0x3b32 <vfprintf+0x366>
    3b48:	33 20       	and	r3, r3
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <vfprintf+0x382>
    3b4c:	51 ce       	rjmp	.-862    	; 0x37f0 <vfprintf+0x24>
    3b4e:	b7 01       	movw	r22, r14
    3b50:	80 e2       	ldi	r24, 0x20	; 32
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <fputc>
    3b58:	3a 94       	dec	r3
    3b5a:	f6 cf       	rjmp	.-20     	; 0x3b48 <vfprintf+0x37c>
    3b5c:	f7 01       	movw	r30, r14
    3b5e:	86 81       	ldd	r24, Z+6	; 0x06
    3b60:	97 81       	ldd	r25, Z+7	; 0x07
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <vfprintf+0x39c>
    3b64:	8f ef       	ldi	r24, 0xFF	; 255
    3b66:	9f ef       	ldi	r25, 0xFF	; 255
    3b68:	2c 96       	adiw	r28, 0x0c	; 12
    3b6a:	e2 e1       	ldi	r30, 0x12	; 18
    3b6c:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__epilogue_restores__>

00003b70 <calloc>:
    3b70:	0f 93       	push	r16
    3b72:	1f 93       	push	r17
    3b74:	cf 93       	push	r28
    3b76:	df 93       	push	r29
    3b78:	86 9f       	mul	r24, r22
    3b7a:	80 01       	movw	r16, r0
    3b7c:	87 9f       	mul	r24, r23
    3b7e:	10 0d       	add	r17, r0
    3b80:	96 9f       	mul	r25, r22
    3b82:	10 0d       	add	r17, r0
    3b84:	11 24       	eor	r1, r1
    3b86:	c8 01       	movw	r24, r16
    3b88:	0e 94 2c 1a 	call	0x3458	; 0x3458 <malloc>
    3b8c:	ec 01       	movw	r28, r24
    3b8e:	00 97       	sbiw	r24, 0x00	; 0
    3b90:	29 f0       	breq	.+10     	; 0x3b9c <calloc+0x2c>
    3b92:	a8 01       	movw	r20, r16
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <memset>
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	1f 91       	pop	r17
    3ba4:	0f 91       	pop	r16
    3ba6:	08 95       	ret

00003ba8 <strnlen_P>:
    3ba8:	fc 01       	movw	r30, r24
    3baa:	05 90       	lpm	r0, Z+
    3bac:	61 50       	subi	r22, 0x01	; 1
    3bae:	70 40       	sbci	r23, 0x00	; 0
    3bb0:	01 10       	cpse	r0, r1
    3bb2:	d8 f7       	brcc	.-10     	; 0x3baa <strnlen_P+0x2>
    3bb4:	80 95       	com	r24
    3bb6:	90 95       	com	r25
    3bb8:	8e 0f       	add	r24, r30
    3bba:	9f 1f       	adc	r25, r31
    3bbc:	08 95       	ret

00003bbe <memset>:
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	01 c0       	rjmp	.+2      	; 0x3bc4 <memset+0x6>
    3bc2:	6d 93       	st	X+, r22
    3bc4:	41 50       	subi	r20, 0x01	; 1
    3bc6:	50 40       	sbci	r21, 0x00	; 0
    3bc8:	e0 f7       	brcc	.-8      	; 0x3bc2 <memset+0x4>
    3bca:	08 95       	ret

00003bcc <strnlen>:
    3bcc:	fc 01       	movw	r30, r24
    3bce:	61 50       	subi	r22, 0x01	; 1
    3bd0:	70 40       	sbci	r23, 0x00	; 0
    3bd2:	01 90       	ld	r0, Z+
    3bd4:	01 10       	cpse	r0, r1
    3bd6:	d8 f7       	brcc	.-10     	; 0x3bce <strnlen+0x2>
    3bd8:	80 95       	com	r24
    3bda:	90 95       	com	r25
    3bdc:	8e 0f       	add	r24, r30
    3bde:	9f 1f       	adc	r25, r31
    3be0:	08 95       	ret

00003be2 <fputc>:
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	18 2f       	mov	r17, r24
    3bec:	09 2f       	mov	r16, r25
    3bee:	eb 01       	movw	r28, r22
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	81 fd       	sbrc	r24, 1
    3bf4:	03 c0       	rjmp	.+6      	; 0x3bfc <fputc+0x1a>
    3bf6:	8f ef       	ldi	r24, 0xFF	; 255
    3bf8:	9f ef       	ldi	r25, 0xFF	; 255
    3bfa:	20 c0       	rjmp	.+64     	; 0x3c3c <fputc+0x5a>
    3bfc:	82 ff       	sbrs	r24, 2
    3bfe:	10 c0       	rjmp	.+32     	; 0x3c20 <fputc+0x3e>
    3c00:	4e 81       	ldd	r20, Y+6	; 0x06
    3c02:	5f 81       	ldd	r21, Y+7	; 0x07
    3c04:	2c 81       	ldd	r18, Y+4	; 0x04
    3c06:	3d 81       	ldd	r19, Y+5	; 0x05
    3c08:	42 17       	cp	r20, r18
    3c0a:	53 07       	cpc	r21, r19
    3c0c:	7c f4       	brge	.+30     	; 0x3c2c <fputc+0x4a>
    3c0e:	e8 81       	ld	r30, Y
    3c10:	f9 81       	ldd	r31, Y+1	; 0x01
    3c12:	9f 01       	movw	r18, r30
    3c14:	2f 5f       	subi	r18, 0xFF	; 255
    3c16:	3f 4f       	sbci	r19, 0xFF	; 255
    3c18:	39 83       	std	Y+1, r19	; 0x01
    3c1a:	28 83       	st	Y, r18
    3c1c:	10 83       	st	Z, r17
    3c1e:	06 c0       	rjmp	.+12     	; 0x3c2c <fputc+0x4a>
    3c20:	e8 85       	ldd	r30, Y+8	; 0x08
    3c22:	f9 85       	ldd	r31, Y+9	; 0x09
    3c24:	81 2f       	mov	r24, r17
    3c26:	09 95       	icall
    3c28:	89 2b       	or	r24, r25
    3c2a:	29 f7       	brne	.-54     	; 0x3bf6 <fputc+0x14>
    3c2c:	2e 81       	ldd	r18, Y+6	; 0x06
    3c2e:	3f 81       	ldd	r19, Y+7	; 0x07
    3c30:	2f 5f       	subi	r18, 0xFF	; 255
    3c32:	3f 4f       	sbci	r19, 0xFF	; 255
    3c34:	3f 83       	std	Y+7, r19	; 0x07
    3c36:	2e 83       	std	Y+6, r18	; 0x06
    3c38:	81 2f       	mov	r24, r17
    3c3a:	90 2f       	mov	r25, r16
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	08 95       	ret

00003c46 <__ultoa_invert>:
    3c46:	fa 01       	movw	r30, r20
    3c48:	aa 27       	eor	r26, r26
    3c4a:	28 30       	cpi	r18, 0x08	; 8
    3c4c:	51 f1       	breq	.+84     	; 0x3ca2 <__ultoa_invert+0x5c>
    3c4e:	20 31       	cpi	r18, 0x10	; 16
    3c50:	81 f1       	breq	.+96     	; 0x3cb2 <__ultoa_invert+0x6c>
    3c52:	e8 94       	clt
    3c54:	6f 93       	push	r22
    3c56:	6e 7f       	andi	r22, 0xFE	; 254
    3c58:	6e 5f       	subi	r22, 0xFE	; 254
    3c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	af 4f       	sbci	r26, 0xFF	; 255
    3c62:	b1 e0       	ldi	r27, 0x01	; 1
    3c64:	3e d0       	rcall	.+124    	; 0x3ce2 <__ultoa_invert+0x9c>
    3c66:	b4 e0       	ldi	r27, 0x04	; 4
    3c68:	3c d0       	rcall	.+120    	; 0x3ce2 <__ultoa_invert+0x9c>
    3c6a:	67 0f       	add	r22, r23
    3c6c:	78 1f       	adc	r23, r24
    3c6e:	89 1f       	adc	r24, r25
    3c70:	9a 1f       	adc	r25, r26
    3c72:	a1 1d       	adc	r26, r1
    3c74:	68 0f       	add	r22, r24
    3c76:	79 1f       	adc	r23, r25
    3c78:	8a 1f       	adc	r24, r26
    3c7a:	91 1d       	adc	r25, r1
    3c7c:	a1 1d       	adc	r26, r1
    3c7e:	6a 0f       	add	r22, r26
    3c80:	71 1d       	adc	r23, r1
    3c82:	81 1d       	adc	r24, r1
    3c84:	91 1d       	adc	r25, r1
    3c86:	a1 1d       	adc	r26, r1
    3c88:	20 d0       	rcall	.+64     	; 0x3cca <__ultoa_invert+0x84>
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <__ultoa_invert+0x48>
    3c8c:	68 94       	set
    3c8e:	3f 91       	pop	r19
    3c90:	2a e0       	ldi	r18, 0x0A	; 10
    3c92:	26 9f       	mul	r18, r22
    3c94:	11 24       	eor	r1, r1
    3c96:	30 19       	sub	r19, r0
    3c98:	30 5d       	subi	r19, 0xD0	; 208
    3c9a:	31 93       	st	Z+, r19
    3c9c:	de f6       	brtc	.-74     	; 0x3c54 <__ultoa_invert+0xe>
    3c9e:	cf 01       	movw	r24, r30
    3ca0:	08 95       	ret
    3ca2:	46 2f       	mov	r20, r22
    3ca4:	47 70       	andi	r20, 0x07	; 7
    3ca6:	40 5d       	subi	r20, 0xD0	; 208
    3ca8:	41 93       	st	Z+, r20
    3caa:	b3 e0       	ldi	r27, 0x03	; 3
    3cac:	0f d0       	rcall	.+30     	; 0x3ccc <__ultoa_invert+0x86>
    3cae:	c9 f7       	brne	.-14     	; 0x3ca2 <__ultoa_invert+0x5c>
    3cb0:	f6 cf       	rjmp	.-20     	; 0x3c9e <__ultoa_invert+0x58>
    3cb2:	46 2f       	mov	r20, r22
    3cb4:	4f 70       	andi	r20, 0x0F	; 15
    3cb6:	40 5d       	subi	r20, 0xD0	; 208
    3cb8:	4a 33       	cpi	r20, 0x3A	; 58
    3cba:	18 f0       	brcs	.+6      	; 0x3cc2 <__ultoa_invert+0x7c>
    3cbc:	49 5d       	subi	r20, 0xD9	; 217
    3cbe:	31 fd       	sbrc	r19, 1
    3cc0:	40 52       	subi	r20, 0x20	; 32
    3cc2:	41 93       	st	Z+, r20
    3cc4:	02 d0       	rcall	.+4      	; 0x3cca <__ultoa_invert+0x84>
    3cc6:	a9 f7       	brne	.-22     	; 0x3cb2 <__ultoa_invert+0x6c>
    3cc8:	ea cf       	rjmp	.-44     	; 0x3c9e <__ultoa_invert+0x58>
    3cca:	b4 e0       	ldi	r27, 0x04	; 4
    3ccc:	a6 95       	lsr	r26
    3cce:	97 95       	ror	r25
    3cd0:	87 95       	ror	r24
    3cd2:	77 95       	ror	r23
    3cd4:	67 95       	ror	r22
    3cd6:	ba 95       	dec	r27
    3cd8:	c9 f7       	brne	.-14     	; 0x3ccc <__ultoa_invert+0x86>
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	61 05       	cpc	r22, r1
    3cde:	71 05       	cpc	r23, r1
    3ce0:	08 95       	ret
    3ce2:	9b 01       	movw	r18, r22
    3ce4:	ac 01       	movw	r20, r24
    3ce6:	0a 2e       	mov	r0, r26
    3ce8:	06 94       	lsr	r0
    3cea:	57 95       	ror	r21
    3cec:	47 95       	ror	r20
    3cee:	37 95       	ror	r19
    3cf0:	27 95       	ror	r18
    3cf2:	ba 95       	dec	r27
    3cf4:	c9 f7       	brne	.-14     	; 0x3ce8 <__ultoa_invert+0xa2>
    3cf6:	62 0f       	add	r22, r18
    3cf8:	73 1f       	adc	r23, r19
    3cfa:	84 1f       	adc	r24, r20
    3cfc:	95 1f       	adc	r25, r21
    3cfe:	a0 1d       	adc	r26, r0
    3d00:	08 95       	ret

00003d02 <__prologue_saves__>:
    3d02:	2f 92       	push	r2
    3d04:	3f 92       	push	r3
    3d06:	4f 92       	push	r4
    3d08:	5f 92       	push	r5
    3d0a:	6f 92       	push	r6
    3d0c:	7f 92       	push	r7
    3d0e:	8f 92       	push	r8
    3d10:	9f 92       	push	r9
    3d12:	af 92       	push	r10
    3d14:	bf 92       	push	r11
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	ca 1b       	sub	r28, r26
    3d2c:	db 0b       	sbc	r29, r27
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	09 94       	ijmp

00003d3a <__epilogue_restores__>:
    3d3a:	2a 88       	ldd	r2, Y+18	; 0x12
    3d3c:	39 88       	ldd	r3, Y+17	; 0x11
    3d3e:	48 88       	ldd	r4, Y+16	; 0x10
    3d40:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d42:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d44:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d46:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d48:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d4c:	b9 84       	ldd	r11, Y+9	; 0x09
    3d4e:	c8 84       	ldd	r12, Y+8	; 0x08
    3d50:	df 80       	ldd	r13, Y+7	; 0x07
    3d52:	ee 80       	ldd	r14, Y+6	; 0x06
    3d54:	fd 80       	ldd	r15, Y+5	; 0x05
    3d56:	0c 81       	ldd	r16, Y+4	; 0x04
    3d58:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5a:	aa 81       	ldd	r26, Y+2	; 0x02
    3d5c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d5e:	ce 0f       	add	r28, r30
    3d60:	d1 1d       	adc	r29, r1
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	ed 01       	movw	r28, r26
    3d6e:	08 95       	ret

00003d70 <_exit>:
    3d70:	f8 94       	cli

00003d72 <__stop_program>:
    3d72:	ff cf       	rjmp	.-2      	; 0x3d72 <__stop_program>
