
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  0000175a  000017ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002d4  008002d4  000019c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000320  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030b4  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000132e  00000000  00000000  00004df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001271  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000092c  00000000  00000000  00007394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000087f  00000000  00000000  00007cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ea7  00000000  00000000  0000853f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  0000a3e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <clear_buffer+0x30>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e5       	ldi	r30, 0x5A	; 90
     37c:	f7 e1       	ldi	r31, 0x17	; 23
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3d       	cpi	r26, 0xD4	; 212
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a4 ed       	ldi	r26, 0xD4	; 212
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 3e       	cpi	r26, 0xE2	; 226
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 74 05 	call	0xae8	; 0xae8 <main>
     39e:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_default>

000003a6 <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
     3a6:	8b b7       	in	r24, 0x3b	; 59
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	8b bf       	out	0x3b, r24	; 59
     3ac:	08 95       	ret

000003ae <__vector_3>:
	flag = 0;
	return value;
}

ISR(INT2_vect)
{
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
	flag = 1;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	90 93 d5 02 	sts	0x02D5, r25
     3c4:	80 93 d4 02 	sts	0x02D4, r24
     3c8:	9f 91       	pop	r25
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <can_init>:

volatile int msg_received_flag = 0;

void can_init(void)
{	
	mcp_init();
     3d6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mcp_init>
		
	//turn off filters and rollover for receive buffer 0
	mcp_write(MCP_RXB0CTRL , 0b01100000);
     3da:	60 e6       	ldi	r22, 0x60	; 96
     3dc:	80 e6       	ldi	r24, 0x60	; 96
     3de:	0e 94 34 02 	call	0x468	; 0x468 <mcp_write>

	//enable interrupt for received message on both buffers
	mcp_write(MCP_CANINTE , MCP_RX0IF);
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	8b e2       	ldi	r24, 0x2B	; 43
     3e6:	0e 94 34 02 	call	0x468	; 0x468 <mcp_write>
	
	//activate loopback mode on the MCP2515 for today
	//mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_LOOPBACK);
	
	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages
	mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_NORMAL);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	6f e0       	ldi	r22, 0x0F	; 15
     3ee:	80 ee       	ldi	r24, 0xE0	; 224
     3f0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp_bit_modify>
	
	//enabling CAN interrupts
	cli();
     3f4:	f8 94       	cli
	MCUCR |= (1<<ISC11);
     3f6:	85 b7       	in	r24, 0x35	; 53
     3f8:	88 60       	ori	r24, 0x08	; 8
     3fa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     3fc:	8b b7       	in	r24, 0x3b	; 59
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	8b bf       	out	0x3b, r24	; 59
	sei();
     402:	78 94       	sei
     404:	08 95       	ret

00000406 <__vector_1>:
	
		
}

ISR(INT0_vect)
{
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	2f 93       	push	r18
     412:	3f 93       	push	r19
     414:	4f 93       	push	r20
     416:	5f 93       	push	r21
     418:	6f 93       	push	r22
     41a:	7f 93       	push	r23
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	af 93       	push	r26
     422:	bf 93       	push	r27
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
	printf("interrupted!\n");
     428:	81 e2       	ldi	r24, 0x21	; 33
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 ac 08 	call	0x1158	; 0x1158 <puts>
	//clear interrupt bits for rx buffer 0
	mcp_bit_modify(MCP_RX0IF, MCP_CANINTF, 0x00);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	6c e2       	ldi	r22, 0x2C	; 44
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp_bit_modify>
	
	msg_received_flag = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 d7 02 	sts	0x02D7, r25
     442:	80 93 d6 02 	sts	0x02D6, r24
}
     446:	ff 91       	pop	r31
     448:	ef 91       	pop	r30
     44a:	bf 91       	pop	r27
     44c:	af 91       	pop	r26
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	7f 91       	pop	r23
     454:	6f 91       	pop	r22
     456:	5f 91       	pop	r21
     458:	4f 91       	pop	r20
     45a:	3f 91       	pop	r19
     45c:	2f 91       	pop	r18
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <mcp_write>:
	spi_init();
	mcp_reset();
}

void mcp_write(uint8_t address, char data)
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	d8 2f       	mov	r29, r24
     46e:	c6 2f       	mov	r28, r22
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
     470:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(WRITE);
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	spi_MasterTransmit(address);
     478:	8d 2f       	mov	r24, r29
     47a:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	spi_MasterTransmit(data);
     47e:	8c 2f       	mov	r24, r28
     480:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
     484:	c4 9a       	sbi	0x18, 4	; 24
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <mcp_read>:

uint8_t mcp_read(uint8_t address)
{
     48c:	cf 93       	push	r28
     48e:	c8 2f       	mov	r28, r24
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
     490:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(READ);
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	spi_MasterTransmit(address);
     498:	8c 2f       	mov	r24, r28
     49a:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	
	uint8_t received_char = spi_SlaveReceive();
     49e:	0e 94 9f 02 	call	0x53e	; 0x53e <spi_SlaveReceive>

	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
     4a2:	c4 9a       	sbi	0x18, 4	; 24
	
	return received_char;
}
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <mcp_reset>:
#define BIT_MODIFY		0b00000101

#define SPI_SS PB4

void mcp_reset(void)
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	1f 92       	push	r1
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
     4b2:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(RESET);
     4b4:	80 ec       	ldi	r24, 0xC0	; 192
     4b6:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
     4ba:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	8c ec       	ldi	r24, 0xCC	; 204
     4be:	94 e0       	ldi	r25, 0x04	; 4
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <mcp_reset+0x18>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <mcp_reset+0x1e>
     4c6:	00 00       	nop
	_delay_ms(1);
	
	//Self-test
	volatile uint8_t canstat;
	canstat = mcp_read(MCP_CANSTAT);
     4c8:	8e e0       	ldi	r24, 0x0E	; 14
     4ca:	0e 94 46 02 	call	0x48c	; 0x48c <mcp_read>
     4ce:	89 83       	std	Y+1, r24	; 0x01
	if ((canstat & MODE_MASK) != MODE_CONFIG) {
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	80 7e       	andi	r24, 0xE0	; 224
     4d4:	80 38       	cpi	r24, 0x80	; 128
     4d6:	21 f0       	breq	.+8      	; 0x4e0 <mcp_reset+0x38>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     4d8:	80 e9       	ldi	r24, 0x90	; 144
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 ac 08 	call	0x1158	; 0x1158 <puts>
	}
}
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <mcp_init>:

void mcp_init(void)
{
	spi_init();
     4e8:	0e 94 98 02 	call	0x530	; 0x530 <spi_init>
	mcp_reset();
     4ec:	0e 94 54 02 	call	0x4a8	; 0x4a8 <mcp_reset>
     4f0:	08 95       	ret

000004f2 <mcp_bit_modify>:
		
	return received_char;
}

void mcp_bit_modify(uint8_t mask_byte, uint8_t reg_adr, uint8_t data )
{
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	d8 2f       	mov	r29, r24
     4fa:	16 2f       	mov	r17, r22
     4fc:	c4 2f       	mov	r28, r20
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
     4fe:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(BIT_MODIFY);
     500:	85 e0       	ldi	r24, 0x05	; 5
     502:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	spi_MasterTransmit(reg_adr);
     506:	81 2f       	mov	r24, r17
     508:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	spi_MasterTransmit(mask_byte);
     50c:	8d 2f       	mov	r24, r29
     50e:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	spi_MasterTransmit(data);
     512:	8c 2f       	mov	r24, r28
     514:	0e 94 9b 02 	call	0x536	; 0x536 <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
     518:	c4 9a       	sbi	0x18, 4	; 24

}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	08 95       	ret

00000522 <spi_Masterinit>:
	SPCR = (1<<SPE);
}
void spi_Masterinit(void)
{	
	/* Set MOSI, SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_SS)|(1<<DD_MOSI)|(1<<DD_SCK);
     522:	87 b3       	in	r24, 0x17	; 23
     524:	80 6b       	ori	r24, 0xB0	; 176
     526:	87 bb       	out	0x17, r24	; 23
	//DDRB &= ~(1<<DD_MISO); //set MISO as input
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     528:	8d b1       	in	r24, 0x0d	; 13
     52a:	81 65       	ori	r24, 0x51	; 81
     52c:	8d b9       	out	0x0d, r24	; 13
     52e:	08 95       	ret

00000530 <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
     530:	0e 94 91 02 	call	0x522	; 0x522 <spi_Masterinit>
     534:	08 95       	ret

00000536 <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     536:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     538:	77 9b       	sbis	0x0e, 7	; 14
     53a:	fe cf       	rjmp	.-4      	; 0x538 <spi_MasterTransmit+0x2>
	

}
     53c:	08 95       	ret

0000053e <spi_SlaveReceive>:


char spi_SlaveReceive(void)
{
	//send dummy data
	SPDR = 0xFF;
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	8f b9       	out	0x0f, r24	; 15
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
     542:	77 9b       	sbis	0x0e, 7	; 14
     544:	fe cf       	rjmp	.-4      	; 0x542 <spi_SlaveReceive+0x4>
	;
	/* Return data register */
	return SPDR;
     546:	8f b1       	in	r24, 0x0f	; 15
}
     548:	08 95       	ret

0000054a <draw_one_bit_buffer>:
}

//Calculate the position the char column in memory
int start_calc(POS rect)
{
    return rect.y%8;
     54a:	9c 01       	movw	r18, r24
     54c:	27 70       	andi	r18, 0x07	; 7
     54e:	30 78       	andi	r19, 0x80	; 128
     550:	33 23       	and	r19, r19
     552:	34 f4       	brge	.+12     	; 0x560 <draw_one_bit_buffer+0x16>
     554:	21 50       	subi	r18, 0x01	; 1
     556:	31 09       	sbc	r19, r1
     558:	28 6f       	ori	r18, 0xF8	; 248
     55a:	3f 6f       	ori	r19, 0xFF	; 255
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
void draw_one_bit_buffer(POS bit)
{
    uint8_t res=0;
    uint8_t start=0;
    start=start_calc(bit);
    res|=(1<<start);
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	fa 01       	movw	r30, r20
     566:	02 c0       	rjmp	.+4      	; 0x56c <draw_one_bit_buffer+0x22>
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	2a 95       	dec	r18
     56e:	e2 f7       	brpl	.-8      	; 0x568 <draw_one_bit_buffer+0x1e>
     570:	9f 01       	movw	r18, r30
	if(!(display_buffer[(int)bit.y/8*N+bit.x]>=128))
     572:	ac 01       	movw	r20, r24
     574:	99 23       	and	r25, r25
     576:	14 f4       	brge	.+4      	; 0x57c <draw_one_bit_buffer+0x32>
     578:	49 5f       	subi	r20, 0xF9	; 249
     57a:	5f 4f       	sbci	r21, 0xFF	; 255
     57c:	55 95       	asr	r21
     57e:	47 95       	ror	r20
     580:	55 95       	asr	r21
     582:	47 95       	ror	r20
     584:	55 95       	asr	r21
     586:	47 95       	ror	r20
     588:	56 95       	lsr	r21
     58a:	54 2f       	mov	r21, r20
     58c:	44 27       	eor	r20, r20
     58e:	57 95       	ror	r21
     590:	47 95       	ror	r20
     592:	64 0f       	add	r22, r20
     594:	75 1f       	adc	r23, r21
     596:	80 91 06 01 	lds	r24, 0x0106
     59a:	90 91 07 01 	lds	r25, 0x0107
     59e:	fc 01       	movw	r30, r24
     5a0:	e6 0f       	add	r30, r22
     5a2:	f7 1f       	adc	r31, r23
     5a4:	80 81       	ld	r24, Z
     5a6:	88 23       	and	r24, r24
     5a8:	1c f0       	brlt	.+6      	; 0x5b0 <draw_one_bit_buffer+0x66>
		display_buffer[(int)bit.y/8*N+bit.x]+=res;
     5aa:	40 81       	ld	r20, Z
     5ac:	24 0f       	add	r18, r20
     5ae:	20 83       	st	Z, r18
     5b0:	08 95       	ret

000005b2 <draw_rectangle_buffer>:
    bit_page=abs(rect.Ly-(start_calc(rect.pos)));
    return bit_page;
}

void draw_rectangle_buffer(RECT rect)
{
     5b2:	2f 92       	push	r2
     5b4:	3f 92       	push	r3
     5b6:	4f 92       	push	r4
     5b8:	5f 92       	push	r5
     5ba:	6f 92       	push	r6
     5bc:	7f 92       	push	r7
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	29 97       	sbiw	r28, 0x09	; 9
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	09 83       	std	Y+1, r16	; 0x01
     5e8:	1a 83       	std	Y+2, r17	; 0x02
     5ea:	2b 83       	std	Y+3, r18	; 0x03
     5ec:	3c 83       	std	Y+4, r19	; 0x04
     5ee:	4d 83       	std	Y+5, r20	; 0x05
     5f0:	5e 83       	std	Y+6, r21	; 0x06
     5f2:	6f 83       	std	Y+7, r22	; 0x07
     5f4:	78 87       	std	Y+8, r23	; 0x08
     5f6:	cf 80       	ldd	r12, Y+7	; 0x07
     5f8:	d8 84       	ldd	r13, Y+8	; 0x08
     5fa:	e9 80       	ldd	r14, Y+1	; 0x01
     5fc:	fa 80       	ldd	r15, Y+2	; 0x02
     5fe:	ab 80       	ldd	r10, Y+3	; 0x03
     600:	bc 80       	ldd	r11, Y+4	; 0x04
    int i=0;
    int j=0;
	POS current;
    
	for(i=rect.pos.x;i<rect.Lx+rect.pos.x;i++)
     602:	8d 80       	ldd	r8, Y+5	; 0x05
     604:	9e 80       	ldd	r9, Y+6	; 0x06
     606:	8e 0c       	add	r8, r14
     608:	9f 1c       	adc	r9, r15
     60a:	e8 14       	cp	r14, r8
     60c:	f9 04       	cpc	r15, r9
     60e:	e4 f4       	brge	.+56     	; 0x648 <draw_rectangle_buffer+0x96>
		 for(j=rect.pos.y; j<rect.Ly+rect.pos.y; j++)
     610:	ca 0c       	add	r12, r10
     612:	db 1c       	adc	r13, r11
     614:	2a 2c       	mov	r2, r10
     616:	3b 2c       	mov	r3, r11
     618:	11 c0       	rjmp	.+34     	; 0x63c <draw_rectangle_buffer+0x8a>
		 {
			current.x=i;
     61a:	27 01       	movw	r4, r14
			current.y=j;
     61c:	38 01       	movw	r6, r16
			draw_one_bit_buffer(current);
     61e:	c3 01       	movw	r24, r6
     620:	b2 01       	movw	r22, r4
     622:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
    int i=0;
    int j=0;
	POS current;
    
	for(i=rect.pos.x;i<rect.Lx+rect.pos.x;i++)
		 for(j=rect.pos.y; j<rect.Ly+rect.pos.y; j++)
     626:	0f 5f       	subi	r16, 0xFF	; 255
     628:	1f 4f       	sbci	r17, 0xFF	; 255
     62a:	0c 15       	cp	r16, r12
     62c:	1d 05       	cpc	r17, r13
     62e:	ac f3       	brlt	.-22     	; 0x61a <draw_rectangle_buffer+0x68>
{
    int i=0;
    int j=0;
	POS current;
    
	for(i=rect.pos.x;i<rect.Lx+rect.pos.x;i++)
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	e8 1a       	sub	r14, r24
     634:	f8 0a       	sbc	r15, r24
     636:	e8 14       	cp	r14, r8
     638:	f9 04       	cpc	r15, r9
     63a:	34 f4       	brge	.+12     	; 0x648 <draw_rectangle_buffer+0x96>
		 for(j=rect.pos.y; j<rect.Ly+rect.pos.y; j++)
     63c:	ac 14       	cp	r10, r12
     63e:	bd 04       	cpc	r11, r13
     640:	bc f7       	brge	.-18     	; 0x630 <draw_rectangle_buffer+0x7e>
     642:	02 2d       	mov	r16, r2
     644:	13 2d       	mov	r17, r3
     646:	e9 cf       	rjmp	.-46     	; 0x61a <draw_rectangle_buffer+0x68>
		 {
			current.x=i;
			current.y=j;
			draw_one_bit_buffer(current);
		 }
}
     648:	29 96       	adiw	r28, 0x09	; 9
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	9f 90       	pop	r9
     66a:	8f 90       	pop	r8
     66c:	7f 90       	pop	r7
     66e:	6f 90       	pop	r6
     670:	5f 90       	pop	r5
     672:	4f 90       	pop	r4
     674:	3f 90       	pop	r3
     676:	2f 90       	pop	r2
     678:	08 95       	ret

0000067a <draw_triangle_buffer>:
}


//draw a triangle
void draw_triangle_buffer(TRI tri)
{
     67a:	8f 92       	push	r8
     67c:	9f 92       	push	r9
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	62 97       	sbiw	r28, 0x12	; 18
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	0a 87       	std	Y+10, r16	; 0x0a
     6a4:	1b 87       	std	Y+11, r17	; 0x0b
     6a6:	2c 87       	std	Y+12, r18	; 0x0c
     6a8:	3d 87       	std	Y+13, r19	; 0x0d
     6aa:	4e 87       	std	Y+14, r20	; 0x0e
     6ac:	5f 87       	std	Y+15, r21	; 0x0f
     6ae:	79 8b       	std	Y+17, r23	; 0x11
     6b0:	8a 8b       	std	Y+18, r24	; 0x12
     6b2:	ee 84       	ldd	r14, Y+14	; 0x0e
     6b4:	ff 84       	ldd	r15, Y+15	; 0x0f
    RECT rect;
    rect.pos.x=tri.pos.x;
     6b6:	2a 85       	ldd	r18, Y+10	; 0x0a
     6b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    rect.pos.y=tri.pos.y;
     6ba:	ac 84       	ldd	r10, Y+12	; 0x0c
     6bc:	bd 84       	ldd	r11, Y+13	; 0x0d
    rect.full=tri.full;
     6be:	69 87       	std	Y+9, r22	; 0x09
    switch (tri.ori) {
     6c0:	89 89       	ldd	r24, Y+17	; 0x11
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	91 05       	cpc	r25, r1
     6c8:	61 f0       	breq	.+24     	; 0x6e2 <draw_triangle_buffer+0x68>
     6ca:	1c f4       	brge	.+6      	; 0x6d2 <draw_triangle_buffer+0x58>
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	69 f1       	breq	.+90     	; 0x72a <draw_triangle_buffer+0xb0>
     6d0:	9b c0       	rjmp	.+310    	; 0x808 <draw_triangle_buffer+0x18e>
     6d2:	83 30       	cpi	r24, 0x03	; 3
     6d4:	91 05       	cpc	r25, r1
     6d6:	09 f4       	brne	.+2      	; 0x6da <draw_triangle_buffer+0x60>
     6d8:	4e c0       	rjmp	.+156    	; 0x776 <draw_triangle_buffer+0xfc>
     6da:	04 97       	sbiw	r24, 0x04	; 4
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <draw_triangle_buffer+0x66>
     6de:	71 c0       	rjmp	.+226    	; 0x7c2 <draw_triangle_buffer+0x148>
     6e0:	93 c0       	rjmp	.+294    	; 0x808 <draw_triangle_buffer+0x18e>
     6e2:	69 01       	movw	r12, r18
        {
            rect.Lx=1;
            rect.Ly=tri.l;
            do
            {
                draw_rectangle_buffer(rect);
     6e4:	99 24       	eor	r9, r9
     6e6:	93 94       	inc	r9
     6e8:	81 2c       	mov	r8, r1
     6ea:	0c 2d       	mov	r16, r12
     6ec:	da 82       	std	Y+2, r13	; 0x02
     6ee:	c9 82       	std	Y+1, r12	; 0x01
     6f0:	2a 2d       	mov	r18, r10
     6f2:	bc 82       	std	Y+4, r11	; 0x04
     6f4:	ab 82       	std	Y+3, r10	; 0x03
     6f6:	49 2d       	mov	r20, r9
     6f8:	9d 82       	std	Y+5, r9	; 0x05
     6fa:	8e 82       	std	Y+6, r8	; 0x06
     6fc:	6e 2d       	mov	r22, r14
     6fe:	f8 86       	std	Y+8, r15	; 0x08
     700:	ef 82       	std	Y+7, r14	; 0x07
     702:	1a 81       	ldd	r17, Y+2	; 0x02
     704:	3c 81       	ldd	r19, Y+4	; 0x04
     706:	58 2d       	mov	r21, r8
     708:	78 85       	ldd	r23, Y+8	; 0x08
     70a:	89 85       	ldd	r24, Y+9	; 0x09
     70c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <draw_rectangle_buffer>
                rect.Ly-=2;
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	e8 1a       	sub	r14, r24
     714:	f1 08       	sbc	r15, r1
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	a8 1a       	sub	r10, r24
     71a:	b1 08       	sbc	r11, r1
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	c8 1a       	sub	r12, r24
     720:	d8 0a       	sbc	r13, r24
                rect.pos.y--;
                rect.pos.x++;
            }
            while(rect.Ly>0);
     722:	1e 14       	cp	r1, r14
     724:	1f 04       	cpc	r1, r15
     726:	0c f3       	brlt	.-62     	; 0x6ea <draw_triangle_buffer+0x70>
     728:	6f c0       	rjmp	.+222    	; 0x808 <draw_triangle_buffer+0x18e>
{
    RECT rect;
    rect.pos.x=tri.pos.x;
    rect.pos.y=tri.pos.y;
    rect.full=tri.full;
    switch (tri.ori) {
     72a:	69 01       	movw	r12, r18
     72c:	a2 1a       	sub	r10, r18
     72e:	b3 0a       	sbc	r11, r19
        {
            rect.Lx=1;
            rect.Ly=tri.l;
            do
            {
                draw_rectangle_buffer(rect);
     730:	99 24       	eor	r9, r9
     732:	93 94       	inc	r9
     734:	81 2c       	mov	r8, r1
     736:	0c 2d       	mov	r16, r12
     738:	da 82       	std	Y+2, r13	; 0x02
     73a:	c9 82       	std	Y+1, r12	; 0x01
     73c:	c5 01       	movw	r24, r10
     73e:	8c 0d       	add	r24, r12
     740:	9d 1d       	adc	r25, r13
     742:	28 2f       	mov	r18, r24
     744:	9c 83       	std	Y+4, r25	; 0x04
     746:	8b 83       	std	Y+3, r24	; 0x03
     748:	49 2d       	mov	r20, r9
     74a:	9d 82       	std	Y+5, r9	; 0x05
     74c:	8e 82       	std	Y+6, r8	; 0x06
     74e:	6e 2d       	mov	r22, r14
     750:	f8 86       	std	Y+8, r15	; 0x08
     752:	ef 82       	std	Y+7, r14	; 0x07
     754:	1a 81       	ldd	r17, Y+2	; 0x02
     756:	3c 81       	ldd	r19, Y+4	; 0x04
     758:	58 2d       	mov	r21, r8
     75a:	78 85       	ldd	r23, Y+8	; 0x08
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <draw_rectangle_buffer>
                rect.Ly-=2;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	e8 1a       	sub	r14, r24
     766:	f1 08       	sbc	r15, r1
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	c8 1a       	sub	r12, r24
     76c:	d1 08       	sbc	r13, r1
                rect.pos.y--;
                rect.pos.x--;
            }
            while(rect.Ly>0);
     76e:	1e 14       	cp	r1, r14
     770:	1f 04       	cpc	r1, r15
     772:	0c f3       	brlt	.-62     	; 0x736 <draw_triangle_buffer+0xbc>
     774:	49 c0       	rjmp	.+146    	; 0x808 <draw_triangle_buffer+0x18e>
{
    RECT rect;
    rect.pos.x=tri.pos.x;
    rect.pos.y=tri.pos.y;
    rect.full=tri.full;
    switch (tri.ori) {
     776:	69 01       	movw	r12, r18
     778:	a2 1a       	sub	r10, r18
     77a:	b3 0a       	sbc	r11, r19
        {
            rect.Ly=1;
            rect.Lx=tri.l;
            do
            {
                draw_rectangle_buffer(rect);
     77c:	99 24       	eor	r9, r9
     77e:	93 94       	inc	r9
     780:	81 2c       	mov	r8, r1
     782:	0c 2d       	mov	r16, r12
     784:	da 82       	std	Y+2, r13	; 0x02
     786:	c9 82       	std	Y+1, r12	; 0x01
     788:	c5 01       	movw	r24, r10
     78a:	8c 0d       	add	r24, r12
     78c:	9d 1d       	adc	r25, r13
     78e:	28 2f       	mov	r18, r24
     790:	9c 83       	std	Y+4, r25	; 0x04
     792:	8b 83       	std	Y+3, r24	; 0x03
     794:	4e 2d       	mov	r20, r14
     796:	fe 82       	std	Y+6, r15	; 0x06
     798:	ed 82       	std	Y+5, r14	; 0x05
     79a:	69 2d       	mov	r22, r9
     79c:	9f 82       	std	Y+7, r9	; 0x07
     79e:	88 86       	std	Y+8, r8	; 0x08
     7a0:	1a 81       	ldd	r17, Y+2	; 0x02
     7a2:	3c 81       	ldd	r19, Y+4	; 0x04
     7a4:	5e 81       	ldd	r21, Y+6	; 0x06
     7a6:	78 2d       	mov	r23, r8
     7a8:	89 85       	ldd	r24, Y+9	; 0x09
     7aa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <draw_rectangle_buffer>
                rect.Lx-=2;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	e8 1a       	sub	r14, r24
     7b2:	f1 08       	sbc	r15, r1
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	c8 1a       	sub	r12, r24
     7b8:	d8 0a       	sbc	r13, r24
                rect.pos.y++;
                rect.pos.x++;
            }
            while(rect.Lx>0);
     7ba:	1e 14       	cp	r1, r14
     7bc:	1f 04       	cpc	r1, r15
     7be:	0c f3       	brlt	.-62     	; 0x782 <draw_triangle_buffer+0x108>
     7c0:	23 c0       	rjmp	.+70     	; 0x808 <draw_triangle_buffer+0x18e>
     7c2:	69 01       	movw	r12, r18
        {
            rect.Ly=1;
            rect.Lx=tri.l;
            do
            {
                draw_rectangle_buffer(rect);
     7c4:	99 24       	eor	r9, r9
     7c6:	93 94       	inc	r9
     7c8:	81 2c       	mov	r8, r1
     7ca:	0c 2d       	mov	r16, r12
     7cc:	da 82       	std	Y+2, r13	; 0x02
     7ce:	c9 82       	std	Y+1, r12	; 0x01
     7d0:	2a 2d       	mov	r18, r10
     7d2:	bc 82       	std	Y+4, r11	; 0x04
     7d4:	ab 82       	std	Y+3, r10	; 0x03
     7d6:	4e 2d       	mov	r20, r14
     7d8:	fe 82       	std	Y+6, r15	; 0x06
     7da:	ed 82       	std	Y+5, r14	; 0x05
     7dc:	69 2d       	mov	r22, r9
     7de:	9f 82       	std	Y+7, r9	; 0x07
     7e0:	88 86       	std	Y+8, r8	; 0x08
     7e2:	1a 81       	ldd	r17, Y+2	; 0x02
     7e4:	3c 81       	ldd	r19, Y+4	; 0x04
     7e6:	5e 81       	ldd	r21, Y+6	; 0x06
     7e8:	78 2d       	mov	r23, r8
     7ea:	89 85       	ldd	r24, Y+9	; 0x09
     7ec:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <draw_rectangle_buffer>
                rect.Lx-=2;
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	e8 1a       	sub	r14, r24
     7f4:	f1 08       	sbc	r15, r1
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	a8 1a       	sub	r10, r24
     7fa:	b1 08       	sbc	r11, r1
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	c8 1a       	sub	r12, r24
     800:	d8 0a       	sbc	r13, r24
                rect.pos.y--;
                rect.pos.x++;
            }
            while(rect.Lx>0);
     802:	1e 14       	cp	r1, r14
     804:	1f 04       	cpc	r1, r15
     806:	0c f3       	brlt	.-62     	; 0x7ca <draw_triangle_buffer+0x150>
        }
            break;
        default:
            break;
    }	
}
     808:	62 96       	adiw	r28, 0x12	; 18
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	bf 90       	pop	r11
     826:	af 90       	pop	r10
     828:	9f 90       	pop	r9
     82a:	8f 90       	pop	r8
     82c:	08 95       	ret

0000082e <TEST_graphic>:

void TEST_graphic(void)
{
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	62 97       	sbiw	r28, 0x12	; 18
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
     84e:	0e 94 89 05 	call	0xb12	; 0xb12 <clear_buffer>
	print_buffer();
     852:	0e 94 ae 05 	call	0xb5c	; 0xb5c <print_buffer>
	RECT rect;
	rect.pos.x=2;
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 2f       	mov	r16, r24
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	9a 83       	std	Y+2, r25	; 0x02
	rect.pos.y=2;
     860:	28 2f       	mov	r18, r24
     862:	8b 83       	std	Y+3, r24	; 0x03
     864:	9c 83       	std	Y+4, r25	; 0x04
	rect.Lx=20;
     866:	84 e1       	ldi	r24, 0x14	; 20
     868:	48 2f       	mov	r20, r24
     86a:	8d 83       	std	Y+5, r24	; 0x05
     86c:	9e 83       	std	Y+6, r25	; 0x06
	rect.Ly=20;
     86e:	68 2f       	mov	r22, r24
     870:	8f 83       	std	Y+7, r24	; 0x07
     872:	98 87       	std	Y+8, r25	; 0x08
	draw_rectangle_buffer(rect);
     874:	10 e0       	ldi	r17, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	89 85       	ldd	r24, Y+9	; 0x09
     87e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <draw_rectangle_buffer>
	TRI tri;
	tri.pos.x=30;
	tri.pos.y=30;
	tri.l=5;
     882:	85 e0       	ldi	r24, 0x05	; 5
     884:	48 2f       	mov	r20, r24
     886:	8e 87       	std	Y+14, r24	; 0x0e
     888:	1f 86       	std	Y+15, r1	; 0x0f
	tri.ori=LEFT;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	78 2f       	mov	r23, r24
     88e:	89 8b       	std	Y+17, r24	; 0x11
     890:	1a 8a       	std	Y+18, r1	; 0x12
	draw_triangle_buffer(tri);
     892:	8e e1       	ldi	r24, 0x1E	; 30
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	08 2f       	mov	r16, r24
     898:	28 2f       	mov	r18, r24
     89a:	8c 87       	std	Y+12, r24	; 0x0c
     89c:	9d 87       	std	Y+13, r25	; 0x0d
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	68 89       	ldd	r22, Y+16	; 0x10
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 3d 03 	call	0x67a	; 0x67a <draw_triangle_buffer>
	tri.pos.x++;
	tri.ori=LEFT;
	draw_triangle_buffer(tri);
     8aa:	8f e1       	ldi	r24, 0x1F	; 31
     8ac:	08 2f       	mov	r16, r24
     8ae:	2c 85       	ldd	r18, Y+12	; 0x0c
     8b0:	3d 85       	ldd	r19, Y+13	; 0x0d
     8b2:	4e 85       	ldd	r20, Y+14	; 0x0e
     8b4:	5f 85       	ldd	r21, Y+15	; 0x0f
     8b6:	68 89       	ldd	r22, Y+16	; 0x10
     8b8:	79 89       	ldd	r23, Y+17	; 0x11
     8ba:	8a 89       	ldd	r24, Y+18	; 0x12
     8bc:	0e 94 3d 03 	call	0x67a	; 0x67a <draw_triangle_buffer>
	tri.pos.x=50;
	tri.pos.y=50;
	tri.l=7;
     8c0:	87 e0       	ldi	r24, 0x07	; 7
     8c2:	48 2f       	mov	r20, r24
     8c4:	8e 87       	std	Y+14, r24	; 0x0e
     8c6:	1f 86       	std	Y+15, r1	; 0x0f
	tri.ori=UP;
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	78 2f       	mov	r23, r24
	draw_triangle_buffer(tri);
     8cc:	82 e3       	ldi	r24, 0x32	; 50
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	08 2f       	mov	r16, r24
     8d2:	8a 87       	std	Y+10, r24	; 0x0a
     8d4:	9b 87       	std	Y+11, r25	; 0x0b
     8d6:	28 2f       	mov	r18, r24
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	68 89       	ldd	r22, Y+16	; 0x10
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 3d 03 	call	0x67a	; 0x67a <draw_triangle_buffer>
	tri.pos.y++;
	tri.ori=DOWN;
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	78 2f       	mov	r23, r24
     8e8:	89 8b       	std	Y+17, r24	; 0x11
     8ea:	1a 8a       	std	Y+18, r1	; 0x12
	draw_triangle_buffer(tri);
     8ec:	83 e3       	ldi	r24, 0x33	; 51
     8ee:	28 2f       	mov	r18, r24
     8f0:	8c 87       	std	Y+12, r24	; 0x0c
     8f2:	1d 86       	std	Y+13, r1	; 0x0d
     8f4:	0a 85       	ldd	r16, Y+10	; 0x0a
     8f6:	1b 85       	ldd	r17, Y+11	; 0x0b
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4e 85       	ldd	r20, Y+14	; 0x0e
     8fc:	5f 85       	ldd	r21, Y+15	; 0x0f
     8fe:	68 89       	ldd	r22, Y+16	; 0x10
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	0e 94 3d 03 	call	0x67a	; 0x67a <draw_triangle_buffer>
	POS bit = { .x = 20, .y = 50 };
     906:	0f 2e       	mov	r0, r31
     908:	f4 e1       	ldi	r31, 0x14	; 20
     90a:	cf 2e       	mov	r12, r31
     90c:	d1 2c       	mov	r13, r1
     90e:	f2 e3       	ldi	r31, 0x32	; 50
     910:	ef 2e       	mov	r14, r31
     912:	f1 2c       	mov	r15, r1
     914:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 0;
     91e:	c1 2c       	mov	r12, r1
     920:	d1 2c       	mov	r13, r1
	bit.y = 0;
     922:	e1 2c       	mov	r14, r1
     924:	f1 2c       	mov	r15, r1
	draw_one_bit_buffer(bit);
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 1;
     92e:	cc 24       	eor	r12, r12
     930:	c3 94       	inc	r12
     932:	d1 2c       	mov	r13, r1
	bit.y = 1;
     934:	ee 24       	eor	r14, r14
     936:	e3 94       	inc	r14
     938:	f1 2c       	mov	r15, r1
	draw_one_bit_buffer(bit);
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 2;
     942:	68 94       	set
     944:	cc 24       	eor	r12, r12
     946:	c1 f8       	bld	r12, 1
     948:	d1 2c       	mov	r13, r1
	bit.y = 2;
     94a:	68 94       	set
     94c:	ee 24       	eor	r14, r14
     94e:	e1 f8       	bld	r14, 1
     950:	f1 2c       	mov	r15, r1
	draw_one_bit_buffer(bit);
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 3;
     95a:	0f 2e       	mov	r0, r31
     95c:	f3 e0       	ldi	r31, 0x03	; 3
     95e:	cf 2e       	mov	r12, r31
     960:	d1 2c       	mov	r13, r1
     962:	f0 2d       	mov	r31, r0
	bit.y = 3;
     964:	0f 2e       	mov	r0, r31
     966:	f3 e0       	ldi	r31, 0x03	; 3
     968:	ef 2e       	mov	r14, r31
     96a:	f1 2c       	mov	r15, r1
     96c:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 4;
     976:	68 94       	set
     978:	cc 24       	eor	r12, r12
     97a:	c2 f8       	bld	r12, 2
     97c:	d1 2c       	mov	r13, r1
	bit.y = 4;
     97e:	68 94       	set
     980:	ee 24       	eor	r14, r14
     982:	e2 f8       	bld	r14, 2
     984:	f1 2c       	mov	r15, r1
	draw_one_bit_buffer(bit);
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 5;
     98e:	0f 2e       	mov	r0, r31
     990:	f5 e0       	ldi	r31, 0x05	; 5
     992:	cf 2e       	mov	r12, r31
     994:	d1 2c       	mov	r13, r1
     996:	f0 2d       	mov	r31, r0
	bit.y = 5;
     998:	0f 2e       	mov	r0, r31
     99a:	f5 e0       	ldi	r31, 0x05	; 5
     99c:	ef 2e       	mov	r14, r31
     99e:	f1 2c       	mov	r15, r1
     9a0:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 6;
     9aa:	0f 2e       	mov	r0, r31
     9ac:	f6 e0       	ldi	r31, 0x06	; 6
     9ae:	cf 2e       	mov	r12, r31
     9b0:	d1 2c       	mov	r13, r1
     9b2:	f0 2d       	mov	r31, r0
	bit.y = 6;
     9b4:	0f 2e       	mov	r0, r31
     9b6:	f6 e0       	ldi	r31, 0x06	; 6
     9b8:	ef 2e       	mov	r14, r31
     9ba:	f1 2c       	mov	r15, r1
     9bc:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 7;
     9c6:	0f 2e       	mov	r0, r31
     9c8:	f7 e0       	ldi	r31, 0x07	; 7
     9ca:	cf 2e       	mov	r12, r31
     9cc:	d1 2c       	mov	r13, r1
     9ce:	f0 2d       	mov	r31, r0
	bit.y = 7;
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f7 e0       	ldi	r31, 0x07	; 7
     9d4:	ef 2e       	mov	r14, r31
     9d6:	f1 2c       	mov	r15, r1
     9d8:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     9da:	c7 01       	movw	r24, r14
     9dc:	b6 01       	movw	r22, r12
     9de:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 8;
     9e2:	68 94       	set
     9e4:	cc 24       	eor	r12, r12
     9e6:	c3 f8       	bld	r12, 3
     9e8:	d1 2c       	mov	r13, r1
	bit.y = 8;
     9ea:	68 94       	set
     9ec:	ee 24       	eor	r14, r14
     9ee:	e3 f8       	bld	r14, 3
     9f0:	f1 2c       	mov	r15, r1
	draw_one_bit_buffer(bit);
     9f2:	c7 01       	movw	r24, r14
     9f4:	b6 01       	movw	r22, r12
     9f6:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 9;
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
     9fe:	cf 2e       	mov	r12, r31
     a00:	d1 2c       	mov	r13, r1
     a02:	f0 2d       	mov	r31, r0
	bit.y = 9;
     a04:	0f 2e       	mov	r0, r31
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	ef 2e       	mov	r14, r31
     a0a:	f1 2c       	mov	r15, r1
     a0c:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     a0e:	c7 01       	movw	r24, r14
     a10:	b6 01       	movw	r22, r12
     a12:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 10;
     a16:	0f 2e       	mov	r0, r31
     a18:	fa e0       	ldi	r31, 0x0A	; 10
     a1a:	cf 2e       	mov	r12, r31
     a1c:	d1 2c       	mov	r13, r1
     a1e:	f0 2d       	mov	r31, r0
	bit.y = 10;
     a20:	0f 2e       	mov	r0, r31
     a22:	fa e0       	ldi	r31, 0x0A	; 10
     a24:	ef 2e       	mov	r14, r31
     a26:	f1 2c       	mov	r15, r1
     a28:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     a2a:	c7 01       	movw	r24, r14
     a2c:	b6 01       	movw	r22, r12
     a2e:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	bit.x = 11;
     a32:	0f 2e       	mov	r0, r31
     a34:	fb e0       	ldi	r31, 0x0B	; 11
     a36:	cf 2e       	mov	r12, r31
     a38:	d1 2c       	mov	r13, r1
     a3a:	f0 2d       	mov	r31, r0
	bit.y = 11;
     a3c:	0f 2e       	mov	r0, r31
     a3e:	fb e0       	ldi	r31, 0x0B	; 11
     a40:	ef 2e       	mov	r14, r31
     a42:	f1 2c       	mov	r15, r1
     a44:	f0 2d       	mov	r31, r0
	draw_one_bit_buffer(bit);
     a46:	c7 01       	movw	r24, r14
     a48:	b6 01       	movw	r22, r12
     a4a:	0e 94 a5 02 	call	0x54a	; 0x54a <draw_one_bit_buffer>
	print_buffer();
     a4e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <print_buffer>
	print_buffer_to_serial(); 	
     a52:	0e 94 b9 06 	call	0xd72	; 0xd72 <print_buffer_to_serial>
     a56:	62 96       	adiw	r28, 0x12	; 18
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <main_init>:
JOY_POS joy_pos;
uint8_t current_selection = 0;

void main_init (void)
{
	uart_init(BAUDRATE);
     a74:	8f e1       	ldi	r24, 0x1F	; 31
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 0a 07 	call	0xe14	; 0xe14 <uart_init>
	sram_init();
     a7c:	0e 94 f7 06 	call	0xdee	; 0xdee <sram_init>
	adc_init();
     a80:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	JOY_init();
     a84:	0e 94 86 05 	call	0xb0c	; 0xb0c <JOY_init>
	can_init();
     a88:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <can_init>
	sei();	
     a8c:	78 94       	sei
	oled_init();
     a8e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <oled_init>
	//menu_main = getMenuRoot();
	printf("INIT DONE\n");
     a92:	82 ec       	ldi	r24, 0xC2	; 194
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 ac 08 	call	0x1158	; 0x1158 <puts>
     a9a:	08 95       	ret

00000a9c <__vector_default>:
	}
	
ISR(BADISR_vect)
{
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
	printf("getting random interrupts\n");
     abe:	8c ec       	ldi	r24, 0xCC	; 204
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 ac 08 	call	0x1158	; 0x1158 <puts>
}
     ac6:	ff 91       	pop	r31
     ac8:	ef 91       	pop	r30
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <main>:

int main(void)
{
	main_init();
     ae8:	0e 94 3a 05 	call	0xa74	; 0xa74 <main_init>
	
	//say hello to the guy in front of the display
	sayHello();
     aec:	0e 94 72 06 	call	0xce4	; 0xce4 <sayHello>
     af0:	2f ef       	ldi	r18, 0xFF	; 255
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9e e0       	ldi	r25, 0x0E	; 14
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	80 40       	sbci	r24, 0x00	; 0
     afa:	90 40       	sbci	r25, 0x00	; 0
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <main+0xe>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <main+0x18>
     b00:	00 00       	nop
	printf("CAN id: %d, CAN data length: %d, CAN data: %c, %c, %c, %c, %c \n",node_2.id, node_2.length, node_2.data[0], node_2.data[1], node_2.data[2], node_2.data[3],node_2.data[4], node_2.data[5]);*/
	
	//CAN_test();
	_delay_ms(1000);
	
	TEST_graphic();
     b02:	0e 94 17 04 	call	0x82e	; 0x82e <TEST_graphic>
	//TEST_GAL();
	//TEST_ADC();
	//TEST_SRAM_test();
    //TEST_write_adress();
   return 0;
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	08 95       	ret

00000b0c <JOY_init>:

//
void JOY_init()
{
	//set PIN 0 and 1 of port B as inputs
	DDRB &= (0<<0)&(0<<1);	
     b0c:	87 b3       	in	r24, 0x17	; 23
     b0e:	17 ba       	out	0x17, r1	; 23
     b10:	08 95       	ret

00000b12 <clear_buffer>:
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	14 c0       	rjmp	.+40     	; 0xb44 <clear_buffer+0x32>
     b1c:	9c 01       	movw	r18, r24
     b1e:	24 0f       	add	r18, r20
     b20:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i*128+j] = 0x00;
     b22:	e0 91 08 01 	lds	r30, 0x0108
     b26:	f0 91 09 01 	lds	r31, 0x0109
     b2a:	e2 0f       	add	r30, r18
     b2c:	f3 1f       	adc	r31, r19
     b2e:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	80 38       	cpi	r24, 0x80	; 128
     b34:	91 05       	cpc	r25, r1
     b36:	91 f7       	brne	.-28     	; 0xb1c <clear_buffer+0xa>
     b38:	40 58       	subi	r20, 0x80	; 128
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
     b3c:	41 15       	cp	r20, r1
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	58 07       	cpc	r21, r24
     b42:	19 f0       	breq	.+6      	; 0xb4a <clear_buffer+0x38>
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     b44:	87 2f       	mov	r24, r23
     b46:	96 2f       	mov	r25, r22
     b48:	e9 cf       	rjmp	.-46     	; 0xb1c <clear_buffer+0xa>
     b4a:	08 95       	ret

00000b4c <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
     b4c:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     b4e:	e0 e0       	ldi	r30, 0x00	; 0
     b50:	f0 e1       	ldi	r31, 0x10	; 16
     b52:	80 83       	st	Z, r24
     b54:	10 82       	st	Z, r1
     b56:	8f e7       	ldi	r24, 0x7F	; 127
     b58:	80 83       	st	Z, r24
     b5a:	08 95       	ret

00000b5c <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
	oled_set_page(0);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <oled_set_page>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
     b74:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     b76:	68 94       	set
     b78:	dd 24       	eor	r13, r13
     b7a:	d7 f8       	bld	r13, 7
     b7c:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	d2 e1       	ldi	r29, 0x12	; 18
     b82:	21 c0       	rjmp	.+66     	; 0xbc6 <print_buffer+0x6a>
     b84:	02 2f       	mov	r16, r18
     b86:	13 2f       	mov	r17, r19
     b88:	a9 01       	movw	r20, r18
     b8a:	48 1b       	sub	r20, r24
     b8c:	59 0b       	sbc	r21, r25
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i*128+j]);
     b8e:	e0 91 08 01 	lds	r30, 0x0108
     b92:	f0 91 09 01 	lds	r31, 0x0109
     b96:	e4 0f       	add	r30, r20
     b98:	f5 1f       	adc	r31, r21
     b9a:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     b9c:	48 83       	st	Y, r20
     b9e:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	81 f7       	brne	.-32     	; 0xb84 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	8f 15       	cp	r24, r15
     ba8:	28 f0       	brcs	.+10     	; 0xbb4 <print_buffer+0x58>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8f 0d       	add	r24, r15
     bae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <oled_set_page>
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <print_buffer+0x5e>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
     bba:	f3 94       	inc	r15
     bbc:	88 e0       	ldi	r24, 0x08	; 8
     bbe:	f8 16       	cp	r15, r24
     bc0:	39 f0       	breq	.+14     	; 0xbd0 <print_buffer+0x74>
     bc2:	20 2f       	mov	r18, r16
     bc4:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     bc6:	8d 2d       	mov	r24, r13
     bc8:	9e 2d       	mov	r25, r14
     bca:	20 58       	subi	r18, 0x80	; 128
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	da cf       	rjmp	.-76     	; 0xb84 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
	}
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	08 95       	ret

00000be0 <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	f0 e1       	ldi	r31, 0x10	; 16
     be4:	8e ea       	ldi	r24, 0xAE	; 174
     be6:	80 83       	st	Z, r24
     be8:	81 ea       	ldi	r24, 0xA1	; 161
     bea:	80 83       	st	Z, r24
     bec:	8a ed       	ldi	r24, 0xDA	; 218
     bee:	80 83       	st	Z, r24
     bf0:	82 e1       	ldi	r24, 0x12	; 18
     bf2:	80 83       	st	Z, r24
     bf4:	88 ec       	ldi	r24, 0xC8	; 200
     bf6:	80 83       	st	Z, r24
     bf8:	88 ea       	ldi	r24, 0xA8	; 168
     bfa:	80 83       	st	Z, r24
     bfc:	8f e3       	ldi	r24, 0x3F	; 63
     bfe:	80 83       	st	Z, r24
     c00:	85 ed       	ldi	r24, 0xD5	; 213
     c02:	80 83       	st	Z, r24
     c04:	80 e8       	ldi	r24, 0x80	; 128
     c06:	80 83       	st	Z, r24
     c08:	81 e8       	ldi	r24, 0x81	; 129
     c0a:	80 83       	st	Z, r24
     c0c:	80 e5       	ldi	r24, 0x50	; 80
     c0e:	80 83       	st	Z, r24
     c10:	89 ed       	ldi	r24, 0xD9	; 217
     c12:	80 83       	st	Z, r24
     c14:	81 e2       	ldi	r24, 0x21	; 33
     c16:	80 83       	st	Z, r24
     c18:	80 e2       	ldi	r24, 0x20	; 32
     c1a:	80 83       	st	Z, r24
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	80 83       	st	Z, r24
     c20:	8b ed       	ldi	r24, 0xDB	; 219
     c22:	80 83       	st	Z, r24
     c24:	80 e3       	ldi	r24, 0x30	; 48
     c26:	80 83       	st	Z, r24
     c28:	8d ea       	ldi	r24, 0xAD	; 173
     c2a:	80 83       	st	Z, r24
     c2c:	10 82       	st	Z, r1
     c2e:	84 ea       	ldi	r24, 0xA4	; 164
     c30:	80 83       	st	Z, r24
     c32:	86 ea       	ldi	r24, 0xA6	; 166
     c34:	80 83       	st	Z, r24
     c36:	8f ea       	ldi	r24, 0xAF	; 175
     c38:	80 83       	st	Z, r24
     c3a:	83 ed       	ldi	r24, 0xD3	; 211
     c3c:	80 83       	st	Z, r24
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 83       	st	Z, r24
     c42:	80 e4       	ldi	r24, 0x40	; 64
     c44:	80 83       	st	Z, r24
     c46:	80 eb       	ldi	r24, 0xB0	; 176
     c48:	80 83       	st	Z, r24
     c4a:	10 82       	st	Z, r1
     c4c:	8f e7       	ldi	r24, 0x7F	; 127
     c4e:	80 83       	st	Z, r24
	//set the lower start column address
	oled_write_command(0);
	//set the upper start column address
	oled_write_command(127);
	
	clear_buffer();
     c50:	0e 94 89 05 	call	0xb12	; 0xb12 <clear_buffer>
	print_buffer();	
     c54:	0e 94 ae 05 	call	0xb5c	; 0xb5c <print_buffer>
     c58:	08 95       	ret

00000c5a <print_string_to_buffer>:
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
     c68:	fc 01       	movw	r30, r24
     c6a:	20 81       	ld	r18, Z
     c6c:	22 23       	and	r18, r18
     c6e:	99 f1       	breq	.+102    	; 0xcd6 <print_string_to_buffer+0x7c>
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
     c70:	f0 e8       	ldi	r31, 0x80	; 128
     c72:	6f 9f       	mul	r22, r31
     c74:	a0 01       	movw	r20, r0
     c76:	11 24       	eor	r1, r1
{
	uint8_t i = 0;
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
     c78:	ec 01       	movw	r28, r24
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
     c7a:	00 e0       	ldi	r16, 0x00	; 0
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     c7c:	e1 2c       	mov	r14, r1
     c7e:	f1 2c       	mov	r15, r1
     c80:	27 c0       	rjmp	.+78     	; 0xcd0 <print_string_to_buffer+0x76>
     c82:	61 2f       	mov	r22, r17
     c84:	62 0f       	add	r22, r18
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
     c86:	fa 01       	movw	r30, r20
     c88:	e6 0f       	add	r30, r22
     c8a:	f1 1d       	adc	r31, r1
     c8c:	a0 91 08 01 	lds	r26, 0x0108
     c90:	b0 91 09 01 	lds	r27, 0x0109
     c94:	ae 0f       	add	r26, r30
     c96:	bf 1f       	adc	r27, r31
     c98:	e8 81       	ld	r30, Y
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	b0 97       	sbiw	r30, 0x20	; 32
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	e0 59       	subi	r30, 0x90	; 144
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	e4 91       	lpm	r30, Z
     cb4:	ec 93       	st	X, r30
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
     cba:	28 30       	cpi	r18, 0x08	; 8
     cbc:	31 05       	cpc	r19, r1
     cbe:	09 f7       	brne	.-62     	; 0xc82 <print_string_to_buffer+0x28>
     cc0:	18 5f       	subi	r17, 0xF8	; 248
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
			col++;
		}
		i++;
     cc2:	0f 5f       	subi	r16, 0xFF	; 255
{
	uint8_t i = 0;
	
	uint8_t col = pos.column;
	
	while (word[i] != '\0')
     cc4:	ec 01       	movw	r28, r24
     cc6:	c0 0f       	add	r28, r16
     cc8:	d1 1d       	adc	r29, r1
     cca:	28 81       	ld	r18, Y
     ccc:	22 23       	and	r18, r18
     cce:	19 f0       	breq	.+6      	; 0xcd6 <print_string_to_buffer+0x7c>
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     cd0:	2e 2d       	mov	r18, r14
     cd2:	3f 2d       	mov	r19, r15
     cd4:	d6 cf       	rjmp	.-84     	; 0xc82 <print_string_to_buffer+0x28>
			*(oled_buffer + (pos.page<<7)+col) = pgm_read_byte(&font8[word[i]-32][j]);
			col++;
		}
		i++;
	}
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	08 95       	ret

00000ce4 <sayHello>:
	}
}

void sayHello(void)
{
	clear_buffer();
     ce4:	0e 94 89 05 	call	0xb12	; 0xb12 <clear_buffer>
	print_buffer();
     ce8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <print_buffer>
     cec:	2f ef       	ldi	r18, 0xFF	; 255
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9d e1       	ldi	r25, 0x1D	; 29
     cf2:	21 50       	subi	r18, 0x01	; 1
     cf4:	80 40       	sbci	r24, 0x00	; 0
     cf6:	90 40       	sbci	r25, 0x00	; 0
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <sayHello+0xe>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <sayHello+0x18>
     cfc:	00 00       	nop
	_delay_ms(2000);
	position pos = { .page = 0, .column =0 };
	print_string_to_buffer(" .------------. ", pos);
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	88 e5       	ldi	r24, 0x58	; 88
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" | Ping Pong! | ", pos);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	89 e6       	ldi	r24, 0x69	; 105
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" `------------' ", pos);
     d16:	62 e0       	ldi	r22, 0x02	; 2
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	8a e7       	ldi	r24, 0x7A	; 122
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       ^        ", pos);
     d22:	63 e0       	ldi	r22, 0x03	; 3
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	8b e8       	ldi	r24, 0x8B	; 139
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |  (\\_/) ", pos);
     d2e:	64 e0       	ldi	r22, 0x04	; 4
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	8c e9       	ldi	r24, 0x9C	; 156
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |__(O.o) ", pos);
     d3a:	65 e0       	ldi	r22, 0x05	; 5
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	8d ea       	ldi	r24, 0xAD	; 173
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("          (> <) ", pos);
     d46:	66 e0       	ldi	r22, 0x06	; 6
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	8e eb       	ldi	r24, 0xBE	; 190
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <print_string_to_buffer>
	print_buffer();	
     d52:	0e 94 ae 05 	call	0xb5c	; 0xb5c <print_buffer>
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	9d e1       	ldi	r25, 0x1D	; 29
     d5c:	21 50       	subi	r18, 0x01	; 1
     d5e:	80 40       	sbci	r24, 0x00	; 0
     d60:	90 40       	sbci	r25, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <sayHello+0x78>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <sayHello+0x82>
     d66:	00 00       	nop
	_delay_ms(2000);
	clear_buffer();
     d68:	0e 94 89 05 	call	0xb12	; 0xb12 <clear_buffer>
	print_buffer();
     d6c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <print_buffer>
     d70:	08 95       	ret

00000d72 <print_buffer_to_serial>:
}

void print_buffer_to_serial(void)
{
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	e1 2c       	mov	r14, r1
     d84:	f1 2c       	mov	r15, r1
     d86:	c1 2c       	mov	r12, r1
     d88:	d1 2c       	mov	r13, r1
	for(int i = 0; i < M; i++)
	{
		for(int j = 0; j < N; j++)
		{
			printf("%d ", oled_buffer[i*N+j]);
     d8a:	0f ec       	ldi	r16, 0xCF	; 207
     d8c:	12 e0       	ldi	r17, 0x02	; 2
     d8e:	23 c0       	rjmp	.+70     	; 0xdd6 <print_buffer_to_serial+0x64>
     d90:	ce 01       	movw	r24, r28
     d92:	8e 0d       	add	r24, r14
     d94:	9f 1d       	adc	r25, r15
     d96:	e0 91 08 01 	lds	r30, 0x0108
     d9a:	f0 91 09 01 	lds	r31, 0x0109
     d9e:	e8 0f       	add	r30, r24
     da0:	f9 1f       	adc	r31, r25
     da2:	80 81       	ld	r24, Z
     da4:	1f 92       	push	r1
     da6:	8f 93       	push	r24
     da8:	1f 93       	push	r17
     daa:	0f 93       	push	r16
     dac:	0e 94 91 08 	call	0x1122	; 0x1122 <printf>

void print_buffer_to_serial(void)
{
	for(int i = 0; i < M; i++)
	{
		for(int j = 0; j < N; j++)
     db0:	21 96       	adiw	r28, 0x01	; 1
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	c0 38       	cpi	r28, 0x80	; 128
     dbc:	d1 05       	cpc	r29, r1
     dbe:	41 f7       	brne	.-48     	; 0xd90 <print_buffer_to_serial+0x1e>
		{
			printf("%d ", oled_buffer[i*N+j]);
		}
		printf("\n");
     dc0:	8a e0       	ldi	r24, 0x0A	; 10
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 a5 08 	call	0x114a	; 0x114a <putchar>
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	e8 0e       	add	r14, r24
     dcc:	f1 1c       	adc	r15, r1
	print_buffer();
}

void print_buffer_to_serial(void)
{
	for(int i = 0; i < M; i++)
     dce:	e1 14       	cp	r14, r1
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	f8 06       	cpc	r15, r24
     dd4:	19 f0       	breq	.+6      	; 0xddc <print_buffer_to_serial+0x6a>
	clear_buffer();
	print_buffer();
}

void print_buffer_to_serial(void)
{
     dd6:	cc 2d       	mov	r28, r12
     dd8:	dd 2d       	mov	r29, r13
     dda:	da cf       	rjmp	.-76     	; 0xd90 <print_buffer_to_serial+0x1e>
		{
			printf("%d ", oled_buffer[i*N+j]);
		}
		printf("\n");
	}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	08 95       	ret

00000dee <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1<<SRE);
     dee:	85 b7       	in	r24, 0x35	; 53
     df0:	80 68       	ori	r24, 0x80	; 128
     df2:	85 bf       	out	0x35, r24	; 53
	
	//realesing  JTAG pins from memory mapping
	SFIOR|=(1<<XMM2);
     df4:	80 b7       	in	r24, 0x30	; 48
     df6:	80 62       	ori	r24, 0x20	; 32
     df8:	80 bf       	out	0x30, r24	; 48
	SFIOR&=(0<<XMM1);
     dfa:	80 b7       	in	r24, 0x30	; 48
     dfc:	10 be       	out	0x30, r1	; 48
	SFIOR&=(0<<XMM0);
     dfe:	80 b7       	in	r24, 0x30	; 48
     e00:	10 be       	out	0x30, r1	; 48
     e02:	08 95       	ret

00000e04 <uart_putc>:
//send data to RS232
void uart_putc(unsigned char c)
{
	
	//wait while register is free
	while (!(UCSR0A & (1<<UDRE0)));
     e04:	5d 9b       	sbis	0x0b, 5	; 11
     e06:	fe cf       	rjmp	.-4      	; 0xe04 <uart_putc>
	
	//put character to USART data register
	UDR0 = c;
     e08:	8c b9       	out	0x0c, r24	; 12
     e0a:	08 95       	ret

00000e0c <uart_getc>:

//receive data from RS232
unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1<<RXC0)));
     e0c:	5f 9b       	sbis	0x0b, 7	; 11
     e0e:	fe cf       	rjmp	.-4      	; 0xe0c <uart_getc>
	
	//get value from USART data register
	return UDR0;
     e10:	8c b1       	in	r24, 0x0c	; 12
}
     e12:	08 95       	ret

00000e14 <uart_init>:

//initialize uart to 9600 8N1 (9600 Baud/Bit rate, 8 Bits data, no parity, 1 stop bit
void uart_init(unsigned int ubrr)
{
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr>>8);
     e14:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     e16:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     e18:	88 e1       	ldi	r24, 0x18	; 24
     e1a:	8a b9       	out	0x0a, r24	; 10
	
	//set UCSRC as accessed register, set number of character size to 8
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     e1c:	86 e8       	ldi	r24, 0x86	; 134
     e1e:	80 bd       	out	0x20, r24	; 32
	//set number of stop bits to 1
	UCSR0C &= (0<<USBS0);
     e20:	80 b5       	in	r24, 0x20	; 32
     e22:	10 bc       	out	0x20, r1	; 32
	//set connection to asynchronous
	UCSR0C &= (0<<UMSEL0); 
     e24:	80 b5       	in	r24, 0x20	; 32
     e26:	10 bc       	out	0x20, r1	; 32
	//disable parity mode
	UCSR0C &= (0<<UPM00);
     e28:	80 b5       	in	r24, 0x20	; 32
     e2a:	10 bc       	out	0x20, r1	; 32
	UCSR0C &= (0<<UPM10);
     e2c:	80 b5       	in	r24, 0x20	; 32
     e2e:	10 bc       	out	0x20, r1	; 32
	fdevopen(uart_putc, uart_getc);
     e30:	66 e0       	ldi	r22, 0x06	; 6
     e32:	77 e0       	ldi	r23, 0x07	; 7
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	97 e0       	ldi	r25, 0x07	; 7
     e38:	0e 94 46 08 	call	0x108c	; 0x108c <fdevopen>
     e3c:	08 95       	ret

00000e3e <malloc>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	91 05       	cpc	r25, r1
     e46:	10 f4       	brcc	.+4      	; 0xe4c <malloc+0xe>
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	e0 91 da 02 	lds	r30, 0x02DA
     e50:	f0 91 db 02 	lds	r31, 0x02DB
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	30 97       	sbiw	r30, 0x00	; 0
     e5e:	39 f1       	breq	.+78     	; 0xeae <malloc+0x70>
     e60:	40 81       	ld	r20, Z
     e62:	51 81       	ldd	r21, Z+1	; 0x01
     e64:	48 17       	cp	r20, r24
     e66:	59 07       	cpc	r21, r25
     e68:	b8 f0       	brcs	.+46     	; 0xe98 <malloc+0x5a>
     e6a:	48 17       	cp	r20, r24
     e6c:	59 07       	cpc	r21, r25
     e6e:	71 f4       	brne	.+28     	; 0xe8c <malloc+0x4e>
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	10 97       	sbiw	r26, 0x00	; 0
     e76:	29 f0       	breq	.+10     	; 0xe82 <malloc+0x44>
     e78:	13 96       	adiw	r26, 0x03	; 3
     e7a:	9c 93       	st	X, r25
     e7c:	8e 93       	st	-X, r24
     e7e:	12 97       	sbiw	r26, 0x02	; 2
     e80:	2c c0       	rjmp	.+88     	; 0xeda <malloc+0x9c>
     e82:	90 93 db 02 	sts	0x02DB, r25
     e86:	80 93 da 02 	sts	0x02DA, r24
     e8a:	27 c0       	rjmp	.+78     	; 0xeda <malloc+0x9c>
     e8c:	21 15       	cp	r18, r1
     e8e:	31 05       	cpc	r19, r1
     e90:	31 f0       	breq	.+12     	; 0xe9e <malloc+0x60>
     e92:	42 17       	cp	r20, r18
     e94:	53 07       	cpc	r21, r19
     e96:	18 f0       	brcs	.+6      	; 0xe9e <malloc+0x60>
     e98:	a9 01       	movw	r20, r18
     e9a:	db 01       	movw	r26, r22
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <malloc+0x62>
     e9e:	ef 01       	movw	r28, r30
     ea0:	9a 01       	movw	r18, r20
     ea2:	bd 01       	movw	r22, r26
     ea4:	df 01       	movw	r26, r30
     ea6:	02 80       	ldd	r0, Z+2	; 0x02
     ea8:	f3 81       	ldd	r31, Z+3	; 0x03
     eaa:	e0 2d       	mov	r30, r0
     eac:	d7 cf       	rjmp	.-82     	; 0xe5c <malloc+0x1e>
     eae:	21 15       	cp	r18, r1
     eb0:	31 05       	cpc	r19, r1
     eb2:	f9 f0       	breq	.+62     	; 0xef2 <malloc+0xb4>
     eb4:	28 1b       	sub	r18, r24
     eb6:	39 0b       	sbc	r19, r25
     eb8:	24 30       	cpi	r18, 0x04	; 4
     eba:	31 05       	cpc	r19, r1
     ebc:	80 f4       	brcc	.+32     	; 0xede <malloc+0xa0>
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	9b 81       	ldd	r25, Y+3	; 0x03
     ec2:	61 15       	cp	r22, r1
     ec4:	71 05       	cpc	r23, r1
     ec6:	21 f0       	breq	.+8      	; 0xed0 <malloc+0x92>
     ec8:	fb 01       	movw	r30, r22
     eca:	93 83       	std	Z+3, r25	; 0x03
     ecc:	82 83       	std	Z+2, r24	; 0x02
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <malloc+0x9a>
     ed0:	90 93 db 02 	sts	0x02DB, r25
     ed4:	80 93 da 02 	sts	0x02DA, r24
     ed8:	fe 01       	movw	r30, r28
     eda:	32 96       	adiw	r30, 0x02	; 2
     edc:	44 c0       	rjmp	.+136    	; 0xf66 <malloc+0x128>
     ede:	fe 01       	movw	r30, r28
     ee0:	e2 0f       	add	r30, r18
     ee2:	f3 1f       	adc	r31, r19
     ee4:	81 93       	st	Z+, r24
     ee6:	91 93       	st	Z+, r25
     ee8:	22 50       	subi	r18, 0x02	; 2
     eea:	31 09       	sbc	r19, r1
     eec:	39 83       	std	Y+1, r19	; 0x01
     eee:	28 83       	st	Y, r18
     ef0:	3a c0       	rjmp	.+116    	; 0xf66 <malloc+0x128>
     ef2:	20 91 d8 02 	lds	r18, 0x02D8
     ef6:	30 91 d9 02 	lds	r19, 0x02D9
     efa:	23 2b       	or	r18, r19
     efc:	41 f4       	brne	.+16     	; 0xf0e <malloc+0xd0>
     efe:	20 91 02 01 	lds	r18, 0x0102
     f02:	30 91 03 01 	lds	r19, 0x0103
     f06:	30 93 d9 02 	sts	0x02D9, r19
     f0a:	20 93 d8 02 	sts	0x02D8, r18
     f0e:	20 91 00 01 	lds	r18, 0x0100
     f12:	30 91 01 01 	lds	r19, 0x0101
     f16:	21 15       	cp	r18, r1
     f18:	31 05       	cpc	r19, r1
     f1a:	41 f4       	brne	.+16     	; 0xf2c <malloc+0xee>
     f1c:	2d b7       	in	r18, 0x3d	; 61
     f1e:	3e b7       	in	r19, 0x3e	; 62
     f20:	40 91 04 01 	lds	r20, 0x0104
     f24:	50 91 05 01 	lds	r21, 0x0105
     f28:	24 1b       	sub	r18, r20
     f2a:	35 0b       	sbc	r19, r21
     f2c:	e0 91 d8 02 	lds	r30, 0x02D8
     f30:	f0 91 d9 02 	lds	r31, 0x02D9
     f34:	e2 17       	cp	r30, r18
     f36:	f3 07       	cpc	r31, r19
     f38:	a0 f4       	brcc	.+40     	; 0xf62 <malloc+0x124>
     f3a:	2e 1b       	sub	r18, r30
     f3c:	3f 0b       	sbc	r19, r31
     f3e:	28 17       	cp	r18, r24
     f40:	39 07       	cpc	r19, r25
     f42:	78 f0       	brcs	.+30     	; 0xf62 <malloc+0x124>
     f44:	ac 01       	movw	r20, r24
     f46:	4e 5f       	subi	r20, 0xFE	; 254
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	24 17       	cp	r18, r20
     f4c:	35 07       	cpc	r19, r21
     f4e:	48 f0       	brcs	.+18     	; 0xf62 <malloc+0x124>
     f50:	4e 0f       	add	r20, r30
     f52:	5f 1f       	adc	r21, r31
     f54:	50 93 d9 02 	sts	0x02D9, r21
     f58:	40 93 d8 02 	sts	0x02D8, r20
     f5c:	81 93       	st	Z+, r24
     f5e:	91 93       	st	Z+, r25
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <malloc+0x128>
     f62:	e0 e0       	ldi	r30, 0x00	; 0
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	cf 01       	movw	r24, r30
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <free>:
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	09 f4       	brne	.+2      	; 0xf78 <free+0xa>
     f76:	87 c0       	rjmp	.+270    	; 0x1086 <free+0x118>
     f78:	fc 01       	movw	r30, r24
     f7a:	32 97       	sbiw	r30, 0x02	; 2
     f7c:	13 82       	std	Z+3, r1	; 0x03
     f7e:	12 82       	std	Z+2, r1	; 0x02
     f80:	c0 91 da 02 	lds	r28, 0x02DA
     f84:	d0 91 db 02 	lds	r29, 0x02DB
     f88:	20 97       	sbiw	r28, 0x00	; 0
     f8a:	81 f4       	brne	.+32     	; 0xfac <free+0x3e>
     f8c:	20 81       	ld	r18, Z
     f8e:	31 81       	ldd	r19, Z+1	; 0x01
     f90:	28 0f       	add	r18, r24
     f92:	39 1f       	adc	r19, r25
     f94:	80 91 d8 02 	lds	r24, 0x02D8
     f98:	90 91 d9 02 	lds	r25, 0x02D9
     f9c:	82 17       	cp	r24, r18
     f9e:	93 07       	cpc	r25, r19
     fa0:	79 f5       	brne	.+94     	; 0x1000 <free+0x92>
     fa2:	f0 93 d9 02 	sts	0x02D9, r31
     fa6:	e0 93 d8 02 	sts	0x02D8, r30
     faa:	6d c0       	rjmp	.+218    	; 0x1086 <free+0x118>
     fac:	de 01       	movw	r26, r28
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	ae 17       	cp	r26, r30
     fb4:	bf 07       	cpc	r27, r31
     fb6:	50 f4       	brcc	.+20     	; 0xfcc <free+0x5e>
     fb8:	12 96       	adiw	r26, 0x02	; 2
     fba:	4d 91       	ld	r20, X+
     fbc:	5c 91       	ld	r21, X
     fbe:	13 97       	sbiw	r26, 0x03	; 3
     fc0:	9d 01       	movw	r18, r26
     fc2:	41 15       	cp	r20, r1
     fc4:	51 05       	cpc	r21, r1
     fc6:	09 f1       	breq	.+66     	; 0x100a <free+0x9c>
     fc8:	da 01       	movw	r26, r20
     fca:	f3 cf       	rjmp	.-26     	; 0xfb2 <free+0x44>
     fcc:	b3 83       	std	Z+3, r27	; 0x03
     fce:	a2 83       	std	Z+2, r26	; 0x02
     fd0:	40 81       	ld	r20, Z
     fd2:	51 81       	ldd	r21, Z+1	; 0x01
     fd4:	84 0f       	add	r24, r20
     fd6:	95 1f       	adc	r25, r21
     fd8:	8a 17       	cp	r24, r26
     fda:	9b 07       	cpc	r25, r27
     fdc:	71 f4       	brne	.+28     	; 0xffa <free+0x8c>
     fde:	8d 91       	ld	r24, X+
     fe0:	9c 91       	ld	r25, X
     fe2:	11 97       	sbiw	r26, 0x01	; 1
     fe4:	84 0f       	add	r24, r20
     fe6:	95 1f       	adc	r25, r21
     fe8:	02 96       	adiw	r24, 0x02	; 2
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	8d 91       	ld	r24, X+
     ff2:	9c 91       	ld	r25, X
     ff4:	13 97       	sbiw	r26, 0x03	; 3
     ff6:	93 83       	std	Z+3, r25	; 0x03
     ff8:	82 83       	std	Z+2, r24	; 0x02
     ffa:	21 15       	cp	r18, r1
     ffc:	31 05       	cpc	r19, r1
     ffe:	29 f4       	brne	.+10     	; 0x100a <free+0x9c>
    1000:	f0 93 db 02 	sts	0x02DB, r31
    1004:	e0 93 da 02 	sts	0x02DA, r30
    1008:	3e c0       	rjmp	.+124    	; 0x1086 <free+0x118>
    100a:	d9 01       	movw	r26, r18
    100c:	13 96       	adiw	r26, 0x03	; 3
    100e:	fc 93       	st	X, r31
    1010:	ee 93       	st	-X, r30
    1012:	12 97       	sbiw	r26, 0x02	; 2
    1014:	4d 91       	ld	r20, X+
    1016:	5d 91       	ld	r21, X+
    1018:	a4 0f       	add	r26, r20
    101a:	b5 1f       	adc	r27, r21
    101c:	ea 17       	cp	r30, r26
    101e:	fb 07       	cpc	r31, r27
    1020:	79 f4       	brne	.+30     	; 0x1040 <free+0xd2>
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	84 0f       	add	r24, r20
    1028:	95 1f       	adc	r25, r21
    102a:	02 96       	adiw	r24, 0x02	; 2
    102c:	d9 01       	movw	r26, r18
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	13 96       	adiw	r26, 0x03	; 3
    103a:	9c 93       	st	X, r25
    103c:	8e 93       	st	-X, r24
    103e:	12 97       	sbiw	r26, 0x02	; 2
    1040:	e0 e0       	ldi	r30, 0x00	; 0
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	19 f0       	breq	.+6      	; 0x1052 <free+0xe4>
    104c:	fe 01       	movw	r30, r28
    104e:	ec 01       	movw	r28, r24
    1050:	f9 cf       	rjmp	.-14     	; 0x1044 <free+0xd6>
    1052:	ce 01       	movw	r24, r28
    1054:	02 96       	adiw	r24, 0x02	; 2
    1056:	28 81       	ld	r18, Y
    1058:	39 81       	ldd	r19, Y+1	; 0x01
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	20 91 d8 02 	lds	r18, 0x02D8
    1062:	30 91 d9 02 	lds	r19, 0x02D9
    1066:	28 17       	cp	r18, r24
    1068:	39 07       	cpc	r19, r25
    106a:	69 f4       	brne	.+26     	; 0x1086 <free+0x118>
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	29 f4       	brne	.+10     	; 0x107a <free+0x10c>
    1070:	10 92 db 02 	sts	0x02DB, r1
    1074:	10 92 da 02 	sts	0x02DA, r1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <free+0x110>
    107a:	13 82       	std	Z+3, r1	; 0x03
    107c:	12 82       	std	Z+2, r1	; 0x02
    107e:	d0 93 d9 02 	sts	0x02D9, r29
    1082:	c0 93 d8 02 	sts	0x02D8, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <fdevopen>:
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
    1096:	8b 01       	movw	r16, r22
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	31 f4       	brne	.+12     	; 0x10a8 <fdevopen+0x1c>
    109c:	61 15       	cp	r22, r1
    109e:	71 05       	cpc	r23, r1
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <fdevopen+0x1c>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	38 c0       	rjmp	.+112    	; 0x1118 <fdevopen+0x8c>
    10a8:	6e e0       	ldi	r22, 0x0E	; 14
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <calloc>
    10b4:	fc 01       	movw	r30, r24
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	a1 f3       	breq	.-24     	; 0x10a2 <fdevopen+0x16>
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	83 83       	std	Z+3, r24	; 0x03
    10be:	01 15       	cp	r16, r1
    10c0:	11 05       	cpc	r17, r1
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <fdevopen+0x54>
    10c4:	13 87       	std	Z+11, r17	; 0x0b
    10c6:	02 87       	std	Z+10, r16	; 0x0a
    10c8:	81 e8       	ldi	r24, 0x81	; 129
    10ca:	83 83       	std	Z+3, r24	; 0x03
    10cc:	80 91 dc 02 	lds	r24, 0x02DC
    10d0:	90 91 dd 02 	lds	r25, 0x02DD
    10d4:	89 2b       	or	r24, r25
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <fdevopen+0x54>
    10d8:	f0 93 dd 02 	sts	0x02DD, r31
    10dc:	e0 93 dc 02 	sts	0x02DC, r30
    10e0:	20 97       	sbiw	r28, 0x00	; 0
    10e2:	c9 f0       	breq	.+50     	; 0x1116 <fdevopen+0x8a>
    10e4:	d1 87       	std	Z+9, r29	; 0x09
    10e6:	c0 87       	std	Z+8, r28	; 0x08
    10e8:	83 81       	ldd	r24, Z+3	; 0x03
    10ea:	82 60       	ori	r24, 0x02	; 2
    10ec:	83 83       	std	Z+3, r24	; 0x03
    10ee:	80 91 de 02 	lds	r24, 0x02DE
    10f2:	90 91 df 02 	lds	r25, 0x02DF
    10f6:	89 2b       	or	r24, r25
    10f8:	71 f4       	brne	.+28     	; 0x1116 <fdevopen+0x8a>
    10fa:	f0 93 df 02 	sts	0x02DF, r31
    10fe:	e0 93 de 02 	sts	0x02DE, r30
    1102:	80 91 e0 02 	lds	r24, 0x02E0
    1106:	90 91 e1 02 	lds	r25, 0x02E1
    110a:	89 2b       	or	r24, r25
    110c:	21 f4       	brne	.+8      	; 0x1116 <fdevopen+0x8a>
    110e:	f0 93 e1 02 	sts	0x02E1, r31
    1112:	e0 93 e0 02 	sts	0x02E0, r30
    1116:	cf 01       	movw	r24, r30
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <printf>:
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e7 e9       	ldi	r30, 0x97	; 151
    1128:	f8 e0       	ldi	r31, 0x08	; 8
    112a:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__prologue_saves__+0x20>
    112e:	fe 01       	movw	r30, r28
    1130:	35 96       	adiw	r30, 0x05	; 5
    1132:	61 91       	ld	r22, Z+
    1134:	71 91       	ld	r23, Z+
    1136:	af 01       	movw	r20, r30
    1138:	80 91 de 02 	lds	r24, 0x02DE
    113c:	90 91 df 02 	lds	r25, 0x02DF
    1140:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <vfprintf>
    1144:	e2 e0       	ldi	r30, 0x02	; 2
    1146:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__epilogue_restores__+0x20>

0000114a <putchar>:
    114a:	60 91 de 02 	lds	r22, 0x02DE
    114e:	70 91 df 02 	lds	r23, 0x02DF
    1152:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    1156:	08 95       	ret

00001158 <puts>:
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	e0 91 de 02 	lds	r30, 0x02DE
    1164:	f0 91 df 02 	lds	r31, 0x02DF
    1168:	23 81       	ldd	r18, Z+3	; 0x03
    116a:	21 ff       	sbrs	r18, 1
    116c:	1b c0       	rjmp	.+54     	; 0x11a4 <puts+0x4c>
    116e:	ec 01       	movw	r28, r24
    1170:	00 e0       	ldi	r16, 0x00	; 0
    1172:	10 e0       	ldi	r17, 0x00	; 0
    1174:	89 91       	ld	r24, Y+
    1176:	60 91 de 02 	lds	r22, 0x02DE
    117a:	70 91 df 02 	lds	r23, 0x02DF
    117e:	db 01       	movw	r26, r22
    1180:	18 96       	adiw	r26, 0x08	; 8
    1182:	ed 91       	ld	r30, X+
    1184:	fc 91       	ld	r31, X
    1186:	19 97       	sbiw	r26, 0x09	; 9
    1188:	88 23       	and	r24, r24
    118a:	31 f0       	breq	.+12     	; 0x1198 <puts+0x40>
    118c:	09 95       	icall
    118e:	89 2b       	or	r24, r25
    1190:	89 f3       	breq	.-30     	; 0x1174 <puts+0x1c>
    1192:	0f ef       	ldi	r16, 0xFF	; 255
    1194:	1f ef       	ldi	r17, 0xFF	; 255
    1196:	ee cf       	rjmp	.-36     	; 0x1174 <puts+0x1c>
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	09 95       	icall
    119c:	89 2b       	or	r24, r25
    119e:	11 f4       	brne	.+4      	; 0x11a4 <puts+0x4c>
    11a0:	c8 01       	movw	r24, r16
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <puts+0x50>
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <vfprintf>:
    11b2:	ac e0       	ldi	r26, 0x0C	; 12
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ef ed       	ldi	r30, 0xDF	; 223
    11b8:	f8 e0       	ldi	r31, 0x08	; 8
    11ba:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__prologue_saves__>
    11be:	7c 01       	movw	r14, r24
    11c0:	6b 01       	movw	r12, r22
    11c2:	8a 01       	movw	r16, r20
    11c4:	fc 01       	movw	r30, r24
    11c6:	17 82       	std	Z+7, r1	; 0x07
    11c8:	16 82       	std	Z+6, r1	; 0x06
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	81 ff       	sbrs	r24, 1
    11ce:	bd c1       	rjmp	.+890    	; 0x154a <vfprintf+0x398>
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	4c 01       	movw	r8, r24
    11d6:	f7 01       	movw	r30, r14
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	f6 01       	movw	r30, r12
    11dc:	93 fd       	sbrc	r25, 3
    11de:	85 91       	lpm	r24, Z+
    11e0:	93 ff       	sbrs	r25, 3
    11e2:	81 91       	ld	r24, Z+
    11e4:	6f 01       	movw	r12, r30
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <vfprintf+0x3a>
    11ea:	ab c1       	rjmp	.+854    	; 0x1542 <vfprintf+0x390>
    11ec:	85 32       	cpi	r24, 0x25	; 37
    11ee:	39 f4       	brne	.+14     	; 0x11fe <vfprintf+0x4c>
    11f0:	93 fd       	sbrc	r25, 3
    11f2:	85 91       	lpm	r24, Z+
    11f4:	93 ff       	sbrs	r25, 3
    11f6:	81 91       	ld	r24, Z+
    11f8:	6f 01       	movw	r12, r30
    11fa:	85 32       	cpi	r24, 0x25	; 37
    11fc:	29 f4       	brne	.+10     	; 0x1208 <vfprintf+0x56>
    11fe:	b7 01       	movw	r22, r14
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    1206:	e7 cf       	rjmp	.-50     	; 0x11d6 <vfprintf+0x24>
    1208:	51 2c       	mov	r5, r1
    120a:	31 2c       	mov	r3, r1
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	20 32       	cpi	r18, 0x20	; 32
    1210:	a0 f4       	brcc	.+40     	; 0x123a <vfprintf+0x88>
    1212:	8b 32       	cpi	r24, 0x2B	; 43
    1214:	69 f0       	breq	.+26     	; 0x1230 <vfprintf+0x7e>
    1216:	30 f4       	brcc	.+12     	; 0x1224 <vfprintf+0x72>
    1218:	80 32       	cpi	r24, 0x20	; 32
    121a:	59 f0       	breq	.+22     	; 0x1232 <vfprintf+0x80>
    121c:	83 32       	cpi	r24, 0x23	; 35
    121e:	69 f4       	brne	.+26     	; 0x123a <vfprintf+0x88>
    1220:	20 61       	ori	r18, 0x10	; 16
    1222:	2c c0       	rjmp	.+88     	; 0x127c <vfprintf+0xca>
    1224:	8d 32       	cpi	r24, 0x2D	; 45
    1226:	39 f0       	breq	.+14     	; 0x1236 <vfprintf+0x84>
    1228:	80 33       	cpi	r24, 0x30	; 48
    122a:	39 f4       	brne	.+14     	; 0x123a <vfprintf+0x88>
    122c:	21 60       	ori	r18, 0x01	; 1
    122e:	26 c0       	rjmp	.+76     	; 0x127c <vfprintf+0xca>
    1230:	22 60       	ori	r18, 0x02	; 2
    1232:	24 60       	ori	r18, 0x04	; 4
    1234:	23 c0       	rjmp	.+70     	; 0x127c <vfprintf+0xca>
    1236:	28 60       	ori	r18, 0x08	; 8
    1238:	21 c0       	rjmp	.+66     	; 0x127c <vfprintf+0xca>
    123a:	27 fd       	sbrc	r18, 7
    123c:	27 c0       	rjmp	.+78     	; 0x128c <vfprintf+0xda>
    123e:	30 ed       	ldi	r19, 0xD0	; 208
    1240:	38 0f       	add	r19, r24
    1242:	3a 30       	cpi	r19, 0x0A	; 10
    1244:	78 f4       	brcc	.+30     	; 0x1264 <vfprintf+0xb2>
    1246:	26 ff       	sbrs	r18, 6
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <vfprintf+0xa4>
    124a:	fa e0       	ldi	r31, 0x0A	; 10
    124c:	5f 9e       	mul	r5, r31
    124e:	30 0d       	add	r19, r0
    1250:	11 24       	eor	r1, r1
    1252:	53 2e       	mov	r5, r19
    1254:	13 c0       	rjmp	.+38     	; 0x127c <vfprintf+0xca>
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    1258:	38 9e       	mul	r3, r24
    125a:	30 0d       	add	r19, r0
    125c:	11 24       	eor	r1, r1
    125e:	33 2e       	mov	r3, r19
    1260:	20 62       	ori	r18, 0x20	; 32
    1262:	0c c0       	rjmp	.+24     	; 0x127c <vfprintf+0xca>
    1264:	8e 32       	cpi	r24, 0x2E	; 46
    1266:	21 f4       	brne	.+8      	; 0x1270 <vfprintf+0xbe>
    1268:	26 fd       	sbrc	r18, 6
    126a:	6b c1       	rjmp	.+726    	; 0x1542 <vfprintf+0x390>
    126c:	20 64       	ori	r18, 0x40	; 64
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0xca>
    1270:	8c 36       	cpi	r24, 0x6C	; 108
    1272:	11 f4       	brne	.+4      	; 0x1278 <vfprintf+0xc6>
    1274:	20 68       	ori	r18, 0x80	; 128
    1276:	02 c0       	rjmp	.+4      	; 0x127c <vfprintf+0xca>
    1278:	88 36       	cpi	r24, 0x68	; 104
    127a:	41 f4       	brne	.+16     	; 0x128c <vfprintf+0xda>
    127c:	f6 01       	movw	r30, r12
    127e:	93 fd       	sbrc	r25, 3
    1280:	85 91       	lpm	r24, Z+
    1282:	93 ff       	sbrs	r25, 3
    1284:	81 91       	ld	r24, Z+
    1286:	6f 01       	movw	r12, r30
    1288:	81 11       	cpse	r24, r1
    128a:	c1 cf       	rjmp	.-126    	; 0x120e <vfprintf+0x5c>
    128c:	98 2f       	mov	r25, r24
    128e:	9f 7d       	andi	r25, 0xDF	; 223
    1290:	95 54       	subi	r25, 0x45	; 69
    1292:	93 30       	cpi	r25, 0x03	; 3
    1294:	28 f4       	brcc	.+10     	; 0x12a0 <vfprintf+0xee>
    1296:	0c 5f       	subi	r16, 0xFC	; 252
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	ff e3       	ldi	r31, 0x3F	; 63
    129c:	f9 83       	std	Y+1, r31	; 0x01
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <vfprintf+0x108>
    12a0:	83 36       	cpi	r24, 0x63	; 99
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <vfprintf+0xfe>
    12a4:	83 37       	cpi	r24, 0x73	; 115
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <vfprintf+0x112>
    12a8:	83 35       	cpi	r24, 0x53	; 83
    12aa:	09 f0       	breq	.+2      	; 0x12ae <vfprintf+0xfc>
    12ac:	5b c0       	rjmp	.+182    	; 0x1364 <vfprintf+0x1b2>
    12ae:	22 c0       	rjmp	.+68     	; 0x12f4 <vfprintf+0x142>
    12b0:	f8 01       	movw	r30, r16
    12b2:	80 81       	ld	r24, Z
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	0e 5f       	subi	r16, 0xFE	; 254
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	44 24       	eor	r4, r4
    12bc:	43 94       	inc	r4
    12be:	51 2c       	mov	r5, r1
    12c0:	54 01       	movw	r10, r8
    12c2:	15 c0       	rjmp	.+42     	; 0x12ee <vfprintf+0x13c>
    12c4:	38 01       	movw	r6, r16
    12c6:	f2 e0       	ldi	r31, 0x02	; 2
    12c8:	6f 0e       	add	r6, r31
    12ca:	71 1c       	adc	r7, r1
    12cc:	f8 01       	movw	r30, r16
    12ce:	a0 80       	ld	r10, Z
    12d0:	b1 80       	ldd	r11, Z+1	; 0x01
    12d2:	26 ff       	sbrs	r18, 6
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <vfprintf+0x12a>
    12d6:	65 2d       	mov	r22, r5
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <vfprintf+0x12e>
    12dc:	6f ef       	ldi	r22, 0xFF	; 255
    12de:	7f ef       	ldi	r23, 0xFF	; 255
    12e0:	c5 01       	movw	r24, r10
    12e2:	2c 87       	std	Y+12, r18	; 0x0c
    12e4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <strnlen>
    12e8:	2c 01       	movw	r4, r24
    12ea:	83 01       	movw	r16, r6
    12ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ee:	2f 77       	andi	r18, 0x7F	; 127
    12f0:	22 2e       	mov	r2, r18
    12f2:	17 c0       	rjmp	.+46     	; 0x1322 <vfprintf+0x170>
    12f4:	38 01       	movw	r6, r16
    12f6:	f2 e0       	ldi	r31, 0x02	; 2
    12f8:	6f 0e       	add	r6, r31
    12fa:	71 1c       	adc	r7, r1
    12fc:	f8 01       	movw	r30, r16
    12fe:	a0 80       	ld	r10, Z
    1300:	b1 80       	ldd	r11, Z+1	; 0x01
    1302:	26 ff       	sbrs	r18, 6
    1304:	03 c0       	rjmp	.+6      	; 0x130c <vfprintf+0x15a>
    1306:	65 2d       	mov	r22, r5
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vfprintf+0x15e>
    130c:	6f ef       	ldi	r22, 0xFF	; 255
    130e:	7f ef       	ldi	r23, 0xFF	; 255
    1310:	c5 01       	movw	r24, r10
    1312:	2c 87       	std	Y+12, r18	; 0x0c
    1314:	0e 94 c7 0a 	call	0x158e	; 0x158e <strnlen_P>
    1318:	2c 01       	movw	r4, r24
    131a:	2c 85       	ldd	r18, Y+12	; 0x0c
    131c:	20 68       	ori	r18, 0x80	; 128
    131e:	22 2e       	mov	r2, r18
    1320:	83 01       	movw	r16, r6
    1322:	23 fc       	sbrc	r2, 3
    1324:	1b c0       	rjmp	.+54     	; 0x135c <vfprintf+0x1aa>
    1326:	83 2d       	mov	r24, r3
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	48 16       	cp	r4, r24
    132c:	59 06       	cpc	r5, r25
    132e:	b0 f4       	brcc	.+44     	; 0x135c <vfprintf+0x1aa>
    1330:	b7 01       	movw	r22, r14
    1332:	80 e2       	ldi	r24, 0x20	; 32
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    133a:	3a 94       	dec	r3
    133c:	f4 cf       	rjmp	.-24     	; 0x1326 <vfprintf+0x174>
    133e:	f5 01       	movw	r30, r10
    1340:	27 fc       	sbrc	r2, 7
    1342:	85 91       	lpm	r24, Z+
    1344:	27 fe       	sbrs	r2, 7
    1346:	81 91       	ld	r24, Z+
    1348:	5f 01       	movw	r10, r30
    134a:	b7 01       	movw	r22, r14
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    1352:	31 10       	cpse	r3, r1
    1354:	3a 94       	dec	r3
    1356:	f1 e0       	ldi	r31, 0x01	; 1
    1358:	4f 1a       	sub	r4, r31
    135a:	51 08       	sbc	r5, r1
    135c:	41 14       	cp	r4, r1
    135e:	51 04       	cpc	r5, r1
    1360:	71 f7       	brne	.-36     	; 0x133e <vfprintf+0x18c>
    1362:	e5 c0       	rjmp	.+458    	; 0x152e <vfprintf+0x37c>
    1364:	84 36       	cpi	r24, 0x64	; 100
    1366:	11 f0       	breq	.+4      	; 0x136c <vfprintf+0x1ba>
    1368:	89 36       	cpi	r24, 0x69	; 105
    136a:	39 f5       	brne	.+78     	; 0x13ba <vfprintf+0x208>
    136c:	f8 01       	movw	r30, r16
    136e:	27 ff       	sbrs	r18, 7
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <vfprintf+0x1ce>
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	0c 5f       	subi	r16, 0xFC	; 252
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <vfprintf+0x1de>
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	88 27       	eor	r24, r24
    1386:	77 fd       	sbrc	r23, 7
    1388:	80 95       	com	r24
    138a:	98 2f       	mov	r25, r24
    138c:	0e 5f       	subi	r16, 0xFE	; 254
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	2f 76       	andi	r18, 0x6F	; 111
    1392:	b2 2e       	mov	r11, r18
    1394:	97 ff       	sbrs	r25, 7
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <vfprintf+0x1f8>
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	20 68       	ori	r18, 0x80	; 128
    13a8:	b2 2e       	mov	r11, r18
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	a4 01       	movw	r20, r8
    13b0:	0e 94 16 0b 	call	0x162c	; 0x162c <__ultoa_invert>
    13b4:	a8 2e       	mov	r10, r24
    13b6:	a8 18       	sub	r10, r8
    13b8:	44 c0       	rjmp	.+136    	; 0x1442 <vfprintf+0x290>
    13ba:	85 37       	cpi	r24, 0x75	; 117
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <vfprintf+0x216>
    13be:	2f 7e       	andi	r18, 0xEF	; 239
    13c0:	b2 2e       	mov	r11, r18
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	25 c0       	rjmp	.+74     	; 0x1412 <vfprintf+0x260>
    13c8:	f2 2f       	mov	r31, r18
    13ca:	f9 7f       	andi	r31, 0xF9	; 249
    13cc:	bf 2e       	mov	r11, r31
    13ce:	8f 36       	cpi	r24, 0x6F	; 111
    13d0:	c1 f0       	breq	.+48     	; 0x1402 <vfprintf+0x250>
    13d2:	18 f4       	brcc	.+6      	; 0x13da <vfprintf+0x228>
    13d4:	88 35       	cpi	r24, 0x58	; 88
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <vfprintf+0x244>
    13d8:	b4 c0       	rjmp	.+360    	; 0x1542 <vfprintf+0x390>
    13da:	80 37       	cpi	r24, 0x70	; 112
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <vfprintf+0x232>
    13de:	88 37       	cpi	r24, 0x78	; 120
    13e0:	21 f0       	breq	.+8      	; 0x13ea <vfprintf+0x238>
    13e2:	af c0       	rjmp	.+350    	; 0x1542 <vfprintf+0x390>
    13e4:	2f 2f       	mov	r18, r31
    13e6:	20 61       	ori	r18, 0x10	; 16
    13e8:	b2 2e       	mov	r11, r18
    13ea:	b4 fe       	sbrs	r11, 4
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <vfprintf+0x256>
    13ee:	8b 2d       	mov	r24, r11
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	b8 2e       	mov	r11, r24
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <vfprintf+0x256>
    13f6:	24 ff       	sbrs	r18, 4
    13f8:	0a c0       	rjmp	.+20     	; 0x140e <vfprintf+0x25c>
    13fa:	9f 2f       	mov	r25, r31
    13fc:	96 60       	ori	r25, 0x06	; 6
    13fe:	b9 2e       	mov	r11, r25
    1400:	06 c0       	rjmp	.+12     	; 0x140e <vfprintf+0x25c>
    1402:	28 e0       	ldi	r18, 0x08	; 8
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <vfprintf+0x260>
    1408:	20 e1       	ldi	r18, 0x10	; 16
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <vfprintf+0x260>
    140e:	20 e1       	ldi	r18, 0x10	; 16
    1410:	32 e0       	ldi	r19, 0x02	; 2
    1412:	f8 01       	movw	r30, r16
    1414:	b7 fe       	sbrs	r11, 7
    1416:	07 c0       	rjmp	.+14     	; 0x1426 <vfprintf+0x274>
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	0c 5f       	subi	r16, 0xFC	; 252
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <vfprintf+0x280>
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 5f       	subi	r16, 0xFE	; 254
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	a4 01       	movw	r20, r8
    1434:	0e 94 16 0b 	call	0x162c	; 0x162c <__ultoa_invert>
    1438:	a8 2e       	mov	r10, r24
    143a:	a8 18       	sub	r10, r8
    143c:	fb 2d       	mov	r31, r11
    143e:	ff 77       	andi	r31, 0x7F	; 127
    1440:	bf 2e       	mov	r11, r31
    1442:	b6 fe       	sbrs	r11, 6
    1444:	0b c0       	rjmp	.+22     	; 0x145c <vfprintf+0x2aa>
    1446:	2b 2d       	mov	r18, r11
    1448:	2e 7f       	andi	r18, 0xFE	; 254
    144a:	a5 14       	cp	r10, r5
    144c:	50 f4       	brcc	.+20     	; 0x1462 <vfprintf+0x2b0>
    144e:	b4 fe       	sbrs	r11, 4
    1450:	0a c0       	rjmp	.+20     	; 0x1466 <vfprintf+0x2b4>
    1452:	b2 fc       	sbrc	r11, 2
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <vfprintf+0x2b4>
    1456:	2b 2d       	mov	r18, r11
    1458:	2e 7e       	andi	r18, 0xEE	; 238
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <vfprintf+0x2b4>
    145c:	7a 2c       	mov	r7, r10
    145e:	2b 2d       	mov	r18, r11
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <vfprintf+0x2b6>
    1462:	7a 2c       	mov	r7, r10
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <vfprintf+0x2b6>
    1466:	75 2c       	mov	r7, r5
    1468:	24 ff       	sbrs	r18, 4
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <vfprintf+0x2d4>
    146c:	fe 01       	movw	r30, r28
    146e:	ea 0d       	add	r30, r10
    1470:	f1 1d       	adc	r31, r1
    1472:	80 81       	ld	r24, Z
    1474:	80 33       	cpi	r24, 0x30	; 48
    1476:	11 f4       	brne	.+4      	; 0x147c <vfprintf+0x2ca>
    1478:	29 7e       	andi	r18, 0xE9	; 233
    147a:	09 c0       	rjmp	.+18     	; 0x148e <vfprintf+0x2dc>
    147c:	22 ff       	sbrs	r18, 2
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x2da>
    1480:	73 94       	inc	r7
    1482:	73 94       	inc	r7
    1484:	04 c0       	rjmp	.+8      	; 0x148e <vfprintf+0x2dc>
    1486:	82 2f       	mov	r24, r18
    1488:	86 78       	andi	r24, 0x86	; 134
    148a:	09 f0       	breq	.+2      	; 0x148e <vfprintf+0x2dc>
    148c:	73 94       	inc	r7
    148e:	23 fd       	sbrc	r18, 3
    1490:	13 c0       	rjmp	.+38     	; 0x14b8 <vfprintf+0x306>
    1492:	20 ff       	sbrs	r18, 0
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <vfprintf+0x2f0>
    1496:	5a 2c       	mov	r5, r10
    1498:	73 14       	cp	r7, r3
    149a:	18 f4       	brcc	.+6      	; 0x14a2 <vfprintf+0x2f0>
    149c:	53 0c       	add	r5, r3
    149e:	57 18       	sub	r5, r7
    14a0:	73 2c       	mov	r7, r3
    14a2:	73 14       	cp	r7, r3
    14a4:	68 f4       	brcc	.+26     	; 0x14c0 <vfprintf+0x30e>
    14a6:	b7 01       	movw	r22, r14
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	2c 87       	std	Y+12, r18	; 0x0c
    14ae:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    14b2:	73 94       	inc	r7
    14b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b6:	f5 cf       	rjmp	.-22     	; 0x14a2 <vfprintf+0x2f0>
    14b8:	73 14       	cp	r7, r3
    14ba:	10 f4       	brcc	.+4      	; 0x14c0 <vfprintf+0x30e>
    14bc:	37 18       	sub	r3, r7
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <vfprintf+0x310>
    14c0:	31 2c       	mov	r3, r1
    14c2:	24 ff       	sbrs	r18, 4
    14c4:	12 c0       	rjmp	.+36     	; 0x14ea <vfprintf+0x338>
    14c6:	b7 01       	movw	r22, r14
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	2c 87       	std	Y+12, r18	; 0x0c
    14ce:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    14d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d4:	22 ff       	sbrs	r18, 2
    14d6:	17 c0       	rjmp	.+46     	; 0x1506 <vfprintf+0x354>
    14d8:	21 ff       	sbrs	r18, 1
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <vfprintf+0x330>
    14dc:	88 e5       	ldi	r24, 0x58	; 88
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x334>
    14e2:	88 e7       	ldi	r24, 0x78	; 120
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	b7 01       	movw	r22, r14
    14e8:	0c c0       	rjmp	.+24     	; 0x1502 <vfprintf+0x350>
    14ea:	82 2f       	mov	r24, r18
    14ec:	86 78       	andi	r24, 0x86	; 134
    14ee:	59 f0       	breq	.+22     	; 0x1506 <vfprintf+0x354>
    14f0:	21 fd       	sbrc	r18, 1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x346>
    14f4:	80 e2       	ldi	r24, 0x20	; 32
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <vfprintf+0x348>
    14f8:	8b e2       	ldi	r24, 0x2B	; 43
    14fa:	27 fd       	sbrc	r18, 7
    14fc:	8d e2       	ldi	r24, 0x2D	; 45
    14fe:	b7 01       	movw	r22, r14
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    1506:	a5 14       	cp	r10, r5
    1508:	38 f4       	brcc	.+14     	; 0x1518 <vfprintf+0x366>
    150a:	b7 01       	movw	r22, r14
    150c:	80 e3       	ldi	r24, 0x30	; 48
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    1514:	5a 94       	dec	r5
    1516:	f7 cf       	rjmp	.-18     	; 0x1506 <vfprintf+0x354>
    1518:	aa 94       	dec	r10
    151a:	f4 01       	movw	r30, r8
    151c:	ea 0d       	add	r30, r10
    151e:	f1 1d       	adc	r31, r1
    1520:	80 81       	ld	r24, Z
    1522:	b7 01       	movw	r22, r14
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    152a:	a1 10       	cpse	r10, r1
    152c:	f5 cf       	rjmp	.-22     	; 0x1518 <vfprintf+0x366>
    152e:	33 20       	and	r3, r3
    1530:	09 f4       	brne	.+2      	; 0x1534 <vfprintf+0x382>
    1532:	51 ce       	rjmp	.-862    	; 0x11d6 <vfprintf+0x24>
    1534:	b7 01       	movw	r22, r14
    1536:	80 e2       	ldi	r24, 0x20	; 32
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
    153e:	3a 94       	dec	r3
    1540:	f6 cf       	rjmp	.-20     	; 0x152e <vfprintf+0x37c>
    1542:	f7 01       	movw	r30, r14
    1544:	86 81       	ldd	r24, Z+6	; 0x06
    1546:	97 81       	ldd	r25, Z+7	; 0x07
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x39c>
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	9f ef       	ldi	r25, 0xFF	; 255
    154e:	2c 96       	adiw	r28, 0x0c	; 12
    1550:	e2 e1       	ldi	r30, 0x12	; 18
    1552:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__epilogue_restores__>

00001556 <calloc>:
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	86 9f       	mul	r24, r22
    1560:	80 01       	movw	r16, r0
    1562:	87 9f       	mul	r24, r23
    1564:	10 0d       	add	r17, r0
    1566:	96 9f       	mul	r25, r22
    1568:	10 0d       	add	r17, r0
    156a:	11 24       	eor	r1, r1
    156c:	c8 01       	movw	r24, r16
    156e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <malloc>
    1572:	ec 01       	movw	r28, r24
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	29 f0       	breq	.+10     	; 0x1582 <calloc+0x2c>
    1578:	a8 01       	movw	r20, r16
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <memset>
    1582:	ce 01       	movw	r24, r28
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <strnlen_P>:
    158e:	fc 01       	movw	r30, r24
    1590:	05 90       	lpm	r0, Z+
    1592:	61 50       	subi	r22, 0x01	; 1
    1594:	70 40       	sbci	r23, 0x00	; 0
    1596:	01 10       	cpse	r0, r1
    1598:	d8 f7       	brcc	.-10     	; 0x1590 <strnlen_P+0x2>
    159a:	80 95       	com	r24
    159c:	90 95       	com	r25
    159e:	8e 0f       	add	r24, r30
    15a0:	9f 1f       	adc	r25, r31
    15a2:	08 95       	ret

000015a4 <memset>:
    15a4:	dc 01       	movw	r26, r24
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <memset+0x6>
    15a8:	6d 93       	st	X+, r22
    15aa:	41 50       	subi	r20, 0x01	; 1
    15ac:	50 40       	sbci	r21, 0x00	; 0
    15ae:	e0 f7       	brcc	.-8      	; 0x15a8 <memset+0x4>
    15b0:	08 95       	ret

000015b2 <strnlen>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	61 50       	subi	r22, 0x01	; 1
    15b6:	70 40       	sbci	r23, 0x00	; 0
    15b8:	01 90       	ld	r0, Z+
    15ba:	01 10       	cpse	r0, r1
    15bc:	d8 f7       	brcc	.-10     	; 0x15b4 <strnlen+0x2>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	8e 0f       	add	r24, r30
    15c4:	9f 1f       	adc	r25, r31
    15c6:	08 95       	ret

000015c8 <fputc>:
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	18 2f       	mov	r17, r24
    15d2:	09 2f       	mov	r16, r25
    15d4:	eb 01       	movw	r28, r22
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	81 fd       	sbrc	r24, 1
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <fputc+0x1a>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	20 c0       	rjmp	.+64     	; 0x1622 <fputc+0x5a>
    15e2:	82 ff       	sbrs	r24, 2
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <fputc+0x3e>
    15e6:	4e 81       	ldd	r20, Y+6	; 0x06
    15e8:	5f 81       	ldd	r21, Y+7	; 0x07
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	42 17       	cp	r20, r18
    15f0:	53 07       	cpc	r21, r19
    15f2:	7c f4       	brge	.+30     	; 0x1612 <fputc+0x4a>
    15f4:	e8 81       	ld	r30, Y
    15f6:	f9 81       	ldd	r31, Y+1	; 0x01
    15f8:	9f 01       	movw	r18, r30
    15fa:	2f 5f       	subi	r18, 0xFF	; 255
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	39 83       	std	Y+1, r19	; 0x01
    1600:	28 83       	st	Y, r18
    1602:	10 83       	st	Z, r17
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <fputc+0x4a>
    1606:	e8 85       	ldd	r30, Y+8	; 0x08
    1608:	f9 85       	ldd	r31, Y+9	; 0x09
    160a:	81 2f       	mov	r24, r17
    160c:	09 95       	icall
    160e:	89 2b       	or	r24, r25
    1610:	29 f7       	brne	.-54     	; 0x15dc <fputc+0x14>
    1612:	2e 81       	ldd	r18, Y+6	; 0x06
    1614:	3f 81       	ldd	r19, Y+7	; 0x07
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	3f 83       	std	Y+7, r19	; 0x07
    161c:	2e 83       	std	Y+6, r18	; 0x06
    161e:	81 2f       	mov	r24, r17
    1620:	90 2f       	mov	r25, r16
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <__ultoa_invert>:
    162c:	fa 01       	movw	r30, r20
    162e:	aa 27       	eor	r26, r26
    1630:	28 30       	cpi	r18, 0x08	; 8
    1632:	51 f1       	breq	.+84     	; 0x1688 <__ultoa_invert+0x5c>
    1634:	20 31       	cpi	r18, 0x10	; 16
    1636:	81 f1       	breq	.+96     	; 0x1698 <__ultoa_invert+0x6c>
    1638:	e8 94       	clt
    163a:	6f 93       	push	r22
    163c:	6e 7f       	andi	r22, 0xFE	; 254
    163e:	6e 5f       	subi	r22, 0xFE	; 254
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	af 4f       	sbci	r26, 0xFF	; 255
    1648:	b1 e0       	ldi	r27, 0x01	; 1
    164a:	3e d0       	rcall	.+124    	; 0x16c8 <__ultoa_invert+0x9c>
    164c:	b4 e0       	ldi	r27, 0x04	; 4
    164e:	3c d0       	rcall	.+120    	; 0x16c8 <__ultoa_invert+0x9c>
    1650:	67 0f       	add	r22, r23
    1652:	78 1f       	adc	r23, r24
    1654:	89 1f       	adc	r24, r25
    1656:	9a 1f       	adc	r25, r26
    1658:	a1 1d       	adc	r26, r1
    165a:	68 0f       	add	r22, r24
    165c:	79 1f       	adc	r23, r25
    165e:	8a 1f       	adc	r24, r26
    1660:	91 1d       	adc	r25, r1
    1662:	a1 1d       	adc	r26, r1
    1664:	6a 0f       	add	r22, r26
    1666:	71 1d       	adc	r23, r1
    1668:	81 1d       	adc	r24, r1
    166a:	91 1d       	adc	r25, r1
    166c:	a1 1d       	adc	r26, r1
    166e:	20 d0       	rcall	.+64     	; 0x16b0 <__ultoa_invert+0x84>
    1670:	09 f4       	brne	.+2      	; 0x1674 <__ultoa_invert+0x48>
    1672:	68 94       	set
    1674:	3f 91       	pop	r19
    1676:	2a e0       	ldi	r18, 0x0A	; 10
    1678:	26 9f       	mul	r18, r22
    167a:	11 24       	eor	r1, r1
    167c:	30 19       	sub	r19, r0
    167e:	30 5d       	subi	r19, 0xD0	; 208
    1680:	31 93       	st	Z+, r19
    1682:	de f6       	brtc	.-74     	; 0x163a <__ultoa_invert+0xe>
    1684:	cf 01       	movw	r24, r30
    1686:	08 95       	ret
    1688:	46 2f       	mov	r20, r22
    168a:	47 70       	andi	r20, 0x07	; 7
    168c:	40 5d       	subi	r20, 0xD0	; 208
    168e:	41 93       	st	Z+, r20
    1690:	b3 e0       	ldi	r27, 0x03	; 3
    1692:	0f d0       	rcall	.+30     	; 0x16b2 <__ultoa_invert+0x86>
    1694:	c9 f7       	brne	.-14     	; 0x1688 <__ultoa_invert+0x5c>
    1696:	f6 cf       	rjmp	.-20     	; 0x1684 <__ultoa_invert+0x58>
    1698:	46 2f       	mov	r20, r22
    169a:	4f 70       	andi	r20, 0x0F	; 15
    169c:	40 5d       	subi	r20, 0xD0	; 208
    169e:	4a 33       	cpi	r20, 0x3A	; 58
    16a0:	18 f0       	brcs	.+6      	; 0x16a8 <__ultoa_invert+0x7c>
    16a2:	49 5d       	subi	r20, 0xD9	; 217
    16a4:	31 fd       	sbrc	r19, 1
    16a6:	40 52       	subi	r20, 0x20	; 32
    16a8:	41 93       	st	Z+, r20
    16aa:	02 d0       	rcall	.+4      	; 0x16b0 <__ultoa_invert+0x84>
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__ultoa_invert+0x6c>
    16ae:	ea cf       	rjmp	.-44     	; 0x1684 <__ultoa_invert+0x58>
    16b0:	b4 e0       	ldi	r27, 0x04	; 4
    16b2:	a6 95       	lsr	r26
    16b4:	97 95       	ror	r25
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	ba 95       	dec	r27
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <__ultoa_invert+0x86>
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	61 05       	cpc	r22, r1
    16c4:	71 05       	cpc	r23, r1
    16c6:	08 95       	ret
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	0a 2e       	mov	r0, r26
    16ce:	06 94       	lsr	r0
    16d0:	57 95       	ror	r21
    16d2:	47 95       	ror	r20
    16d4:	37 95       	ror	r19
    16d6:	27 95       	ror	r18
    16d8:	ba 95       	dec	r27
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__ultoa_invert+0xa2>
    16dc:	62 0f       	add	r22, r18
    16de:	73 1f       	adc	r23, r19
    16e0:	84 1f       	adc	r24, r20
    16e2:	95 1f       	adc	r25, r21
    16e4:	a0 1d       	adc	r26, r0
    16e6:	08 95       	ret

000016e8 <__prologue_saves__>:
    16e8:	2f 92       	push	r2
    16ea:	3f 92       	push	r3
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	ca 1b       	sub	r28, r26
    1712:	db 0b       	sbc	r29, r27
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	09 94       	ijmp

00001720 <__epilogue_restores__>:
    1720:	2a 88       	ldd	r2, Y+18	; 0x12
    1722:	39 88       	ldd	r3, Y+17	; 0x11
    1724:	48 88       	ldd	r4, Y+16	; 0x10
    1726:	5f 84       	ldd	r5, Y+15	; 0x0f
    1728:	6e 84       	ldd	r6, Y+14	; 0x0e
    172a:	7d 84       	ldd	r7, Y+13	; 0x0d
    172c:	8c 84       	ldd	r8, Y+12	; 0x0c
    172e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1730:	aa 84       	ldd	r10, Y+10	; 0x0a
    1732:	b9 84       	ldd	r11, Y+9	; 0x09
    1734:	c8 84       	ldd	r12, Y+8	; 0x08
    1736:	df 80       	ldd	r13, Y+7	; 0x07
    1738:	ee 80       	ldd	r14, Y+6	; 0x06
    173a:	fd 80       	ldd	r15, Y+5	; 0x05
    173c:	0c 81       	ldd	r16, Y+4	; 0x04
    173e:	1b 81       	ldd	r17, Y+3	; 0x03
    1740:	aa 81       	ldd	r26, Y+2	; 0x02
    1742:	b9 81       	ldd	r27, Y+1	; 0x01
    1744:	ce 0f       	add	r28, r30
    1746:	d1 1d       	adc	r29, r1
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	ed 01       	movw	r28, r26
    1754:	08 95       	ret

00001756 <_exit>:
    1756:	f8 94       	cli

00001758 <__stop_program>:
    1758:	ff cf       	rjmp	.-2      	; 0x1758 <__stop_program>
