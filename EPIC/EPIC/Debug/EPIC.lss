
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f0  00800100  00000c60  00000cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008002f0  008002f0  00000ee4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d8  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c0e  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001132  00000000  00000000  00003dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010d4  00000000  00000000  00004f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000081c  00000000  00000000  00006000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000829  00000000  00000000  0000681c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017f5  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000883a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e6       	ldi	r30, 0x60	; 96
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 3f       	cpi	r26, 0xF0	; 240
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a0 ef       	ldi	r26, 0xF0	; 240
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 30       	cpi	r26, 0x0C	; 12
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  a6:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_default>

000000ae <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
  b4:	08 95       	ret

000000b6 <ADC_read>:
}

char ADC_read(char channel)
{
	int * adc_channel = 0x1400;
	adc_channel[0] = channel;
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	90 93 01 14 	sts	0x1401, r25
  bc:	80 93 00 14 	sts	0x1400, r24
	char value;
	while(!flag);
  c0:	80 91 f0 02 	lds	r24, 0x02F0
  c4:	90 91 f1 02 	lds	r25, 0x02F1
  c8:	89 2b       	or	r24, r25
  ca:	d1 f3       	breq	.-12     	; 0xc0 <ADC_read+0xa>
	value = adc_channel[20];
  cc:	80 91 28 14 	lds	r24, 0x1428
	flag = 0;
  d0:	10 92 f1 02 	sts	0x02F1, r1
  d4:	10 92 f0 02 	sts	0x02F0, r1
	return value;
}
  d8:	08 95       	ret

000000da <__vector_3>:

ISR(INT2_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	flag = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 f1 02 	sts	0x02F1, r25
  f0:	80 93 f0 02 	sts	0x02F0, r24
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <can_init>:

volatile int msg_received_flag = 0;

void can_init(void)
{	
	mcp_init();
 102:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp_init>
		
	//turn off filters and rollover for receive buffer 0
	mcp_write(MCP_RXB0CTRL , 0b01100000);
 106:	60 e6       	ldi	r22, 0x60	; 96
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	0e 94 38 01 	call	0x270	; 0x270 <mcp_write>

	//enable interrupt for received message on both buffers
	mcp_write(MCP_CANINTE , MCP_RX0IF);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	0e 94 38 01 	call	0x270	; 0x270 <mcp_write>
	
	//activate loopback mode on the MCP2515 for today
	//mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_LOOPBACK);
	
	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages
	mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_NORMAL);
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	6f e0       	ldi	r22, 0x0F	; 15
 11a:	80 ee       	ldi	r24, 0xE0	; 224
 11c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp_bit_modify>
	
	//enabling CAN interrupts
	cli();
 120:	f8 94       	cli
	MCUCR |= (1<<ISC11);
 122:	85 b7       	in	r24, 0x35	; 53
 124:	88 60       	ori	r24, 0x08	; 8
 126:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
 128:	8b b7       	in	r24, 0x3b	; 59
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8b bf       	out	0x3b, r24	; 59
	sei();
 12e:	78 94       	sei
 130:	08 95       	ret

00000132 <can_error>:
}

bool can_error(void)
{
	//read CAN error status out of respective register
	return TXERR & mcp_read(MCP_TXB0CTRL);
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	0e 94 4a 01 	call	0x294	; 0x294 <mcp_read>
}
 138:	82 95       	swap	r24
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <can_transmit_complete>:

bool can_transmit_complete(void)
{
	//check if transmission complete from status register
	return !(TXREQ & mcp_read(MCP_TXB0CTRL));
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	0e 94 4a 01 	call	0x294	; 0x294 <mcp_read>
 144:	83 fb       	bst	r24, 3
 146:	88 27       	eor	r24, r24
 148:	80 f9       	bld	r24, 0
}
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	89 27       	eor	r24, r25
 14e:	08 95       	ret

00000150 <can_message_send>:
	sei();

}

void can_message_send(can_message can_msg)
{
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	2b 97       	sbiw	r28, 0x0b	; 11
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	e9 82       	std	Y+1, r14	; 0x01
 16e:	fa 82       	std	Y+2, r15	; 0x02
 170:	0b 83       	std	Y+3, r16	; 0x03
 172:	1c 83       	std	Y+4, r17	; 0x04
 174:	2d 83       	std	Y+5, r18	; 0x05
 176:	3e 83       	std	Y+6, r19	; 0x06
 178:	4f 83       	std	Y+7, r20	; 0x07
 17a:	58 87       	std	Y+8, r21	; 0x08
 17c:	69 87       	std	Y+9, r22	; 0x09
 17e:	7a 87       	std	Y+10, r23	; 0x0a
 180:	8b 87       	std	Y+11, r24	; 0x0b
 182:	e9 80       	ldd	r14, Y+1	; 0x01
 184:	fa 80       	ldd	r15, Y+2	; 0x02
	if(can_transmit_complete())
 186:	0e 94 9f 00 	call	0x13e	; 0x13e <can_transmit_complete>
 18a:	88 23       	and	r24, r24
 18c:	59 f1       	breq	.+86     	; 0x1e4 <can_message_send+0x94>
	{
		//write CAN msg ID to MCP2515
		mcp_write(MCP_TXB0SIDH, can_msg.id >> 3);
 18e:	b7 01       	movw	r22, r14
 190:	76 95       	lsr	r23
 192:	67 95       	ror	r22
 194:	76 95       	lsr	r23
 196:	67 95       	ror	r22
 198:	76 95       	lsr	r23
 19a:	67 95       	ror	r22
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	0e 94 38 01 	call	0x270	; 0x270 <mcp_write>
		mcp_write(MCP_TXB0SIDL, can_msg.id << 5);
 1a2:	6e 2d       	mov	r22, r14
 1a4:	62 95       	swap	r22
 1a6:	66 0f       	add	r22, r22
 1a8:	60 7e       	andi	r22, 0xE0	; 224
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	0e 94 38 01 	call	0x270	; 0x270 <mcp_write>
		
		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
 1b0:	60 2f       	mov	r22, r16
 1b2:	6f 70       	andi	r22, 0x0F	; 15
 1b4:	85 e3       	ldi	r24, 0x35	; 53
 1b6:	0e 94 38 01 	call	0x270	; 0x270 <mcp_write>
	
		//write CAN data to MCP2515	
		for(uint8_t i = 0; i < can_msg.length; i++)
 1ba:	00 23       	and	r16, r16
 1bc:	79 f0       	breq	.+30     	; 0x1dc <can_message_send+0x8c>
 1be:	7e 01       	movw	r14, r28
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	e8 0e       	add	r14, r24
 1c4:	f1 1c       	adc	r15, r1
 1c6:	0a 5c       	subi	r16, 0xCA	; 202
 1c8:	16 e3       	ldi	r17, 0x36	; 54
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
 1ca:	f7 01       	movw	r30, r14
 1cc:	61 91       	ld	r22, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	81 2f       	mov	r24, r17
 1d2:	0e 94 38 01 	call	0x270	; 0x270 <mcp_write>
 1d6:	1f 5f       	subi	r17, 0xFF	; 255
		
		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
	
		//write CAN data to MCP2515	
		for(uint8_t i = 0; i < can_msg.length; i++)
 1d8:	10 13       	cpse	r17, r16
 1da:	f7 cf       	rjmp	.-18     	; 0x1ca <can_message_send+0x7a>
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
		
		//send transmission request for transmitted CAN msg to MCP2515
		mcp_request_to_send(TXB0);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 95 01 	call	0x32a	; 0x32a <mcp_request_to_send>
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <can_message_send+0xa4>
	}
	else 
	{
		if(can_error())
 1e4:	0e 94 99 00 	call	0x132	; 0x132 <can_error>
 1e8:	88 23       	and	r24, r24
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <can_message_send+0xa4>
			printf("CAN transmission error\n");	
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 de 05 	call	0xbbc	; 0xbbc <puts>
	}
}
 1f4:	2b 96       	adiw	r28, 0x0b	; 11
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <__vector_1>:
	
		
}

ISR(INT0_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	printf("interrupted!\n");
 230:	86 e2       	ldi	r24, 0x26	; 38
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 de 05 	call	0xbbc	; 0xbbc <puts>
	//clear interrupt bits for rx buffer 0
	mcp_bit_modify(MCP_RX0IF, MCP_CANINTF, 0x00);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	6c e2       	ldi	r22, 0x2C	; 44
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp_bit_modify>
	
	msg_received_flag = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 f3 02 	sts	0x02F3, r25
 24a:	80 93 f2 02 	sts	0x02F2, r24
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <mcp_write>:
	spi_init();
	mcp_reset();
}

void mcp_write(uint8_t address, char data)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	d8 2f       	mov	r29, r24
 276:	c6 2f       	mov	r28, r22
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
 278:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(WRITE);
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	spi_MasterTransmit(address);
 280:	8d 2f       	mov	r24, r29
 282:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	spi_MasterTransmit(data);
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
 28c:	c4 9a       	sbi	0x18, 4	; 24
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <mcp_read>:

uint8_t mcp_read(uint8_t address)
{
 294:	cf 93       	push	r28
 296:	c8 2f       	mov	r28, r24
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
 298:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(READ);
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	spi_MasterTransmit(address);
 2a0:	8c 2f       	mov	r24, r28
 2a2:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	
	uint8_t received_char = spi_SlaveReceive();
 2a6:	0e 94 a9 01 	call	0x352	; 0x352 <spi_SlaveReceive>

	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
 2aa:	c4 9a       	sbi	0x18, 4	; 24
	
	return received_char;
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <mcp_reset>:
#define BIT_MODIFY		0b00000101

#define SPI_SS PB4

void mcp_reset(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
 2ba:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(RESET);
 2bc:	80 ec       	ldi	r24, 0xC0	; 192
 2be:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
 2c2:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	8c ec       	ldi	r24, 0xCC	; 204
 2c6:	94 e0       	ldi	r25, 0x04	; 4
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <mcp_reset+0x18>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <mcp_reset+0x1e>
 2ce:	00 00       	nop
	_delay_ms(1);
	
	//Self-test
	volatile uint8_t canstat;
	canstat = mcp_read(MCP_CANSTAT);
 2d0:	8e e0       	ldi	r24, 0x0E	; 14
 2d2:	0e 94 4a 01 	call	0x294	; 0x294 <mcp_read>
 2d6:	89 83       	std	Y+1, r24	; 0x01
	if ((canstat & MODE_MASK) != MODE_CONFIG) {
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	80 7e       	andi	r24, 0xE0	; 224
 2dc:	80 38       	cpi	r24, 0x80	; 128
 2de:	21 f0       	breq	.+8      	; 0x2e8 <mcp_reset+0x38>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
 2e0:	85 e9       	ldi	r24, 0x95	; 149
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 de 05 	call	0xbbc	; 0xbbc <puts>
	}
}
 2e8:	0f 90       	pop	r0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <mcp_init>:

void mcp_init(void)
{
	spi_init();
 2f0:	0e 94 a2 01 	call	0x344	; 0x344 <spi_init>
	mcp_reset();
 2f4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <mcp_reset>
 2f8:	08 95       	ret

000002fa <mcp_bit_modify>:
		
	return received_char;
}

void mcp_bit_modify(uint8_t mask_byte, uint8_t reg_adr, uint8_t data )
{
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	d8 2f       	mov	r29, r24
 302:	16 2f       	mov	r17, r22
 304:	c4 2f       	mov	r28, r20
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
 306:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(BIT_MODIFY);
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	spi_MasterTransmit(reg_adr);
 30e:	81 2f       	mov	r24, r17
 310:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	spi_MasterTransmit(mask_byte);
 314:	8d 2f       	mov	r24, r29
 316:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	spi_MasterTransmit(data);
 31a:	8c 2f       	mov	r24, r28
 31c:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
 320:	c4 9a       	sbi	0x18, 4	; 24

}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	08 95       	ret

0000032a <mcp_request_to_send>:


void mcp_request_to_send (uint8_t out_buffer)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
 32a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_MasterTransmit(RTS|out_buffer);	
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_MasterTransmit>
	
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
 332:	c4 9a       	sbi	0x18, 4	; 24
 334:	08 95       	ret

00000336 <spi_Masterinit>:
	SPCR = (1<<SPE);
}
void spi_Masterinit(void)
{	
	/* Set MOSI, SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_SS)|(1<<DD_MOSI)|(1<<DD_SCK);
 336:	87 b3       	in	r24, 0x17	; 23
 338:	80 6b       	ori	r24, 0xB0	; 176
 33a:	87 bb       	out	0x17, r24	; 23
	//DDRB &= ~(1<<DD_MISO); //set MISO as input
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 33c:	8d b1       	in	r24, 0x0d	; 13
 33e:	81 65       	ori	r24, 0x51	; 81
 340:	8d b9       	out	0x0d, r24	; 13
 342:	08 95       	ret

00000344 <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
 344:	0e 94 9b 01 	call	0x336	; 0x336 <spi_Masterinit>
 348:	08 95       	ret

0000034a <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 34a:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 34c:	77 9b       	sbis	0x0e, 7	; 14
 34e:	fe cf       	rjmp	.-4      	; 0x34c <spi_MasterTransmit+0x2>
	

}
 350:	08 95       	ret

00000352 <spi_SlaveReceive>:


char spi_SlaveReceive(void)
{
	//send dummy data
	SPDR = 0xFF;
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	8f b9       	out	0x0f, r24	; 15
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 356:	77 9b       	sbis	0x0e, 7	; 14
 358:	fe cf       	rjmp	.-4      	; 0x356 <spi_SlaveReceive+0x4>
	;
	/* Return data register */
	return SPDR;
 35a:	8f b1       	in	r24, 0x0f	; 15
}
 35c:	08 95       	ret

0000035e <main_init>:
JOY_POS joy_pos, old_joy_pos;
uint8_t current_selection = 0;

void main_init (void)
{
	uart_init(BAUDRATE);
 35e:	8f e1       	ldi	r24, 0x1F	; 31
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 2f 04 	call	0x85e	; 0x85e <uart_init>
	sram_init();
 366:	0e 94 1c 04 	call	0x838	; 0x838 <sram_init>
	adc_init();
 36a:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	JOY_init();
 36e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <JOY_init>
	can_init();
 372:	0e 94 81 00 	call	0x102	; 0x102 <can_init>
	sei();	
 376:	78 94       	sei
	oled_init();
 378:	0e 94 df 03 	call	0x7be	; 0x7be <oled_init>
	//menu_main = getMenuRoot();
	printf("INIT DONE\n");
 37c:	87 ec       	ldi	r24, 0xC7	; 199
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 de 05 	call	0xbbc	; 0xbbc <puts>
 384:	08 95       	ret

00000386 <__vector_default>:
	}
	
ISR(BADISR_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	printf("getting random interrupts\n");
 3a8:	81 ed       	ldi	r24, 0xD1	; 209
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 de 05 	call	0xbbc	; 0xbbc <puts>
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <sendJoyPos>:

void sendJoyPos(void)
{
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	2b 97       	sbiw	r28, 0x0b	; 11
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
	can_message joy_msg = { .id=JOY, .length=3, .data={joy_pos.x, joy_pos.y, joy_pos.dir} };
 3ee:	fe 01       	movw	r30, r28
 3f0:	31 96       	adiw	r30, 0x01	; 1
 3f2:	8b e0       	ldi	r24, 0x0B	; 11
 3f4:	df 01       	movw	r26, r30
 3f6:	1d 92       	st	X+, r1
 3f8:	8a 95       	dec	r24
 3fa:	e9 f7       	brne	.-6      	; 0x3f6 <sendJoyPos+0x24>
 3fc:	10 91 fc 02 	lds	r17, 0x02FC
 400:	20 91 fe 02 	lds	r18, 0x02FE
 404:	30 91 00 03 	lds	r19, 0x0300
	can_message_send(joy_msg);
 408:	e9 80       	ldd	r14, Y+1	; 0x01
 40a:	fa 80       	ldd	r15, Y+2	; 0x02
 40c:	03 e0       	ldi	r16, 0x03	; 3
 40e:	4f 81       	ldd	r20, Y+7	; 0x07
 410:	58 85       	ldd	r21, Y+8	; 0x08
 412:	69 85       	ldd	r22, Y+9	; 0x09
 414:	7a 85       	ldd	r23, Y+10	; 0x0a
 416:	8b 85       	ldd	r24, Y+11	; 0x0b
 418:	0e 94 a8 00 	call	0x150	; 0x150 <can_message_send>
}
 41c:	2b 96       	adiw	r28, 0x0b	; 11
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	08 95       	ret

00000436 <main>:

int main(void)
{
	main_init();
 436:	0e 94 af 01 	call	0x35e	; 0x35e <main_init>
	//sayHello();
	
	while(1)
	{
		joy_pos = JOY_getPosition();
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
 43a:	0c ef       	ldi	r16, 0xFC	; 252
 43c:	12 e0       	ldi	r17, 0x02	; 2
 43e:	c4 ef       	ldi	r28, 0xF4	; 244
 440:	d2 e0       	ldi	r29, 0x02	; 2
 442:	0f 2e       	mov	r0, r31
 444:	fe ef       	ldi	r31, 0xFE	; 254
 446:	cf 2e       	mov	r12, r31
 448:	f2 e0       	ldi	r31, 0x02	; 2
 44a:	df 2e       	mov	r13, r31
 44c:	f0 2d       	mov	r31, r0
 44e:	0f 2e       	mov	r0, r31
 450:	f6 ef       	ldi	r31, 0xF6	; 246
 452:	ef 2e       	mov	r14, r31
 454:	f2 e0       	ldi	r31, 0x02	; 2
 456:	ff 2e       	mov	r15, r31
 458:	f0 2d       	mov	r31, r0
			sendJoyPos();
		_delay_ms(100);
		old_joy_pos = joy_pos;
 45a:	0f 2e       	mov	r0, r31
 45c:	f6 e0       	ldi	r31, 0x06	; 6
 45e:	bf 2e       	mov	r11, r31
 460:	f0 2d       	mov	r31, r0
	//say hello to the guy in front of the display
	//sayHello();
	
	while(1)
	{
		joy_pos = JOY_getPosition();
 462:	0e 94 75 02 	call	0x4ea	; 0x4ea <JOY_getPosition>
 466:	20 93 fc 02 	sts	0x02FC, r18
 46a:	30 93 fd 02 	sts	0x02FD, r19
 46e:	40 93 fe 02 	sts	0x02FE, r20
 472:	50 93 ff 02 	sts	0x02FF, r21
 476:	60 93 00 03 	sts	0x0300, r22
 47a:	70 93 01 03 	sts	0x0301, r23
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
 47e:	f8 01       	movw	r30, r16
 480:	80 81       	ld	r24, Z
 482:	91 81       	ldd	r25, Z+1	; 0x01
 484:	28 81       	ld	r18, Y
 486:	39 81       	ldd	r19, Y+1	; 0x01
 488:	a9 01       	movw	r20, r18
 48a:	46 5f       	subi	r20, 0xF6	; 246
 48c:	5f 4f       	sbci	r21, 0xFF	; 255
 48e:	48 17       	cp	r20, r24
 490:	59 07       	cpc	r21, r25
 492:	ac f0       	brlt	.+42     	; 0x4be <main+0x88>
 494:	f6 01       	movw	r30, r12
 496:	40 81       	ld	r20, Z
 498:	51 81       	ldd	r21, Z+1	; 0x01
 49a:	f7 01       	movw	r30, r14
 49c:	60 81       	ld	r22, Z
 49e:	71 81       	ldd	r23, Z+1	; 0x01
 4a0:	fb 01       	movw	r30, r22
 4a2:	3a 96       	adiw	r30, 0x0a	; 10
 4a4:	e4 17       	cp	r30, r20
 4a6:	f5 07       	cpc	r31, r21
 4a8:	54 f0       	brlt	.+20     	; 0x4be <main+0x88>
 4aa:	2a 50       	subi	r18, 0x0A	; 10
 4ac:	31 09       	sbc	r19, r1
 4ae:	82 17       	cp	r24, r18
 4b0:	93 07       	cpc	r25, r19
 4b2:	2c f0       	brlt	.+10     	; 0x4be <main+0x88>
 4b4:	6a 50       	subi	r22, 0x0A	; 10
 4b6:	71 09       	sbc	r23, r1
 4b8:	46 17       	cp	r20, r22
 4ba:	57 07       	cpc	r21, r23
 4bc:	14 f4       	brge	.+4      	; 0x4c2 <main+0x8c>
			sendJoyPos();
 4be:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <sendJoyPos>
 4c2:	ff ef       	ldi	r31, 0xFF	; 255
 4c4:	2f e7       	ldi	r18, 0x7F	; 127
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	f1 50       	subi	r31, 0x01	; 1
 4ca:	20 40       	sbci	r18, 0x00	; 0
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x92>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x9c>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <main+0x9e>
		_delay_ms(100);
		old_joy_pos = joy_pos;
 4d4:	f8 01       	movw	r30, r16
 4d6:	de 01       	movw	r26, r28
 4d8:	8b 2d       	mov	r24, r11
 4da:	01 90       	ld	r0, Z+
 4dc:	0d 92       	st	X+, r0
 4de:	8a 95       	dec	r24
 4e0:	e1 f7       	brne	.-8      	; 0x4da <main+0xa4>
	}
 4e2:	bf cf       	rjmp	.-130    	; 0x462 <main+0x2c>

000004e4 <JOY_init>:

//
void JOY_init()
{
	//set PIN 0 and 1 of port B as inputs
	DDRB &= (0<<0)&(0<<1);	
 4e4:	87 b3       	in	r24, 0x17	; 23
 4e6:	17 ba       	out	0x17, r1	; 23
 4e8:	08 95       	ret

000004ea <JOY_getPosition>:
{
	return PORTB&(1<<button);
}

JOY_POS JOY_getPosition(void)
{
 4ea:	2f 92       	push	r2
 4ec:	3f 92       	push	r3
 4ee:	4f 92       	push	r4
 4f0:	5f 92       	push	r5
 4f2:	6f 92       	push	r6
 4f4:	7f 92       	push	r7
 4f6:	8f 92       	push	r8
 4f8:	9f 92       	push	r9
 4fa:	af 92       	push	r10
 4fc:	bf 92       	push	r11
 4fe:	cf 92       	push	r12
 500:	df 92       	push	r13
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	00 d0       	rcall	.+0      	; 0x510 <__stack+0x11>
 510:	00 d0       	rcall	.+0      	; 0x512 <__stack+0x13>
 512:	00 d0       	rcall	.+0      	; 0x514 <__stack+0x15>
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	0f 2e       	mov	r0, r31
 51a:	f5 e0       	ldi	r31, 0x05	; 5
 51c:	ef 2e       	mov	r14, r31
 51e:	f1 2c       	mov	r15, r1
 520:	f0 2d       	mov	r31, r0
	int sum_x = 0;
	int sum_y = 0;
	int largest_x = 0;
	int largest_y = 0;
	int smallest_x = 255;
	int smallest_y = 255;
 522:	22 24       	eor	r2, r2
 524:	2a 94       	dec	r2
 526:	31 2c       	mov	r3, r1
	int val_y = 0;
	int sum_x = 0;
	int sum_y = 0;
	int largest_x = 0;
	int largest_y = 0;
	int smallest_x = 255;
 528:	66 24       	eor	r6, r6
 52a:	6a 94       	dec	r6
 52c:	71 2c       	mov	r7, r1
	int val_x = 0;
	int val_y = 0;
	int sum_x = 0;
	int sum_y = 0;
	int largest_x = 0;
	int largest_y = 0;
 52e:	41 2c       	mov	r4, r1
 530:	51 2c       	mov	r5, r1
	JOY_POS value;
	int val_x = 0;
	int val_y = 0;
	int sum_x = 0;
	int sum_y = 0;
	int largest_x = 0;
 532:	81 2c       	mov	r8, r1
 534:	91 2c       	mov	r9, r1
{
	JOY_POS value;
	int val_x = 0;
	int val_y = 0;
	int sum_x = 0;
	int sum_y = 0;
 536:	c1 2c       	mov	r12, r1
 538:	d1 2c       	mov	r13, r1
JOY_POS JOY_getPosition(void)
{
	JOY_POS value;
	int val_x = 0;
	int val_y = 0;
	int sum_x = 0;
 53a:	a1 2c       	mov	r10, r1
 53c:	b1 2c       	mov	r11, r1
	int largest_y = 0;
	int smallest_x = 255;
	int smallest_y = 255;
	for(int i=0;i<5;i++)
	{
		val_x = ADC_read(JOY_H);
 53e:	84 e0       	ldi	r24, 0x04	; 4
 540:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_read>
 544:	08 2f       	mov	r16, r24
 546:	10 e0       	ldi	r17, 0x00	; 0
		val_y = ADC_read(JOY_V);
 548:	85 e0       	ldi	r24, 0x05	; 5
 54a:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_read>
 54e:	90 e0       	ldi	r25, 0x00	; 0
		smallest_x = val_x < smallest_x ? val_x : smallest_x;
 550:	06 15       	cp	r16, r6
 552:	17 05       	cpc	r17, r7
 554:	0c f4       	brge	.+2      	; 0x558 <__stack+0x59>
 556:	38 01       	movw	r6, r16
		smallest_y = val_y < smallest_y ? val_y : smallest_y;
 558:	82 15       	cp	r24, r2
 55a:	93 05       	cpc	r25, r3
 55c:	0c f4       	brge	.+2      	; 0x560 <__stack+0x61>
 55e:	1c 01       	movw	r2, r24
		largest_y = val_y > largest_y ? val_y : largest_y;
 560:	48 16       	cp	r4, r24
 562:	59 06       	cpc	r5, r25
 564:	0c f4       	brge	.+2      	; 0x568 <__stack+0x69>
 566:	2c 01       	movw	r4, r24
		largest_x = val_x > largest_x ? val_x : largest_x;
 568:	80 16       	cp	r8, r16
 56a:	91 06       	cpc	r9, r17
 56c:	0c f4       	brge	.+2      	; 0x570 <__stack+0x71>
 56e:	48 01       	movw	r8, r16
		sum_x += val_x;
 570:	a0 0e       	add	r10, r16
 572:	b1 1e       	adc	r11, r17
		sum_y += val_y;
 574:	c8 0e       	add	r12, r24
 576:	d9 1e       	adc	r13, r25
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	e2 1a       	sub	r14, r18
 57c:	f1 08       	sbc	r15, r1
	int sum_y = 0;
	int largest_x = 0;
	int largest_y = 0;
	int smallest_x = 255;
	int smallest_y = 255;
	for(int i=0;i<5;i++)
 57e:	e1 14       	cp	r14, r1
 580:	f1 04       	cpc	r15, r1
 582:	e9 f6       	brne	.-70     	; 0x53e <__stack+0x3f>
		largest_y = val_y > largest_y ? val_y : largest_y;
		largest_x = val_x > largest_x ? val_x : largest_x;
		sum_x += val_x;
		sum_y += val_y;
	}
	sum_x = sum_x - largest_x - smallest_x;
 584:	a8 18       	sub	r10, r8
 586:	b9 08       	sbc	r11, r9
 588:	c5 01       	movw	r24, r10
 58a:	86 19       	sub	r24, r6
 58c:	97 09       	sbc	r25, r7
	sum_y = sum_y - largest_y - smallest_y;	 
 58e:	c4 18       	sub	r12, r4
 590:	d5 08       	sbc	r13, r5
 592:	c2 18       	sub	r12, r2
 594:	d3 08       	sbc	r13, r3
	sum_x /= 3;
 596:	23 e0       	ldi	r18, 0x03	; 3
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	0e 94 44 04 	call	0x888	; 0x888 <__divmodhi4>
 5a0:	8b 01       	movw	r16, r22
 5a2:	fb 01       	movw	r30, r22
	sum_y /= 3;
 5a4:	c6 01       	movw	r24, r12
 5a6:	b9 01       	movw	r22, r18
 5a8:	0e 94 44 04 	call	0x888	; 0x888 <__divmodhi4>
 5ac:	d6 2e       	mov	r13, r22
 5ae:	c7 2e       	mov	r12, r23
 5b0:	86 2f       	mov	r24, r22
 5b2:	97 2f       	mov	r25, r23
	value.x = sum_x;
	value.y = sum_y;
	
	if(value.y >= -value.x+255 && value.y>=value.x)
 5b4:	2f ef       	ldi	r18, 0xFF	; 255
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	20 1b       	sub	r18, r16
 5ba:	31 0b       	sbc	r19, r17
	{
		value.dir = UP;
	}
	if(value.y >= -value.x+255 && value.y<value.x)
 5bc:	82 17       	cp	r24, r18
 5be:	93 07       	cpc	r25, r19
 5c0:	0c f4       	brge	.+2      	; 0x5c4 <__stack+0xc5>
 5c2:	4c c0       	rjmp	.+152    	; 0x65c <__stack+0x15d>
 5c4:	80 17       	cp	r24, r16
 5c6:	91 07       	cpc	r25, r17
 5c8:	0c f4       	brge	.+2      	; 0x5cc <__stack+0xcd>
 5ca:	52 c0       	rjmp	.+164    	; 0x670 <__stack+0x171>
 5cc:	4b c0       	rjmp	.+150    	; 0x664 <__stack+0x165>
	
	switch(value.dir)
	{
		case UP:
		{
			value.dir = value.y > mid_point.y + margin ? value.dir : NEUTRAL; 
 5ce:	40 91 06 01 	lds	r20, 0x0106
 5d2:	20 91 09 01 	lds	r18, 0x0109
 5d6:	30 91 0a 01 	lds	r19, 0x010A
 5da:	24 0f       	add	r18, r20
 5dc:	31 1d       	adc	r19, r1
 5de:	28 17       	cp	r18, r24
 5e0:	39 07       	cpc	r19, r25
 5e2:	0c f4       	brge	.+2      	; 0x5e6 <__stack+0xe7>
 5e4:	5e c0       	rjmp	.+188    	; 0x6a2 <__stack+0x1a3>
 5e6:	e1 2c       	mov	r14, r1
 5e8:	f1 2c       	mov	r15, r1
 5ea:	5b c0       	rjmp	.+182    	; 0x6a2 <__stack+0x1a3>
			break;
		}
		case RIGHT:
		{
			value.dir = value.x > mid_point.x + margin ? value.dir : NEUTRAL; 
 5ec:	20 91 06 01 	lds	r18, 0x0106
 5f0:	80 91 07 01 	lds	r24, 0x0107
 5f4:	90 91 08 01 	lds	r25, 0x0108
 5f8:	82 0f       	add	r24, r18
 5fa:	91 1d       	adc	r25, r1
 5fc:	8e 17       	cp	r24, r30
 5fe:	9f 07       	cpc	r25, r31
 600:	0c f4       	brge	.+2      	; 0x604 <__stack+0x105>
 602:	4f c0       	rjmp	.+158    	; 0x6a2 <__stack+0x1a3>
 604:	e1 2c       	mov	r14, r1
 606:	f1 2c       	mov	r15, r1
 608:	4c c0       	rjmp	.+152    	; 0x6a2 <__stack+0x1a3>
			break;
		}
		case DOWN:
		{
			value.dir = value.y < mid_point.y - margin ? value.dir : NEUTRAL; 
 60a:	40 91 06 01 	lds	r20, 0x0106
 60e:	20 91 09 01 	lds	r18, 0x0109
 612:	30 91 0a 01 	lds	r19, 0x010A
 616:	24 1b       	sub	r18, r20
 618:	31 09       	sbc	r19, r1
 61a:	82 17       	cp	r24, r18
 61c:	93 07       	cpc	r25, r19
 61e:	cc f0       	brlt	.+50     	; 0x652 <__stack+0x153>
 620:	e1 2c       	mov	r14, r1
 622:	f1 2c       	mov	r15, r1
 624:	3e c0       	rjmp	.+124    	; 0x6a2 <__stack+0x1a3>
			break;
		}
		case LEFT:
		{
			value.dir = value.x < mid_point.x - margin ? value.dir : NEUTRAL; 
 626:	20 91 06 01 	lds	r18, 0x0106
 62a:	80 91 07 01 	lds	r24, 0x0107
 62e:	90 91 08 01 	lds	r25, 0x0108
 632:	82 1b       	sub	r24, r18
 634:	91 09       	sbc	r25, r1
 636:	31 e0       	ldi	r19, 0x01	; 1
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	e8 17       	cp	r30, r24
 63c:	f9 07       	cpc	r31, r25
 63e:	0c f0       	brlt	.+2      	; 0x642 <__stack+0x143>
 640:	30 e0       	ldi	r19, 0x00	; 0
	
	switch(value.dir)
	{
		case UP:
		{
			value.dir = value.y > mid_point.y + margin ? value.dir : NEUTRAL; 
 642:	e3 2e       	mov	r14, r19
 644:	f2 2e       	mov	r15, r18
 646:	2d c0       	rjmp	.+90     	; 0x6a2 <__stack+0x1a3>
			value.dir = value.x < mid_point.x - margin ? value.dir : NEUTRAL; 
			break;
		}
		default:
		{
			printf("Error receiving joystick value\n");
 648:	85 e4       	ldi	r24, 0x45	; 69
 64a:	92 e0       	ldi	r25, 0x02	; 2
 64c:	0e 94 de 05 	call	0xbbc	; 0xbbc <puts>
			break;
 650:	28 c0       	rjmp	.+80     	; 0x6a2 <__stack+0x1a3>
			value.dir = value.x > mid_point.x + margin ? value.dir : NEUTRAL; 
			break;
		}
		case DOWN:
		{
			value.dir = value.y < mid_point.y - margin ? value.dir : NEUTRAL; 
 652:	68 94       	set
 654:	ee 24       	eor	r14, r14
 656:	e2 f8       	bld	r14, 2
 658:	f1 2c       	mov	r15, r1
 65a:	23 c0       	rjmp	.+70     	; 0x6a2 <__stack+0x1a3>
	}
	if(value.y >= -value.x+255 && value.y<value.x)
	{
		value.dir = RIGHT;
	}			
	if(value.y < -value.x+255 && value.y>=value.x)
 65c:	80 17       	cp	r24, r16
 65e:	91 07       	cpc	r25, r17
 660:	14 f7       	brge	.-60     	; 0x626 <__stack+0x127>
 662:	d3 cf       	rjmp	.-90     	; 0x60a <__stack+0x10b>
	
	if(value.y >= -value.x+255 && value.y>=value.x)
	{
		value.dir = UP;
	}
	if(value.y >= -value.x+255 && value.y<value.x)
 664:	0f 2e       	mov	r0, r31
 666:	f3 e0       	ldi	r31, 0x03	; 3
 668:	ef 2e       	mov	r14, r31
 66a:	f1 2c       	mov	r15, r1
 66c:	f0 2d       	mov	r31, r0
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__stack+0x179>
	{
		value.dir = RIGHT;
 670:	68 94       	set
 672:	ee 24       	eor	r14, r14
 674:	e1 f8       	bld	r14, 1
 676:	f1 2c       	mov	r15, r1
	if(value.y < -value.x+255 && value.y<value.x)
	{
		value.dir = DOWN;
	}
	
	switch(value.dir)
 678:	22 e0       	ldi	r18, 0x02	; 2
 67a:	e2 16       	cp	r14, r18
 67c:	f1 04       	cpc	r15, r1
 67e:	09 f4       	brne	.+2      	; 0x682 <__stack+0x183>
 680:	b5 cf       	rjmp	.-150    	; 0x5ec <__stack+0xed>
 682:	2c f4       	brge	.+10     	; 0x68e <__stack+0x18f>
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	e8 16       	cp	r14, r24
 688:	f1 04       	cpc	r15, r1
 68a:	f1 f6       	brne	.-68     	; 0x648 <__stack+0x149>
 68c:	cc cf       	rjmp	.-104    	; 0x626 <__stack+0x127>
 68e:	23 e0       	ldi	r18, 0x03	; 3
 690:	e2 16       	cp	r14, r18
 692:	f1 04       	cpc	r15, r1
 694:	09 f4       	brne	.+2      	; 0x698 <__stack+0x199>
 696:	9b cf       	rjmp	.-202    	; 0x5ce <__stack+0xcf>
 698:	24 e0       	ldi	r18, 0x04	; 4
 69a:	e2 16       	cp	r14, r18
 69c:	f1 04       	cpc	r15, r1
 69e:	a1 f6       	brne	.-88     	; 0x648 <__stack+0x149>
 6a0:	b4 cf       	rjmp	.-152    	; 0x60a <__stack+0x10b>
			printf("Error receiving joystick value\n");
			break;
		}
	}
	
	return value;
 6a2:	1a 83       	std	Y+2, r17	; 0x02
 6a4:	09 83       	std	Y+1, r16	; 0x01
 6a6:	db 82       	std	Y+3, r13	; 0x03
 6a8:	cc 82       	std	Y+4, r12	; 0x04
 6aa:	fe 82       	std	Y+6, r15	; 0x06
 6ac:	ed 82       	std	Y+5, r14	; 0x05
 6ae:	20 2f       	mov	r18, r16
 6b0:	3a 81       	ldd	r19, Y+2	; 0x02
 6b2:	4d 2d       	mov	r20, r13
 6b4:	5c 2d       	mov	r21, r12
 6b6:	6e 2d       	mov	r22, r14
 6b8:	7e 81       	ldd	r23, Y+6	; 0x06
}
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	26 96       	adiw	r28, 0x06	; 6
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	1f 91       	pop	r17
 6d0:	0f 91       	pop	r16
 6d2:	ff 90       	pop	r15
 6d4:	ef 90       	pop	r14
 6d6:	df 90       	pop	r13
 6d8:	cf 90       	pop	r12
 6da:	bf 90       	pop	r11
 6dc:	af 90       	pop	r10
 6de:	9f 90       	pop	r9
 6e0:	8f 90       	pop	r8
 6e2:	7f 90       	pop	r7
 6e4:	6f 90       	pop	r6
 6e6:	5f 90       	pop	r5
 6e8:	4f 90       	pop	r4
 6ea:	3f 90       	pop	r3
 6ec:	2f 90       	pop	r2
 6ee:	08 95       	ret

000006f0 <clear_buffer>:
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <clear_buffer+0x32>
 6fa:	9c 01       	movw	r18, r24
 6fc:	24 0f       	add	r18, r20
 6fe:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i*128+j] = 0x00;
 700:	e0 91 0d 01 	lds	r30, 0x010D
 704:	f0 91 0e 01 	lds	r31, 0x010E
 708:	e2 0f       	add	r30, r18
 70a:	f3 1f       	adc	r31, r19
 70c:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	80 38       	cpi	r24, 0x80	; 128
 712:	91 05       	cpc	r25, r1
 714:	91 f7       	brne	.-28     	; 0x6fa <clear_buffer+0xa>
 716:	40 58       	subi	r20, 0x80	; 128
 718:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
 71a:	41 15       	cp	r20, r1
 71c:	84 e0       	ldi	r24, 0x04	; 4
 71e:	58 07       	cpc	r21, r24
 720:	19 f0       	breq	.+6      	; 0x728 <clear_buffer+0x38>
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
 722:	87 2f       	mov	r24, r23
 724:	96 2f       	mov	r25, r22
 726:	e9 cf       	rjmp	.-46     	; 0x6fa <clear_buffer+0xa>
 728:	08 95       	ret

0000072a <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
 72a:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
 72c:	e0 e0       	ldi	r30, 0x00	; 0
 72e:	f0 e1       	ldi	r31, 0x10	; 16
 730:	80 83       	st	Z, r24
 732:	10 82       	st	Z, r1
 734:	8f e7       	ldi	r24, 0x7F	; 127
 736:	80 83       	st	Z, r24
 738:	08 95       	ret

0000073a <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
	oled_set_page(0);
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	0e 94 95 03 	call	0x72a	; 0x72a <oled_set_page>
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
 752:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
 754:	68 94       	set
 756:	dd 24       	eor	r13, r13
 758:	d7 f8       	bld	r13, 7
 75a:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
 75c:	c0 e0       	ldi	r28, 0x00	; 0
 75e:	d2 e1       	ldi	r29, 0x12	; 18
 760:	21 c0       	rjmp	.+66     	; 0x7a4 <print_buffer+0x6a>
 762:	02 2f       	mov	r16, r18
 764:	13 2f       	mov	r17, r19
 766:	a9 01       	movw	r20, r18
 768:	48 1b       	sub	r20, r24
 76a:	59 0b       	sbc	r21, r25
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i*128+j]);
 76c:	e0 91 0d 01 	lds	r30, 0x010D
 770:	f0 91 0e 01 	lds	r31, 0x010E
 774:	e4 0f       	add	r30, r20
 776:	f5 1f       	adc	r31, r21
 778:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
 77a:	48 83       	st	Y, r20
 77c:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
 77e:	00 97       	sbiw	r24, 0x00	; 0
 780:	81 f7       	brne	.-32     	; 0x762 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
 782:	87 e0       	ldi	r24, 0x07	; 7
 784:	8f 15       	cp	r24, r15
 786:	28 f0       	brcs	.+10     	; 0x792 <print_buffer+0x58>
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	8f 0d       	add	r24, r15
 78c:	0e 94 95 03 	call	0x72a	; 0x72a <oled_set_page>
 790:	03 c0       	rjmp	.+6      	; 0x798 <print_buffer+0x5e>
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 95 03 	call	0x72a	; 0x72a <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
 798:	f3 94       	inc	r15
 79a:	88 e0       	ldi	r24, 0x08	; 8
 79c:	f8 16       	cp	r15, r24
 79e:	39 f0       	breq	.+14     	; 0x7ae <print_buffer+0x74>
 7a0:	20 2f       	mov	r18, r16
 7a2:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
 7a4:	8d 2d       	mov	r24, r13
 7a6:	9e 2d       	mov	r25, r14
 7a8:	20 58       	subi	r18, 0x80	; 128
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
 7ac:	da cf       	rjmp	.-76     	; 0x762 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
	}
}
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	ff 90       	pop	r15
 7b8:	ef 90       	pop	r14
 7ba:	df 90       	pop	r13
 7bc:	08 95       	ret

000007be <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
 7be:	e0 e0       	ldi	r30, 0x00	; 0
 7c0:	f0 e1       	ldi	r31, 0x10	; 16
 7c2:	8e ea       	ldi	r24, 0xAE	; 174
 7c4:	80 83       	st	Z, r24
 7c6:	81 ea       	ldi	r24, 0xA1	; 161
 7c8:	80 83       	st	Z, r24
 7ca:	8a ed       	ldi	r24, 0xDA	; 218
 7cc:	80 83       	st	Z, r24
 7ce:	82 e1       	ldi	r24, 0x12	; 18
 7d0:	80 83       	st	Z, r24
 7d2:	88 ec       	ldi	r24, 0xC8	; 200
 7d4:	80 83       	st	Z, r24
 7d6:	88 ea       	ldi	r24, 0xA8	; 168
 7d8:	80 83       	st	Z, r24
 7da:	8f e3       	ldi	r24, 0x3F	; 63
 7dc:	80 83       	st	Z, r24
 7de:	85 ed       	ldi	r24, 0xD5	; 213
 7e0:	80 83       	st	Z, r24
 7e2:	80 e8       	ldi	r24, 0x80	; 128
 7e4:	80 83       	st	Z, r24
 7e6:	81 e8       	ldi	r24, 0x81	; 129
 7e8:	80 83       	st	Z, r24
 7ea:	80 e5       	ldi	r24, 0x50	; 80
 7ec:	80 83       	st	Z, r24
 7ee:	89 ed       	ldi	r24, 0xD9	; 217
 7f0:	80 83       	st	Z, r24
 7f2:	81 e2       	ldi	r24, 0x21	; 33
 7f4:	80 83       	st	Z, r24
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	80 83       	st	Z, r24
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	80 83       	st	Z, r24
 7fe:	8b ed       	ldi	r24, 0xDB	; 219
 800:	80 83       	st	Z, r24
 802:	80 e3       	ldi	r24, 0x30	; 48
 804:	80 83       	st	Z, r24
 806:	8d ea       	ldi	r24, 0xAD	; 173
 808:	80 83       	st	Z, r24
 80a:	10 82       	st	Z, r1
 80c:	84 ea       	ldi	r24, 0xA4	; 164
 80e:	80 83       	st	Z, r24
 810:	86 ea       	ldi	r24, 0xA6	; 166
 812:	80 83       	st	Z, r24
 814:	8f ea       	ldi	r24, 0xAF	; 175
 816:	80 83       	st	Z, r24
 818:	83 ed       	ldi	r24, 0xD3	; 211
 81a:	80 83       	st	Z, r24
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 83       	st	Z, r24
 820:	80 e4       	ldi	r24, 0x40	; 64
 822:	80 83       	st	Z, r24
 824:	80 eb       	ldi	r24, 0xB0	; 176
 826:	80 83       	st	Z, r24
 828:	10 82       	st	Z, r1
 82a:	8f e7       	ldi	r24, 0x7F	; 127
 82c:	80 83       	st	Z, r24
	//set the lower start column address
	oled_write_command(0);
	//set the upper start column address
	oled_write_command(127);
	
	clear_buffer();
 82e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <clear_buffer>
	print_buffer();	
 832:	0e 94 9d 03 	call	0x73a	; 0x73a <print_buffer>
 836:	08 95       	ret

00000838 <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1<<SRE);
 838:	85 b7       	in	r24, 0x35	; 53
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	85 bf       	out	0x35, r24	; 53
	
	//realesing  JTAG pins from memory mapping
	SFIOR|=(1<<XMM2);
 83e:	80 b7       	in	r24, 0x30	; 48
 840:	80 62       	ori	r24, 0x20	; 32
 842:	80 bf       	out	0x30, r24	; 48
	SFIOR&=(0<<XMM1);
 844:	80 b7       	in	r24, 0x30	; 48
 846:	10 be       	out	0x30, r1	; 48
	SFIOR&=(0<<XMM0);
 848:	80 b7       	in	r24, 0x30	; 48
 84a:	10 be       	out	0x30, r1	; 48
 84c:	08 95       	ret

0000084e <uart_putc>:
//send data to RS232
void uart_putc(unsigned char c)
{
	
	//wait while register is free
	while (!(UCSR0A & (1<<UDRE0)));
 84e:	5d 9b       	sbis	0x0b, 5	; 11
 850:	fe cf       	rjmp	.-4      	; 0x84e <uart_putc>
	
	//put character to USART data register
	UDR0 = c;
 852:	8c b9       	out	0x0c, r24	; 12
 854:	08 95       	ret

00000856 <uart_getc>:

//receive data from RS232
unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1<<RXC0)));
 856:	5f 9b       	sbis	0x0b, 7	; 11
 858:	fe cf       	rjmp	.-4      	; 0x856 <uart_getc>
	
	//get value from USART data register
	return UDR0;
 85a:	8c b1       	in	r24, 0x0c	; 12
}
 85c:	08 95       	ret

0000085e <uart_init>:

//initialize uart to 9600 8N1 (9600 Baud/Bit rate, 8 Bits data, no parity, 1 stop bit
void uart_init(unsigned int ubrr)
{
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr>>8);
 85e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 860:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 862:	88 e1       	ldi	r24, 0x18	; 24
 864:	8a b9       	out	0x0a, r24	; 10
	
	//set UCSRC as accessed register, set number of character size to 8
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
 866:	86 e8       	ldi	r24, 0x86	; 134
 868:	80 bd       	out	0x20, r24	; 32
	//set number of stop bits to 1
	UCSR0C &= (0<<USBS0);
 86a:	80 b5       	in	r24, 0x20	; 32
 86c:	10 bc       	out	0x20, r1	; 32
	//set connection to asynchronous
	UCSR0C &= (0<<UMSEL0); 
 86e:	80 b5       	in	r24, 0x20	; 32
 870:	10 bc       	out	0x20, r1	; 32
	//disable parity mode
	UCSR0C &= (0<<UPM00);
 872:	80 b5       	in	r24, 0x20	; 32
 874:	10 bc       	out	0x20, r1	; 32
	UCSR0C &= (0<<UPM10);
 876:	80 b5       	in	r24, 0x20	; 32
 878:	10 bc       	out	0x20, r1	; 32
	fdevopen(uart_putc, uart_getc);
 87a:	6b e2       	ldi	r22, 0x2B	; 43
 87c:	74 e0       	ldi	r23, 0x04	; 4
 87e:	87 e2       	ldi	r24, 0x27	; 39
 880:	94 e0       	ldi	r25, 0x04	; 4
 882:	0e 94 93 05 	call	0xb26	; 0xb26 <fdevopen>
 886:	08 95       	ret

00000888 <__divmodhi4>:
 888:	97 fb       	bst	r25, 7
 88a:	07 2e       	mov	r0, r23
 88c:	16 f4       	brtc	.+4      	; 0x892 <__divmodhi4+0xa>
 88e:	00 94       	com	r0
 890:	07 d0       	rcall	.+14     	; 0x8a0 <__divmodhi4_neg1>
 892:	77 fd       	sbrc	r23, 7
 894:	09 d0       	rcall	.+18     	; 0x8a8 <__divmodhi4_neg2>
 896:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__udivmodhi4>
 89a:	07 fc       	sbrc	r0, 7
 89c:	05 d0       	rcall	.+10     	; 0x8a8 <__divmodhi4_neg2>
 89e:	3e f4       	brtc	.+14     	; 0x8ae <__divmodhi4_exit>

000008a0 <__divmodhi4_neg1>:
 8a0:	90 95       	com	r25
 8a2:	81 95       	neg	r24
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__divmodhi4_neg2>:
 8a8:	70 95       	com	r23
 8aa:	61 95       	neg	r22
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255

000008ae <__divmodhi4_exit>:
 8ae:	08 95       	ret

000008b0 <__udivmodhi4>:
 8b0:	aa 1b       	sub	r26, r26
 8b2:	bb 1b       	sub	r27, r27
 8b4:	51 e1       	ldi	r21, 0x11	; 17
 8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <__udivmodhi4_ep>

000008b8 <__udivmodhi4_loop>:
 8b8:	aa 1f       	adc	r26, r26
 8ba:	bb 1f       	adc	r27, r27
 8bc:	a6 17       	cp	r26, r22
 8be:	b7 07       	cpc	r27, r23
 8c0:	10 f0       	brcs	.+4      	; 0x8c6 <__udivmodhi4_ep>
 8c2:	a6 1b       	sub	r26, r22
 8c4:	b7 0b       	sbc	r27, r23

000008c6 <__udivmodhi4_ep>:
 8c6:	88 1f       	adc	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	5a 95       	dec	r21
 8cc:	a9 f7       	brne	.-22     	; 0x8b8 <__udivmodhi4_loop>
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	bc 01       	movw	r22, r24
 8d4:	cd 01       	movw	r24, r26
 8d6:	08 95       	ret

000008d8 <malloc>:
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	82 30       	cpi	r24, 0x02	; 2
 8de:	91 05       	cpc	r25, r1
 8e0:	10 f4       	brcc	.+4      	; 0x8e6 <malloc+0xe>
 8e2:	82 e0       	ldi	r24, 0x02	; 2
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	e0 91 04 03 	lds	r30, 0x0304
 8ea:	f0 91 05 03 	lds	r31, 0x0305
 8ee:	20 e0       	ldi	r18, 0x00	; 0
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	a0 e0       	ldi	r26, 0x00	; 0
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	30 97       	sbiw	r30, 0x00	; 0
 8f8:	39 f1       	breq	.+78     	; 0x948 <malloc+0x70>
 8fa:	40 81       	ld	r20, Z
 8fc:	51 81       	ldd	r21, Z+1	; 0x01
 8fe:	48 17       	cp	r20, r24
 900:	59 07       	cpc	r21, r25
 902:	b8 f0       	brcs	.+46     	; 0x932 <malloc+0x5a>
 904:	48 17       	cp	r20, r24
 906:	59 07       	cpc	r21, r25
 908:	71 f4       	brne	.+28     	; 0x926 <malloc+0x4e>
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	10 97       	sbiw	r26, 0x00	; 0
 910:	29 f0       	breq	.+10     	; 0x91c <malloc+0x44>
 912:	13 96       	adiw	r26, 0x03	; 3
 914:	9c 93       	st	X, r25
 916:	8e 93       	st	-X, r24
 918:	12 97       	sbiw	r26, 0x02	; 2
 91a:	2c c0       	rjmp	.+88     	; 0x974 <malloc+0x9c>
 91c:	90 93 05 03 	sts	0x0305, r25
 920:	80 93 04 03 	sts	0x0304, r24
 924:	27 c0       	rjmp	.+78     	; 0x974 <malloc+0x9c>
 926:	21 15       	cp	r18, r1
 928:	31 05       	cpc	r19, r1
 92a:	31 f0       	breq	.+12     	; 0x938 <malloc+0x60>
 92c:	42 17       	cp	r20, r18
 92e:	53 07       	cpc	r21, r19
 930:	18 f0       	brcs	.+6      	; 0x938 <malloc+0x60>
 932:	a9 01       	movw	r20, r18
 934:	db 01       	movw	r26, r22
 936:	01 c0       	rjmp	.+2      	; 0x93a <malloc+0x62>
 938:	ef 01       	movw	r28, r30
 93a:	9a 01       	movw	r18, r20
 93c:	bd 01       	movw	r22, r26
 93e:	df 01       	movw	r26, r30
 940:	02 80       	ldd	r0, Z+2	; 0x02
 942:	f3 81       	ldd	r31, Z+3	; 0x03
 944:	e0 2d       	mov	r30, r0
 946:	d7 cf       	rjmp	.-82     	; 0x8f6 <malloc+0x1e>
 948:	21 15       	cp	r18, r1
 94a:	31 05       	cpc	r19, r1
 94c:	f9 f0       	breq	.+62     	; 0x98c <malloc+0xb4>
 94e:	28 1b       	sub	r18, r24
 950:	39 0b       	sbc	r19, r25
 952:	24 30       	cpi	r18, 0x04	; 4
 954:	31 05       	cpc	r19, r1
 956:	80 f4       	brcc	.+32     	; 0x978 <malloc+0xa0>
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	9b 81       	ldd	r25, Y+3	; 0x03
 95c:	61 15       	cp	r22, r1
 95e:	71 05       	cpc	r23, r1
 960:	21 f0       	breq	.+8      	; 0x96a <malloc+0x92>
 962:	fb 01       	movw	r30, r22
 964:	93 83       	std	Z+3, r25	; 0x03
 966:	82 83       	std	Z+2, r24	; 0x02
 968:	04 c0       	rjmp	.+8      	; 0x972 <malloc+0x9a>
 96a:	90 93 05 03 	sts	0x0305, r25
 96e:	80 93 04 03 	sts	0x0304, r24
 972:	fe 01       	movw	r30, r28
 974:	32 96       	adiw	r30, 0x02	; 2
 976:	44 c0       	rjmp	.+136    	; 0xa00 <malloc+0x128>
 978:	fe 01       	movw	r30, r28
 97a:	e2 0f       	add	r30, r18
 97c:	f3 1f       	adc	r31, r19
 97e:	81 93       	st	Z+, r24
 980:	91 93       	st	Z+, r25
 982:	22 50       	subi	r18, 0x02	; 2
 984:	31 09       	sbc	r19, r1
 986:	39 83       	std	Y+1, r19	; 0x01
 988:	28 83       	st	Y, r18
 98a:	3a c0       	rjmp	.+116    	; 0xa00 <malloc+0x128>
 98c:	20 91 02 03 	lds	r18, 0x0302
 990:	30 91 03 03 	lds	r19, 0x0303
 994:	23 2b       	or	r18, r19
 996:	41 f4       	brne	.+16     	; 0x9a8 <malloc+0xd0>
 998:	20 91 02 01 	lds	r18, 0x0102
 99c:	30 91 03 01 	lds	r19, 0x0103
 9a0:	30 93 03 03 	sts	0x0303, r19
 9a4:	20 93 02 03 	sts	0x0302, r18
 9a8:	20 91 00 01 	lds	r18, 0x0100
 9ac:	30 91 01 01 	lds	r19, 0x0101
 9b0:	21 15       	cp	r18, r1
 9b2:	31 05       	cpc	r19, r1
 9b4:	41 f4       	brne	.+16     	; 0x9c6 <malloc+0xee>
 9b6:	2d b7       	in	r18, 0x3d	; 61
 9b8:	3e b7       	in	r19, 0x3e	; 62
 9ba:	40 91 04 01 	lds	r20, 0x0104
 9be:	50 91 05 01 	lds	r21, 0x0105
 9c2:	24 1b       	sub	r18, r20
 9c4:	35 0b       	sbc	r19, r21
 9c6:	e0 91 02 03 	lds	r30, 0x0302
 9ca:	f0 91 03 03 	lds	r31, 0x0303
 9ce:	e2 17       	cp	r30, r18
 9d0:	f3 07       	cpc	r31, r19
 9d2:	a0 f4       	brcc	.+40     	; 0x9fc <malloc+0x124>
 9d4:	2e 1b       	sub	r18, r30
 9d6:	3f 0b       	sbc	r19, r31
 9d8:	28 17       	cp	r18, r24
 9da:	39 07       	cpc	r19, r25
 9dc:	78 f0       	brcs	.+30     	; 0x9fc <malloc+0x124>
 9de:	ac 01       	movw	r20, r24
 9e0:	4e 5f       	subi	r20, 0xFE	; 254
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	24 17       	cp	r18, r20
 9e6:	35 07       	cpc	r19, r21
 9e8:	48 f0       	brcs	.+18     	; 0x9fc <malloc+0x124>
 9ea:	4e 0f       	add	r20, r30
 9ec:	5f 1f       	adc	r21, r31
 9ee:	50 93 03 03 	sts	0x0303, r21
 9f2:	40 93 02 03 	sts	0x0302, r20
 9f6:	81 93       	st	Z+, r24
 9f8:	91 93       	st	Z+, r25
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <malloc+0x128>
 9fc:	e0 e0       	ldi	r30, 0x00	; 0
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	cf 01       	movw	r24, r30
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	08 95       	ret

00000a08 <free>:
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	00 97       	sbiw	r24, 0x00	; 0
 a0e:	09 f4       	brne	.+2      	; 0xa12 <free+0xa>
 a10:	87 c0       	rjmp	.+270    	; 0xb20 <free+0x118>
 a12:	fc 01       	movw	r30, r24
 a14:	32 97       	sbiw	r30, 0x02	; 2
 a16:	13 82       	std	Z+3, r1	; 0x03
 a18:	12 82       	std	Z+2, r1	; 0x02
 a1a:	c0 91 04 03 	lds	r28, 0x0304
 a1e:	d0 91 05 03 	lds	r29, 0x0305
 a22:	20 97       	sbiw	r28, 0x00	; 0
 a24:	81 f4       	brne	.+32     	; 0xa46 <free+0x3e>
 a26:	20 81       	ld	r18, Z
 a28:	31 81       	ldd	r19, Z+1	; 0x01
 a2a:	28 0f       	add	r18, r24
 a2c:	39 1f       	adc	r19, r25
 a2e:	80 91 02 03 	lds	r24, 0x0302
 a32:	90 91 03 03 	lds	r25, 0x0303
 a36:	82 17       	cp	r24, r18
 a38:	93 07       	cpc	r25, r19
 a3a:	79 f5       	brne	.+94     	; 0xa9a <free+0x92>
 a3c:	f0 93 03 03 	sts	0x0303, r31
 a40:	e0 93 02 03 	sts	0x0302, r30
 a44:	6d c0       	rjmp	.+218    	; 0xb20 <free+0x118>
 a46:	de 01       	movw	r26, r28
 a48:	20 e0       	ldi	r18, 0x00	; 0
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	ae 17       	cp	r26, r30
 a4e:	bf 07       	cpc	r27, r31
 a50:	50 f4       	brcc	.+20     	; 0xa66 <free+0x5e>
 a52:	12 96       	adiw	r26, 0x02	; 2
 a54:	4d 91       	ld	r20, X+
 a56:	5c 91       	ld	r21, X
 a58:	13 97       	sbiw	r26, 0x03	; 3
 a5a:	9d 01       	movw	r18, r26
 a5c:	41 15       	cp	r20, r1
 a5e:	51 05       	cpc	r21, r1
 a60:	09 f1       	breq	.+66     	; 0xaa4 <free+0x9c>
 a62:	da 01       	movw	r26, r20
 a64:	f3 cf       	rjmp	.-26     	; 0xa4c <free+0x44>
 a66:	b3 83       	std	Z+3, r27	; 0x03
 a68:	a2 83       	std	Z+2, r26	; 0x02
 a6a:	40 81       	ld	r20, Z
 a6c:	51 81       	ldd	r21, Z+1	; 0x01
 a6e:	84 0f       	add	r24, r20
 a70:	95 1f       	adc	r25, r21
 a72:	8a 17       	cp	r24, r26
 a74:	9b 07       	cpc	r25, r27
 a76:	71 f4       	brne	.+28     	; 0xa94 <free+0x8c>
 a78:	8d 91       	ld	r24, X+
 a7a:	9c 91       	ld	r25, X
 a7c:	11 97       	sbiw	r26, 0x01	; 1
 a7e:	84 0f       	add	r24, r20
 a80:	95 1f       	adc	r25, r21
 a82:	02 96       	adiw	r24, 0x02	; 2
 a84:	91 83       	std	Z+1, r25	; 0x01
 a86:	80 83       	st	Z, r24
 a88:	12 96       	adiw	r26, 0x02	; 2
 a8a:	8d 91       	ld	r24, X+
 a8c:	9c 91       	ld	r25, X
 a8e:	13 97       	sbiw	r26, 0x03	; 3
 a90:	93 83       	std	Z+3, r25	; 0x03
 a92:	82 83       	std	Z+2, r24	; 0x02
 a94:	21 15       	cp	r18, r1
 a96:	31 05       	cpc	r19, r1
 a98:	29 f4       	brne	.+10     	; 0xaa4 <free+0x9c>
 a9a:	f0 93 05 03 	sts	0x0305, r31
 a9e:	e0 93 04 03 	sts	0x0304, r30
 aa2:	3e c0       	rjmp	.+124    	; 0xb20 <free+0x118>
 aa4:	d9 01       	movw	r26, r18
 aa6:	13 96       	adiw	r26, 0x03	; 3
 aa8:	fc 93       	st	X, r31
 aaa:	ee 93       	st	-X, r30
 aac:	12 97       	sbiw	r26, 0x02	; 2
 aae:	4d 91       	ld	r20, X+
 ab0:	5d 91       	ld	r21, X+
 ab2:	a4 0f       	add	r26, r20
 ab4:	b5 1f       	adc	r27, r21
 ab6:	ea 17       	cp	r30, r26
 ab8:	fb 07       	cpc	r31, r27
 aba:	79 f4       	brne	.+30     	; 0xada <free+0xd2>
 abc:	80 81       	ld	r24, Z
 abe:	91 81       	ldd	r25, Z+1	; 0x01
 ac0:	84 0f       	add	r24, r20
 ac2:	95 1f       	adc	r25, r21
 ac4:	02 96       	adiw	r24, 0x02	; 2
 ac6:	d9 01       	movw	r26, r18
 ac8:	11 96       	adiw	r26, 0x01	; 1
 aca:	9c 93       	st	X, r25
 acc:	8e 93       	st	-X, r24
 ace:	82 81       	ldd	r24, Z+2	; 0x02
 ad0:	93 81       	ldd	r25, Z+3	; 0x03
 ad2:	13 96       	adiw	r26, 0x03	; 3
 ad4:	9c 93       	st	X, r25
 ad6:	8e 93       	st	-X, r24
 ad8:	12 97       	sbiw	r26, 0x02	; 2
 ada:	e0 e0       	ldi	r30, 0x00	; 0
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	8a 81       	ldd	r24, Y+2	; 0x02
 ae0:	9b 81       	ldd	r25, Y+3	; 0x03
 ae2:	00 97       	sbiw	r24, 0x00	; 0
 ae4:	19 f0       	breq	.+6      	; 0xaec <free+0xe4>
 ae6:	fe 01       	movw	r30, r28
 ae8:	ec 01       	movw	r28, r24
 aea:	f9 cf       	rjmp	.-14     	; 0xade <free+0xd6>
 aec:	ce 01       	movw	r24, r28
 aee:	02 96       	adiw	r24, 0x02	; 2
 af0:	28 81       	ld	r18, Y
 af2:	39 81       	ldd	r19, Y+1	; 0x01
 af4:	82 0f       	add	r24, r18
 af6:	93 1f       	adc	r25, r19
 af8:	20 91 02 03 	lds	r18, 0x0302
 afc:	30 91 03 03 	lds	r19, 0x0303
 b00:	28 17       	cp	r18, r24
 b02:	39 07       	cpc	r19, r25
 b04:	69 f4       	brne	.+26     	; 0xb20 <free+0x118>
 b06:	30 97       	sbiw	r30, 0x00	; 0
 b08:	29 f4       	brne	.+10     	; 0xb14 <free+0x10c>
 b0a:	10 92 05 03 	sts	0x0305, r1
 b0e:	10 92 04 03 	sts	0x0304, r1
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <free+0x110>
 b14:	13 82       	std	Z+3, r1	; 0x03
 b16:	12 82       	std	Z+2, r1	; 0x02
 b18:	d0 93 03 03 	sts	0x0303, r29
 b1c:	c0 93 02 03 	sts	0x0302, r28
 b20:	df 91       	pop	r29
 b22:	cf 91       	pop	r28
 b24:	08 95       	ret

00000b26 <fdevopen>:
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	ec 01       	movw	r28, r24
 b30:	8b 01       	movw	r16, r22
 b32:	00 97       	sbiw	r24, 0x00	; 0
 b34:	31 f4       	brne	.+12     	; 0xb42 <fdevopen+0x1c>
 b36:	61 15       	cp	r22, r1
 b38:	71 05       	cpc	r23, r1
 b3a:	19 f4       	brne	.+6      	; 0xb42 <fdevopen+0x1c>
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	38 c0       	rjmp	.+112    	; 0xbb2 <fdevopen+0x8c>
 b42:	6e e0       	ldi	r22, 0x0E	; 14
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 0b 06 	call	0xc16	; 0xc16 <calloc>
 b4e:	fc 01       	movw	r30, r24
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	a1 f3       	breq	.-24     	; 0xb3c <fdevopen+0x16>
 b54:	80 e8       	ldi	r24, 0x80	; 128
 b56:	83 83       	std	Z+3, r24	; 0x03
 b58:	01 15       	cp	r16, r1
 b5a:	11 05       	cpc	r17, r1
 b5c:	71 f0       	breq	.+28     	; 0xb7a <fdevopen+0x54>
 b5e:	13 87       	std	Z+11, r17	; 0x0b
 b60:	02 87       	std	Z+10, r16	; 0x0a
 b62:	81 e8       	ldi	r24, 0x81	; 129
 b64:	83 83       	std	Z+3, r24	; 0x03
 b66:	80 91 06 03 	lds	r24, 0x0306
 b6a:	90 91 07 03 	lds	r25, 0x0307
 b6e:	89 2b       	or	r24, r25
 b70:	21 f4       	brne	.+8      	; 0xb7a <fdevopen+0x54>
 b72:	f0 93 07 03 	sts	0x0307, r31
 b76:	e0 93 06 03 	sts	0x0306, r30
 b7a:	20 97       	sbiw	r28, 0x00	; 0
 b7c:	c9 f0       	breq	.+50     	; 0xbb0 <fdevopen+0x8a>
 b7e:	d1 87       	std	Z+9, r29	; 0x09
 b80:	c0 87       	std	Z+8, r28	; 0x08
 b82:	83 81       	ldd	r24, Z+3	; 0x03
 b84:	82 60       	ori	r24, 0x02	; 2
 b86:	83 83       	std	Z+3, r24	; 0x03
 b88:	80 91 08 03 	lds	r24, 0x0308
 b8c:	90 91 09 03 	lds	r25, 0x0309
 b90:	89 2b       	or	r24, r25
 b92:	71 f4       	brne	.+28     	; 0xbb0 <fdevopen+0x8a>
 b94:	f0 93 09 03 	sts	0x0309, r31
 b98:	e0 93 08 03 	sts	0x0308, r30
 b9c:	80 91 0a 03 	lds	r24, 0x030A
 ba0:	90 91 0b 03 	lds	r25, 0x030B
 ba4:	89 2b       	or	r24, r25
 ba6:	21 f4       	brne	.+8      	; 0xbb0 <fdevopen+0x8a>
 ba8:	f0 93 0b 03 	sts	0x030B, r31
 bac:	e0 93 0a 03 	sts	0x030A, r30
 bb0:	cf 01       	movw	r24, r30
 bb2:	df 91       	pop	r29
 bb4:	cf 91       	pop	r28
 bb6:	1f 91       	pop	r17
 bb8:	0f 91       	pop	r16
 bba:	08 95       	ret

00000bbc <puts>:
 bbc:	0f 93       	push	r16
 bbe:	1f 93       	push	r17
 bc0:	cf 93       	push	r28
 bc2:	df 93       	push	r29
 bc4:	e0 91 08 03 	lds	r30, 0x0308
 bc8:	f0 91 09 03 	lds	r31, 0x0309
 bcc:	23 81       	ldd	r18, Z+3	; 0x03
 bce:	21 ff       	sbrs	r18, 1
 bd0:	1b c0       	rjmp	.+54     	; 0xc08 <puts+0x4c>
 bd2:	ec 01       	movw	r28, r24
 bd4:	00 e0       	ldi	r16, 0x00	; 0
 bd6:	10 e0       	ldi	r17, 0x00	; 0
 bd8:	89 91       	ld	r24, Y+
 bda:	60 91 08 03 	lds	r22, 0x0308
 bde:	70 91 09 03 	lds	r23, 0x0309
 be2:	db 01       	movw	r26, r22
 be4:	18 96       	adiw	r26, 0x08	; 8
 be6:	ed 91       	ld	r30, X+
 be8:	fc 91       	ld	r31, X
 bea:	19 97       	sbiw	r26, 0x09	; 9
 bec:	88 23       	and	r24, r24
 bee:	31 f0       	breq	.+12     	; 0xbfc <puts+0x40>
 bf0:	09 95       	icall
 bf2:	89 2b       	or	r24, r25
 bf4:	89 f3       	breq	.-30     	; 0xbd8 <puts+0x1c>
 bf6:	0f ef       	ldi	r16, 0xFF	; 255
 bf8:	1f ef       	ldi	r17, 0xFF	; 255
 bfa:	ee cf       	rjmp	.-36     	; 0xbd8 <puts+0x1c>
 bfc:	8a e0       	ldi	r24, 0x0A	; 10
 bfe:	09 95       	icall
 c00:	89 2b       	or	r24, r25
 c02:	11 f4       	brne	.+4      	; 0xc08 <puts+0x4c>
 c04:	c8 01       	movw	r24, r16
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <puts+0x50>
 c08:	8f ef       	ldi	r24, 0xFF	; 255
 c0a:	9f ef       	ldi	r25, 0xFF	; 255
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	1f 91       	pop	r17
 c12:	0f 91       	pop	r16
 c14:	08 95       	ret

00000c16 <calloc>:
 c16:	0f 93       	push	r16
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	86 9f       	mul	r24, r22
 c20:	80 01       	movw	r16, r0
 c22:	87 9f       	mul	r24, r23
 c24:	10 0d       	add	r17, r0
 c26:	96 9f       	mul	r25, r22
 c28:	10 0d       	add	r17, r0
 c2a:	11 24       	eor	r1, r1
 c2c:	c8 01       	movw	r24, r16
 c2e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <malloc>
 c32:	ec 01       	movw	r28, r24
 c34:	00 97       	sbiw	r24, 0x00	; 0
 c36:	29 f0       	breq	.+10     	; 0xc42 <calloc+0x2c>
 c38:	a8 01       	movw	r20, r16
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	70 e0       	ldi	r23, 0x00	; 0
 c3e:	0e 94 27 06 	call	0xc4e	; 0xc4e <memset>
 c42:	ce 01       	movw	r24, r28
 c44:	df 91       	pop	r29
 c46:	cf 91       	pop	r28
 c48:	1f 91       	pop	r17
 c4a:	0f 91       	pop	r16
 c4c:	08 95       	ret

00000c4e <memset>:
 c4e:	dc 01       	movw	r26, r24
 c50:	01 c0       	rjmp	.+2      	; 0xc54 <memset+0x6>
 c52:	6d 93       	st	X+, r22
 c54:	41 50       	subi	r20, 0x01	; 1
 c56:	50 40       	sbci	r21, 0x00	; 0
 c58:	e0 f7       	brcc	.-8      	; 0xc52 <memset+0x4>
 c5a:	08 95       	ret

00000c5c <_exit>:
 c5c:	f8 94       	cli

00000c5e <__stop_program>:
 c5e:	ff cf       	rjmp	.-2      	; 0xc5e <__stop_program>
