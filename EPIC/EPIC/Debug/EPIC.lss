
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fe  00800100  00001540  000015d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008003fe  008003fe  000018d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000320  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000331c  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012dd  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000120b  00000000  00000000  0000621b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000095c  00000000  00000000  00007428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008aa  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e9e  00000000  00000000  0000862e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  0000a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <sendSliderPos+0x56>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e4       	ldi	r30, 0x40	; 64
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 3f       	cpi	r26, 0xFE	; 254
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	ae ef       	ldi	r26, 0xFE	; 254
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 31       	cpi	r26, 0x1E	; 30
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 aa 05 	call	0xb54	; 0xb54 <main>
     39e:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_default>

000003a6 <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
     3a6:	8b b7       	in	r24, 0x3b	; 59
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	8b bf       	out	0x3b, r24	; 59
     3ac:	08 95       	ret

000003ae <ADC_read>:
}

char ADC_read(char channel)
{
	int * adc_channel = 0x1400;
	adc_channel[0] = channel;
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 01 14 	sts	0x1401, r25
     3b4:	80 93 00 14 	sts	0x1400, r24
	char value;
	while(!flag);
     3b8:	80 91 fe 03 	lds	r24, 0x03FE
     3bc:	90 91 ff 03 	lds	r25, 0x03FF
     3c0:	89 2b       	or	r24, r25
     3c2:	d1 f3       	breq	.-12     	; 0x3b8 <ADC_read+0xa>
	value = adc_channel[20];
     3c4:	80 91 28 14 	lds	r24, 0x1428
	flag = 0;
     3c8:	10 92 ff 03 	sts	0x03FF, r1
     3cc:	10 92 fe 03 	sts	0x03FE, r1
	return value;
}
     3d0:	08 95       	ret

000003d2 <__vector_3>:

//interrupt service routine to notice when data available
ISR(INT2_vect)
{
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
	flag = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	90 93 ff 03 	sts	0x03FF, r25
     3e8:	80 93 fe 03 	sts	0x03FE, r24
}
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <can_init>:
volatile int msg_received_flag = 0;

void can_init(void)
{
	//initialize mcp
	mcp_init();
     3fa:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mcp_init>

	//ensure to be in config mode
	mcp_write(MCP_CANCTRL, MODE_MASK & MODE_CONFIG);
     3fe:	60 e8       	ldi	r22, 0x80	; 128
     400:	8f e0       	ldi	r24, 0x0F	; 15
     402:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>

	//turn off filters and rollover for receive buffer 0
	mcp_write(MCP_RXB0CTRL, NO_FILTERS_AND_MASKS);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	80 e6       	ldi	r24, 0x60	; 96
     40a:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>

	//enable interrupt for received message
	mcp_write(MCP_CANINTE, MCP_RX0IF);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	8b e2       	ldi	r24, 0x2B	; 43
     412:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>

	//activate normal mode on the MCP2515 (only mode in which it can transmit CAN messages)
	mcp_bit_modify(MODE_MASK, MCP_CANCTRL, MODE_NORMAL);
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	6f e0       	ldi	r22, 0x0F	; 15
     41a:	80 ee       	ldi	r24, 0xE0	; 224
     41c:	0e 94 81 04 	call	0x902	; 0x902 <mcp_bit_modify>

	//enable CAN interrupts on the MCU
	cli();
     420:	f8 94       	cli
	#ifdef ATMEGA2560
		EICRB &= ~(1<<ISC31);
		EICRB &= ~(1<<ISC30);
		EIMSK |= (1<<INT3);
	#else
		MCUCR |= (1 << ISC11);
     422:	85 b7       	in	r24, 0x35	; 53
     424:	88 60       	ori	r24, 0x08	; 8
     426:	85 bf       	out	0x35, r24	; 53
		GICR |= (1 << INT0);
     428:	8b b7       	in	r24, 0x3b	; 59
     42a:	80 64       	ori	r24, 0x40	; 64
     42c:	8b bf       	out	0x3b, r24	; 59
	#endif
	sei();
     42e:	78 94       	sei
     430:	08 95       	ret

00000432 <can_error>:
}

bool can_error(void)
{
	//read CAN error status out of respective register
	return TXERR & mcp_read(MCP_TXB0CTRL);
     432:	80 e3       	ldi	r24, 0x30	; 48
     434:	0e 94 48 04 	call	0x890	; 0x890 <mcp_read>
}
     438:	82 95       	swap	r24
     43a:	81 70       	andi	r24, 0x01	; 1
     43c:	08 95       	ret

0000043e <can_transmit_complete>:

bool can_transmit_complete(void)
{
	//check if transmission complete from status register
	return !(TXREQ & mcp_read(MCP_TXB0CTRL));
     43e:	80 e3       	ldi	r24, 0x30	; 48
     440:	0e 94 48 04 	call	0x890	; 0x890 <mcp_read>
     444:	83 fb       	bst	r24, 3
     446:	88 27       	eor	r24, r24
     448:	80 f9       	bld	r24, 0
}
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	89 27       	eor	r24, r25
     44e:	08 95       	ret

00000450 <can_message_send>:
	#endif
	sei();
}

void can_message_send(can_message can_msg)
{
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	2b 97       	sbiw	r28, 0x0b	; 11
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	e9 82       	std	Y+1, r14	; 0x01
     46e:	fa 82       	std	Y+2, r15	; 0x02
     470:	0b 83       	std	Y+3, r16	; 0x03
     472:	1c 83       	std	Y+4, r17	; 0x04
     474:	2d 83       	std	Y+5, r18	; 0x05
     476:	3e 83       	std	Y+6, r19	; 0x06
     478:	4f 83       	std	Y+7, r20	; 0x07
     47a:	58 87       	std	Y+8, r21	; 0x08
     47c:	69 87       	std	Y+9, r22	; 0x09
     47e:	7a 87       	std	Y+10, r23	; 0x0a
     480:	8b 87       	std	Y+11, r24	; 0x0b
     482:	e9 80       	ldd	r14, Y+1	; 0x01
     484:	fa 80       	ldd	r15, Y+2	; 0x02
	if(can_transmit_complete())
     486:	0e 94 1f 02 	call	0x43e	; 0x43e <can_transmit_complete>
     48a:	88 23       	and	r24, r24
     48c:	59 f1       	breq	.+86     	; 0x4e4 <can_message_send+0x94>
	{
		//write CAN msg ID to MCP2515
		mcp_write(MCP_TXB0SIDH, can_msg.id >> 3);
     48e:	b7 01       	movw	r22, r14
     490:	76 95       	lsr	r23
     492:	67 95       	ror	r22
     494:	76 95       	lsr	r23
     496:	67 95       	ror	r22
     498:	76 95       	lsr	r23
     49a:	67 95       	ror	r22
     49c:	81 e3       	ldi	r24, 0x31	; 49
     49e:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>
		mcp_write(MCP_TXB0SIDL, can_msg.id << 5);
     4a2:	6e 2d       	mov	r22, r14
     4a4:	62 95       	swap	r22
     4a6:	66 0f       	add	r22, r22
     4a8:	60 7e       	andi	r22, 0xE0	; 224
     4aa:	82 e3       	ldi	r24, 0x32	; 50
     4ac:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>

		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);
     4b0:	60 2f       	mov	r22, r16
     4b2:	6f 70       	andi	r22, 0x0F	; 15
     4b4:	85 e3       	ldi	r24, 0x35	; 53
     4b6:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>

		//write CAN data to MCP2515
		for(uint8_t i = 0; i < can_msg.length; i++)
     4ba:	00 23       	and	r16, r16
     4bc:	79 f0       	breq	.+30     	; 0x4dc <can_message_send+0x8c>
     4be:	7e 01       	movw	r14, r28
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	e8 0e       	add	r14, r24
     4c4:	f1 1c       	adc	r15, r1
     4c6:	0a 5c       	subi	r16, 0xCA	; 202
     4c8:	16 e3       	ldi	r17, 0x36	; 54
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);
     4ca:	f7 01       	movw	r30, r14
     4cc:	61 91       	ld	r22, Z+
     4ce:	7f 01       	movw	r14, r30
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>
     4d6:	1f 5f       	subi	r17, 0xFF	; 255

		//write CAN data length to MCP2515
		mcp_write(MCP_TXB0DLC, RTR_DATA_FRAME & can_msg.length);

		//write CAN data to MCP2515
		for(uint8_t i = 0; i < can_msg.length; i++)
     4d8:	10 13       	cpse	r17, r16
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <can_message_send+0x7a>
			mcp_write(MCP_TXB0D0+i, can_msg.data[i]);

		//send transmission request for transmitted CAN msg to MCP2515
		mcp_request_to_send(TXB0);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 9b 04 	call	0x936	; 0x936 <mcp_request_to_send>
     4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <can_message_send+0xa4>
	}
	else
	{
		if(can_error())
     4e4:	0e 94 19 02 	call	0x432	; 0x432 <can_error>
     4e8:	88 23       	and	r24, r24
     4ea:	21 f0       	breq	.+8      	; 0x4f4 <can_message_send+0xa4>
			printf("CAN transmission error\n");
     4ec:	81 e1       	ldi	r24, 0x11	; 17
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 4e 0a 	call	0x149c	; 0x149c <puts>
	}
}
     4f4:	2b 96       	adiw	r28, 0x0b	; 11
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <__vector_1>:
		
		msg_received_flag = 1;
	}
#else
	ISR(INT0_vect)
	{
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
     518:	2f 93       	push	r18
     51a:	3f 93       	push	r19
     51c:	4f 93       	push	r20
     51e:	5f 93       	push	r21
     520:	6f 93       	push	r22
     522:	7f 93       	push	r23
     524:	8f 93       	push	r24
     526:	9f 93       	push	r25
     528:	af 93       	push	r26
     52a:	bf 93       	push	r27
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
		//printf("Interrupted CAN!\n");
		//clear interrupt bits for rx buffer 0
		mcp_write(MCP_CANINTF, MCP_RX0IF & 0x00);
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	8c e2       	ldi	r24, 0x2C	; 44
     534:	0e 94 34 04 	call	0x868	; 0x868 <mcp_write>

		msg_received_flag = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	90 93 01 04 	sts	0x0401, r25
     540:	80 93 00 04 	sts	0x0400, r24
	}	
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	7f 91       	pop	r23
     552:	6f 91       	pop	r22
     554:	5f 91       	pop	r21
     556:	4f 91       	pop	r20
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <average>:

int average(int data[MAX_DATA], int L)
{
	int i = 0;
	int sum = 0;
	for(i = 0; i < L; i++)
     566:	16 16       	cp	r1, r22
     568:	17 06       	cpc	r1, r23
     56a:	c4 f4       	brge	.+48     	; 0x59c <average+0x36>
     56c:	a0 91 06 01 	lds	r26, 0x0106
     570:	b0 91 07 01 	lds	r27, 0x0107
     574:	aa 0f       	add	r26, r26
     576:	bb 1f       	adc	r27, r27
     578:	e8 2f       	mov	r30, r24
     57a:	f9 2f       	mov	r31, r25
int dim = 1;

int average(int data[MAX_DATA], int L)
{
	int i = 0;
	int sum = 0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0; i < L; i++)
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
		sum += data[dim * i];
     584:	40 81       	ld	r20, Z
     586:	51 81       	ldd	r21, Z+1	; 0x01
     588:	84 0f       	add	r24, r20
     58a:	95 1f       	adc	r25, r21

int average(int data[MAX_DATA], int L)
{
	int i = 0;
	int sum = 0;
	for(i = 0; i < L; i++)
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	ea 0f       	add	r30, r26
     592:	fb 1f       	adc	r31, r27
     594:	26 17       	cp	r18, r22
     596:	37 07       	cpc	r19, r23
     598:	a9 f7       	brne	.-22     	; 0x584 <average+0x1e>
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <average+0x3a>
int dim = 1;

int average(int data[MAX_DATA], int L)
{
	int i = 0;
	int sum = 0;
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0; i < L; i++)
		sum += data[dim * i];
	return sum / L;
     5a0:	0e 94 b4 08 	call	0x1168	; 0x1168 <__divmodhi4>
     5a4:	cb 01       	movw	r24, r22
}
     5a6:	08 95       	ret

000005a8 <order_data_distance>:
	//printf("\ndata=%d, avarage=%d disatnce=%d\n\n", data, avareage, d);
	return d;
}

void order_data_distance(int data_dist[MAX_DATA][2], int L)
{
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
	int temp_1 = 0;
	int temp_2 = 0;
	int j = 0;
	int i = 0;
	for(i = 0; i < L; i++)
     5b4:	16 16       	cp	r1, r22
     5b6:	17 06       	cpc	r1, r23
     5b8:	94 f5       	brge	.+100    	; 0x61e <order_data_distance+0x76>
     5ba:	ec 01       	movw	r28, r24
     5bc:	9b 01       	movw	r18, r22
     5be:	22 0f       	add	r18, r18
     5c0:	33 1f       	adc	r19, r19
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	00 e0       	ldi	r16, 0x00	; 0
     5cc:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(j = i + 1; j < L; j++)
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	06 17       	cp	r16, r22
     5d4:	17 07       	cpc	r17, r23
     5d6:	19 f1       	breq	.+70     	; 0x61e <order_data_distance+0x76>
     5d8:	7e 01       	movw	r14, r28
     5da:	24 e0       	ldi	r18, 0x04	; 4
     5dc:	e2 0e       	add	r14, r18
     5de:	f1 1c       	adc	r15, r1
     5e0:	f7 01       	movw	r30, r14
     5e2:	de 01       	movw	r26, r28
		{
			if (data_dist[i][1] > data_dist[j][1])
     5e4:	2a 81       	ldd	r18, Y+2	; 0x02
     5e6:	3b 81       	ldd	r19, Y+3	; 0x03
     5e8:	42 81       	ldd	r20, Z+2	; 0x02
     5ea:	53 81       	ldd	r21, Z+3	; 0x03
     5ec:	42 17       	cp	r20, r18
     5ee:	53 07       	cpc	r21, r19
     5f0:	84 f4       	brge	.+32     	; 0x612 <order_data_distance+0x6a>
      {
				temp_1 =  data_dist[i][1];
				data_dist[i][1] = data_dist[j][1];
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	5c 93       	st	X, r21
     5f6:	4e 93       	st	-X, r20
     5f8:	12 97       	sbiw	r26, 0x02	; 2
				data_dist[j][1] = temp_1;
     5fa:	33 83       	std	Z+3, r19	; 0x03
     5fc:	22 83       	std	Z+2, r18	; 0x02
				temp_2 =  data_dist[i][0];
     5fe:	2d 91       	ld	r18, X+
     600:	3c 91       	ld	r19, X
     602:	11 97       	sbiw	r26, 0x01	; 1
				data_dist[i][0] = data_dist[j][0];
     604:	40 81       	ld	r20, Z
     606:	51 81       	ldd	r21, Z+1	; 0x01
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	5c 93       	st	X, r21
     60c:	4e 93       	st	-X, r20
				data_dist[j][0] = temp_2;
     60e:	31 83       	std	Z+1, r19	; 0x01
     610:	20 83       	st	Z, r18
     612:	34 96       	adiw	r30, 0x04	; 4
	int temp_2 = 0;
	int j = 0;
	int i = 0;
	for(i = 0; i < L; i++)
	{
		for(j = i + 1; j < L; j++)
     614:	e8 17       	cp	r30, r24
     616:	f9 07       	cpc	r31, r25
     618:	29 f7       	brne	.-54     	; 0x5e4 <order_data_distance+0x3c>
     61a:	e7 01       	movw	r28, r14
     61c:	d8 cf       	rjmp	.-80     	; 0x5ce <order_data_distance+0x26>
				data_dist[j][0] = temp_2;
			}
		}
	}

}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	08 95       	ret

0000062c <data_fit>:

int data_fit(int data[MAX_DATA], int L, int n_iter, int lim, int n_elim)
{
     62c:	2f 92       	push	r2
     62e:	3f 92       	push	r3
     630:	4f 92       	push	r4
     632:	5f 92       	push	r5
     634:	6f 92       	push	r6
     636:	7f 92       	push	r7
     638:	8f 92       	push	r8
     63a:	9f 92       	push	r9
     63c:	af 92       	push	r10
     63e:	bf 92       	push	r11
     640:	cf 92       	push	r12
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	00 d0       	rcall	.+0      	; 0x652 <data_fit+0x26>
     652:	00 d0       	rcall	.+0      	; 0x654 <data_fit+0x28>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	7c 01       	movw	r14, r24
     65a:	5b 01       	movw	r10, r22
     65c:	2a 01       	movw	r4, r20
     65e:	19 01       	movw	r2, r18
     660:	48 01       	movw	r8, r16
				i = L;
			}
	avar = average(data_dist[0], L);
	dim = 1;
	return avar;
}
     662:	2d b7       	in	r18, 0x3d	; 61
     664:	3e b7       	in	r19, 0x3e	; 62
     666:	3c 83       	std	Y+4, r19	; 0x04
     668:	2b 83       	std	Y+3, r18	; 0x03

}

int data_fit(int data[MAX_DATA], int L, int n_iter, int lim, int n_elim)
{
	int data_dist[L][2];
     66a:	cb 01       	movw	r24, r22
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	ed b7       	in	r30, 0x3d	; 61
     676:	fe b7       	in	r31, 0x3e	; 62
     678:	e8 1b       	sub	r30, r24
     67a:	f9 0b       	sbc	r31, r25
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	fe bf       	out	0x3e, r31	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	ed bf       	out	0x3d, r30	; 61
     686:	2d b7       	in	r18, 0x3d	; 61
     688:	3e b7       	in	r19, 0x3e	; 62
     68a:	2f 5f       	subi	r18, 0xFF	; 255
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	3a 83       	std	Y+2, r19	; 0x02
     690:	29 83       	std	Y+1, r18	; 0x01
     692:	69 01       	movw	r12, r18
	int i = 0, j = 0;
	dim = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	90 93 07 01 	sts	0x0107, r25
     69c:	80 93 06 01 	sts	0x0106, r24
	int avar=average(data, L);
     6a0:	c7 01       	movw	r24, r14
     6a2:	0e 94 b3 02 	call	0x566	; 0x566 <average>
	for(i = 0; i < L; i++)
     6a6:	1a 14       	cp	r1, r10
     6a8:	1b 04       	cpc	r1, r11
     6aa:	1c f5       	brge	.+70     	; 0x6f2 <data_fit+0xc6>
     6ac:	d6 01       	movw	r26, r12
     6ae:	f7 01       	movw	r30, r14
     6b0:	95 01       	movw	r18, r10
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	e2 0e       	add	r14, r18
     6b8:	f3 1e       	adc	r15, r19
     6ba:	8f 01       	movw	r16, r30
     6bc:	98 01       	movw	r18, r16
	{
		data_dist[i][0] = data[i];
     6be:	f8 01       	movw	r30, r16
     6c0:	41 91       	ld	r20, Z+
     6c2:	51 91       	ld	r21, Z+
     6c4:	8f 01       	movw	r16, r30
     6c6:	bd 01       	movw	r22, r26
     6c8:	11 96       	adiw	r26, 0x01	; 1
     6ca:	5c 93       	st	X, r21
     6cc:	4e 93       	st	-X, r20
	return sum / L;
}

int distance(int data, int average)
{
	int d = abs(data-average);
     6ce:	f9 01       	movw	r30, r18
     6d0:	40 81       	ld	r20, Z
     6d2:	51 81       	ldd	r21, Z+1	; 0x01
     6d4:	48 1b       	sub	r20, r24
     6d6:	59 0b       	sbc	r21, r25
     6d8:	9a 01       	movw	r18, r20
     6da:	22 f4       	brpl	.+8      	; 0x6e4 <data_fit+0xb8>
     6dc:	22 27       	eor	r18, r18
     6de:	33 27       	eor	r19, r19
     6e0:	24 1b       	sub	r18, r20
     6e2:	35 0b       	sbc	r19, r21
	int avar=average(data, L);
	for(i = 0; i < L; i++)
	{
		data_dist[i][0] = data[i];

		data_dist[i][1] = distance(data[i], avar);
     6e4:	fb 01       	movw	r30, r22
     6e6:	33 83       	std	Z+3, r19	; 0x03
     6e8:	22 83       	std	Z+2, r18	; 0x02
     6ea:	14 96       	adiw	r26, 0x04	; 4
{
	int data_dist[L][2];
	int i = 0, j = 0;
	dim = 1;
	int avar=average(data, L);
	for(i = 0; i < L; i++)
     6ec:	0e 15       	cp	r16, r14
     6ee:	1f 05       	cpc	r17, r15
     6f0:	29 f7       	brne	.-54     	; 0x6bc <data_fit+0x90>
	{
		data_dist[i][0] = data[i];

		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 07 01 	sts	0x0107, r25
     6fa:	80 93 06 01 	sts	0x0106, r24
	order_data_distance(data_dist, L);
     6fe:	b5 01       	movw	r22, r10
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <order_data_distance>

	for(i = 0; i < n_iter; i++)
     708:	14 14       	cp	r1, r4
     70a:	15 04       	cpc	r1, r5
     70c:	0c f0       	brlt	.+2      	; 0x710 <data_fit+0xe4>
     70e:	4c c0       	rjmp	.+152    	; 0x7a8 <data_fit+0x17c>
     710:	e1 2c       	mov	r14, r1
     712:	f1 2c       	mov	r15, r1
	{
		if(L - i <= 2)
			i = n_iter;
     714:	74 2c       	mov	r7, r4
     716:	65 2c       	mov	r6, r5
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
	{
		if(L - i <= 2)
     718:	c5 01       	movw	r24, r10
     71a:	8e 19       	sub	r24, r14
     71c:	9f 09       	sbc	r25, r15
     71e:	03 97       	sbiw	r24, 0x03	; 3
     720:	14 f4       	brge	.+4      	; 0x726 <data_fit+0xfa>
			i = n_iter;
     722:	e7 2c       	mov	r14, r7
     724:	f6 2c       	mov	r15, r6
		if(data_dist[L - 1][1] < lim)
     726:	f5 01       	movw	r30, r10
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ec 0d       	add	r30, r12
     734:	fd 1d       	adc	r31, r13
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	82 15       	cp	r24, r2
     73c:	93 05       	cpc	r25, r3
     73e:	14 f4       	brge	.+4      	; 0x744 <data_fit+0x118>
			i = n_iter;
     740:	e7 2c       	mov	r14, r7
     742:	f6 2c       	mov	r15, r6
		if(L - n_elim >= 2)
     744:	85 01       	movw	r16, r10
     746:	08 19       	sub	r16, r8
     748:	19 09       	sbc	r17, r9
     74a:	02 30       	cpi	r16, 0x02	; 2
     74c:	11 05       	cpc	r17, r1
     74e:	0c f4       	brge	.+2      	; 0x752 <data_fit+0x126>
     750:	85 01       	movw	r16, r10
			L -= n_elim;
		avar = average(data_dist[0], L);
     752:	b8 01       	movw	r22, r16
     754:	c6 01       	movw	r24, r12
     756:	0e 94 b3 02 	call	0x566	; 0x566 <average>
		for (j = 0; j < L; j++)
     75a:	10 16       	cp	r1, r16
     75c:	11 06       	cpc	r1, r17
     75e:	c4 f4       	brge	.+48     	; 0x790 <data_fit+0x164>
     760:	f6 01       	movw	r30, r12
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	df 01       	movw	r26, r30
	return sum / L;
}

int distance(int data, int average)
{
	int d = abs(data-average);
     768:	60 81       	ld	r22, Z
     76a:	71 81       	ldd	r23, Z+1	; 0x01
     76c:	68 1b       	sub	r22, r24
     76e:	79 0b       	sbc	r23, r25
     770:	ab 01       	movw	r20, r22
     772:	22 f4       	brpl	.+8      	; 0x77c <data_fit+0x150>
     774:	44 27       	eor	r20, r20
     776:	55 27       	eor	r21, r21
     778:	46 1b       	sub	r20, r22
     77a:	57 0b       	sbc	r21, r23
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
		{
			data_dist[j][1] = distance(data_dist[j][0], avar);
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	5c 93       	st	X, r21
     780:	4e 93       	st	-X, r20
     782:	12 97       	sbiw	r26, 0x02	; 2
		if(data_dist[L - 1][1] < lim)
			i = n_iter;
		if(L - n_elim >= 2)
			L -= n_elim;
		avar = average(data_dist[0], L);
		for (j = 0; j < L; j++)
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	34 96       	adiw	r30, 0x04	; 4
     78a:	20 17       	cp	r18, r16
     78c:	31 07       	cpc	r19, r17
     78e:	59 f7       	brne	.-42     	; 0x766 <data_fit+0x13a>
		{
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
     790:	b8 01       	movw	r22, r16
     792:	c6 01       	movw	r24, r12
     794:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <order_data_distance>
		data_dist[i][1] = distance(data[i], avar);
	}
	dim = 2;
	order_data_distance(data_dist, L);

	for(i = 0; i < n_iter; i++)
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	ef 1a       	sub	r14, r31
     79c:	ff 0a       	sbc	r15, r31
     79e:	e4 14       	cp	r14, r4
     7a0:	f5 04       	cpc	r15, r5
     7a2:	1c f4       	brge	.+6      	; 0x7aa <data_fit+0x17e>
     7a4:	58 01       	movw	r10, r16
     7a6:	b8 cf       	rjmp	.-144    	; 0x718 <data_fit+0xec>
     7a8:	85 01       	movw	r16, r10
			data_dist[j][1] = distance(data_dist[j][0], avar);
		}
		order_data_distance(data_dist, L);
	}

	if(data_dist[0][1] >= lim)
     7aa:	e9 81       	ldd	r30, Y+1	; 0x01
     7ac:	fa 81       	ldd	r31, Y+2	; 0x02
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	93 81       	ldd	r25, Z+3	; 0x03
     7b2:	82 15       	cp	r24, r2
     7b4:	93 05       	cpc	r25, r3
     7b6:	1c f0       	brlt	.+6      	; 0x7be <data_fit+0x192>
		L -= n_elim;
     7b8:	08 19       	sub	r16, r8
     7ba:	19 09       	sbc	r17, r9
     7bc:	28 c0       	rjmp	.+80     	; 0x80e <data_fit+0x1e2>
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
     7be:	f8 01       	movw	r30, r16
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	29 81       	ldd	r18, Y+1	; 0x01
     7cc:	3a 81       	ldd	r19, Y+2	; 0x02
     7ce:	e2 0f       	add	r30, r18
     7d0:	f3 1f       	adc	r31, r19
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	28 16       	cp	r2, r24
     7d8:	39 06       	cpc	r3, r25
     7da:	cc f4       	brge	.+50     	; 0x80e <data_fit+0x1e2>
		for(i = 0; i < L; i++)
     7dc:	10 16       	cp	r1, r16
     7de:	11 06       	cpc	r1, r17
     7e0:	b4 f4       	brge	.+44     	; 0x80e <data_fit+0x1e2>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
			if(data_dist[i][1] > lim)
     7e6:	fc 01       	movw	r30, r24
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ec 0d       	add	r30, r12
     7f2:	fd 1d       	adc	r31, r13
     7f4:	22 81       	ldd	r18, Z+2	; 0x02
     7f6:	33 81       	ldd	r19, Z+3	; 0x03
     7f8:	22 16       	cp	r2, r18
     7fa:	33 06       	cpc	r3, r19
     7fc:	24 f4       	brge	.+8      	; 0x806 <data_fit+0x1da>
			{
				L = i - 1;
     7fe:	8c 01       	movw	r16, r24
     800:	01 50       	subi	r16, 0x01	; 1
     802:	11 09       	sbc	r17, r1
				i = L;
     804:	c8 01       	movw	r24, r16
	}

	if(data_dist[0][1] >= lim)
		L -= n_elim;
	else if(data_dist[L - 1][1] > lim && data_dist[0][1] < lim)
		for(i = 0; i < L; i++)
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	80 17       	cp	r24, r16
     80a:	91 07       	cpc	r25, r17
     80c:	64 f3       	brlt	.-40     	; 0x7e6 <data_fit+0x1ba>
			if(data_dist[i][1] > lim)
			{
				L = i - 1;
				i = L;
			}
	avar = average(data_dist[0], L);
     80e:	b8 01       	movw	r22, r16
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	0e 94 b3 02 	call	0x566	; 0x566 <average>
	dim = 1;
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	30 93 07 01 	sts	0x0107, r19
     820:	20 93 06 01 	sts	0x0106, r18
	return avar;
}
     824:	eb 81       	ldd	r30, Y+3	; 0x03
     826:	fc 81       	ldd	r31, Y+4	; 0x04
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	fe bf       	out	0x3e, r31	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	ed bf       	out	0x3d, r30	; 61
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	5f 90       	pop	r5
     858:	4f 90       	pop	r4
     85a:	3f 90       	pop	r3
     85c:	2f 90       	pop	r2
     85e:	08 95       	ret

00000860 <selectSlave>:
}

void selectSlave(void)
{
	//select slave MCP2515
	PORTB &= ~(1 << SPI_SS);
     860:	c4 98       	cbi	0x18, 4	; 24
     862:	08 95       	ret

00000864 <deselectSlave>:
}

void deselectSlave(void)
{
	//deselect slave MCP2515
	PORTB |= 1 << SPI_SS;
     864:	c4 9a       	sbi	0x18, 4	; 24
     866:	08 95       	ret

00000868 <mcp_write>:
	spi_init();
	mcp_reset();
}

void mcp_write(uint8_t address, char data)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	d8 2f       	mov	r29, r24
     86e:	c6 2f       	mov	r28, r22
	selectSlave();
     870:	0e 94 30 04 	call	0x860	; 0x860 <selectSlave>

	spi_MasterTransmit(WRITE);
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>
	spi_MasterTransmit(address);
     87a:	8d 2f       	mov	r24, r29
     87c:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>
	spi_MasterTransmit(data);
     880:	8c 2f       	mov	r24, r28
     882:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>

	deselectSlave();
     886:	0e 94 32 04 	call	0x864	; 0x864 <deselectSlave>
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <mcp_read>:

uint8_t mcp_read(uint8_t address)
{
     890:	cf 93       	push	r28
     892:	c8 2f       	mov	r28, r24
	selectSlave();
     894:	0e 94 30 04 	call	0x860	; 0x860 <selectSlave>

	spi_MasterTransmit(READ);
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>
	spi_MasterTransmit(address);
     89e:	8c 2f       	mov	r24, r28
     8a0:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>

	uint8_t received_char = spi_SlaveReceive();
     8a4:	0e 94 b7 04 	call	0x96e	; 0x96e <spi_SlaveReceive>
     8a8:	c8 2f       	mov	r28, r24

	deselectSlave();
     8aa:	0e 94 32 04 	call	0x864	; 0x864 <deselectSlave>

	return received_char;
}
     8ae:	8c 2f       	mov	r24, r28
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <mcp_reset>:
#else
	#define SPI_SS PB4
#endif

void mcp_reset(void)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
	selectSlave();
     8be:	0e 94 30 04 	call	0x860	; 0x860 <selectSlave>

	spi_MasterTransmit(RESET);
     8c2:	80 ec       	ldi	r24, 0xC0	; 192
     8c4:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>

	deselectSlave();
     8c8:	0e 94 32 04 	call	0x864	; 0x864 <deselectSlave>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8cc:	8f e9       	ldi	r24, 0x9F	; 159
     8ce:	9f e0       	ldi	r25, 0x0F	; 15
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <mcp_reset+0x1c>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <mcp_reset+0x22>
     8d6:	00 00       	nop

	_delay_ms(1);

	//Self-test
	volatile uint8_t canstat;
	canstat = mcp_read(MCP_CANSTAT);
     8d8:	8e e0       	ldi	r24, 0x0E	; 14
     8da:	0e 94 48 04 	call	0x890	; 0x890 <mcp_read>
     8de:	89 83       	std	Y+1, r24	; 0x01
	if ((canstat & MODE_MASK) != MODE_CONFIG) {
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	80 7e       	andi	r24, 0xE0	; 224
     8e4:	80 38       	cpi	r24, 0x80	; 128
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <mcp_reset+0x3c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     8e8:	83 ee       	ldi	r24, 0xE3	; 227
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 4e 0a 	call	0x149c	; 0x149c <puts>
	}
}
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <mcp_init>:

void mcp_init(void)
{
	spi_init();
     8f8:	0e 94 b0 04 	call	0x960	; 0x960 <spi_init>
	mcp_reset();
     8fc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_reset>
     900:	08 95       	ret

00000902 <mcp_bit_modify>:

	return received_char;
}

void mcp_bit_modify(uint8_t mask_byte, uint8_t reg_adr, uint8_t data )
{
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	d8 2f       	mov	r29, r24
     90a:	16 2f       	mov	r17, r22
     90c:	c4 2f       	mov	r28, r20
	selectSlave();
     90e:	0e 94 30 04 	call	0x860	; 0x860 <selectSlave>

	spi_MasterTransmit(BIT_MODIFY);
     912:	85 e0       	ldi	r24, 0x05	; 5
     914:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>
	spi_MasterTransmit(reg_adr);
     918:	81 2f       	mov	r24, r17
     91a:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>
	spi_MasterTransmit(mask_byte);
     91e:	8d 2f       	mov	r24, r29
     920:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>
	spi_MasterTransmit(data);
     924:	8c 2f       	mov	r24, r28
     926:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>

	deselectSlave();
     92a:	0e 94 32 04 	call	0x864	; 0x864 <deselectSlave>

}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	08 95       	ret

00000936 <mcp_request_to_send>:

void mcp_request_to_send (uint8_t out_buffer)
{
     936:	cf 93       	push	r28
     938:	c8 2f       	mov	r28, r24
	selectSlave();
     93a:	0e 94 30 04 	call	0x860	; 0x860 <selectSlave>

	spi_MasterTransmit(RTS | out_buffer);
     93e:	8c 2f       	mov	r24, r28
     940:	80 68       	ori	r24, 0x80	; 128
     942:	0e 94 b3 04 	call	0x966	; 0x966 <spi_MasterTransmit>

	deselectSlave();
     946:	0e 94 32 04 	call	0x864	; 0x864 <deselectSlave>
}
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <spi_Masterinit>:
	SPCR = (1 << SPE);
}

void spi_Masterinit(void)
{
	DDRB = 0xFF;
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	87 bb       	out	0x17, r24	; 23

	//set MOSI, SCK and SS output, all others input
	DDR_SPI |= (1 << DD_SS) | (1 << DD_MOSI) | (1 << DD_SCK);
     952:	87 b3       	in	r24, 0x17	; 23
     954:	80 6b       	ori	r24, 0xB0	; 176
     956:	87 bb       	out	0x17, r24	; 23

	//enable SPI, Master, set clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     958:	8d b1       	in	r24, 0x0d	; 13
     95a:	81 65       	ori	r24, 0x51	; 81
     95c:	8d b9       	out	0x0d, r24	; 13
     95e:	08 95       	ret

00000960 <spi_init>:
}

void spi_init(void)
{
	spi_Masterinit();
     960:	0e 94 a7 04 	call	0x94e	; 0x94e <spi_Masterinit>
     964:	08 95       	ret

00000966 <spi_MasterTransmit>:
}

void spi_MasterTransmit(char cData)
{
	//start transmission
	SPDR = cData;
     966:	8f b9       	out	0x0f, r24	; 15

	//wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
     968:	77 9b       	sbis	0x0e, 7	; 14
     96a:	fe cf       	rjmp	.-4      	; 0x968 <spi_MasterTransmit+0x2>
}
     96c:	08 95       	ret

0000096e <spi_SlaveReceive>:

char spi_SlaveReceive(void)
{
	//send dummy data
	SPDR = 0xFF;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	8f b9       	out	0x0f, r24	; 15

	//wait for reception complete
	while(!(SPSR & (1 << SPIF)));
     972:	77 9b       	sbis	0x0e, 7	; 14
     974:	fe cf       	rjmp	.-4      	; 0x972 <spi_SlaveReceive+0x4>

	//return data register
	return SPDR;
     976:	8f b1       	in	r24, 0x0f	; 15
}
     978:	08 95       	ret

0000097a <main_init>:
SLID slid_pos, old_slid_pos;
uint8_t current_selection = 0;

void main_init(void)
{
	uart_init();
     97a:	0e 94 98 08 	call	0x1130	; 0x1130 <uart_init>
	sram_init();
     97e:	0e 94 85 08 	call	0x110a	; 0x110a <sram_init>
	adc_init();
     982:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	USB_init();
     986:	0e 94 57 06 	call	0xcae	; 0xcae <USB_init>
	can_init();
     98a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_init>
	sei();
     98e:	78 94       	sei
	oled_init();
     990:	0e 94 bc 07 	call	0xf78	; 0xf78 <oled_init>
	//menu_main = getMenuRoot();
	printf("INIT DONE\n");
     994:	85 e1       	ldi	r24, 0x15	; 21
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	0e 94 4e 0a 	call	0x149c	; 0x149c <puts>
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	9e e0       	ldi	r25, 0x0E	; 14
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	90 40       	sbci	r25, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <main_init+0x28>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <main_init+0x32>
     9ac:	00 00       	nop
     9ae:	08 95       	ret

000009b0 <__vector_default>:
	_delay_ms(1000);
	}

/* interrupt service routine catching undefined interrupts */
ISR(BADISR_vect)
{
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	printf("Got undefined interrupts\n");
     9d2:	8f e1       	ldi	r24, 0x1F	; 31
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	0e 94 4e 0a 	call	0x149c	; 0x149c <puts>
}
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <sendJoyPos>:

void sendJoyPos(void)
{
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	2b 97       	sbiw	r28, 0x0b	; 11
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
	can_message joy_msg = { .id = JOY, .length = 3, .data = {joy_pos.x, joy_pos.y, joy_pos.dir} };
     a18:	fe 01       	movw	r30, r28
     a1a:	31 96       	adiw	r30, 0x01	; 1
     a1c:	8b e0       	ldi	r24, 0x0B	; 11
     a1e:	df 01       	movw	r26, r30
     a20:	1d 92       	st	X+, r1
     a22:	8a 95       	dec	r24
     a24:	e9 f7       	brne	.-6      	; 0xa20 <sendJoyPos+0x24>
     a26:	10 91 0e 04 	lds	r17, 0x040E
     a2a:	20 91 10 04 	lds	r18, 0x0410
     a2e:	30 91 12 04 	lds	r19, 0x0412
	can_message_send(joy_msg);
     a32:	e9 80       	ldd	r14, Y+1	; 0x01
     a34:	fa 80       	ldd	r15, Y+2	; 0x02
     a36:	03 e0       	ldi	r16, 0x03	; 3
     a38:	4f 81       	ldd	r20, Y+7	; 0x07
     a3a:	58 85       	ldd	r21, Y+8	; 0x08
     a3c:	69 85       	ldd	r22, Y+9	; 0x09
     a3e:	7a 85       	ldd	r23, Y+10	; 0x0a
     a40:	8b 85       	ldd	r24, Y+11	; 0x0b
     a42:	0e 94 28 02 	call	0x450	; 0x450 <can_message_send>
}
     a46:	2b 96       	adiw	r28, 0x0b	; 11
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	08 95       	ret

00000a60 <sendButton>:

void sendButton(void)
{
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	2b 97       	sbiw	r28, 0x0b	; 11
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data_b = R;
	
	//printf("LEFT=%d, RIGHT=%d\n",JOY_button(L), JOY_button(R));
	if(!JOY_button(R) && !JOY_button(L))
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <JOY_button>
     a84:	81 11       	cpse	r24, r1
     a86:	06 c0       	rjmp	.+12     	; 0xa94 <sendButton+0x34>
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <JOY_button>
     a90:	88 23       	and	r24, r24
     a92:	f9 f0       	breq	.+62     	; 0xad2 <sendButton+0x72>
		return;
	if(JOY_button(L))
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <JOY_button>
		data_b = L;
	can_message button_msg = { .id = BUTTONS, .length = 1, .data = data_b};
     a9c:	fe 01       	movw	r30, r28
     a9e:	31 96       	adiw	r30, 0x01	; 1
     aa0:	9b e0       	ldi	r25, 0x0B	; 11
     aa2:	df 01       	movw	r26, r30
     aa4:	1d 92       	st	X+, r1
     aa6:	9a 95       	dec	r25
     aa8:	e9 f7       	brne	.-6      	; 0xaa4 <sendButton+0x44>
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	e9 2e       	mov	r14, r25
     aae:	99 83       	std	Y+1, r25	; 0x01
     ab0:	1a 82       	std	Y+2, r1	; 0x02
	can_message_send(button_msg);
     ab2:	f1 2c       	mov	r15, r1
     ab4:	01 e0       	ldi	r16, 0x01	; 1
     ab6:	18 2f       	mov	r17, r24
     ab8:	2d 81       	ldd	r18, Y+5	; 0x05
     aba:	3e 81       	ldd	r19, Y+6	; 0x06
     abc:	4f 81       	ldd	r20, Y+7	; 0x07
     abe:	58 85       	ldd	r21, Y+8	; 0x08
     ac0:	69 85       	ldd	r22, Y+9	; 0x09
     ac2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac6:	0e 94 28 02 	call	0x450	; 0x450 <can_message_send>
	printf("CAN Button sent\n");
     aca:	88 e3       	ldi	r24, 0x38	; 56
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 4e 0a 	call	0x149c	; 0x149c <puts>
}
     ad2:	2b 96       	adiw	r28, 0x0b	; 11
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <sendSliderPos>:

void sendSliderPos(void)
{
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	2b 97       	sbiw	r28, 0x0b	; 11
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
	can_message slid_msg = { .id = SLIDERS, .length = 2, .data = {slid_pos.r, slid_pos.l}};
     b08:	fe 01       	movw	r30, r28
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	8b e0       	ldi	r24, 0x0B	; 11
     b0e:	df 01       	movw	r26, r30
     b10:	1d 92       	st	X+, r1
     b12:	8a 95       	dec	r24
     b14:	e9 f7       	brne	.-6      	; 0xb10 <sendSliderPos+0x24>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	e8 2e       	mov	r14, r24
     b1a:	89 83       	std	Y+1, r24	; 0x01
     b1c:	1a 82       	std	Y+2, r1	; 0x02
     b1e:	10 91 0d 04 	lds	r17, 0x040D
     b22:	20 91 0c 04 	lds	r18, 0x040C
	can_message_send(slid_msg);
     b26:	f1 2c       	mov	r15, r1
     b28:	02 e0       	ldi	r16, 0x02	; 2
     b2a:	3e 81       	ldd	r19, Y+6	; 0x06
     b2c:	4f 81       	ldd	r20, Y+7	; 0x07
     b2e:	58 85       	ldd	r21, Y+8	; 0x08
     b30:	69 85       	ldd	r22, Y+9	; 0x09
     b32:	7a 85       	ldd	r23, Y+10	; 0x0a
     b34:	8b 85       	ldd	r24, Y+11	; 0x0b
     b36:	0e 94 28 02 	call	0x450	; 0x450 <can_message_send>
}
     b3a:	2b 96       	adiw	r28, 0x0b	; 11
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <main>:

int main(void)
{
	main_init();
     b54:	0e 94 bd 04 	call	0x97a	; 0x97a <main_init>

	//say hello to the guy in front of the display
	sayHello();
     b58:	0e 94 3e 08 	call	0x107c	; 0x107c <sayHello>

	while(1)
	{
		joy_pos = JOY_getPosition();
		slid_pos = SLID_getPosition();
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
     b5c:	0e e0       	ldi	r16, 0x0E	; 14
     b5e:	14 e0       	ldi	r17, 0x04	; 4
     b60:	c4 e0       	ldi	r28, 0x04	; 4
     b62:	d4 e0       	ldi	r29, 0x04	; 4
     b64:	0f 2e       	mov	r0, r31
     b66:	f0 e1       	ldi	r31, 0x10	; 16
     b68:	8f 2e       	mov	r8, r31
     b6a:	f4 e0       	ldi	r31, 0x04	; 4
     b6c:	9f 2e       	mov	r9, r31
     b6e:	f0 2d       	mov	r31, r0
     b70:	0f 2e       	mov	r0, r31
     b72:	f6 e0       	ldi	r31, 0x06	; 6
     b74:	6f 2e       	mov	r6, r31
     b76:	f4 e0       	ldi	r31, 0x04	; 4
     b78:	7f 2e       	mov	r7, r31
     b7a:	f0 2d       	mov	r31, r0
			//printf("Sending ")
		}
		_delay_ms(10);
			sendButton();
		_delay_ms(10);
		if(slid_pos.r > old_slid_pos.r + 10 || slid_pos.l > old_slid_pos.l + 10 || slid_pos.r < old_slid_pos.r - 10 || slid_pos.l < old_slid_pos.l - 10)
     b7c:	0f 2e       	mov	r0, r31
     b7e:	fd e0       	ldi	r31, 0x0D	; 13
     b80:	cf 2e       	mov	r12, r31
     b82:	f4 e0       	ldi	r31, 0x04	; 4
     b84:	df 2e       	mov	r13, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	0f 2e       	mov	r0, r31
     b8a:	f3 e0       	ldi	r31, 0x03	; 3
     b8c:	ef 2e       	mov	r14, r31
     b8e:	f4 e0       	ldi	r31, 0x04	; 4
     b90:	ff 2e       	mov	r15, r31
     b92:	f0 2d       	mov	r31, r0
     b94:	0f 2e       	mov	r0, r31
     b96:	fc e0       	ldi	r31, 0x0C	; 12
     b98:	4f 2e       	mov	r4, r31
     b9a:	f4 e0       	ldi	r31, 0x04	; 4
     b9c:	5f 2e       	mov	r5, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	0f 2e       	mov	r0, r31
     ba2:	f2 e0       	ldi	r31, 0x02	; 2
     ba4:	2f 2e       	mov	r2, r31
     ba6:	f4 e0       	ldi	r31, 0x04	; 4
     ba8:	3f 2e       	mov	r3, r31
     baa:	f0 2d       	mov	r31, r0
			sendSliderPos();
		_delay_ms(10);
		old_joy_pos = joy_pos;
     bac:	0f 2e       	mov	r0, r31
     bae:	f6 e0       	ldi	r31, 0x06	; 6
     bb0:	bf 2e       	mov	r11, r31
     bb2:	f0 2d       	mov	r31, r0
	//say hello to the guy in front of the display
	sayHello();

	while(1)
	{
		joy_pos = JOY_getPosition();
     bb4:	0e 94 6d 06 	call	0xcda	; 0xcda <JOY_getPosition>
     bb8:	20 93 0e 04 	sts	0x040E, r18
     bbc:	30 93 0f 04 	sts	0x040F, r19
     bc0:	40 93 10 04 	sts	0x0410, r20
     bc4:	50 93 11 04 	sts	0x0411, r21
     bc8:	60 93 12 04 	sts	0x0412, r22
     bcc:	70 93 13 04 	sts	0x0413, r23
		slid_pos = SLID_getPosition();
     bd0:	0e 94 49 07 	call	0xe92	; 0xe92 <SLID_getPosition>
     bd4:	90 93 0d 04 	sts	0x040D, r25
     bd8:	80 93 0c 04 	sts	0x040C, r24
		if(joy_pos.x > old_joy_pos.x + 10 || joy_pos.y > old_joy_pos.y + 10 || joy_pos.x < old_joy_pos.x - 10 || joy_pos.y < old_joy_pos.y - 10)
     bdc:	f8 01       	movw	r30, r16
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	28 81       	ld	r18, Y
     be4:	39 81       	ldd	r19, Y+1	; 0x01
     be6:	a9 01       	movw	r20, r18
     be8:	46 5f       	subi	r20, 0xF6	; 246
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	48 17       	cp	r20, r24
     bee:	59 07       	cpc	r21, r25
     bf0:	ac f0       	brlt	.+42     	; 0xc1c <main+0xc8>
     bf2:	f4 01       	movw	r30, r8
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	f3 01       	movw	r30, r6
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	fb 01       	movw	r30, r22
     c00:	3a 96       	adiw	r30, 0x0a	; 10
     c02:	e4 17       	cp	r30, r20
     c04:	f5 07       	cpc	r31, r21
     c06:	54 f0       	brlt	.+20     	; 0xc1c <main+0xc8>
     c08:	2a 50       	subi	r18, 0x0A	; 10
     c0a:	31 09       	sbc	r19, r1
     c0c:	82 17       	cp	r24, r18
     c0e:	93 07       	cpc	r25, r19
     c10:	2c f0       	brlt	.+10     	; 0xc1c <main+0xc8>
     c12:	6a 50       	subi	r22, 0x0A	; 10
     c14:	71 09       	sbc	r23, r1
     c16:	46 17       	cp	r20, r22
     c18:	57 07       	cpc	r21, r23
     c1a:	14 f4       	brge	.+4      	; 0xc20 <main+0xcc>
		{
			sendJoyPos();
     c1c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <sendJoyPos>
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	9f e2       	ldi	r25, 0x2F	; 47
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <main+0xd0>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <main+0xd6>
     c2a:	00 00       	nop
			//printf("Sending ")
		}
		_delay_ms(10);
			sendButton();
     c2c:	0e 94 30 05 	call	0xa60	; 0xa60 <sendButton>
     c30:	ef ef       	ldi	r30, 0xFF	; 255
     c32:	ff e2       	ldi	r31, 0x2F	; 47
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <main+0xe0>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <main+0xe6>
     c3a:	00 00       	nop
		_delay_ms(10);
		if(slid_pos.r > old_slid_pos.r + 10 || slid_pos.l > old_slid_pos.l + 10 || slid_pos.r < old_slid_pos.r - 10 || slid_pos.l < old_slid_pos.l - 10)
     c3c:	f6 01       	movw	r30, r12
     c3e:	80 81       	ld	r24, Z
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	f7 01       	movw	r30, r14
     c44:	20 81       	ld	r18, Z
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	a9 01       	movw	r20, r18
     c4a:	46 5f       	subi	r20, 0xF6	; 246
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	48 17       	cp	r20, r24
     c50:	59 07       	cpc	r21, r25
     c52:	ac f0       	brlt	.+42     	; 0xc7e <main+0x12a>
     c54:	f2 01       	movw	r30, r4
     c56:	40 81       	ld	r20, Z
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	f1 01       	movw	r30, r2
     c5c:	60 81       	ld	r22, Z
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	fb 01       	movw	r30, r22
     c62:	3a 96       	adiw	r30, 0x0a	; 10
     c64:	e4 17       	cp	r30, r20
     c66:	f5 07       	cpc	r31, r21
     c68:	54 f0       	brlt	.+20     	; 0xc7e <main+0x12a>
     c6a:	2a 50       	subi	r18, 0x0A	; 10
     c6c:	31 09       	sbc	r19, r1
     c6e:	82 17       	cp	r24, r18
     c70:	93 07       	cpc	r25, r19
     c72:	2c f0       	brlt	.+10     	; 0xc7e <main+0x12a>
     c74:	6a 50       	subi	r22, 0x0A	; 10
     c76:	71 09       	sbc	r23, r1
     c78:	46 17       	cp	r20, r22
     c7a:	57 07       	cpc	r21, r23
     c7c:	14 f4       	brge	.+4      	; 0xc82 <main+0x12e>
			sendSliderPos();
     c7e:	0e 94 76 05 	call	0xaec	; 0xaec <sendSliderPos>
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f e2       	ldi	r25, 0x2F	; 47
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <main+0x132>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <main+0x138>
     c8c:	00 00       	nop
		_delay_ms(10);
		old_joy_pos = joy_pos;
     c8e:	f8 01       	movw	r30, r16
     c90:	de 01       	movw	r26, r28
     c92:	8b 2d       	mov	r24, r11
     c94:	01 90       	ld	r0, Z+
     c96:	0d 92       	st	X+, r0
     c98:	8a 95       	dec	r24
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <main+0x140>
		old_slid_pos = slid_pos;
     c9c:	80 91 0c 04 	lds	r24, 0x040C
     ca0:	90 91 0d 04 	lds	r25, 0x040D
     ca4:	90 93 03 04 	sts	0x0403, r25
     ca8:	80 93 02 04 	sts	0x0402, r24
	}
     cac:	83 cf       	rjmp	.-250    	; 0xbb4 <main+0x60>

00000cae <USB_init>:
uint8_t margin = 15;

void USB_init()
{
	//set PIN 0 and 1 of port B as inputs for buttons
	DDRB &= ~(1 << PB0) & ~(1 << PB1);
     cae:	87 b3       	in	r24, 0x17	; 23
     cb0:	8c 7f       	andi	r24, 0xFC	; 252
     cb2:	87 bb       	out	0x17, r24	; 23
     cb4:	08 95       	ret

00000cb6 <JOY_button>:
}

bool JOY_button(int button)
{
	return PINB & (1 << button);
     cb6:	46 b3       	in	r20, 0x16	; 22
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	b9 01       	movw	r22, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <JOY_button+0xe>
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	8a 95       	dec	r24
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <JOY_button+0xa>
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	9b 01       	movw	r18, r22
     ccc:	24 23       	and	r18, r20
     cce:	35 23       	and	r19, r21
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	23 2b       	or	r18, r19
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <JOY_button+0x22>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
}
     cd8:	08 95       	ret

00000cda <JOY_getPosition>:

JOY_POS JOY_getPosition(void)
{
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	c6 54       	subi	r28, 0x46	; 70
     cf0:	d1 09       	sbc	r29, r1
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	8e 01       	movw	r16, r28
     cfe:	09 5f       	subi	r16, 0xF9	; 249
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	7e 01       	movw	r14, r28
     d04:	87 e2       	ldi	r24, 0x27	; 39
     d06:	e8 0e       	add	r14, r24
     d08:	f1 1c       	adc	r15, r1
     d0a:	6e 01       	movw	r12, r28
     d0c:	e5 e2       	ldi	r30, 0x25	; 37
     d0e:	ce 0e       	add	r12, r30
     d10:	d1 1c       	adc	r13, r1
	int x[16];
	int y[16];
	JOY_POS real;
	for(int i = 0; i < 15; i++)
	{
		x[i] = ADC_read(JOY_H);
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ADC_read>
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	f8 01       	movw	r30, r16
     d1c:	81 93       	st	Z+, r24
     d1e:	91 93       	st	Z+, r25
     d20:	8f 01       	movw	r16, r30
		y[i] = ADC_read(JOY_V);
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ADC_read>
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	f7 01       	movw	r30, r14
     d2c:	81 93       	st	Z+, r24
     d2e:	91 93       	st	Z+, r25
     d30:	7f 01       	movw	r14, r30
JOY_POS JOY_getPosition(void)
{
	int x[16];
	int y[16];
	JOY_POS real;
	for(int i = 0; i < 15; i++)
     d32:	0c 15       	cp	r16, r12
     d34:	1d 05       	cpc	r17, r13
     d36:	69 f7       	brne	.-38     	; 0xd12 <JOY_getPosition+0x38>
	{
		x[i] = ADC_read(JOY_H);
		y[i] = ADC_read(JOY_V);
	}

	real.x = data_fit(x, 15, 2, 10, 3);
     d38:	03 e0       	ldi	r16, 0x03	; 3
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	2a e0       	ldi	r18, 0x0A	; 10
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	42 e0       	ldi	r20, 0x02	; 2
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	6f e0       	ldi	r22, 0x0F	; 15
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ce 01       	movw	r24, r28
     d4a:	07 96       	adiw	r24, 0x07	; 7
     d4c:	0e 94 16 03 	call	0x62c	; 0x62c <data_fit>
     d50:	7c 01       	movw	r14, r24
	real.y = data_fit(y, 15, 2, 10, 3);
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	42 e0       	ldi	r20, 0x02	; 2
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	6f e0       	ldi	r22, 0x0F	; 15
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	ce 01       	movw	r24, r28
     d60:	87 96       	adiw	r24, 0x27	; 39
     d62:	0e 94 16 03 	call	0x62c	; 0x62c <data_fit>
     d66:	8c 01       	movw	r16, r24
	if(real.y >= -real.x + 255 && real.y >= real.x)
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	8e 19       	sub	r24, r14
     d6e:	9f 09       	sbc	r25, r15
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
     d70:	08 17       	cp	r16, r24
     d72:	19 07       	cpc	r17, r25
     d74:	0c f4       	brge	.+2      	; 0xd78 <JOY_getPosition+0x9e>
     d76:	4c c0       	rjmp	.+152    	; 0xe10 <JOY_getPosition+0x136>
     d78:	0e 15       	cp	r16, r14
     d7a:	1f 05       	cpc	r17, r15
     d7c:	0c f4       	brge	.+2      	; 0xd80 <JOY_getPosition+0xa6>
     d7e:	52 c0       	rjmp	.+164    	; 0xe24 <JOY_getPosition+0x14a>
     d80:	4b c0       	rjmp	.+150    	; 0xe18 <JOY_getPosition+0x13e>

	switch(real.dir)
	{
		case UP:
		{
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
     d82:	20 91 08 01 	lds	r18, 0x0108
     d86:	80 91 0b 01 	lds	r24, 0x010B
     d8a:	90 91 0c 01 	lds	r25, 0x010C
     d8e:	82 0f       	add	r24, r18
     d90:	91 1d       	adc	r25, r1
     d92:	80 17       	cp	r24, r16
     d94:	91 07       	cpc	r25, r17
     d96:	0c f4       	brge	.+2      	; 0xd9a <JOY_getPosition+0xc0>
     d98:	5e c0       	rjmp	.+188    	; 0xe56 <JOY_getPosition+0x17c>
     d9a:	c1 2c       	mov	r12, r1
     d9c:	d1 2c       	mov	r13, r1
     d9e:	5b c0       	rjmp	.+182    	; 0xe56 <JOY_getPosition+0x17c>
			break;
		}
		case RIGHT:
		{
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
     da0:	20 91 08 01 	lds	r18, 0x0108
     da4:	80 91 09 01 	lds	r24, 0x0109
     da8:	90 91 0a 01 	lds	r25, 0x010A
     dac:	82 0f       	add	r24, r18
     dae:	91 1d       	adc	r25, r1
     db0:	8e 15       	cp	r24, r14
     db2:	9f 05       	cpc	r25, r15
     db4:	0c f4       	brge	.+2      	; 0xdb8 <JOY_getPosition+0xde>
     db6:	4f c0       	rjmp	.+158    	; 0xe56 <JOY_getPosition+0x17c>
     db8:	c1 2c       	mov	r12, r1
     dba:	d1 2c       	mov	r13, r1
     dbc:	4c c0       	rjmp	.+152    	; 0xe56 <JOY_getPosition+0x17c>
			break;
		}
		case DOWN:
		{
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
     dbe:	20 91 08 01 	lds	r18, 0x0108
     dc2:	80 91 0b 01 	lds	r24, 0x010B
     dc6:	90 91 0c 01 	lds	r25, 0x010C
     dca:	82 1b       	sub	r24, r18
     dcc:	91 09       	sbc	r25, r1
     dce:	08 17       	cp	r16, r24
     dd0:	19 07       	cpc	r17, r25
     dd2:	cc f0       	brlt	.+50     	; 0xe06 <JOY_getPosition+0x12c>
     dd4:	c1 2c       	mov	r12, r1
     dd6:	d1 2c       	mov	r13, r1
     dd8:	3e c0       	rjmp	.+124    	; 0xe56 <JOY_getPosition+0x17c>
			break;
		}
		case LEFT:
		{
			real.dir = real.x < mid_point.x - margin ? real.dir : NEUTRAL;
     dda:	20 91 08 01 	lds	r18, 0x0108
     dde:	80 91 09 01 	lds	r24, 0x0109
     de2:	90 91 0a 01 	lds	r25, 0x010A
     de6:	82 1b       	sub	r24, r18
     de8:	91 09       	sbc	r25, r1
     dea:	31 e0       	ldi	r19, 0x01	; 1
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	e8 16       	cp	r14, r24
     df0:	f9 06       	cpc	r15, r25
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <JOY_getPosition+0x11c>
     df4:	30 e0       	ldi	r19, 0x00	; 0

	switch(real.dir)
	{
		case UP:
		{
			real.dir = real.y > mid_point.y + margin ? real.dir : NEUTRAL;
     df6:	c3 2e       	mov	r12, r19
     df8:	d2 2e       	mov	r13, r18
     dfa:	2d c0       	rjmp	.+90     	; 0xe56 <JOY_getPosition+0x17c>
			real.dir = real.x < mid_point.x - margin ? real.dir : NEUTRAL;
			break;
		}
		default:
		{
			printf("Error receiving joystick value\n");
     dfc:	86 e6       	ldi	r24, 0x66	; 102
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 4e 0a 	call	0x149c	; 0x149c <puts>
			break;
     e04:	28 c0       	rjmp	.+80     	; 0xe56 <JOY_getPosition+0x17c>
			real.dir = real.x > mid_point.x + margin ? real.dir : NEUTRAL;
			break;
		}
		case DOWN:
		{
			real.dir = real.y < mid_point.y - margin ? real.dir : NEUTRAL;
     e06:	68 94       	set
     e08:	cc 24       	eor	r12, r12
     e0a:	c2 f8       	bld	r12, 2
     e0c:	d1 2c       	mov	r13, r1
     e0e:	23 c0       	rjmp	.+70     	; 0xe56 <JOY_getPosition+0x17c>
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
	{
		real.dir = RIGHT;
	}
	if(real.y < -real.x + 255 && real.y >= real.x)
     e10:	0e 15       	cp	r16, r14
     e12:	1f 05       	cpc	r17, r15
     e14:	14 f7       	brge	.-60     	; 0xdda <JOY_getPosition+0x100>
     e16:	d3 cf       	rjmp	.-90     	; 0xdbe <JOY_getPosition+0xe4>
	real.y = data_fit(y, 15, 2, 10, 3);
	if(real.y >= -real.x + 255 && real.y >= real.x)
	{
		real.dir = UP;
	}
	if(real.y >= -real.x + 255 && real.y < real.x)
     e18:	0f 2e       	mov	r0, r31
     e1a:	f3 e0       	ldi	r31, 0x03	; 3
     e1c:	cf 2e       	mov	r12, r31
     e1e:	d1 2c       	mov	r13, r1
     e20:	f0 2d       	mov	r31, r0
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <JOY_getPosition+0x152>
	{
		real.dir = RIGHT;
     e24:	68 94       	set
     e26:	cc 24       	eor	r12, r12
     e28:	c1 f8       	bld	r12, 1
     e2a:	d1 2c       	mov	r13, r1
	if(real.y < -real.x + 255 && real.y < real.x)
	{
		real.dir = DOWN;
	}

	switch(real.dir)
     e2c:	f2 e0       	ldi	r31, 0x02	; 2
     e2e:	cf 16       	cp	r12, r31
     e30:	d1 04       	cpc	r13, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <JOY_getPosition+0x15c>
     e34:	b5 cf       	rjmp	.-150    	; 0xda0 <JOY_getPosition+0xc6>
     e36:	2c f4       	brge	.+10     	; 0xe42 <JOY_getPosition+0x168>
     e38:	e1 e0       	ldi	r30, 0x01	; 1
     e3a:	ce 16       	cp	r12, r30
     e3c:	d1 04       	cpc	r13, r1
     e3e:	f1 f6       	brne	.-68     	; 0xdfc <JOY_getPosition+0x122>
     e40:	cc cf       	rjmp	.-104    	; 0xdda <JOY_getPosition+0x100>
     e42:	f3 e0       	ldi	r31, 0x03	; 3
     e44:	cf 16       	cp	r12, r31
     e46:	d1 04       	cpc	r13, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <JOY_getPosition+0x172>
     e4a:	9b cf       	rjmp	.-202    	; 0xd82 <JOY_getPosition+0xa8>
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	c8 16       	cp	r12, r24
     e50:	d1 04       	cpc	r13, r1
     e52:	a1 f6       	brne	.-88     	; 0xdfc <JOY_getPosition+0x122>
     e54:	b4 cf       	rjmp	.-152    	; 0xdbe <JOY_getPosition+0xe4>
			printf("Error receiving joystick value\n");
			break;
		}
	}

	return real;
     e56:	fa 82       	std	Y+2, r15	; 0x02
     e58:	e9 82       	std	Y+1, r14	; 0x01
     e5a:	1c 83       	std	Y+4, r17	; 0x04
     e5c:	0b 83       	std	Y+3, r16	; 0x03
     e5e:	de 82       	std	Y+6, r13	; 0x06
     e60:	cd 82       	std	Y+5, r12	; 0x05
     e62:	2e 2d       	mov	r18, r14
     e64:	3a 81       	ldd	r19, Y+2	; 0x02
     e66:	40 2f       	mov	r20, r16
     e68:	5c 81       	ldd	r21, Y+4	; 0x04
     e6a:	6c 2d       	mov	r22, r12
     e6c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	ca 5b       	subi	r28, 0xBA	; 186
     e74:	df 4f       	sbci	r29, 0xFF	; 255
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	08 95       	ret

00000e92 <SLID_getPosition>:

SLID SLID_getPosition(void)
{
     e92:	cf 93       	push	r28
	SLID value;
	value.l = ADC_read(SL_L);
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ADC_read>
     e9a:	c8 2f       	mov	r28, r24
	value.r = ADC_read(SL_R);
     e9c:	86 e0       	ldi	r24, 0x06	; 6
     e9e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ADC_read>
     ea2:	98 2f       	mov	r25, r24
	//printf("left %d, right %d \n", value.l, value.r);
	return value;
}
     ea4:	8c 2f       	mov	r24, r28
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <clear_buffer>:
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <clear_buffer+0x32>
     eb4:	9c 01       	movw	r18, r24
     eb6:	24 0f       	add	r18, r20
     eb8:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i * 128 + j] = 0x00;
     eba:	e0 91 0f 01 	lds	r30, 0x010F
     ebe:	f0 91 10 01 	lds	r31, 0x0110
     ec2:	e2 0f       	add	r30, r18
     ec4:	f3 1f       	adc	r31, r19
     ec6:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	80 38       	cpi	r24, 0x80	; 128
     ecc:	91 05       	cpc	r25, r1
     ece:	91 f7       	brne	.-28     	; 0xeb4 <clear_buffer+0xa>
     ed0:	40 58       	subi	r20, 0x80	; 128
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
     ed4:	41 15       	cp	r20, r1
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	58 07       	cpc	r21, r24
     eda:	19 f0       	breq	.+6      	; 0xee2 <clear_buffer+0x38>
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
     edc:	87 2f       	mov	r24, r23
     ede:	96 2f       	mov	r25, r22
     ee0:	e9 cf       	rjmp	.-46     	; 0xeb4 <clear_buffer+0xa>
     ee2:	08 95       	ret

00000ee4 <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
     ee4:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     ee6:	e0 e0       	ldi	r30, 0x00	; 0
     ee8:	f0 e1       	ldi	r31, 0x10	; 16
     eea:	80 83       	st	Z, r24
     eec:	10 82       	st	Z, r1
     eee:	8f e7       	ldi	r24, 0x7F	; 127
     ef0:	80 83       	st	Z, r24
     ef2:	08 95       	ret

00000ef4 <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
	oled_set_page(0);
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	0e 94 72 07 	call	0xee4	; 0xee4 <oled_set_page>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
     f0c:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     f0e:	68 94       	set
     f10:	dd 24       	eor	r13, r13
     f12:	d7 f8       	bld	r13, 7
     f14:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     f16:	c0 e0       	ldi	r28, 0x00	; 0
     f18:	d2 e1       	ldi	r29, 0x12	; 18
     f1a:	21 c0       	rjmp	.+66     	; 0xf5e <print_buffer+0x6a>
     f1c:	02 2f       	mov	r16, r18
     f1e:	13 2f       	mov	r17, r19
     f20:	a9 01       	movw	r20, r18
     f22:	48 1b       	sub	r20, r24
     f24:	59 0b       	sbc	r21, r25
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i * 128 + j]);
     f26:	e0 91 0f 01 	lds	r30, 0x010F
     f2a:	f0 91 10 01 	lds	r31, 0x0110
     f2e:	e4 0f       	add	r30, r20
     f30:	f5 1f       	adc	r31, r21
     f32:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
     f34:	48 83       	st	Y, r20
     f36:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	81 f7       	brne	.-32     	; 0xf1c <print_buffer+0x28>
		{
			oled_print(oled_buffer[i * 128 + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0);
     f3c:	87 e0       	ldi	r24, 0x07	; 7
     f3e:	8f 15       	cp	r24, r15
     f40:	28 f0       	brcs	.+10     	; 0xf4c <print_buffer+0x58>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8f 0d       	add	r24, r15
     f46:	0e 94 72 07 	call	0xee4	; 0xee4 <oled_set_page>
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <print_buffer+0x5e>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 72 07 	call	0xee4	; 0xee4 <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
     f52:	f3 94       	inc	r15
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	f8 16       	cp	r15, r24
     f58:	39 f0       	breq	.+14     	; 0xf68 <print_buffer+0x74>
     f5a:	20 2f       	mov	r18, r16
     f5c:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
     f5e:	8d 2d       	mov	r24, r13
     f60:	9e 2d       	mov	r25, r14
     f62:	20 58       	subi	r18, 0x80	; 128
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	da cf       	rjmp	.-76     	; 0xf1c <print_buffer+0x28>
		{
			oled_print(oled_buffer[i * 128 + j]);
		}
		i < M ? oled_set_page(i + 1) : oled_set_page(0);
	}
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	08 95       	ret

00000f78 <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
     f78:	e0 e0       	ldi	r30, 0x00	; 0
     f7a:	f0 e1       	ldi	r31, 0x10	; 16
     f7c:	8e ea       	ldi	r24, 0xAE	; 174
     f7e:	80 83       	st	Z, r24
     f80:	81 ea       	ldi	r24, 0xA1	; 161
     f82:	80 83       	st	Z, r24
     f84:	8a ed       	ldi	r24, 0xDA	; 218
     f86:	80 83       	st	Z, r24
     f88:	82 e1       	ldi	r24, 0x12	; 18
     f8a:	80 83       	st	Z, r24
     f8c:	88 ec       	ldi	r24, 0xC8	; 200
     f8e:	80 83       	st	Z, r24
     f90:	88 ea       	ldi	r24, 0xA8	; 168
     f92:	80 83       	st	Z, r24
     f94:	8f e3       	ldi	r24, 0x3F	; 63
     f96:	80 83       	st	Z, r24
     f98:	85 ed       	ldi	r24, 0xD5	; 213
     f9a:	80 83       	st	Z, r24
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	80 83       	st	Z, r24
     fa0:	81 e8       	ldi	r24, 0x81	; 129
     fa2:	80 83       	st	Z, r24
     fa4:	80 e5       	ldi	r24, 0x50	; 80
     fa6:	80 83       	st	Z, r24
     fa8:	89 ed       	ldi	r24, 0xD9	; 217
     faa:	80 83       	st	Z, r24
     fac:	81 e2       	ldi	r24, 0x21	; 33
     fae:	80 83       	st	Z, r24
     fb0:	80 e2       	ldi	r24, 0x20	; 32
     fb2:	80 83       	st	Z, r24
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	80 83       	st	Z, r24
     fb8:	8b ed       	ldi	r24, 0xDB	; 219
     fba:	80 83       	st	Z, r24
     fbc:	80 e3       	ldi	r24, 0x30	; 48
     fbe:	80 83       	st	Z, r24
     fc0:	8d ea       	ldi	r24, 0xAD	; 173
     fc2:	80 83       	st	Z, r24
     fc4:	10 82       	st	Z, r1
     fc6:	84 ea       	ldi	r24, 0xA4	; 164
     fc8:	80 83       	st	Z, r24
     fca:	86 ea       	ldi	r24, 0xA6	; 166
     fcc:	80 83       	st	Z, r24
     fce:	8f ea       	ldi	r24, 0xAF	; 175
     fd0:	80 83       	st	Z, r24
     fd2:	83 ed       	ldi	r24, 0xD3	; 211
     fd4:	80 83       	st	Z, r24
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 83       	st	Z, r24
     fda:	80 e4       	ldi	r24, 0x40	; 64
     fdc:	80 83       	st	Z, r24
     fde:	80 eb       	ldi	r24, 0xB0	; 176
     fe0:	80 83       	st	Z, r24
     fe2:	10 82       	st	Z, r1
     fe4:	8f e7       	ldi	r24, 0x7F	; 127
     fe6:	80 83       	st	Z, r24
	//set the lower start column address
	oled_write_command(0);
	//set the upper start column address
	oled_write_command(127);

	clear_buffer();
     fe8:	0e 94 55 07 	call	0xeaa	; 0xeaa <clear_buffer>
	print_buffer();
     fec:	0e 94 7a 07 	call	0xef4	; 0xef4 <print_buffer>
     ff0:	08 95       	ret

00000ff2 <print_string_to_buffer>:
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	17 2f       	mov	r17, r23
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    1000:	fc 01       	movw	r30, r24
    1002:	20 81       	ld	r18, Z
    1004:	22 23       	and	r18, r18
    1006:	99 f1       	breq	.+102    	; 0x106e <print_string_to_buffer+0x7c>
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    1008:	f0 e8       	ldi	r31, 0x80	; 128
    100a:	6f 9f       	mul	r22, r31
    100c:	a0 01       	movw	r20, r0
    100e:	11 24       	eor	r1, r1
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    1010:	ec 01       	movw	r28, r24
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
	uint8_t i = 0;
    1012:	00 e0       	ldi	r16, 0x00	; 0
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    1014:	e1 2c       	mov	r14, r1
    1016:	f1 2c       	mov	r15, r1
    1018:	27 c0       	rjmp	.+78     	; 0x1068 <print_string_to_buffer+0x76>
    101a:	61 2f       	mov	r22, r17
    101c:	62 0f       	add	r22, r18
	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
    101e:	fa 01       	movw	r30, r20
    1020:	e6 0f       	add	r30, r22
    1022:	f1 1d       	adc	r31, r1
    1024:	a0 91 0f 01 	lds	r26, 0x010F
    1028:	b0 91 10 01 	lds	r27, 0x0110
    102c:	ae 0f       	add	r26, r30
    102e:	bf 1f       	adc	r27, r31
    1030:	e8 81       	ld	r30, Y
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	b0 97       	sbiw	r30, 0x20	; 32
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	e0 59       	subi	r30, 0x90	; 144
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	e4 91       	lpm	r30, Z
    104c:	ec 93       	st	X, r30
    104e:	2f 5f       	subi	r18, 0xFF	; 255
    1050:	3f 4f       	sbci	r19, 0xFF	; 255

	uint8_t col = pos.column;

	while (word[i] != '\0')
	{
		for (uint8_t j = 0; j < 8; j++) {
    1052:	28 30       	cpi	r18, 0x08	; 8
    1054:	31 05       	cpc	r19, r1
    1056:	09 f7       	brne	.-62     	; 0x101a <print_string_to_buffer+0x28>
    1058:	18 5f       	subi	r17, 0xF8	; 248
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
			col++;
		}
		i++;
    105a:	0f 5f       	subi	r16, 0xFF	; 255
{
	uint8_t i = 0;

	uint8_t col = pos.column;

	while (word[i] != '\0')
    105c:	ec 01       	movw	r28, r24
    105e:	c0 0f       	add	r28, r16
    1060:	d1 1d       	adc	r29, r1
    1062:	28 81       	ld	r18, Y
    1064:	22 23       	and	r18, r18
    1066:	19 f0       	breq	.+6      	; 0x106e <print_string_to_buffer+0x7c>
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, position pos)
{
    1068:	2e 2d       	mov	r18, r14
    106a:	3f 2d       	mov	r19, r15
    106c:	d6 cf       	rjmp	.-84     	; 0x101a <print_string_to_buffer+0x28>
			*(oled_buffer + (pos.page << 7) + col) = pgm_read_byte(&font8[word[i] - 32][j]);
			col++;
		}
		i++;
	}
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <sayHello>:
	}
}

void sayHello(void)
{
	clear_buffer();
    107c:	0e 94 55 07 	call	0xeaa	; 0xeaa <clear_buffer>
	print_buffer();
    1080:	0e 94 7a 07 	call	0xef4	; 0xef4 <print_buffer>
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	9d e1       	ldi	r25, 0x1D	; 29
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	80 40       	sbci	r24, 0x00	; 0
    108e:	90 40       	sbci	r25, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <sayHello+0xe>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <sayHello+0x18>
    1094:	00 00       	nop
	_delay_ms(2000);
	position pos = { .page = 0, .column =0 };
	print_string_to_buffer(" .------------. ", pos);
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	83 e8       	ldi	r24, 0x83	; 131
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" | Ping Pong! | ", pos);
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	84 e9       	ldi	r24, 0x94	; 148
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" `------------' ", pos);
    10ae:	62 e0       	ldi	r22, 0x02	; 2
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	85 ea       	ldi	r24, 0xA5	; 165
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       ^        ", pos);
    10ba:	63 e0       	ldi	r22, 0x03	; 3
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	86 eb       	ldi	r24, 0xB6	; 182
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |  (\\_/) ", pos);
    10c6:	64 e0       	ldi	r22, 0x04	; 4
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	87 ec       	ldi	r24, 0xC7	; 199
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |__(O.o) ", pos);
    10d2:	65 e0       	ldi	r22, 0x05	; 5
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	88 ed       	ldi	r24, 0xD8	; 216
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("          (> <) ", pos);
    10de:	66 e0       	ldi	r22, 0x06	; 6
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	89 ee       	ldi	r24, 0xE9	; 233
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	0e 94 f9 07 	call	0xff2	; 0xff2 <print_string_to_buffer>
	print_buffer();
    10ea:	0e 94 7a 07 	call	0xef4	; 0xef4 <print_buffer>
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9d e1       	ldi	r25, 0x1D	; 29
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	80 40       	sbci	r24, 0x00	; 0
    10f8:	90 40       	sbci	r25, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <sayHello+0x78>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <sayHello+0x82>
    10fe:	00 00       	nop
	_delay_ms(2000);
	clear_buffer();
    1100:	0e 94 55 07 	call	0xeaa	; 0xeaa <clear_buffer>
	print_buffer();
    1104:	0e 94 7a 07 	call	0xef4	; 0xef4 <print_buffer>
    1108:	08 95       	ret

0000110a <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1 << SRE);
    110a:	85 b7       	in	r24, 0x35	; 53
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	85 bf       	out	0x35, r24	; 53

	//realesing  JTAG pins from memory mapping
	SFIOR |= (1 << XMM2);
    1110:	80 b7       	in	r24, 0x30	; 48
    1112:	80 62       	ori	r24, 0x20	; 32
    1114:	80 bf       	out	0x30, r24	; 48
	SFIOR &= (0 << XMM1);
    1116:	80 b7       	in	r24, 0x30	; 48
    1118:	10 be       	out	0x30, r1	; 48
	SFIOR &= (0 << XMM0);
    111a:	80 b7       	in	r24, 0x30	; 48
    111c:	10 be       	out	0x30, r1	; 48
    111e:	08 95       	ret

00001120 <uart_putc>:
}

void uart_putc(unsigned char c)
{
	//wait while register is free
	while (!(UCSR0A & (1 << UDRE0)));
    1120:	5d 9b       	sbis	0x0b, 5	; 11
    1122:	fe cf       	rjmp	.-4      	; 0x1120 <uart_putc>

	//put character to USART data register
	UDR0 = c;
    1124:	8c b9       	out	0x0c, r24	; 12
    1126:	08 95       	ret

00001128 <uart_getc>:
}

unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1 << RXC0)));
    1128:	5f 9b       	sbis	0x0b, 7	; 11
    112a:	fe cf       	rjmp	.-4      	; 0x1128 <uart_getc>

	//get value from USART data register
	return UDR0;
    112c:	8c b1       	in	r24, 0x0c	; 12
}
    112e:	08 95       	ret

00001130 <uart_init>:

void uart_init(void)
{
	int ubrr = MYUBRR;
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr >> 8);
    1130:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char) ubrr;
    1132:	8f e1       	ldi	r24, 0x1F	; 31
    1134:	89 b9       	out	0x09, r24	; 9

	//enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
    1136:	8a b1       	in	r24, 0x0a	; 10
    1138:	88 61       	ori	r24, 0x18	; 24
    113a:	8a b9       	out	0x0a, r24	; 10

	//set UCSRC as accessed register, set number of character size to 8
	#ifdef ATMEGA2560
		UCSR0C |= (3 << UCSZ00);
	#else
		UCSR0C |= (1 << URSEL0) | (3 << UCSZ00);
    113c:	80 b5       	in	r24, 0x20	; 32
    113e:	86 68       	ori	r24, 0x86	; 134
    1140:	80 bd       	out	0x20, r24	; 32
	#endif

	//set number of stop bits to 1
	UCSR0C &= ~(1 << USBS0);
    1142:	80 b5       	in	r24, 0x20	; 32
    1144:	87 7f       	andi	r24, 0xF7	; 247
    1146:	80 bd       	out	0x20, r24	; 32
	//set connection to asynchronous
	#ifdef ATMEGA2560
		UCSR0C &= ~(1 << UMSEL00);
		UCSR0C &= ~(1 << UMSEL01);
	#else
		UCSR0C &= ~(1 << UMSEL0);
    1148:	80 b5       	in	r24, 0x20	; 32
    114a:	8f 7b       	andi	r24, 0xBF	; 191
    114c:	80 bd       	out	0x20, r24	; 32
	#endif

	//disable parity mode
	UCSR0C &= ~(1 << UPM00);
    114e:	80 b5       	in	r24, 0x20	; 32
    1150:	8f 7e       	andi	r24, 0xEF	; 239
    1152:	80 bd       	out	0x20, r24	; 32
	UCSR0C &= ~(1 << UPM10);
    1154:	80 b5       	in	r24, 0x20	; 32
    1156:	8f 7e       	andi	r24, 0xEF	; 239
    1158:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_putc, uart_getc);
    115a:	64 e9       	ldi	r22, 0x94	; 148
    115c:	78 e0       	ldi	r23, 0x08	; 8
    115e:	80 e9       	ldi	r24, 0x90	; 144
    1160:	98 e0       	ldi	r25, 0x08	; 8
    1162:	0e 94 03 0a 	call	0x1406	; 0x1406 <fdevopen>
    1166:	08 95       	ret

00001168 <__divmodhi4>:
    1168:	97 fb       	bst	r25, 7
    116a:	07 2e       	mov	r0, r23
    116c:	16 f4       	brtc	.+4      	; 0x1172 <__divmodhi4+0xa>
    116e:	00 94       	com	r0
    1170:	07 d0       	rcall	.+14     	; 0x1180 <__divmodhi4_neg1>
    1172:	77 fd       	sbrc	r23, 7
    1174:	09 d0       	rcall	.+18     	; 0x1188 <__divmodhi4_neg2>
    1176:	0e 94 c8 08 	call	0x1190	; 0x1190 <__udivmodhi4>
    117a:	07 fc       	sbrc	r0, 7
    117c:	05 d0       	rcall	.+10     	; 0x1188 <__divmodhi4_neg2>
    117e:	3e f4       	brtc	.+14     	; 0x118e <__divmodhi4_exit>

00001180 <__divmodhi4_neg1>:
    1180:	90 95       	com	r25
    1182:	81 95       	neg	r24
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	08 95       	ret

00001188 <__divmodhi4_neg2>:
    1188:	70 95       	com	r23
    118a:	61 95       	neg	r22
    118c:	7f 4f       	sbci	r23, 0xFF	; 255

0000118e <__divmodhi4_exit>:
    118e:	08 95       	ret

00001190 <__udivmodhi4>:
    1190:	aa 1b       	sub	r26, r26
    1192:	bb 1b       	sub	r27, r27
    1194:	51 e1       	ldi	r21, 0x11	; 17
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <__udivmodhi4_ep>

00001198 <__udivmodhi4_loop>:
    1198:	aa 1f       	adc	r26, r26
    119a:	bb 1f       	adc	r27, r27
    119c:	a6 17       	cp	r26, r22
    119e:	b7 07       	cpc	r27, r23
    11a0:	10 f0       	brcs	.+4      	; 0x11a6 <__udivmodhi4_ep>
    11a2:	a6 1b       	sub	r26, r22
    11a4:	b7 0b       	sbc	r27, r23

000011a6 <__udivmodhi4_ep>:
    11a6:	88 1f       	adc	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	5a 95       	dec	r21
    11ac:	a9 f7       	brne	.-22     	; 0x1198 <__udivmodhi4_loop>
    11ae:	80 95       	com	r24
    11b0:	90 95       	com	r25
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	08 95       	ret

000011b8 <malloc>:
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	91 05       	cpc	r25, r1
    11c0:	10 f4       	brcc	.+4      	; 0x11c6 <malloc+0xe>
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	e0 91 16 04 	lds	r30, 0x0416
    11ca:	f0 91 17 04 	lds	r31, 0x0417
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	30 97       	sbiw	r30, 0x00	; 0
    11d8:	39 f1       	breq	.+78     	; 0x1228 <malloc+0x70>
    11da:	40 81       	ld	r20, Z
    11dc:	51 81       	ldd	r21, Z+1	; 0x01
    11de:	48 17       	cp	r20, r24
    11e0:	59 07       	cpc	r21, r25
    11e2:	b8 f0       	brcs	.+46     	; 0x1212 <malloc+0x5a>
    11e4:	48 17       	cp	r20, r24
    11e6:	59 07       	cpc	r21, r25
    11e8:	71 f4       	brne	.+28     	; 0x1206 <malloc+0x4e>
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	93 81       	ldd	r25, Z+3	; 0x03
    11ee:	10 97       	sbiw	r26, 0x00	; 0
    11f0:	29 f0       	breq	.+10     	; 0x11fc <malloc+0x44>
    11f2:	13 96       	adiw	r26, 0x03	; 3
    11f4:	9c 93       	st	X, r25
    11f6:	8e 93       	st	-X, r24
    11f8:	12 97       	sbiw	r26, 0x02	; 2
    11fa:	2c c0       	rjmp	.+88     	; 0x1254 <malloc+0x9c>
    11fc:	90 93 17 04 	sts	0x0417, r25
    1200:	80 93 16 04 	sts	0x0416, r24
    1204:	27 c0       	rjmp	.+78     	; 0x1254 <malloc+0x9c>
    1206:	21 15       	cp	r18, r1
    1208:	31 05       	cpc	r19, r1
    120a:	31 f0       	breq	.+12     	; 0x1218 <malloc+0x60>
    120c:	42 17       	cp	r20, r18
    120e:	53 07       	cpc	r21, r19
    1210:	18 f0       	brcs	.+6      	; 0x1218 <malloc+0x60>
    1212:	a9 01       	movw	r20, r18
    1214:	db 01       	movw	r26, r22
    1216:	01 c0       	rjmp	.+2      	; 0x121a <malloc+0x62>
    1218:	ef 01       	movw	r28, r30
    121a:	9a 01       	movw	r18, r20
    121c:	bd 01       	movw	r22, r26
    121e:	df 01       	movw	r26, r30
    1220:	02 80       	ldd	r0, Z+2	; 0x02
    1222:	f3 81       	ldd	r31, Z+3	; 0x03
    1224:	e0 2d       	mov	r30, r0
    1226:	d7 cf       	rjmp	.-82     	; 0x11d6 <malloc+0x1e>
    1228:	21 15       	cp	r18, r1
    122a:	31 05       	cpc	r19, r1
    122c:	f9 f0       	breq	.+62     	; 0x126c <malloc+0xb4>
    122e:	28 1b       	sub	r18, r24
    1230:	39 0b       	sbc	r19, r25
    1232:	24 30       	cpi	r18, 0x04	; 4
    1234:	31 05       	cpc	r19, r1
    1236:	80 f4       	brcc	.+32     	; 0x1258 <malloc+0xa0>
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	61 15       	cp	r22, r1
    123e:	71 05       	cpc	r23, r1
    1240:	21 f0       	breq	.+8      	; 0x124a <malloc+0x92>
    1242:	fb 01       	movw	r30, r22
    1244:	93 83       	std	Z+3, r25	; 0x03
    1246:	82 83       	std	Z+2, r24	; 0x02
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <malloc+0x9a>
    124a:	90 93 17 04 	sts	0x0417, r25
    124e:	80 93 16 04 	sts	0x0416, r24
    1252:	fe 01       	movw	r30, r28
    1254:	32 96       	adiw	r30, 0x02	; 2
    1256:	44 c0       	rjmp	.+136    	; 0x12e0 <malloc+0x128>
    1258:	fe 01       	movw	r30, r28
    125a:	e2 0f       	add	r30, r18
    125c:	f3 1f       	adc	r31, r19
    125e:	81 93       	st	Z+, r24
    1260:	91 93       	st	Z+, r25
    1262:	22 50       	subi	r18, 0x02	; 2
    1264:	31 09       	sbc	r19, r1
    1266:	39 83       	std	Y+1, r19	; 0x01
    1268:	28 83       	st	Y, r18
    126a:	3a c0       	rjmp	.+116    	; 0x12e0 <malloc+0x128>
    126c:	20 91 14 04 	lds	r18, 0x0414
    1270:	30 91 15 04 	lds	r19, 0x0415
    1274:	23 2b       	or	r18, r19
    1276:	41 f4       	brne	.+16     	; 0x1288 <malloc+0xd0>
    1278:	20 91 02 01 	lds	r18, 0x0102
    127c:	30 91 03 01 	lds	r19, 0x0103
    1280:	30 93 15 04 	sts	0x0415, r19
    1284:	20 93 14 04 	sts	0x0414, r18
    1288:	20 91 00 01 	lds	r18, 0x0100
    128c:	30 91 01 01 	lds	r19, 0x0101
    1290:	21 15       	cp	r18, r1
    1292:	31 05       	cpc	r19, r1
    1294:	41 f4       	brne	.+16     	; 0x12a6 <malloc+0xee>
    1296:	2d b7       	in	r18, 0x3d	; 61
    1298:	3e b7       	in	r19, 0x3e	; 62
    129a:	40 91 04 01 	lds	r20, 0x0104
    129e:	50 91 05 01 	lds	r21, 0x0105
    12a2:	24 1b       	sub	r18, r20
    12a4:	35 0b       	sbc	r19, r21
    12a6:	e0 91 14 04 	lds	r30, 0x0414
    12aa:	f0 91 15 04 	lds	r31, 0x0415
    12ae:	e2 17       	cp	r30, r18
    12b0:	f3 07       	cpc	r31, r19
    12b2:	a0 f4       	brcc	.+40     	; 0x12dc <malloc+0x124>
    12b4:	2e 1b       	sub	r18, r30
    12b6:	3f 0b       	sbc	r19, r31
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	78 f0       	brcs	.+30     	; 0x12dc <malloc+0x124>
    12be:	ac 01       	movw	r20, r24
    12c0:	4e 5f       	subi	r20, 0xFE	; 254
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	24 17       	cp	r18, r20
    12c6:	35 07       	cpc	r19, r21
    12c8:	48 f0       	brcs	.+18     	; 0x12dc <malloc+0x124>
    12ca:	4e 0f       	add	r20, r30
    12cc:	5f 1f       	adc	r21, r31
    12ce:	50 93 15 04 	sts	0x0415, r21
    12d2:	40 93 14 04 	sts	0x0414, r20
    12d6:	81 93       	st	Z+, r24
    12d8:	91 93       	st	Z+, r25
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <malloc+0x128>
    12dc:	e0 e0       	ldi	r30, 0x00	; 0
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	cf 01       	movw	r24, r30
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <free>:
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <free+0xa>
    12f0:	87 c0       	rjmp	.+270    	; 0x1400 <free+0x118>
    12f2:	fc 01       	movw	r30, r24
    12f4:	32 97       	sbiw	r30, 0x02	; 2
    12f6:	13 82       	std	Z+3, r1	; 0x03
    12f8:	12 82       	std	Z+2, r1	; 0x02
    12fa:	c0 91 16 04 	lds	r28, 0x0416
    12fe:	d0 91 17 04 	lds	r29, 0x0417
    1302:	20 97       	sbiw	r28, 0x00	; 0
    1304:	81 f4       	brne	.+32     	; 0x1326 <free+0x3e>
    1306:	20 81       	ld	r18, Z
    1308:	31 81       	ldd	r19, Z+1	; 0x01
    130a:	28 0f       	add	r18, r24
    130c:	39 1f       	adc	r19, r25
    130e:	80 91 14 04 	lds	r24, 0x0414
    1312:	90 91 15 04 	lds	r25, 0x0415
    1316:	82 17       	cp	r24, r18
    1318:	93 07       	cpc	r25, r19
    131a:	79 f5       	brne	.+94     	; 0x137a <free+0x92>
    131c:	f0 93 15 04 	sts	0x0415, r31
    1320:	e0 93 14 04 	sts	0x0414, r30
    1324:	6d c0       	rjmp	.+218    	; 0x1400 <free+0x118>
    1326:	de 01       	movw	r26, r28
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	ae 17       	cp	r26, r30
    132e:	bf 07       	cpc	r27, r31
    1330:	50 f4       	brcc	.+20     	; 0x1346 <free+0x5e>
    1332:	12 96       	adiw	r26, 0x02	; 2
    1334:	4d 91       	ld	r20, X+
    1336:	5c 91       	ld	r21, X
    1338:	13 97       	sbiw	r26, 0x03	; 3
    133a:	9d 01       	movw	r18, r26
    133c:	41 15       	cp	r20, r1
    133e:	51 05       	cpc	r21, r1
    1340:	09 f1       	breq	.+66     	; 0x1384 <free+0x9c>
    1342:	da 01       	movw	r26, r20
    1344:	f3 cf       	rjmp	.-26     	; 0x132c <free+0x44>
    1346:	b3 83       	std	Z+3, r27	; 0x03
    1348:	a2 83       	std	Z+2, r26	; 0x02
    134a:	40 81       	ld	r20, Z
    134c:	51 81       	ldd	r21, Z+1	; 0x01
    134e:	84 0f       	add	r24, r20
    1350:	95 1f       	adc	r25, r21
    1352:	8a 17       	cp	r24, r26
    1354:	9b 07       	cpc	r25, r27
    1356:	71 f4       	brne	.+28     	; 0x1374 <free+0x8c>
    1358:	8d 91       	ld	r24, X+
    135a:	9c 91       	ld	r25, X
    135c:	11 97       	sbiw	r26, 0x01	; 1
    135e:	84 0f       	add	r24, r20
    1360:	95 1f       	adc	r25, r21
    1362:	02 96       	adiw	r24, 0x02	; 2
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	80 83       	st	Z, r24
    1368:	12 96       	adiw	r26, 0x02	; 2
    136a:	8d 91       	ld	r24, X+
    136c:	9c 91       	ld	r25, X
    136e:	13 97       	sbiw	r26, 0x03	; 3
    1370:	93 83       	std	Z+3, r25	; 0x03
    1372:	82 83       	std	Z+2, r24	; 0x02
    1374:	21 15       	cp	r18, r1
    1376:	31 05       	cpc	r19, r1
    1378:	29 f4       	brne	.+10     	; 0x1384 <free+0x9c>
    137a:	f0 93 17 04 	sts	0x0417, r31
    137e:	e0 93 16 04 	sts	0x0416, r30
    1382:	3e c0       	rjmp	.+124    	; 0x1400 <free+0x118>
    1384:	d9 01       	movw	r26, r18
    1386:	13 96       	adiw	r26, 0x03	; 3
    1388:	fc 93       	st	X, r31
    138a:	ee 93       	st	-X, r30
    138c:	12 97       	sbiw	r26, 0x02	; 2
    138e:	4d 91       	ld	r20, X+
    1390:	5d 91       	ld	r21, X+
    1392:	a4 0f       	add	r26, r20
    1394:	b5 1f       	adc	r27, r21
    1396:	ea 17       	cp	r30, r26
    1398:	fb 07       	cpc	r31, r27
    139a:	79 f4       	brne	.+30     	; 0x13ba <free+0xd2>
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	84 0f       	add	r24, r20
    13a2:	95 1f       	adc	r25, r21
    13a4:	02 96       	adiw	r24, 0x02	; 2
    13a6:	d9 01       	movw	r26, r18
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	9c 93       	st	X, r25
    13ac:	8e 93       	st	-X, r24
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	13 96       	adiw	r26, 0x03	; 3
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	12 97       	sbiw	r26, 0x02	; 2
    13ba:	e0 e0       	ldi	r30, 0x00	; 0
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	19 f0       	breq	.+6      	; 0x13cc <free+0xe4>
    13c6:	fe 01       	movw	r30, r28
    13c8:	ec 01       	movw	r28, r24
    13ca:	f9 cf       	rjmp	.-14     	; 0x13be <free+0xd6>
    13cc:	ce 01       	movw	r24, r28
    13ce:	02 96       	adiw	r24, 0x02	; 2
    13d0:	28 81       	ld	r18, Y
    13d2:	39 81       	ldd	r19, Y+1	; 0x01
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
    13d8:	20 91 14 04 	lds	r18, 0x0414
    13dc:	30 91 15 04 	lds	r19, 0x0415
    13e0:	28 17       	cp	r18, r24
    13e2:	39 07       	cpc	r19, r25
    13e4:	69 f4       	brne	.+26     	; 0x1400 <free+0x118>
    13e6:	30 97       	sbiw	r30, 0x00	; 0
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <free+0x10c>
    13ea:	10 92 17 04 	sts	0x0417, r1
    13ee:	10 92 16 04 	sts	0x0416, r1
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <free+0x110>
    13f4:	13 82       	std	Z+3, r1	; 0x03
    13f6:	12 82       	std	Z+2, r1	; 0x02
    13f8:	d0 93 15 04 	sts	0x0415, r29
    13fc:	c0 93 14 04 	sts	0x0414, r28
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <fdevopen>:
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	ec 01       	movw	r28, r24
    1410:	8b 01       	movw	r16, r22
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	31 f4       	brne	.+12     	; 0x1422 <fdevopen+0x1c>
    1416:	61 15       	cp	r22, r1
    1418:	71 05       	cpc	r23, r1
    141a:	19 f4       	brne	.+6      	; 0x1422 <fdevopen+0x1c>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	38 c0       	rjmp	.+112    	; 0x1492 <fdevopen+0x8c>
    1422:	6e e0       	ldi	r22, 0x0E	; 14
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <calloc>
    142e:	fc 01       	movw	r30, r24
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	a1 f3       	breq	.-24     	; 0x141c <fdevopen+0x16>
    1434:	80 e8       	ldi	r24, 0x80	; 128
    1436:	83 83       	std	Z+3, r24	; 0x03
    1438:	01 15       	cp	r16, r1
    143a:	11 05       	cpc	r17, r1
    143c:	71 f0       	breq	.+28     	; 0x145a <fdevopen+0x54>
    143e:	13 87       	std	Z+11, r17	; 0x0b
    1440:	02 87       	std	Z+10, r16	; 0x0a
    1442:	81 e8       	ldi	r24, 0x81	; 129
    1444:	83 83       	std	Z+3, r24	; 0x03
    1446:	80 91 18 04 	lds	r24, 0x0418
    144a:	90 91 19 04 	lds	r25, 0x0419
    144e:	89 2b       	or	r24, r25
    1450:	21 f4       	brne	.+8      	; 0x145a <fdevopen+0x54>
    1452:	f0 93 19 04 	sts	0x0419, r31
    1456:	e0 93 18 04 	sts	0x0418, r30
    145a:	20 97       	sbiw	r28, 0x00	; 0
    145c:	c9 f0       	breq	.+50     	; 0x1490 <fdevopen+0x8a>
    145e:	d1 87       	std	Z+9, r29	; 0x09
    1460:	c0 87       	std	Z+8, r28	; 0x08
    1462:	83 81       	ldd	r24, Z+3	; 0x03
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	83 83       	std	Z+3, r24	; 0x03
    1468:	80 91 1a 04 	lds	r24, 0x041A
    146c:	90 91 1b 04 	lds	r25, 0x041B
    1470:	89 2b       	or	r24, r25
    1472:	71 f4       	brne	.+28     	; 0x1490 <fdevopen+0x8a>
    1474:	f0 93 1b 04 	sts	0x041B, r31
    1478:	e0 93 1a 04 	sts	0x041A, r30
    147c:	80 91 1c 04 	lds	r24, 0x041C
    1480:	90 91 1d 04 	lds	r25, 0x041D
    1484:	89 2b       	or	r24, r25
    1486:	21 f4       	brne	.+8      	; 0x1490 <fdevopen+0x8a>
    1488:	f0 93 1d 04 	sts	0x041D, r31
    148c:	e0 93 1c 04 	sts	0x041C, r30
    1490:	cf 01       	movw	r24, r30
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <puts>:
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	e0 91 1a 04 	lds	r30, 0x041A
    14a8:	f0 91 1b 04 	lds	r31, 0x041B
    14ac:	23 81       	ldd	r18, Z+3	; 0x03
    14ae:	21 ff       	sbrs	r18, 1
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <puts+0x4c>
    14b2:	ec 01       	movw	r28, r24
    14b4:	00 e0       	ldi	r16, 0x00	; 0
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	89 91       	ld	r24, Y+
    14ba:	60 91 1a 04 	lds	r22, 0x041A
    14be:	70 91 1b 04 	lds	r23, 0x041B
    14c2:	db 01       	movw	r26, r22
    14c4:	18 96       	adiw	r26, 0x08	; 8
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	19 97       	sbiw	r26, 0x09	; 9
    14cc:	88 23       	and	r24, r24
    14ce:	31 f0       	breq	.+12     	; 0x14dc <puts+0x40>
    14d0:	09 95       	icall
    14d2:	89 2b       	or	r24, r25
    14d4:	89 f3       	breq	.-30     	; 0x14b8 <puts+0x1c>
    14d6:	0f ef       	ldi	r16, 0xFF	; 255
    14d8:	1f ef       	ldi	r17, 0xFF	; 255
    14da:	ee cf       	rjmp	.-36     	; 0x14b8 <puts+0x1c>
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	09 95       	icall
    14e0:	89 2b       	or	r24, r25
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <puts+0x4c>
    14e4:	c8 01       	movw	r24, r16
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <puts+0x50>
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	9f ef       	ldi	r25, 0xFF	; 255
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <calloc>:
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	86 9f       	mul	r24, r22
    1500:	80 01       	movw	r16, r0
    1502:	87 9f       	mul	r24, r23
    1504:	10 0d       	add	r17, r0
    1506:	96 9f       	mul	r25, r22
    1508:	10 0d       	add	r17, r0
    150a:	11 24       	eor	r1, r1
    150c:	c8 01       	movw	r24, r16
    150e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <malloc>
    1512:	ec 01       	movw	r28, r24
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	29 f0       	breq	.+10     	; 0x1522 <calloc+0x2c>
    1518:	a8 01       	movw	r20, r16
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 97 0a 	call	0x152e	; 0x152e <memset>
    1522:	ce 01       	movw	r24, r28
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <memset>:
    152e:	dc 01       	movw	r26, r24
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <memset+0x6>
    1532:	6d 93       	st	X+, r22
    1534:	41 50       	subi	r20, 0x01	; 1
    1536:	50 40       	sbci	r21, 0x00	; 0
    1538:	e0 f7       	brcc	.-8      	; 0x1532 <memset+0x4>
    153a:	08 95       	ret

0000153c <_exit>:
    153c:	f8 94       	cli

0000153e <__stop_program>:
    153e:	ff cf       	rjmp	.-2      	; 0x153e <__stop_program>
