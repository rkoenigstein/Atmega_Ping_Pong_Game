
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00000ad2  00000b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002b2  008002b2  00000d18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019a1  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  00002861  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000086f  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b92  00000000  00000000  00004206  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00004d98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_3>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <_etext+0x70>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	12 e0       	ldi	r17, 0x02	; 2
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e2 ed       	ldi	r30, 0xD2	; 210
 37c:	fa e0       	ldi	r31, 0x0A	; 10
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	a2 3b       	cpi	r26, 0xB2	; 178
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	22 e0       	ldi	r18, 0x02	; 2
 38c:	a2 eb       	ldi	r26, 0xB2	; 178
 38e:	b2 e0       	ldi	r27, 0x02	; 2
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	ae 3b       	cpi	r26, 0xBE	; 190
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
 39e:	0c 94 67 05 	jmp	0xace	; 0xace <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
 3a6:	8b b7       	in	r24, 0x3b	; 59
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	8b bf       	out	0x3b, r24	; 59
 3ac:	08 95       	ret

000003ae <__vector_3>:
	flag = 0;
	return value;
}

ISR(INT2_vect)
{
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
	flag = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	90 93 b3 02 	sts	0x02B3, r25
 3c4:	80 93 b2 02 	sts	0x02B2, r24
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <main_init>:
MenuNode* menu_main;
//JOY_POS joy_pos;

void main_init (void)
{
	uart_init(BAUDRATE);
 3d6:	8f e1       	ldi	r24, 0x1F	; 31
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 87 03 	call	0x70e	; 0x70e <uart_init>
	sram_init();
 3de:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sram_init>
	adc_init();
 3e2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	//JOY_init();
	sei();	
 3e6:	78 94       	sei
	oled_init();
 3e8:	0e 94 67 02 	call	0x4ce	; 0x4ce <oled_init>
 3ec:	08 95       	ret

000003ee <main>:
	//menu_main = getMenuRoot();
}

int main(void)
{
	main_init();
 3ee:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main_init>
	printf("INIT DONE\n");
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 17 05 	call	0xa2e	; 0xa2e <puts>
	
	//say hello to the guy in front of the display
	sayHello();
 3fa:	0e 94 2a 03 	call	0x654	; 0x654 <sayHello>
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <main+0x10>

00000400 <clear_buffer>:
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	14 c0       	rjmp	.+40     	; 0x432 <clear_buffer+0x32>
 40a:	9c 01       	movw	r18, r24
 40c:	24 0f       	add	r18, r20
 40e:	35 1f       	adc	r19, r21
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
		{
			oled_buffer[i*128+j] = 0x00;
 410:	e0 91 06 01 	lds	r30, 0x0106
 414:	f0 91 07 01 	lds	r31, 0x0107
 418:	e2 0f       	add	r30, r18
 41a:	f3 1f       	adc	r31, r19
 41c:	10 82       	st	Z, r1
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	80 38       	cpi	r24, 0x80	; 128
 422:	91 05       	cpc	r25, r1
 424:	91 f7       	brne	.-28     	; 0x40a <clear_buffer+0xa>
 426:	40 58       	subi	r20, 0x80	; 128
 428:	5f 4f       	sbci	r21, 0xFF	; 255
	*oled = data;
}

void clear_buffer(void)
{
	for(int i = 0; i < M; i++)
 42a:	41 15       	cp	r20, r1
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	58 07       	cpc	r21, r24
 430:	19 f0       	breq	.+6      	; 0x438 <clear_buffer+0x38>
	volatile uint8_t* oled = 0x1200;
	*oled = data;
}

void clear_buffer(void)
{
 432:	87 2f       	mov	r24, r23
 434:	96 2f       	mov	r25, r22
 436:	e9 cf       	rjmp	.-46     	; 0x40a <clear_buffer+0xa>
 438:	08 95       	ret

0000043a <oled_set_page>:
}

void oled_set_page(uint8_t page)
{
	//set page start address
	oled_write_command(0xb0 | page);
 43a:	80 6b       	ori	r24, 0xB0	; 176
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
 43c:	e0 e0       	ldi	r30, 0x00	; 0
 43e:	f0 e1       	ldi	r31, 0x10	; 16
 440:	80 83       	st	Z, r24
 442:	10 82       	st	Z, r1
 444:	8f e7       	ldi	r24, 0x7F	; 127
 446:	80 83       	st	Z, r24
 448:	08 95       	ret

0000044a <print_buffer>:
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
	oled_set_page(0);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 1d 02 	call	0x43a	; 0x43a <oled_set_page>
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < M; i++)
 462:	f1 2c       	mov	r15, r1
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
 464:	68 94       	set
 466:	dd 24       	eor	r13, r13
 468:	d7 f8       	bld	r13, 7
 46a:	e1 2c       	mov	r14, r1
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	d2 e1       	ldi	r29, 0x12	; 18
 470:	21 c0       	rjmp	.+66     	; 0x4b4 <print_buffer+0x6a>
 472:	02 2f       	mov	r16, r18
 474:	13 2f       	mov	r17, r19
 476:	a9 01       	movw	r20, r18
 478:	48 1b       	sub	r20, r24
 47a:	59 0b       	sbc	r21, r25
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
		{
			oled_print(oled_buffer[i*128+j]);
 47c:	e0 91 06 01 	lds	r30, 0x0106
 480:	f0 91 07 01 	lds	r31, 0x0107
 484:	e4 0f       	add	r30, r20
 486:	f5 1f       	adc	r31, r21
 488:	40 81       	ld	r20, Z
}

void oled_print(uint8_t data)
{
	volatile uint8_t* oled = 0x1200;
	*oled = data;
 48a:	48 83       	st	Y, r20
 48c:	01 97       	sbiw	r24, 0x01	; 1
void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
	{
		for(uint8_t j = 0; j < N; j++)
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	81 f7       	brne	.-32     	; 0x472 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
 492:	87 e0       	ldi	r24, 0x07	; 7
 494:	8f 15       	cp	r24, r15
 496:	28 f0       	brcs	.+10     	; 0x4a2 <print_buffer+0x58>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	8f 0d       	add	r24, r15
 49c:	0e 94 1d 02 	call	0x43a	; 0x43a <oled_set_page>
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <print_buffer+0x5e>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 1d 02 	call	0x43a	; 0x43a <oled_set_page>
}

void print_buffer(void)
{
	oled_set_page(0);
	for(uint8_t i = 0; i < M; i++)
 4a8:	f3 94       	inc	r15
 4aa:	88 e0       	ldi	r24, 0x08	; 8
 4ac:	f8 16       	cp	r15, r24
 4ae:	39 f0       	breq	.+14     	; 0x4be <print_buffer+0x74>
 4b0:	20 2f       	mov	r18, r16
 4b2:	31 2f       	mov	r19, r17
	clear_buffer();
	print_buffer();
}

void print_buffer(void)
{
 4b4:	8d 2d       	mov	r24, r13
 4b6:	9e 2d       	mov	r25, r14
 4b8:	20 58       	subi	r18, 0x80	; 128
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	da cf       	rjmp	.-76     	; 0x472 <print_buffer+0x28>
		{
			oled_print(oled_buffer[i*128+j]);
		}
		i < M ? oled_set_page(i+1) : oled_set_page(0);
	}
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	08 95       	ret

000004ce <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1000;
	*_command = command;
 4ce:	e0 e0       	ldi	r30, 0x00	; 0
 4d0:	f0 e1       	ldi	r31, 0x10	; 16
 4d2:	8e ea       	ldi	r24, 0xAE	; 174
 4d4:	80 83       	st	Z, r24
 4d6:	81 ea       	ldi	r24, 0xA1	; 161
 4d8:	80 83       	st	Z, r24
 4da:	8a ed       	ldi	r24, 0xDA	; 218
 4dc:	80 83       	st	Z, r24
 4de:	82 e1       	ldi	r24, 0x12	; 18
 4e0:	80 83       	st	Z, r24
 4e2:	88 ec       	ldi	r24, 0xC8	; 200
 4e4:	80 83       	st	Z, r24
 4e6:	88 ea       	ldi	r24, 0xA8	; 168
 4e8:	80 83       	st	Z, r24
 4ea:	8f e3       	ldi	r24, 0x3F	; 63
 4ec:	80 83       	st	Z, r24
 4ee:	85 ed       	ldi	r24, 0xD5	; 213
 4f0:	80 83       	st	Z, r24
 4f2:	80 e8       	ldi	r24, 0x80	; 128
 4f4:	80 83       	st	Z, r24
 4f6:	81 e8       	ldi	r24, 0x81	; 129
 4f8:	80 83       	st	Z, r24
 4fa:	80 e5       	ldi	r24, 0x50	; 80
 4fc:	80 83       	st	Z, r24
 4fe:	89 ed       	ldi	r24, 0xD9	; 217
 500:	80 83       	st	Z, r24
 502:	81 e2       	ldi	r24, 0x21	; 33
 504:	80 83       	st	Z, r24
 506:	80 e2       	ldi	r24, 0x20	; 32
 508:	80 83       	st	Z, r24
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	80 83       	st	Z, r24
 50e:	8b ed       	ldi	r24, 0xDB	; 219
 510:	80 83       	st	Z, r24
 512:	80 e3       	ldi	r24, 0x30	; 48
 514:	80 83       	st	Z, r24
 516:	8d ea       	ldi	r24, 0xAD	; 173
 518:	80 83       	st	Z, r24
 51a:	10 82       	st	Z, r1
 51c:	84 ea       	ldi	r24, 0xA4	; 164
 51e:	80 83       	st	Z, r24
 520:	86 ea       	ldi	r24, 0xA6	; 166
 522:	80 83       	st	Z, r24
 524:	8f ea       	ldi	r24, 0xAF	; 175
 526:	80 83       	st	Z, r24
 528:	83 ed       	ldi	r24, 0xD3	; 211
 52a:	80 83       	st	Z, r24
 52c:	10 82       	st	Z, r1
 52e:	80 e4       	ldi	r24, 0x40	; 64
 530:	80 83       	st	Z, r24
 532:	80 eb       	ldi	r24, 0xB0	; 176
 534:	80 83       	st	Z, r24
 536:	10 82       	st	Z, r1
 538:	8f e7       	ldi	r24, 0x7F	; 127
 53a:	80 83       	st	Z, r24
	//set the lower start column address
	oled_write_command(0);
	//set the upper start column address
	oled_write_command(127);
	
	clear_buffer();
 53c:	0e 94 00 02 	call	0x400	; 0x400 <clear_buffer>
	print_buffer();	
 540:	0e 94 25 02 	call	0x44a	; 0x44a <print_buffer>
 544:	08 95       	ret

00000546 <convertStringToFont>:
	convertStringToFont(word, length, mystring);
	memcpy(oled_buffer + (pos.page<<7)+pos.column, mystring, 8*length);
}

void convertStringToFont(char* myword, uint8_t mylength, uint8_t mystring[])
{
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
	for(int j = 0; j < mylength; j++)
 552:	06 2f       	mov	r16, r22
 554:	10 e0       	ldi	r17, 0x00	; 0
 556:	10 16       	cp	r1, r16
 558:	11 06       	cpc	r1, r17
 55a:	4c f5       	brge	.+82     	; 0x5ae <convertStringToFont+0x68>
 55c:	64 2f       	mov	r22, r20
 55e:	75 2f       	mov	r23, r21
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	50 e0       	ldi	r21, 0x00	; 0
	convertStringToFont(word, length, mystring);
	memcpy(oled_buffer + (pos.page<<7)+pos.column, mystring, 8*length);
}

void convertStringToFont(char* myword, uint8_t mylength, uint8_t mystring[])
{
 564:	e1 2c       	mov	r14, r1
 566:	f1 2c       	mov	r15, r1
 568:	1b c0       	rjmp	.+54     	; 0x5a0 <convertStringToFont+0x5a>
	for(int j = 0; j < mylength; j++)
	{
		for(int i = 0; i < 8; i++)
		{
			mystring[j*8+i] = (PGM_P)pgm_read_byte(&font8[myword[j]-32][i]);			
 56a:	e8 81       	ld	r30, Y
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	b0 97       	sbiw	r30, 0x20	; 32
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	e2 0f       	add	r30, r18
 57e:	f3 1f       	adc	r31, r19
 580:	e0 59       	subi	r30, 0x90	; 144
 582:	ff 4f       	sbci	r31, 0xFF	; 255
 584:	e4 91       	lpm	r30, Z
 586:	ed 93       	st	X+, r30

void convertStringToFont(char* myword, uint8_t mylength, uint8_t mystring[])
{
	for(int j = 0; j < mylength; j++)
	{
		for(int i = 0; i < 8; i++)
 588:	2f 5f       	subi	r18, 0xFF	; 255
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	28 30       	cpi	r18, 0x08	; 8
 58e:	31 05       	cpc	r19, r1
 590:	61 f7       	brne	.-40     	; 0x56a <convertStringToFont+0x24>
	memcpy(oled_buffer + (pos.page<<7)+pos.column, mystring, 8*length);
}

void convertStringToFont(char* myword, uint8_t mylength, uint8_t mystring[])
{
	for(int j = 0; j < mylength; j++)
 592:	4f 5f       	subi	r20, 0xFF	; 255
 594:	5f 4f       	sbci	r21, 0xFF	; 255
 596:	68 5f       	subi	r22, 0xF8	; 248
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	40 17       	cp	r20, r16
 59c:	51 07       	cpc	r21, r17
 59e:	3c f4       	brge	.+14     	; 0x5ae <convertStringToFont+0x68>
	convertStringToFont(word, length, mystring);
	memcpy(oled_buffer + (pos.page<<7)+pos.column, mystring, 8*length);
}

void convertStringToFont(char* myword, uint8_t mylength, uint8_t mystring[])
{
 5a0:	db 01       	movw	r26, r22
 5a2:	2e 2d       	mov	r18, r14
 5a4:	3f 2d       	mov	r19, r15
 5a6:	ec 01       	movw	r28, r24
 5a8:	c4 0f       	add	r28, r20
 5aa:	d5 1f       	adc	r29, r21
 5ac:	de cf       	rjmp	.-68     	; 0x56a <convertStringToFont+0x24>
		{
			mystring[j*8+i] = (PGM_P)pgm_read_byte(&font8[myword[j]-32][i]);			
		}
		//printf("%d~\n", j);
	}
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	08 95       	ret

000005bc <print_string_to_buffer>:
	volatile uint8_t* _command = 0x1000;
	*_command = command;
}

void print_string_to_buffer(char* word, uint8_t length, position pos)
{
 5bc:	af 92       	push	r10
 5be:	bf 92       	push	r11
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	b4 2e       	mov	r11, r20
 5d6:	a5 2e       	mov	r10, r21
	uint8_t mystring[128*length];
	convertStringToFont(word, length, mystring);
	memcpy(oled_buffer + (pos.page<<7)+pos.column, mystring, 8*length);
}
 5d8:	ed b6       	in	r14, 0x3d	; 61
 5da:	fe b6       	in	r15, 0x3e	; 62
	*_command = command;
}

void print_string_to_buffer(char* word, uint8_t length, position pos)
{
	uint8_t mystring[128*length];
 5dc:	c6 2e       	mov	r12, r22
 5de:	d1 2c       	mov	r13, r1
 5e0:	2d b7       	in	r18, 0x3d	; 61
 5e2:	3e b7       	in	r19, 0x3e	; 62
 5e4:	40 e8       	ldi	r20, 0x80	; 128
 5e6:	64 9f       	mul	r22, r20
 5e8:	20 19       	sub	r18, r0
 5ea:	31 09       	sbc	r19, r1
 5ec:	11 24       	eor	r1, r1
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	3e bf       	out	0x3e, r19	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	2d bf       	out	0x3d, r18	; 61
 5f8:	0d b7       	in	r16, 0x3d	; 61
 5fa:	1e b7       	in	r17, 0x3e	; 62
 5fc:	0f 5f       	subi	r16, 0xFF	; 255
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
	convertStringToFont(word, length, mystring);
 600:	a8 01       	movw	r20, r16
 602:	0e 94 a3 02 	call	0x546	; 0x546 <convertStringToFont>
	memcpy(oled_buffer + (pos.page<<7)+pos.column, mystring, 8*length);
 606:	8a 2d       	mov	r24, r10
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	20 e8       	ldi	r18, 0x80	; 128
 60c:	b2 9e       	mul	r11, r18
 60e:	80 0d       	add	r24, r0
 610:	91 1d       	adc	r25, r1
 612:	11 24       	eor	r1, r1
 614:	20 91 06 01 	lds	r18, 0x0106
 618:	30 91 07 01 	lds	r19, 0x0107
 61c:	a6 01       	movw	r20, r12
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	44 0f       	add	r20, r20
 624:	55 1f       	adc	r21, r21
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	b8 01       	movw	r22, r16
 62c:	82 0f       	add	r24, r18
 62e:	93 1f       	adc	r25, r19
 630:	0e 94 c3 04 	call	0x986	; 0x986 <memcpy>
}
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	fe be       	out	0x3e, r15	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	ed be       	out	0x3d, r14	; 61
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	bf 90       	pop	r11
 650:	af 90       	pop	r10
 652:	08 95       	ret

00000654 <sayHello>:
	
}

void sayHello(void)
{
	clear_buffer();
 654:	0e 94 00 02 	call	0x400	; 0x400 <clear_buffer>
	print_buffer();
 658:	0e 94 25 02 	call	0x44a	; 0x44a <print_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65c:	2f ef       	ldi	r18, 0xFF	; 255
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9d e1       	ldi	r25, 0x1D	; 29
 662:	21 50       	subi	r18, 0x01	; 1
 664:	80 40       	sbci	r24, 0x00	; 0
 666:	90 40       	sbci	r25, 0x00	; 0
 668:	e1 f7       	brne	.-8      	; 0x662 <sayHello+0xe>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <sayHello+0x18>
 66c:	00 00       	nop
	_delay_ms(2000);
	position pos = { .page = 0, .column =0 };
	print_string_to_buffer(" .------------. ", 16, pos);
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	60 e1       	ldi	r22, 0x10	; 16
 674:	87 e3       	ldi	r24, 0x37	; 55
 676:	92 e0       	ldi	r25, 0x02	; 2
 678:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" | Ping Pong! | ", 16, pos);
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	60 e1       	ldi	r22, 0x10	; 16
 682:	88 e4       	ldi	r24, 0x48	; 72
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer(" `------------' ", 16, pos);
 68a:	42 e0       	ldi	r20, 0x02	; 2
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	60 e1       	ldi	r22, 0x10	; 16
 690:	89 e5       	ldi	r24, 0x59	; 89
 692:	92 e0       	ldi	r25, 0x02	; 2
 694:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("        ^       ", 16, pos);
 698:	43 e0       	ldi	r20, 0x03	; 3
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	60 e1       	ldi	r22, 0x10	; 16
 69e:	8a e6       	ldi	r24, 0x6A	; 106
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |  (\\_/) ", 16, pos);
 6a6:	44 e0       	ldi	r20, 0x04	; 4
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	60 e1       	ldi	r22, 0x10	; 16
 6ac:	8b e7       	ldi	r24, 0x7B	; 123
 6ae:	92 e0       	ldi	r25, 0x02	; 2
 6b0:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("       |__(O.o) ", 16, pos);
 6b4:	45 e0       	ldi	r20, 0x05	; 5
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	60 e1       	ldi	r22, 0x10	; 16
 6ba:	8c e8       	ldi	r24, 0x8C	; 140
 6bc:	92 e0       	ldi	r25, 0x02	; 2
 6be:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	pos.page++;
	print_string_to_buffer("          (> <) ", 16, pos);
 6c2:	46 e0       	ldi	r20, 0x06	; 6
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	60 e1       	ldi	r22, 0x10	; 16
 6c8:	8d e9       	ldi	r24, 0x9D	; 157
 6ca:	92 e0       	ldi	r25, 0x02	; 2
 6cc:	0e 94 de 02 	call	0x5bc	; 0x5bc <print_string_to_buffer>
	print_buffer();	
 6d0:	0e 94 25 02 	call	0x44a	; 0x44a <print_buffer>
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	9a e4       	ldi	r25, 0x4A	; 74
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <sayHello+0x86>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <sayHello+0x90>
 6e4:	00 00       	nop
 6e6:	08 95       	ret

000006e8 <sram_init>:
#include "uart_driver.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1<<SRE);
 6e8:	85 b7       	in	r24, 0x35	; 53
 6ea:	80 68       	ori	r24, 0x80	; 128
 6ec:	85 bf       	out	0x35, r24	; 53
	
	//realesing  JTAG pins from memory mapping
	SFIOR|=(1<<XMM2);
 6ee:	80 b7       	in	r24, 0x30	; 48
 6f0:	80 62       	ori	r24, 0x20	; 32
 6f2:	80 bf       	out	0x30, r24	; 48
	SFIOR&=(0<<XMM1);
 6f4:	80 b7       	in	r24, 0x30	; 48
 6f6:	10 be       	out	0x30, r1	; 48
	SFIOR&=(0<<XMM0);
 6f8:	80 b7       	in	r24, 0x30	; 48
 6fa:	10 be       	out	0x30, r1	; 48
 6fc:	08 95       	ret

000006fe <uart_putc>:
//send data to RS232
void uart_putc(unsigned char c)
{
	
	//wait while register is free
	while (!(UCSR0A & (1<<UDRE0)));
 6fe:	5d 9b       	sbis	0x0b, 5	; 11
 700:	fe cf       	rjmp	.-4      	; 0x6fe <uart_putc>
	
	//put character to USART data register
	UDR0 = c;
 702:	8c b9       	out	0x0c, r24	; 12
 704:	08 95       	ret

00000706 <uart_getc>:

//receive data from RS232
unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1<<RXC0)));
 706:	5f 9b       	sbis	0x0b, 7	; 11
 708:	fe cf       	rjmp	.-4      	; 0x706 <uart_getc>
	
	//get value from USART data register
	return UDR0;
 70a:	8c b1       	in	r24, 0x0c	; 12
}
 70c:	08 95       	ret

0000070e <uart_init>:

//initialize uart to 9600 8N1 (9600 Baud/Bit rate, 8 Bits data, no parity, 1 stop bit
void uart_init(unsigned int ubrr)
{
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr>>8);
 70e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 710:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 712:	88 e1       	ldi	r24, 0x18	; 24
 714:	8a b9       	out	0x0a, r24	; 10
	
	//set UCSRC as accessed register, set number of character size to 8
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
 716:	86 e8       	ldi	r24, 0x86	; 134
 718:	80 bd       	out	0x20, r24	; 32
	//set number of stop bits to 1
	UCSR0C &= (0<<USBS0);
 71a:	80 b5       	in	r24, 0x20	; 32
 71c:	10 bc       	out	0x20, r1	; 32
	//set connection to asynchronous
	UCSR0C &= (0<<UMSEL0); 
 71e:	80 b5       	in	r24, 0x20	; 32
 720:	10 bc       	out	0x20, r1	; 32
	//disable parity mode
	UCSR0C &= (0<<UPM00);
 722:	80 b5       	in	r24, 0x20	; 32
 724:	10 bc       	out	0x20, r1	; 32
	UCSR0C &= (0<<UPM10);
 726:	80 b5       	in	r24, 0x20	; 32
 728:	10 bc       	out	0x20, r1	; 32
	fdevopen(uart_putc, uart_getc);
 72a:	63 e8       	ldi	r22, 0x83	; 131
 72c:	73 e0       	ldi	r23, 0x03	; 3
 72e:	8f e7       	ldi	r24, 0x7F	; 127
 730:	93 e0       	ldi	r25, 0x03	; 3
 732:	0e 94 cc 04 	call	0x998	; 0x998 <fdevopen>
 736:	08 95       	ret

00000738 <malloc>:
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	91 05       	cpc	r25, r1
 740:	10 f4       	brcc	.+4      	; 0x746 <malloc+0xe>
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	e0 91 b6 02 	lds	r30, 0x02B6
 74a:	f0 91 b7 02 	lds	r31, 0x02B7
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	a0 e0       	ldi	r26, 0x00	; 0
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	30 97       	sbiw	r30, 0x00	; 0
 758:	39 f1       	breq	.+78     	; 0x7a8 <malloc+0x70>
 75a:	40 81       	ld	r20, Z
 75c:	51 81       	ldd	r21, Z+1	; 0x01
 75e:	48 17       	cp	r20, r24
 760:	59 07       	cpc	r21, r25
 762:	b8 f0       	brcs	.+46     	; 0x792 <malloc+0x5a>
 764:	48 17       	cp	r20, r24
 766:	59 07       	cpc	r21, r25
 768:	71 f4       	brne	.+28     	; 0x786 <malloc+0x4e>
 76a:	82 81       	ldd	r24, Z+2	; 0x02
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	10 97       	sbiw	r26, 0x00	; 0
 770:	29 f0       	breq	.+10     	; 0x77c <malloc+0x44>
 772:	13 96       	adiw	r26, 0x03	; 3
 774:	9c 93       	st	X, r25
 776:	8e 93       	st	-X, r24
 778:	12 97       	sbiw	r26, 0x02	; 2
 77a:	2c c0       	rjmp	.+88     	; 0x7d4 <malloc+0x9c>
 77c:	90 93 b7 02 	sts	0x02B7, r25
 780:	80 93 b6 02 	sts	0x02B6, r24
 784:	27 c0       	rjmp	.+78     	; 0x7d4 <malloc+0x9c>
 786:	21 15       	cp	r18, r1
 788:	31 05       	cpc	r19, r1
 78a:	31 f0       	breq	.+12     	; 0x798 <malloc+0x60>
 78c:	42 17       	cp	r20, r18
 78e:	53 07       	cpc	r21, r19
 790:	18 f0       	brcs	.+6      	; 0x798 <malloc+0x60>
 792:	a9 01       	movw	r20, r18
 794:	db 01       	movw	r26, r22
 796:	01 c0       	rjmp	.+2      	; 0x79a <malloc+0x62>
 798:	ef 01       	movw	r28, r30
 79a:	9a 01       	movw	r18, r20
 79c:	bd 01       	movw	r22, r26
 79e:	df 01       	movw	r26, r30
 7a0:	02 80       	ldd	r0, Z+2	; 0x02
 7a2:	f3 81       	ldd	r31, Z+3	; 0x03
 7a4:	e0 2d       	mov	r30, r0
 7a6:	d7 cf       	rjmp	.-82     	; 0x756 <malloc+0x1e>
 7a8:	21 15       	cp	r18, r1
 7aa:	31 05       	cpc	r19, r1
 7ac:	f9 f0       	breq	.+62     	; 0x7ec <malloc+0xb4>
 7ae:	28 1b       	sub	r18, r24
 7b0:	39 0b       	sbc	r19, r25
 7b2:	24 30       	cpi	r18, 0x04	; 4
 7b4:	31 05       	cpc	r19, r1
 7b6:	80 f4       	brcc	.+32     	; 0x7d8 <malloc+0xa0>
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	9b 81       	ldd	r25, Y+3	; 0x03
 7bc:	61 15       	cp	r22, r1
 7be:	71 05       	cpc	r23, r1
 7c0:	21 f0       	breq	.+8      	; 0x7ca <malloc+0x92>
 7c2:	fb 01       	movw	r30, r22
 7c4:	93 83       	std	Z+3, r25	; 0x03
 7c6:	82 83       	std	Z+2, r24	; 0x02
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <malloc+0x9a>
 7ca:	90 93 b7 02 	sts	0x02B7, r25
 7ce:	80 93 b6 02 	sts	0x02B6, r24
 7d2:	fe 01       	movw	r30, r28
 7d4:	32 96       	adiw	r30, 0x02	; 2
 7d6:	44 c0       	rjmp	.+136    	; 0x860 <malloc+0x128>
 7d8:	fe 01       	movw	r30, r28
 7da:	e2 0f       	add	r30, r18
 7dc:	f3 1f       	adc	r31, r19
 7de:	81 93       	st	Z+, r24
 7e0:	91 93       	st	Z+, r25
 7e2:	22 50       	subi	r18, 0x02	; 2
 7e4:	31 09       	sbc	r19, r1
 7e6:	39 83       	std	Y+1, r19	; 0x01
 7e8:	28 83       	st	Y, r18
 7ea:	3a c0       	rjmp	.+116    	; 0x860 <malloc+0x128>
 7ec:	20 91 b4 02 	lds	r18, 0x02B4
 7f0:	30 91 b5 02 	lds	r19, 0x02B5
 7f4:	23 2b       	or	r18, r19
 7f6:	41 f4       	brne	.+16     	; 0x808 <malloc+0xd0>
 7f8:	20 91 02 01 	lds	r18, 0x0102
 7fc:	30 91 03 01 	lds	r19, 0x0103
 800:	30 93 b5 02 	sts	0x02B5, r19
 804:	20 93 b4 02 	sts	0x02B4, r18
 808:	20 91 00 01 	lds	r18, 0x0100
 80c:	30 91 01 01 	lds	r19, 0x0101
 810:	21 15       	cp	r18, r1
 812:	31 05       	cpc	r19, r1
 814:	41 f4       	brne	.+16     	; 0x826 <malloc+0xee>
 816:	2d b7       	in	r18, 0x3d	; 61
 818:	3e b7       	in	r19, 0x3e	; 62
 81a:	40 91 04 01 	lds	r20, 0x0104
 81e:	50 91 05 01 	lds	r21, 0x0105
 822:	24 1b       	sub	r18, r20
 824:	35 0b       	sbc	r19, r21
 826:	e0 91 b4 02 	lds	r30, 0x02B4
 82a:	f0 91 b5 02 	lds	r31, 0x02B5
 82e:	e2 17       	cp	r30, r18
 830:	f3 07       	cpc	r31, r19
 832:	a0 f4       	brcc	.+40     	; 0x85c <malloc+0x124>
 834:	2e 1b       	sub	r18, r30
 836:	3f 0b       	sbc	r19, r31
 838:	28 17       	cp	r18, r24
 83a:	39 07       	cpc	r19, r25
 83c:	78 f0       	brcs	.+30     	; 0x85c <malloc+0x124>
 83e:	ac 01       	movw	r20, r24
 840:	4e 5f       	subi	r20, 0xFE	; 254
 842:	5f 4f       	sbci	r21, 0xFF	; 255
 844:	24 17       	cp	r18, r20
 846:	35 07       	cpc	r19, r21
 848:	48 f0       	brcs	.+18     	; 0x85c <malloc+0x124>
 84a:	4e 0f       	add	r20, r30
 84c:	5f 1f       	adc	r21, r31
 84e:	50 93 b5 02 	sts	0x02B5, r21
 852:	40 93 b4 02 	sts	0x02B4, r20
 856:	81 93       	st	Z+, r24
 858:	91 93       	st	Z+, r25
 85a:	02 c0       	rjmp	.+4      	; 0x860 <malloc+0x128>
 85c:	e0 e0       	ldi	r30, 0x00	; 0
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	cf 01       	movw	r24, r30
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	08 95       	ret

00000868 <free>:
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	09 f4       	brne	.+2      	; 0x872 <free+0xa>
 870:	87 c0       	rjmp	.+270    	; 0x980 <free+0x118>
 872:	fc 01       	movw	r30, r24
 874:	32 97       	sbiw	r30, 0x02	; 2
 876:	13 82       	std	Z+3, r1	; 0x03
 878:	12 82       	std	Z+2, r1	; 0x02
 87a:	c0 91 b6 02 	lds	r28, 0x02B6
 87e:	d0 91 b7 02 	lds	r29, 0x02B7
 882:	20 97       	sbiw	r28, 0x00	; 0
 884:	81 f4       	brne	.+32     	; 0x8a6 <free+0x3e>
 886:	20 81       	ld	r18, Z
 888:	31 81       	ldd	r19, Z+1	; 0x01
 88a:	28 0f       	add	r18, r24
 88c:	39 1f       	adc	r19, r25
 88e:	80 91 b4 02 	lds	r24, 0x02B4
 892:	90 91 b5 02 	lds	r25, 0x02B5
 896:	82 17       	cp	r24, r18
 898:	93 07       	cpc	r25, r19
 89a:	79 f5       	brne	.+94     	; 0x8fa <free+0x92>
 89c:	f0 93 b5 02 	sts	0x02B5, r31
 8a0:	e0 93 b4 02 	sts	0x02B4, r30
 8a4:	6d c0       	rjmp	.+218    	; 0x980 <free+0x118>
 8a6:	de 01       	movw	r26, r28
 8a8:	20 e0       	ldi	r18, 0x00	; 0
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	ae 17       	cp	r26, r30
 8ae:	bf 07       	cpc	r27, r31
 8b0:	50 f4       	brcc	.+20     	; 0x8c6 <free+0x5e>
 8b2:	12 96       	adiw	r26, 0x02	; 2
 8b4:	4d 91       	ld	r20, X+
 8b6:	5c 91       	ld	r21, X
 8b8:	13 97       	sbiw	r26, 0x03	; 3
 8ba:	9d 01       	movw	r18, r26
 8bc:	41 15       	cp	r20, r1
 8be:	51 05       	cpc	r21, r1
 8c0:	09 f1       	breq	.+66     	; 0x904 <free+0x9c>
 8c2:	da 01       	movw	r26, r20
 8c4:	f3 cf       	rjmp	.-26     	; 0x8ac <free+0x44>
 8c6:	b3 83       	std	Z+3, r27	; 0x03
 8c8:	a2 83       	std	Z+2, r26	; 0x02
 8ca:	40 81       	ld	r20, Z
 8cc:	51 81       	ldd	r21, Z+1	; 0x01
 8ce:	84 0f       	add	r24, r20
 8d0:	95 1f       	adc	r25, r21
 8d2:	8a 17       	cp	r24, r26
 8d4:	9b 07       	cpc	r25, r27
 8d6:	71 f4       	brne	.+28     	; 0x8f4 <free+0x8c>
 8d8:	8d 91       	ld	r24, X+
 8da:	9c 91       	ld	r25, X
 8dc:	11 97       	sbiw	r26, 0x01	; 1
 8de:	84 0f       	add	r24, r20
 8e0:	95 1f       	adc	r25, r21
 8e2:	02 96       	adiw	r24, 0x02	; 2
 8e4:	91 83       	std	Z+1, r25	; 0x01
 8e6:	80 83       	st	Z, r24
 8e8:	12 96       	adiw	r26, 0x02	; 2
 8ea:	8d 91       	ld	r24, X+
 8ec:	9c 91       	ld	r25, X
 8ee:	13 97       	sbiw	r26, 0x03	; 3
 8f0:	93 83       	std	Z+3, r25	; 0x03
 8f2:	82 83       	std	Z+2, r24	; 0x02
 8f4:	21 15       	cp	r18, r1
 8f6:	31 05       	cpc	r19, r1
 8f8:	29 f4       	brne	.+10     	; 0x904 <free+0x9c>
 8fa:	f0 93 b7 02 	sts	0x02B7, r31
 8fe:	e0 93 b6 02 	sts	0x02B6, r30
 902:	3e c0       	rjmp	.+124    	; 0x980 <free+0x118>
 904:	d9 01       	movw	r26, r18
 906:	13 96       	adiw	r26, 0x03	; 3
 908:	fc 93       	st	X, r31
 90a:	ee 93       	st	-X, r30
 90c:	12 97       	sbiw	r26, 0x02	; 2
 90e:	4d 91       	ld	r20, X+
 910:	5d 91       	ld	r21, X+
 912:	a4 0f       	add	r26, r20
 914:	b5 1f       	adc	r27, r21
 916:	ea 17       	cp	r30, r26
 918:	fb 07       	cpc	r31, r27
 91a:	79 f4       	brne	.+30     	; 0x93a <free+0xd2>
 91c:	80 81       	ld	r24, Z
 91e:	91 81       	ldd	r25, Z+1	; 0x01
 920:	84 0f       	add	r24, r20
 922:	95 1f       	adc	r25, r21
 924:	02 96       	adiw	r24, 0x02	; 2
 926:	d9 01       	movw	r26, r18
 928:	11 96       	adiw	r26, 0x01	; 1
 92a:	9c 93       	st	X, r25
 92c:	8e 93       	st	-X, r24
 92e:	82 81       	ldd	r24, Z+2	; 0x02
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	13 96       	adiw	r26, 0x03	; 3
 934:	9c 93       	st	X, r25
 936:	8e 93       	st	-X, r24
 938:	12 97       	sbiw	r26, 0x02	; 2
 93a:	e0 e0       	ldi	r30, 0x00	; 0
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	9b 81       	ldd	r25, Y+3	; 0x03
 942:	00 97       	sbiw	r24, 0x00	; 0
 944:	19 f0       	breq	.+6      	; 0x94c <free+0xe4>
 946:	fe 01       	movw	r30, r28
 948:	ec 01       	movw	r28, r24
 94a:	f9 cf       	rjmp	.-14     	; 0x93e <free+0xd6>
 94c:	ce 01       	movw	r24, r28
 94e:	02 96       	adiw	r24, 0x02	; 2
 950:	28 81       	ld	r18, Y
 952:	39 81       	ldd	r19, Y+1	; 0x01
 954:	82 0f       	add	r24, r18
 956:	93 1f       	adc	r25, r19
 958:	20 91 b4 02 	lds	r18, 0x02B4
 95c:	30 91 b5 02 	lds	r19, 0x02B5
 960:	28 17       	cp	r18, r24
 962:	39 07       	cpc	r19, r25
 964:	69 f4       	brne	.+26     	; 0x980 <free+0x118>
 966:	30 97       	sbiw	r30, 0x00	; 0
 968:	29 f4       	brne	.+10     	; 0x974 <free+0x10c>
 96a:	10 92 b7 02 	sts	0x02B7, r1
 96e:	10 92 b6 02 	sts	0x02B6, r1
 972:	02 c0       	rjmp	.+4      	; 0x978 <free+0x110>
 974:	13 82       	std	Z+3, r1	; 0x03
 976:	12 82       	std	Z+2, r1	; 0x02
 978:	d0 93 b5 02 	sts	0x02B5, r29
 97c:	c0 93 b4 02 	sts	0x02B4, r28
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	08 95       	ret

00000986 <memcpy>:
 986:	fb 01       	movw	r30, r22
 988:	dc 01       	movw	r26, r24
 98a:	02 c0       	rjmp	.+4      	; 0x990 <memcpy+0xa>
 98c:	01 90       	ld	r0, Z+
 98e:	0d 92       	st	X+, r0
 990:	41 50       	subi	r20, 0x01	; 1
 992:	50 40       	sbci	r21, 0x00	; 0
 994:	d8 f7       	brcc	.-10     	; 0x98c <memcpy+0x6>
 996:	08 95       	ret

00000998 <fdevopen>:
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	ec 01       	movw	r28, r24
 9a2:	8b 01       	movw	r16, r22
 9a4:	00 97       	sbiw	r24, 0x00	; 0
 9a6:	31 f4       	brne	.+12     	; 0x9b4 <fdevopen+0x1c>
 9a8:	61 15       	cp	r22, r1
 9aa:	71 05       	cpc	r23, r1
 9ac:	19 f4       	brne	.+6      	; 0x9b4 <fdevopen+0x1c>
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	38 c0       	rjmp	.+112    	; 0xa24 <fdevopen+0x8c>
 9b4:	6e e0       	ldi	r22, 0x0E	; 14
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 44 05 	call	0xa88	; 0xa88 <calloc>
 9c0:	fc 01       	movw	r30, r24
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	a1 f3       	breq	.-24     	; 0x9ae <fdevopen+0x16>
 9c6:	80 e8       	ldi	r24, 0x80	; 128
 9c8:	83 83       	std	Z+3, r24	; 0x03
 9ca:	01 15       	cp	r16, r1
 9cc:	11 05       	cpc	r17, r1
 9ce:	71 f0       	breq	.+28     	; 0x9ec <fdevopen+0x54>
 9d0:	13 87       	std	Z+11, r17	; 0x0b
 9d2:	02 87       	std	Z+10, r16	; 0x0a
 9d4:	81 e8       	ldi	r24, 0x81	; 129
 9d6:	83 83       	std	Z+3, r24	; 0x03
 9d8:	80 91 b8 02 	lds	r24, 0x02B8
 9dc:	90 91 b9 02 	lds	r25, 0x02B9
 9e0:	89 2b       	or	r24, r25
 9e2:	21 f4       	brne	.+8      	; 0x9ec <fdevopen+0x54>
 9e4:	f0 93 b9 02 	sts	0x02B9, r31
 9e8:	e0 93 b8 02 	sts	0x02B8, r30
 9ec:	20 97       	sbiw	r28, 0x00	; 0
 9ee:	c9 f0       	breq	.+50     	; 0xa22 <fdevopen+0x8a>
 9f0:	d1 87       	std	Z+9, r29	; 0x09
 9f2:	c0 87       	std	Z+8, r28	; 0x08
 9f4:	83 81       	ldd	r24, Z+3	; 0x03
 9f6:	82 60       	ori	r24, 0x02	; 2
 9f8:	83 83       	std	Z+3, r24	; 0x03
 9fa:	80 91 ba 02 	lds	r24, 0x02BA
 9fe:	90 91 bb 02 	lds	r25, 0x02BB
 a02:	89 2b       	or	r24, r25
 a04:	71 f4       	brne	.+28     	; 0xa22 <fdevopen+0x8a>
 a06:	f0 93 bb 02 	sts	0x02BB, r31
 a0a:	e0 93 ba 02 	sts	0x02BA, r30
 a0e:	80 91 bc 02 	lds	r24, 0x02BC
 a12:	90 91 bd 02 	lds	r25, 0x02BD
 a16:	89 2b       	or	r24, r25
 a18:	21 f4       	brne	.+8      	; 0xa22 <fdevopen+0x8a>
 a1a:	f0 93 bd 02 	sts	0x02BD, r31
 a1e:	e0 93 bc 02 	sts	0x02BC, r30
 a22:	cf 01       	movw	r24, r30
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <puts>:
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	e0 91 ba 02 	lds	r30, 0x02BA
 a3a:	f0 91 bb 02 	lds	r31, 0x02BB
 a3e:	23 81       	ldd	r18, Z+3	; 0x03
 a40:	21 ff       	sbrs	r18, 1
 a42:	1b c0       	rjmp	.+54     	; 0xa7a <puts+0x4c>
 a44:	ec 01       	movw	r28, r24
 a46:	00 e0       	ldi	r16, 0x00	; 0
 a48:	10 e0       	ldi	r17, 0x00	; 0
 a4a:	89 91       	ld	r24, Y+
 a4c:	60 91 ba 02 	lds	r22, 0x02BA
 a50:	70 91 bb 02 	lds	r23, 0x02BB
 a54:	db 01       	movw	r26, r22
 a56:	18 96       	adiw	r26, 0x08	; 8
 a58:	ed 91       	ld	r30, X+
 a5a:	fc 91       	ld	r31, X
 a5c:	19 97       	sbiw	r26, 0x09	; 9
 a5e:	88 23       	and	r24, r24
 a60:	31 f0       	breq	.+12     	; 0xa6e <puts+0x40>
 a62:	09 95       	icall
 a64:	89 2b       	or	r24, r25
 a66:	89 f3       	breq	.-30     	; 0xa4a <puts+0x1c>
 a68:	0f ef       	ldi	r16, 0xFF	; 255
 a6a:	1f ef       	ldi	r17, 0xFF	; 255
 a6c:	ee cf       	rjmp	.-36     	; 0xa4a <puts+0x1c>
 a6e:	8a e0       	ldi	r24, 0x0A	; 10
 a70:	09 95       	icall
 a72:	89 2b       	or	r24, r25
 a74:	11 f4       	brne	.+4      	; 0xa7a <puts+0x4c>
 a76:	c8 01       	movw	r24, r16
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <puts+0x50>
 a7a:	8f ef       	ldi	r24, 0xFF	; 255
 a7c:	9f ef       	ldi	r25, 0xFF	; 255
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	1f 91       	pop	r17
 a84:	0f 91       	pop	r16
 a86:	08 95       	ret

00000a88 <calloc>:
 a88:	0f 93       	push	r16
 a8a:	1f 93       	push	r17
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
 a90:	86 9f       	mul	r24, r22
 a92:	80 01       	movw	r16, r0
 a94:	87 9f       	mul	r24, r23
 a96:	10 0d       	add	r17, r0
 a98:	96 9f       	mul	r25, r22
 a9a:	10 0d       	add	r17, r0
 a9c:	11 24       	eor	r1, r1
 a9e:	c8 01       	movw	r24, r16
 aa0:	0e 94 9c 03 	call	0x738	; 0x738 <malloc>
 aa4:	ec 01       	movw	r28, r24
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	29 f0       	breq	.+10     	; 0xab4 <calloc+0x2c>
 aaa:	a8 01       	movw	r20, r16
 aac:	60 e0       	ldi	r22, 0x00	; 0
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	0e 94 60 05 	call	0xac0	; 0xac0 <memset>
 ab4:	ce 01       	movw	r24, r28
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	08 95       	ret

00000ac0 <memset>:
 ac0:	dc 01       	movw	r26, r24
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <memset+0x6>
 ac4:	6d 93       	st	X+, r22
 ac6:	41 50       	subi	r20, 0x01	; 1
 ac8:	50 40       	sbci	r21, 0x00	; 0
 aca:	e0 f7       	brcc	.-8      	; 0xac4 <memset+0x4>
 acc:	08 95       	ret

00000ace <_exit>:
 ace:	f8 94       	cli

00000ad0 <__stop_program>:
 ad0:	ff cf       	rjmp	.-2      	; 0xad0 <__stop_program>
