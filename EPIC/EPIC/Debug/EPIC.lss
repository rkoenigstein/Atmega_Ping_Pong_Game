
EPIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000006c4  00000758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800162  00800162  000007ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000199b  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0c  00000000  00000000  00002345  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095a  00000000  00000000  00002d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e8  00000000  00000000  000036ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d2f  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00004cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ec       	ldi	r30, 0xC4	; 196
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 36       	cpi	r26, 0x62	; 98
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e6       	ldi	r26, 0x62	; 98
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 36       	cpi	r26, 0x6E	; 110
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  a6:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
volatile int flag = 0;

void adc_init(void)
{
	//enabling adc interrupts
	GICR |= (1<<INT2);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
  b4:	08 95       	ret

000000b6 <__vector_3>:
	flag = 0;
	return value;
}

ISR(INT2_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
	flag = 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 63 01 	sts	0x0163, r25
  cc:	80 93 62 01 	sts	0x0162, r24
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main_init>:
#include "adc.h"
#include "oled_driver.h"

void main_init (void)
{
	uart_init(BAUDRATE);
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 89 01 	call	0x312	; 0x312 <uart_init>
	sram_init();
  e6:	0e 94 76 01 	call	0x2ec	; 0x2ec <sram_init>
	adc_init();
  ea:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	JOY_init();
  ee:	0e 94 84 00 	call	0x108	; 0x108 <JOY_init>
	sei();	
  f2:	78 94       	sei
	oled_init();
  f4:	0e 94 25 01 	call	0x24a	; 0x24a <oled_init>
  f8:	08 95       	ret

000000fa <main>:
}

int main(void)
{
	
	main_init();
  fa:	0e 94 6f 00 	call	0xde	; 0xde <main_init>
	oled_test();
  fe:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <oled_test>
	//TEST_GAL();
	//TEST_ADC();
	//TEST_SRAM_test();
   //TEST_write_adress();
   return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret

00000108 <JOY_init>:

//
void JOY_init()
{
	//set PIN 0 and 1 of port B as inputs
	DDRB &= (0<<0)&(0<<1);	
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	17 ba       	out	0x17, r1	; 23
 10c:	08 95       	ret

0000010e <clear_buffer>:
}

void clear_buffer(void)
{
	int result = 0;
	for(int i = 0; i < M; i++)
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	10 c0       	rjmp	.+32     	; 0x134 <clear_buffer+0x26>
		for(int j = 0; j < N; j++)
		{
			result = i << 7;
			*(oled_buffer+result+j) = 0x00;
 114:	e0 91 06 01 	lds	r30, 0x0106
 118:	f0 91 07 01 	lds	r31, 0x0107
 11c:	e8 0f       	add	r30, r24
 11e:	f9 1f       	adc	r31, r25
 120:	10 82       	st	Z, r1
 122:	01 96       	adiw	r24, 0x01	; 1

void clear_buffer(void)
{
	int result = 0;
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
 124:	82 17       	cp	r24, r18
 126:	93 07       	cpc	r25, r19
 128:	a9 f7       	brne	.-22     	; 0x114 <clear_buffer+0x6>
}

void clear_buffer(void)
{
	int result = 0;
	for(int i = 0; i < M; i++)
 12a:	4f 5f       	subi	r20, 0xFF	; 255
 12c:	5f 4f       	sbci	r21, 0xFF	; 255
 12e:	48 30       	cpi	r20, 0x08	; 8
 130:	51 05       	cpc	r21, r1
 132:	51 f0       	breq	.+20     	; 0x148 <clear_buffer+0x3a>
		for(int j = 0; j < N; j++)
		{
			result = i << 7;
 134:	ca 01       	movw	r24, r20
 136:	96 95       	lsr	r25
 138:	98 2f       	mov	r25, r24
 13a:	88 27       	eor	r24, r24
 13c:	97 95       	ror	r25
 13e:	87 95       	ror	r24
 140:	9c 01       	movw	r18, r24
 142:	20 58       	subi	r18, 0x80	; 128
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	e6 cf       	rjmp	.-52     	; 0x114 <clear_buffer+0x6>
 148:	08 95       	ret

0000014a <ones_buffer>:
}

void ones_buffer(void)
{
	int result=0;
	for(int i = 0; i < M; i++)
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	50 e0       	ldi	r21, 0x00	; 0
		for(int j = 0; j < N; j++)
		{
			result = i<<7;	
			*(oled_buffer+result+j)=0xFF;
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	10 c0       	rjmp	.+32     	; 0x172 <ones_buffer+0x28>
 152:	e0 91 06 01 	lds	r30, 0x0106
 156:	f0 91 07 01 	lds	r31, 0x0107
 15a:	e8 0f       	add	r30, r24
 15c:	f9 1f       	adc	r31, r25
 15e:	60 83       	st	Z, r22
 160:	01 96       	adiw	r24, 0x01	; 1

void ones_buffer(void)
{
	int result=0;
	for(int i = 0; i < M; i++)
		for(int j = 0; j < N; j++)
 162:	82 17       	cp	r24, r18
 164:	93 07       	cpc	r25, r19
 166:	a9 f7       	brne	.-22     	; 0x152 <ones_buffer+0x8>
}

void ones_buffer(void)
{
	int result=0;
	for(int i = 0; i < M; i++)
 168:	4f 5f       	subi	r20, 0xFF	; 255
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	48 30       	cpi	r20, 0x08	; 8
 16e:	51 05       	cpc	r21, r1
 170:	51 f0       	breq	.+20     	; 0x186 <ones_buffer+0x3c>
		for(int j = 0; j < N; j++)
		{
			result = i<<7;	
 172:	ca 01       	movw	r24, r20
 174:	96 95       	lsr	r25
 176:	98 2f       	mov	r25, r24
 178:	88 27       	eor	r24, r24
 17a:	97 95       	ror	r25
 17c:	87 95       	ror	r24
 17e:	9c 01       	movw	r18, r24
 180:	20 58       	subi	r18, 0x80	; 128
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	e6 cf       	rjmp	.-52     	; 0x152 <ones_buffer+0x8>
 186:	08 95       	ret

00000188 <print_buffer>:
		}
		
}

void print_buffer(void)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
	int result = 0;
	for(int i = 0; i < M; i++)
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
}

void oled_print(char letter)
{
	volatile uint8_t* oled = 0x1200;
	*oled = letter;
 190:	a0 e0       	ldi	r26, 0x00	; 0
 192:	b2 e1       	ldi	r27, 0x12	; 18
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 194:	c1 e0       	ldi	r28, 0x01	; 1
 196:	d0 e1       	ldi	r29, 0x10	; 16
 198:	13 c0       	rjmp	.+38     	; 0x1c0 <print_buffer+0x38>
	for(int i = 0; i < M; i++)
	{
		for(int j = 0; j < N; j++)
		{
			result = i<<7;
			oled_print(*(oled_buffer+result+j));
 19a:	e0 91 06 01 	lds	r30, 0x0106
 19e:	f0 91 07 01 	lds	r31, 0x0107
 1a2:	e8 0f       	add	r30, r24
 1a4:	f9 1f       	adc	r31, r25
 1a6:	60 81       	ld	r22, Z
}

void oled_print(char letter)
{
	volatile uint8_t* oled = 0x1200;
	*oled = letter;
 1a8:	6c 93       	st	X, r22
 1aa:	01 96       	adiw	r24, 0x01	; 1
void print_buffer(void)
{
	int result = 0;
	for(int i = 0; i < M; i++)
	{
		for(int j = 0; j < N; j++)
 1ac:	82 17       	cp	r24, r18
 1ae:	93 07       	cpc	r25, r19
 1b0:	a1 f7       	brne	.-24     	; 0x19a <print_buffer+0x12>
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 1b2:	48 83       	st	Y, r20
 1b4:	18 82       	st	Y, r1
}

void print_buffer(void)
{
	int result = 0;
	for(int i = 0; i < M; i++)
 1b6:	4f 5f       	subi	r20, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	48 30       	cpi	r20, 0x08	; 8
 1bc:	51 05       	cpc	r21, r1
 1be:	51 f0       	breq	.+20     	; 0x1d4 <print_buffer+0x4c>
	{
		for(int j = 0; j < N; j++)
		{
			result = i<<7;
 1c0:	ca 01       	movw	r24, r20
 1c2:	96 95       	lsr	r25
 1c4:	98 2f       	mov	r25, r24
 1c6:	88 27       	eor	r24, r24
 1c8:	97 95       	ror	r25
 1ca:	87 95       	ror	r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	20 58       	subi	r18, 0x80	; 128
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	e3 cf       	rjmp	.-58     	; 0x19a <print_buffer+0x12>
			//printf("%d", *(oled_buffer+result+j));
		}
		oled_set_page(i);
		//printf("\n");
	}
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <oled_goto_line>:
	
}

void oled_goto_line(int line)
{
	if(line > 0 && line < 65)
 1da:	9c 01       	movw	r18, r24
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
 1e0:	20 34       	cpi	r18, 0x40	; 64
 1e2:	31 05       	cpc	r19, r1
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <oled_goto_line+0x14>
	{
		oled_write_command(0x40 + line - 1);
 1e6:	81 5c       	subi	r24, 0xC1	; 193
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 1e8:	80 93 01 10 	sts	0x1001, r24
 1ec:	08 95       	ret
	{
		oled_write_command(0x40 + line - 1);
	}
	else
	{
		printf("Line parameter must be in between 1 and 64\n");
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <puts>
 1f6:	08 95       	ret

000001f8 <oled_goto_column>:
	*_command = command;
}

void oled_goto_column(int column, int length)
{
	if(column > 0 && column < 129)
 1f8:	9c 01       	movw	r18, r24
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	31 09       	sbc	r19, r1
 1fe:	20 38       	cpi	r18, 0x80	; 128
 200:	31 05       	cpc	r19, r1
 202:	58 f4       	brcc	.+22     	; 0x21a <oled_goto_column+0x22>
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 204:	e1 e0       	ldi	r30, 0x01	; 1
 206:	f0 e1       	ldi	r31, 0x10	; 16
 208:	91 e2       	ldi	r25, 0x21	; 33
 20a:	90 83       	st	Z, r25
void oled_goto_column(int column, int length)
{
	if(column > 0 && column < 129)
	{
		oled_write_command(0x21);
		oled_write_command(column-1);
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	98 0f       	add	r25, r24
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 210:	90 83       	st	Z, r25
{
	if(column > 0 && column < 129)
	{
		oled_write_command(0x21);
		oled_write_command(column-1);
		oled_write_command(column+length-1);
 212:	61 50       	subi	r22, 0x01	; 1
 214:	86 0f       	add	r24, r22
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 216:	80 83       	st	Z, r24
 218:	08 95       	ret
		oled_write_command(column-1);
		oled_write_command(column+length-1);
	}
	else
	{
		printf("Column parameter must be in between 1 and 128\n");
 21a:	83 e3       	ldi	r24, 0x33	; 51
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <puts>
 222:	08 95       	ret

00000224 <oled_clear>:
	}
}

void oled_clear()
{
	oled_goto_line(1);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 ed 00 	call	0x1da	; 0x1da <oled_goto_line>
	oled_goto_column(1, 128);
 22c:	60 e8       	ldi	r22, 0x80	; 128
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <oled_goto_column>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e2       	ldi	r25, 0x20	; 32
}

void oled_print(char letter)
{
	volatile uint8_t* oled = 0x1200;
	*oled = letter;
 23c:	e0 e0       	ldi	r30, 0x00	; 0
 23e:	f2 e1       	ldi	r31, 0x12	; 18
 240:	10 82       	st	Z, r1
 242:	01 97       	sbiw	r24, 0x01	; 1

void oled_clear()
{
	oled_goto_line(1);
	oled_goto_column(1, 128);
	for(int i = 1; i < 128*64+1; i++)
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <oled_clear+0x1c>
	{
		oled_print(0);
	}
}
 248:	08 95       	ret

0000024a <oled_init>:
}

void oled_write_command(uint8_t command)
{
	volatile uint8_t* _command = 0x1001;
	*_command = command;
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	f0 e1       	ldi	r31, 0x10	; 16
 24e:	8e ea       	ldi	r24, 0xAE	; 174
 250:	80 83       	st	Z, r24
 252:	81 ea       	ldi	r24, 0xA1	; 161
 254:	80 83       	st	Z, r24
 256:	8a ed       	ldi	r24, 0xDA	; 218
 258:	80 83       	st	Z, r24
 25a:	82 e1       	ldi	r24, 0x12	; 18
 25c:	80 83       	st	Z, r24
 25e:	88 ec       	ldi	r24, 0xC8	; 200
 260:	80 83       	st	Z, r24
 262:	88 ea       	ldi	r24, 0xA8	; 168
 264:	80 83       	st	Z, r24
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	80 83       	st	Z, r24
 26a:	85 ed       	ldi	r24, 0xD5	; 213
 26c:	80 83       	st	Z, r24
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	80 83       	st	Z, r24
 272:	81 e8       	ldi	r24, 0x81	; 129
 274:	80 83       	st	Z, r24
 276:	80 e5       	ldi	r24, 0x50	; 80
 278:	80 83       	st	Z, r24
 27a:	89 ed       	ldi	r24, 0xD9	; 217
 27c:	80 83       	st	Z, r24
 27e:	81 e2       	ldi	r24, 0x21	; 33
 280:	80 83       	st	Z, r24
 282:	80 e2       	ldi	r24, 0x20	; 32
 284:	80 83       	st	Z, r24
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
 28a:	8b ed       	ldi	r24, 0xDB	; 219
 28c:	80 83       	st	Z, r24
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	80 83       	st	Z, r24
 292:	8d ea       	ldi	r24, 0xAD	; 173
 294:	80 83       	st	Z, r24
 296:	10 82       	st	Z, r1
 298:	84 ea       	ldi	r24, 0xA4	; 164
 29a:	80 83       	st	Z, r24
 29c:	86 ea       	ldi	r24, 0xA6	; 166
 29e:	80 83       	st	Z, r24
 2a0:	8f ea       	ldi	r24, 0xAF	; 175
 2a2:	80 83       	st	Z, r24
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	80 83       	st	Z, r24
 2a8:	8f e1       	ldi	r24, 0x1F	; 31
 2aa:	80 83       	st	Z, r24
	
	/*oled_write_command(0xd3);		// set display offset to 0
	oled_write_command(0x00);
	oled_write_command(0x40);		//set display start line to 0
	oled_goto_column(0,128);*/
	oled_clear();
 2ac:	0e 94 12 01 	call	0x224	; 0x224 <oled_clear>
	
	clear_buffer();
 2b0:	0e 94 87 00 	call	0x10e	; 0x10e <clear_buffer>
 2b4:	08 95       	ret

000002b6 <oled_test>:
		if(i==65)i=1;
	}*/
	
	while(1)
	{
		clear_buffer();
 2b6:	0e 94 87 00 	call	0x10e	; 0x10e <clear_buffer>
		print_buffer();
 2ba:	0e 94 c4 00 	call	0x188	; 0x188 <print_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	9d e1       	ldi	r25, 0x1D	; 29
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <oled_test+0xe>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <oled_test+0x18>
 2ce:	00 00       	nop
		_delay_ms(2000);
		ones_buffer();
 2d0:	0e 94 a5 00 	call	0x14a	; 0x14a <ones_buffer>
		print_buffer();
 2d4:	0e 94 c4 00 	call	0x188	; 0x188 <print_buffer>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	9d e1       	ldi	r25, 0x1D	; 29
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <oled_test+0x28>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <oled_test+0x32>
 2e8:	00 00       	nop
 2ea:	e5 cf       	rjmp	.-54     	; 0x2b6 <oled_test>

000002ec <sram_init>:
#include "sram.h"

void sram_init(void)
{
	//enabling external memory
	MCUCR |= (1<<SRE);
 2ec:	85 b7       	in	r24, 0x35	; 53
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	85 bf       	out	0x35, r24	; 53
	
	//realesing  JTAG pins from memory mapping
	SFIOR|=(1<<XMM2);
 2f2:	80 b7       	in	r24, 0x30	; 48
 2f4:	80 62       	ori	r24, 0x20	; 32
 2f6:	80 bf       	out	0x30, r24	; 48
	SFIOR&=(0<<XMM1);
 2f8:	80 b7       	in	r24, 0x30	; 48
 2fa:	10 be       	out	0x30, r1	; 48
	SFIOR&=(0<<XMM0);
 2fc:	80 b7       	in	r24, 0x30	; 48
 2fe:	10 be       	out	0x30, r1	; 48
 300:	08 95       	ret

00000302 <uart_putc>:
//send data to RS232
void uart_putc(unsigned char c)
{
	
	//wait while register is free
	while (!(UCSR0A & (1<<UDRE0)));
 302:	5d 9b       	sbis	0x0b, 5	; 11
 304:	fe cf       	rjmp	.-4      	; 0x302 <uart_putc>
	
	//put character to USART data register
	UDR0 = c;
 306:	8c b9       	out	0x0c, r24	; 12
 308:	08 95       	ret

0000030a <uart_getc>:

//receive data from RS232
unsigned char uart_getc(void)
{
	//wait while register is free
	while(!(UCSR0A & (1<<RXC0)));
 30a:	5f 9b       	sbis	0x0b, 7	; 11
 30c:	fe cf       	rjmp	.-4      	; 0x30a <uart_getc>
	
	//get value from USART data register
	return UDR0;
 30e:	8c b1       	in	r24, 0x0c	; 12
}
 310:	08 95       	ret

00000312 <uart_init>:

//initialize uart to 9600 8N1 (9600 Baud/Bit rate, 8 Bits data, no parity, 1 stop bit
void uart_init(unsigned int ubrr)
{
	//set baudrate to 9600
	UBRR0H = (unsigned char) (ubrr>>8);
 312:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 314:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 316:	88 e1       	ldi	r24, 0x18	; 24
 318:	8a b9       	out	0x0a, r24	; 10
	
	//set UCSRC as accessed register, set number of character size to 8
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
 31a:	86 e8       	ldi	r24, 0x86	; 134
 31c:	80 bd       	out	0x20, r24	; 32
	//set number of stop bits to 1
	UCSR0C &= (0<<USBS0);
 31e:	80 b5       	in	r24, 0x20	; 32
 320:	10 bc       	out	0x20, r1	; 32
	//set connection to asynchronous
	UCSR0C &= (0<<UMSEL0); 
 322:	80 b5       	in	r24, 0x20	; 32
 324:	10 bc       	out	0x20, r1	; 32
	//disable parity mode
	UCSR0C &= (0<<UPM00);
 326:	80 b5       	in	r24, 0x20	; 32
 328:	10 bc       	out	0x20, r1	; 32
	UCSR0C &= (0<<UPM10);
 32a:	80 b5       	in	r24, 0x20	; 32
 32c:	10 bc       	out	0x20, r1	; 32
	fdevopen(uart_putc, uart_getc);
 32e:	65 e8       	ldi	r22, 0x85	; 133
 330:	71 e0       	ldi	r23, 0x01	; 1
 332:	81 e8       	ldi	r24, 0x81	; 129
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 9e 01 	call	0x33c	; 0x33c <fdevopen>
 33a:	08 95       	ret

0000033c <fdevopen>:
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
 346:	8b 01       	movw	r16, r22
 348:	00 97       	sbiw	r24, 0x00	; 0
 34a:	31 f4       	brne	.+12     	; 0x358 <fdevopen+0x1c>
 34c:	61 15       	cp	r22, r1
 34e:	71 05       	cpc	r23, r1
 350:	19 f4       	brne	.+6      	; 0x358 <fdevopen+0x1c>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	38 c0       	rjmp	.+112    	; 0x3c8 <fdevopen+0x8c>
 358:	6e e0       	ldi	r22, 0x0E	; 14
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 16 02 	call	0x42c	; 0x42c <calloc>
 364:	fc 01       	movw	r30, r24
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	a1 f3       	breq	.-24     	; 0x352 <fdevopen+0x16>
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	83 83       	std	Z+3, r24	; 0x03
 36e:	01 15       	cp	r16, r1
 370:	11 05       	cpc	r17, r1
 372:	71 f0       	breq	.+28     	; 0x390 <fdevopen+0x54>
 374:	13 87       	std	Z+11, r17	; 0x0b
 376:	02 87       	std	Z+10, r16	; 0x0a
 378:	81 e8       	ldi	r24, 0x81	; 129
 37a:	83 83       	std	Z+3, r24	; 0x03
 37c:	80 91 64 01 	lds	r24, 0x0164
 380:	90 91 65 01 	lds	r25, 0x0165
 384:	89 2b       	or	r24, r25
 386:	21 f4       	brne	.+8      	; 0x390 <fdevopen+0x54>
 388:	f0 93 65 01 	sts	0x0165, r31
 38c:	e0 93 64 01 	sts	0x0164, r30
 390:	20 97       	sbiw	r28, 0x00	; 0
 392:	c9 f0       	breq	.+50     	; 0x3c6 <fdevopen+0x8a>
 394:	d1 87       	std	Z+9, r29	; 0x09
 396:	c0 87       	std	Z+8, r28	; 0x08
 398:	83 81       	ldd	r24, Z+3	; 0x03
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	83 83       	std	Z+3, r24	; 0x03
 39e:	80 91 66 01 	lds	r24, 0x0166
 3a2:	90 91 67 01 	lds	r25, 0x0167
 3a6:	89 2b       	or	r24, r25
 3a8:	71 f4       	brne	.+28     	; 0x3c6 <fdevopen+0x8a>
 3aa:	f0 93 67 01 	sts	0x0167, r31
 3ae:	e0 93 66 01 	sts	0x0166, r30
 3b2:	80 91 68 01 	lds	r24, 0x0168
 3b6:	90 91 69 01 	lds	r25, 0x0169
 3ba:	89 2b       	or	r24, r25
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <fdevopen+0x8a>
 3be:	f0 93 69 01 	sts	0x0169, r31
 3c2:	e0 93 68 01 	sts	0x0168, r30
 3c6:	cf 01       	movw	r24, r30
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <puts>:
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	e0 91 66 01 	lds	r30, 0x0166
 3de:	f0 91 67 01 	lds	r31, 0x0167
 3e2:	23 81       	ldd	r18, Z+3	; 0x03
 3e4:	21 ff       	sbrs	r18, 1
 3e6:	1b c0       	rjmp	.+54     	; 0x41e <puts+0x4c>
 3e8:	ec 01       	movw	r28, r24
 3ea:	00 e0       	ldi	r16, 0x00	; 0
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	89 91       	ld	r24, Y+
 3f0:	60 91 66 01 	lds	r22, 0x0166
 3f4:	70 91 67 01 	lds	r23, 0x0167
 3f8:	db 01       	movw	r26, r22
 3fa:	18 96       	adiw	r26, 0x08	; 8
 3fc:	ed 91       	ld	r30, X+
 3fe:	fc 91       	ld	r31, X
 400:	19 97       	sbiw	r26, 0x09	; 9
 402:	88 23       	and	r24, r24
 404:	31 f0       	breq	.+12     	; 0x412 <puts+0x40>
 406:	09 95       	icall
 408:	89 2b       	or	r24, r25
 40a:	89 f3       	breq	.-30     	; 0x3ee <puts+0x1c>
 40c:	0f ef       	ldi	r16, 0xFF	; 255
 40e:	1f ef       	ldi	r17, 0xFF	; 255
 410:	ee cf       	rjmp	.-36     	; 0x3ee <puts+0x1c>
 412:	8a e0       	ldi	r24, 0x0A	; 10
 414:	09 95       	icall
 416:	89 2b       	or	r24, r25
 418:	11 f4       	brne	.+4      	; 0x41e <puts+0x4c>
 41a:	c8 01       	movw	r24, r16
 41c:	02 c0       	rjmp	.+4      	; 0x422 <puts+0x50>
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	9f ef       	ldi	r25, 0xFF	; 255
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <calloc>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	86 9f       	mul	r24, r22
 436:	80 01       	movw	r16, r0
 438:	87 9f       	mul	r24, r23
 43a:	10 0d       	add	r17, r0
 43c:	96 9f       	mul	r25, r22
 43e:	10 0d       	add	r17, r0
 440:	11 24       	eor	r1, r1
 442:	c8 01       	movw	r24, r16
 444:	0e 94 32 02 	call	0x464	; 0x464 <malloc>
 448:	ec 01       	movw	r28, r24
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	29 f0       	breq	.+10     	; 0x458 <calloc+0x2c>
 44e:	a8 01       	movw	r20, r16
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	0e 94 59 03 	call	0x6b2	; 0x6b2 <memset>
 458:	ce 01       	movw	r24, r28
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <malloc>:
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	91 05       	cpc	r25, r1
 46c:	10 f4       	brcc	.+4      	; 0x472 <malloc+0xe>
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	e0 91 6c 01 	lds	r30, 0x016C
 476:	f0 91 6d 01 	lds	r31, 0x016D
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	a0 e0       	ldi	r26, 0x00	; 0
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	30 97       	sbiw	r30, 0x00	; 0
 484:	39 f1       	breq	.+78     	; 0x4d4 <malloc+0x70>
 486:	40 81       	ld	r20, Z
 488:	51 81       	ldd	r21, Z+1	; 0x01
 48a:	48 17       	cp	r20, r24
 48c:	59 07       	cpc	r21, r25
 48e:	b8 f0       	brcs	.+46     	; 0x4be <malloc+0x5a>
 490:	48 17       	cp	r20, r24
 492:	59 07       	cpc	r21, r25
 494:	71 f4       	brne	.+28     	; 0x4b2 <malloc+0x4e>
 496:	82 81       	ldd	r24, Z+2	; 0x02
 498:	93 81       	ldd	r25, Z+3	; 0x03
 49a:	10 97       	sbiw	r26, 0x00	; 0
 49c:	29 f0       	breq	.+10     	; 0x4a8 <malloc+0x44>
 49e:	13 96       	adiw	r26, 0x03	; 3
 4a0:	9c 93       	st	X, r25
 4a2:	8e 93       	st	-X, r24
 4a4:	12 97       	sbiw	r26, 0x02	; 2
 4a6:	2c c0       	rjmp	.+88     	; 0x500 <__stack+0x1>
 4a8:	90 93 6d 01 	sts	0x016D, r25
 4ac:	80 93 6c 01 	sts	0x016C, r24
 4b0:	27 c0       	rjmp	.+78     	; 0x500 <__stack+0x1>
 4b2:	21 15       	cp	r18, r1
 4b4:	31 05       	cpc	r19, r1
 4b6:	31 f0       	breq	.+12     	; 0x4c4 <malloc+0x60>
 4b8:	42 17       	cp	r20, r18
 4ba:	53 07       	cpc	r21, r19
 4bc:	18 f0       	brcs	.+6      	; 0x4c4 <malloc+0x60>
 4be:	a9 01       	movw	r20, r18
 4c0:	db 01       	movw	r26, r22
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <malloc+0x62>
 4c4:	ef 01       	movw	r28, r30
 4c6:	9a 01       	movw	r18, r20
 4c8:	bd 01       	movw	r22, r26
 4ca:	df 01       	movw	r26, r30
 4cc:	02 80       	ldd	r0, Z+2	; 0x02
 4ce:	f3 81       	ldd	r31, Z+3	; 0x03
 4d0:	e0 2d       	mov	r30, r0
 4d2:	d7 cf       	rjmp	.-82     	; 0x482 <malloc+0x1e>
 4d4:	21 15       	cp	r18, r1
 4d6:	31 05       	cpc	r19, r1
 4d8:	f9 f0       	breq	.+62     	; 0x518 <__stack+0x19>
 4da:	28 1b       	sub	r18, r24
 4dc:	39 0b       	sbc	r19, r25
 4de:	24 30       	cpi	r18, 0x04	; 4
 4e0:	31 05       	cpc	r19, r1
 4e2:	80 f4       	brcc	.+32     	; 0x504 <__stack+0x5>
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	9b 81       	ldd	r25, Y+3	; 0x03
 4e8:	61 15       	cp	r22, r1
 4ea:	71 05       	cpc	r23, r1
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <malloc+0x92>
 4ee:	fb 01       	movw	r30, r22
 4f0:	93 83       	std	Z+3, r25	; 0x03
 4f2:	82 83       	std	Z+2, r24	; 0x02
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <malloc+0x9a>
 4f6:	90 93 6d 01 	sts	0x016D, r25
 4fa:	80 93 6c 01 	sts	0x016C, r24
 4fe:	fe 01       	movw	r30, r28
 500:	32 96       	adiw	r30, 0x02	; 2
 502:	44 c0       	rjmp	.+136    	; 0x58c <__stack+0x8d>
 504:	fe 01       	movw	r30, r28
 506:	e2 0f       	add	r30, r18
 508:	f3 1f       	adc	r31, r19
 50a:	81 93       	st	Z+, r24
 50c:	91 93       	st	Z+, r25
 50e:	22 50       	subi	r18, 0x02	; 2
 510:	31 09       	sbc	r19, r1
 512:	39 83       	std	Y+1, r19	; 0x01
 514:	28 83       	st	Y, r18
 516:	3a c0       	rjmp	.+116    	; 0x58c <__stack+0x8d>
 518:	20 91 6a 01 	lds	r18, 0x016A
 51c:	30 91 6b 01 	lds	r19, 0x016B
 520:	23 2b       	or	r18, r19
 522:	41 f4       	brne	.+16     	; 0x534 <__stack+0x35>
 524:	20 91 02 01 	lds	r18, 0x0102
 528:	30 91 03 01 	lds	r19, 0x0103
 52c:	30 93 6b 01 	sts	0x016B, r19
 530:	20 93 6a 01 	sts	0x016A, r18
 534:	20 91 00 01 	lds	r18, 0x0100
 538:	30 91 01 01 	lds	r19, 0x0101
 53c:	21 15       	cp	r18, r1
 53e:	31 05       	cpc	r19, r1
 540:	41 f4       	brne	.+16     	; 0x552 <__stack+0x53>
 542:	2d b7       	in	r18, 0x3d	; 61
 544:	3e b7       	in	r19, 0x3e	; 62
 546:	40 91 04 01 	lds	r20, 0x0104
 54a:	50 91 05 01 	lds	r21, 0x0105
 54e:	24 1b       	sub	r18, r20
 550:	35 0b       	sbc	r19, r21
 552:	e0 91 6a 01 	lds	r30, 0x016A
 556:	f0 91 6b 01 	lds	r31, 0x016B
 55a:	e2 17       	cp	r30, r18
 55c:	f3 07       	cpc	r31, r19
 55e:	a0 f4       	brcc	.+40     	; 0x588 <__stack+0x89>
 560:	2e 1b       	sub	r18, r30
 562:	3f 0b       	sbc	r19, r31
 564:	28 17       	cp	r18, r24
 566:	39 07       	cpc	r19, r25
 568:	78 f0       	brcs	.+30     	; 0x588 <__stack+0x89>
 56a:	ac 01       	movw	r20, r24
 56c:	4e 5f       	subi	r20, 0xFE	; 254
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	24 17       	cp	r18, r20
 572:	35 07       	cpc	r19, r21
 574:	48 f0       	brcs	.+18     	; 0x588 <__stack+0x89>
 576:	4e 0f       	add	r20, r30
 578:	5f 1f       	adc	r21, r31
 57a:	50 93 6b 01 	sts	0x016B, r21
 57e:	40 93 6a 01 	sts	0x016A, r20
 582:	81 93       	st	Z+, r24
 584:	91 93       	st	Z+, r25
 586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x8d>
 588:	e0 e0       	ldi	r30, 0x00	; 0
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	cf 01       	movw	r24, r30
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <free>:
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	09 f4       	brne	.+2      	; 0x59e <free+0xa>
 59c:	87 c0       	rjmp	.+270    	; 0x6ac <free+0x118>
 59e:	fc 01       	movw	r30, r24
 5a0:	32 97       	sbiw	r30, 0x02	; 2
 5a2:	13 82       	std	Z+3, r1	; 0x03
 5a4:	12 82       	std	Z+2, r1	; 0x02
 5a6:	c0 91 6c 01 	lds	r28, 0x016C
 5aa:	d0 91 6d 01 	lds	r29, 0x016D
 5ae:	20 97       	sbiw	r28, 0x00	; 0
 5b0:	81 f4       	brne	.+32     	; 0x5d2 <free+0x3e>
 5b2:	20 81       	ld	r18, Z
 5b4:	31 81       	ldd	r19, Z+1	; 0x01
 5b6:	28 0f       	add	r18, r24
 5b8:	39 1f       	adc	r19, r25
 5ba:	80 91 6a 01 	lds	r24, 0x016A
 5be:	90 91 6b 01 	lds	r25, 0x016B
 5c2:	82 17       	cp	r24, r18
 5c4:	93 07       	cpc	r25, r19
 5c6:	79 f5       	brne	.+94     	; 0x626 <free+0x92>
 5c8:	f0 93 6b 01 	sts	0x016B, r31
 5cc:	e0 93 6a 01 	sts	0x016A, r30
 5d0:	6d c0       	rjmp	.+218    	; 0x6ac <free+0x118>
 5d2:	de 01       	movw	r26, r28
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	ae 17       	cp	r26, r30
 5da:	bf 07       	cpc	r27, r31
 5dc:	50 f4       	brcc	.+20     	; 0x5f2 <free+0x5e>
 5de:	12 96       	adiw	r26, 0x02	; 2
 5e0:	4d 91       	ld	r20, X+
 5e2:	5c 91       	ld	r21, X
 5e4:	13 97       	sbiw	r26, 0x03	; 3
 5e6:	9d 01       	movw	r18, r26
 5e8:	41 15       	cp	r20, r1
 5ea:	51 05       	cpc	r21, r1
 5ec:	09 f1       	breq	.+66     	; 0x630 <free+0x9c>
 5ee:	da 01       	movw	r26, r20
 5f0:	f3 cf       	rjmp	.-26     	; 0x5d8 <free+0x44>
 5f2:	b3 83       	std	Z+3, r27	; 0x03
 5f4:	a2 83       	std	Z+2, r26	; 0x02
 5f6:	40 81       	ld	r20, Z
 5f8:	51 81       	ldd	r21, Z+1	; 0x01
 5fa:	84 0f       	add	r24, r20
 5fc:	95 1f       	adc	r25, r21
 5fe:	8a 17       	cp	r24, r26
 600:	9b 07       	cpc	r25, r27
 602:	71 f4       	brne	.+28     	; 0x620 <free+0x8c>
 604:	8d 91       	ld	r24, X+
 606:	9c 91       	ld	r25, X
 608:	11 97       	sbiw	r26, 0x01	; 1
 60a:	84 0f       	add	r24, r20
 60c:	95 1f       	adc	r25, r21
 60e:	02 96       	adiw	r24, 0x02	; 2
 610:	91 83       	std	Z+1, r25	; 0x01
 612:	80 83       	st	Z, r24
 614:	12 96       	adiw	r26, 0x02	; 2
 616:	8d 91       	ld	r24, X+
 618:	9c 91       	ld	r25, X
 61a:	13 97       	sbiw	r26, 0x03	; 3
 61c:	93 83       	std	Z+3, r25	; 0x03
 61e:	82 83       	std	Z+2, r24	; 0x02
 620:	21 15       	cp	r18, r1
 622:	31 05       	cpc	r19, r1
 624:	29 f4       	brne	.+10     	; 0x630 <free+0x9c>
 626:	f0 93 6d 01 	sts	0x016D, r31
 62a:	e0 93 6c 01 	sts	0x016C, r30
 62e:	3e c0       	rjmp	.+124    	; 0x6ac <free+0x118>
 630:	d9 01       	movw	r26, r18
 632:	13 96       	adiw	r26, 0x03	; 3
 634:	fc 93       	st	X, r31
 636:	ee 93       	st	-X, r30
 638:	12 97       	sbiw	r26, 0x02	; 2
 63a:	4d 91       	ld	r20, X+
 63c:	5d 91       	ld	r21, X+
 63e:	a4 0f       	add	r26, r20
 640:	b5 1f       	adc	r27, r21
 642:	ea 17       	cp	r30, r26
 644:	fb 07       	cpc	r31, r27
 646:	79 f4       	brne	.+30     	; 0x666 <free+0xd2>
 648:	80 81       	ld	r24, Z
 64a:	91 81       	ldd	r25, Z+1	; 0x01
 64c:	84 0f       	add	r24, r20
 64e:	95 1f       	adc	r25, r21
 650:	02 96       	adiw	r24, 0x02	; 2
 652:	d9 01       	movw	r26, r18
 654:	11 96       	adiw	r26, 0x01	; 1
 656:	9c 93       	st	X, r25
 658:	8e 93       	st	-X, r24
 65a:	82 81       	ldd	r24, Z+2	; 0x02
 65c:	93 81       	ldd	r25, Z+3	; 0x03
 65e:	13 96       	adiw	r26, 0x03	; 3
 660:	9c 93       	st	X, r25
 662:	8e 93       	st	-X, r24
 664:	12 97       	sbiw	r26, 0x02	; 2
 666:	e0 e0       	ldi	r30, 0x00	; 0
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	9b 81       	ldd	r25, Y+3	; 0x03
 66e:	00 97       	sbiw	r24, 0x00	; 0
 670:	19 f0       	breq	.+6      	; 0x678 <free+0xe4>
 672:	fe 01       	movw	r30, r28
 674:	ec 01       	movw	r28, r24
 676:	f9 cf       	rjmp	.-14     	; 0x66a <free+0xd6>
 678:	ce 01       	movw	r24, r28
 67a:	02 96       	adiw	r24, 0x02	; 2
 67c:	28 81       	ld	r18, Y
 67e:	39 81       	ldd	r19, Y+1	; 0x01
 680:	82 0f       	add	r24, r18
 682:	93 1f       	adc	r25, r19
 684:	20 91 6a 01 	lds	r18, 0x016A
 688:	30 91 6b 01 	lds	r19, 0x016B
 68c:	28 17       	cp	r18, r24
 68e:	39 07       	cpc	r19, r25
 690:	69 f4       	brne	.+26     	; 0x6ac <free+0x118>
 692:	30 97       	sbiw	r30, 0x00	; 0
 694:	29 f4       	brne	.+10     	; 0x6a0 <free+0x10c>
 696:	10 92 6d 01 	sts	0x016D, r1
 69a:	10 92 6c 01 	sts	0x016C, r1
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <free+0x110>
 6a0:	13 82       	std	Z+3, r1	; 0x03
 6a2:	12 82       	std	Z+2, r1	; 0x02
 6a4:	d0 93 6b 01 	sts	0x016B, r29
 6a8:	c0 93 6a 01 	sts	0x016A, r28
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <memset>:
 6b2:	dc 01       	movw	r26, r24
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <memset+0x6>
 6b6:	6d 93       	st	X+, r22
 6b8:	41 50       	subi	r20, 0x01	; 1
 6ba:	50 40       	sbci	r21, 0x00	; 0
 6bc:	e0 f7       	brcc	.-8      	; 0x6b6 <memset+0x4>
 6be:	08 95       	ret

000006c0 <_exit>:
 6c0:	f8 94       	cli

000006c2 <__stop_program>:
 6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__stop_program>
